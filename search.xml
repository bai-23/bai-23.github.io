<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Javascript动态显示时间</title>
    <url>/2021/07/21/%5B%20JavaScript%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BA%E6%97%B6%E9%97%B4%E6%95%88%E6%9E%9C%EF%BC%9AsetInterval%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%20%5D/</url>
    <content><![CDATA[<p><strong>知识点</strong></p>
<span id="more"></span>

<blockquote>
<p>Timing事件之 setInterval()方法：<img src="https://img-blog.csdnimg.cn/20200809150657625.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjU0MDEw,size_16,color_FFFFFF,t_70"></p>
</blockquote>
<p><strong>效果</strong><br><img src="https://img-blog.csdnimg.cn/20200809150619988.jpg"></p>
<p><strong>上代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开始&quot;</span> <span class="attr">id</span>=<span class="string">&quot;start&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;结束&quot;</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> start = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;start&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> end = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;end&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> time1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;time&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        start.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">// clearInterval(timer);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                </span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//  年月日</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> year = d.getFullYear();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> month = d.getMonth()+<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> day = d.getDate();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//  时分秒</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> h = d.getHours();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> m = d.getMinutes();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> s = d.getSeconds();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(s&lt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    s = <span class="string">&quot;0&quot;</span>+s;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// time1.innerHTML = s;</span></span></span><br><span class="line"><span class="javascript">                time1.innerHTML = <span class="string">&quot;当前时间：&quot;</span>+year+<span class="string">&quot;-&quot;</span>+month+<span class="string">&quot;-&quot;</span>+day+<span class="string">&quot; &quot;</span>+h+<span class="string">&quot;:&quot;</span>+m+<span class="string">&quot;:&quot;</span>+s;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;,<span class="number">100</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            end.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// alert(&#x27;stop&#x27;);</span></span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫</title>
    <url>/2021/07/21/spider/</url>
    <content><![CDATA[<h2 id="一、爬虫基础简介"><a href="#一、爬虫基础简介" class="headerlink" title="一、爬虫基础简介"></a>一、爬虫基础简介</h2><span id="more"></span>

<h3 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a><strong>前戏</strong></h3><p>​    1.你是否在夜深人静的时候，想看一些会让你更睡不着的图片却苦于没有资源…<br>​    2.你是否在节假日出行高峰的时候，想快速抢购火车票成功…<br>​    3.你是否在网上购物的时候，想快速且精准的定位到口碑质量最好的商品…</p>
<p><strong>什么是爬虫</strong>：</p>
<pre><code>- 通过编写程序，模拟浏览器上网，然后让其去互联网上抓取数据的过程。
</code></pre>
<p><strong>爬虫的价值</strong>：<br>    - 实际应用<br>        - 就业</p>
<p><strong>爬虫究竟是合法还是违法的</strong>？</p>
<ul>
<li>在法律中是不被禁止</li>
<li>具有违法风险</li>
<li>善意爬虫  恶意爬虫</li>
</ul>
<p><strong>爬虫带来的风险可以体现在如下</strong>2方面：<br>    - 爬虫干扰了被访问网站的正常运营<br>        - 爬虫抓取了收到法律保护的特定类型的数据或信息</p>
<p><strong>如何在使用编写爬虫的过程中避免进入局子的厄运呢</strong>？<br>    - 时常的优化自己的程序，避免干扰被访问网站的正常运行<br>        - 在使用，传播爬取到的数据时，审查抓取到的内容，如果发现了涉及到用户隐私<br>        商业机密等敏感内容需要及时停止爬取或传播</p>
<p><strong>爬虫在使用场景中的分类</strong></p>
<ul>
<li><p>通用爬虫：<br>抓取系统重要组成部分。抓取的是一整张页面数据。</p>
</li>
<li><p> 聚焦爬虫：</p>
</li>
</ul>
<p>  是建立在通用爬虫的基础之上。抓取的是页面中特定的局部内容。</p>
<ul>
<li>增量式爬虫：<br>检测网站中数据更新的情况。只会抓取网站中最新更新出来的数据。</li>
</ul>
<p><strong>爬虫的矛与盾</strong></p>
<p><strong>反爬机制</strong><br>    门户网站，可以通过制定相应的策略或者技术手段，防止爬虫程序进行网站数据的爬取。</p>
<p><strong>反反爬策略</strong><br>    爬虫程序可以通过制定相关的策略或者技术手段，破解门户网站中具备的反爬机制，从而可以获取门户网站中相关的数据。</p>
<p><strong>robots.txt</strong>协议：<br>    君子协议。规定了网站中哪些数据可以被爬虫爬取哪些数据不可以被爬取。</p>
<h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a><strong>http</strong>协议</h3><ul>
<li><p>概念：就是<code>服务器</code>和<code>客户端</code>进行数据交互的一种形式。</p>
</li>
<li><p><strong>常用请求头信息</strong></p>
<ul>
<li>User-Agent：请求载体的身份标识</li>
<li>Connection：请求完毕后，是断开连接还是保持连接</li>
</ul>
</li>
<li><p><strong>常用响应头信息</strong></p>
<ul>
<li>Content-Type：服务器响应回客户端的数据类型</li>
</ul>
</li>
</ul>
<p><strong>https</strong>协议：</p>
<pre><code>- 安全的超文本传输协议
</code></pre>
<p><strong>加密方式</strong></p>
<ul>
<li>对称秘钥加密<pre><code>  - 可能被第三方拦截
</code></pre>
</li>
<li>非对称秘钥加密<pre><code>  - 速度慢
  - 公钥可能被篡改
</code></pre>
</li>
<li>证书秘钥加密<pre><code>  - 给公钥数字签名
</code></pre>
</li>
</ul>
<h2 id="二、requests模块"><a href="#二、requests模块" class="headerlink" title="二、requests模块"></a>二、requests模块</h2><ul>
<li>网络请求模块<ul>
<li>urllib模块</li>
<li><strong>requests模块</strong></li>
</ul>
</li>
</ul>
<blockquote>
<p>requests模块：python中原生的一款基于网络请求的模块，功能非常强大，简单便捷，效率极高。</p>
<p>作用：<strong>模拟浏览器发请求</strong>。</p>
</blockquote>
<h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><blockquote>
<p>requests模块的编码流程</p>
</blockquote>
<ul>
<li>指定url<ul>
<li>UA伪装</li>
<li>请求参数的处理</li>
</ul>
</li>
<li>发起请求<ul>
<li>获取响应数据</li>
</ul>
</li>
<li>持久化存储</li>
</ul>
<h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><p> <code>pip install requests</code></p>
<h4 id="实战编码"><a href="#实战编码" class="headerlink" title="实战编码"></a>实战编码</h4><ul>
<li>需求：爬取搜狗首页的页面数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># - 需求：爬取搜狗首页的页面数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># step_1:指定url</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.sogou.com/&#x27;</span></span><br><span class="line">    <span class="comment"># step_2:发起请求</span></span><br><span class="line">    <span class="comment"># get方法会返回一个响应对象</span></span><br><span class="line">    response = requests.get(url=url)</span><br><span class="line">    <span class="comment"># step_3:获取响应数据.text返回的是字符串形式的响应数据</span></span><br><span class="line">    page_text = response.text</span><br><span class="line">    <span class="built_in">print</span>(page_text)</span><br><span class="line">    <span class="comment"># step_4:持久化存储</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./sogou.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬取数据结束！！！&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="实战巩固"><a href="#实战巩固" class="headerlink" title="实战巩固"></a>实战巩固</h4><ul>
<li><p>需求：爬取搜狗指定词条对应的搜索结果页面（简易网页采集器）</p>
<ul>
<li><p><strong>UA检测</strong></p>
<blockquote>
<p>UA：User-Agent（请求载体的身份标识）.</p>
<p>门户网站的服务器会检测对应请求的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，说明该请求是一个正常的请求。但是，如果检测到请求的载体身份标识不是基于某一款浏览器的，则表示该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝该次请求。</p>
</blockquote>
</li>
<li><p><strong>UA伪装</strong>: 将对应的User-Agent封装到一个字典中</p>
<blockquote>
<p>让爬虫对应的请求载体身份标识伪装成某一款浏览器</p>
</blockquote>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>需求：破解百度翻译(获取翻译结果)</p>
<ul>
<li>post请求（携带了参数）</li>
<li>响应数据是一组json数据</li>
</ul>
</li>
<li><p>需求：爬取豆瓣电影分类排行榜 <a href="https://movie.douban.com/%E4%B8%AD%E7%9A%84%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85%E6%95%B0%E6%8D%AE">https://movie.douban.com/中的电影详情数据</a></p>
</li>
<li><p>作业：爬取肯德基餐厅查询<a href="http://www.kfc.com.cn/kfccda/index.aspx%E4%B8%AD%E6%8C%87%E5%AE%9A%E5%9C%B0%E7%82%B9%E7%9A%84%E9%A4%90%E5%8E%85%E6%95%B0%E6%8D%AE">http://www.kfc.com.cn/kfccda/index.aspx中指定地点的餐厅数据</a></p>
</li>
<li><p>需求：爬取国家药品监督管理总局中基于中华人民共和国化妆品生产许可证相关数据</p>
<pre><code>      http://scxk.nmpa.gov.cn:81/xk/
  
</code></pre>
<ul>
<li>动态加载数据</li>
</ul>
</li>
<li><p>首页中对应的企业信息数据是通过ajax动态请求到的。</p>
<pre><code>http://125.35.6.84:81/xk/itownet/portal/dzpz.jsp?id=e6c1aa332b274282b04659a6ea30430a
http://125.35.6.84:81/xk/itownet/portal/dzpz.jsp?id=f63f61fe04684c46a016a45eac8754fe
</code></pre>
<ul>
<li>通过对详情页url的观察发现：<ul>
<li>url的域名都是一样的，只有携带的参数（id）不一样</li>
<li>id值可以从首页对应的ajax请求到的json串中获取</li>
<li>域名和id值拼接处一个完整的企业对应的详情页的url</li>
</ul>
</li>
<li>详情页的企业详情数据也是动态加载出来的<ul>
<li><a href="http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById">http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById</a></li>
<li><a href="http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById">http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById</a></li>
<li>观察后发现：<ul>
<li>所有的post请求的url都是一样的，只有参数id值是不同。</li>
<li>如果我们可以批量获取多家企业的id后，就可以将id和url形成一个完整的详情页对应详情数据的ajax请求的url</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="三、数据解析"><a href="#三、数据解析" class="headerlink" title="三、数据解析"></a>三、数据解析</h2><blockquote>
<p>聚焦爬虫、正则、bs4、xpath</p>
</blockquote>
<h4 id="聚焦爬虫"><a href="#聚焦爬虫" class="headerlink" title="聚焦爬虫"></a>聚焦爬虫</h4><p>定义：爬取页面中指定的页面内容。</p>
<p>编码流程：</p>
<ul>
<li>指定url</li>
<li>发起请求</li>
<li>获取响应数据</li>
<li>数据解析</li>
<li>持久化存储</li>
</ul>
<h4 id="数据解析分类"><a href="#数据解析分类" class="headerlink" title="数据解析分类"></a>数据解析分类</h4><ul>
<li>正则</li>
<li>bs4</li>
<li>xpath（***）</li>
</ul>
<p><strong>数据解析原理概述</strong></p>
<ul>
<li>解析的局部的文本内容都会在<strong>标签之间或者标签对应的属性中进行存储</strong></li>
<li>1.<strong>进行指定标签的定位</strong></li>
<li>2.标签或者标签对应的<strong>属性</strong>中存储的<strong>数据</strong>值进行<strong>提取（解析）</strong></li>
</ul>
<h5 id="正则解析"><a href="#正则解析" class="headerlink" title="正则解析"></a><strong>正则解析</strong></h5><p>回顾</p>
<p><img src="C:\Users\86136\Pictures\学习\rep.png" alt="正则表达式"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#提取出python</span></span><br><span class="line">key=<span class="string">&quot;javapythonc++php&quot;</span></span><br><span class="line">re.findall(<span class="string">&#x27;python&#x27;</span>,key)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#提取出hello world</span></span><br><span class="line">key=<span class="string">&quot;</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line">re.findall(<span class="string">&#x27;</span></span><br><span class="line"><span class="string">(.*)</span></span><br><span class="line"><span class="string">&#x27;</span>,key)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#提取170</span></span><br><span class="line">string = <span class="string">&#x27;我喜欢身高为170的女孩&#x27;</span></span><br><span class="line">re.findall(<span class="string">&#x27;\d+&#x27;</span>,string)</span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#提取出http://和https://</span></span><br><span class="line">key=<span class="string">&#x27;http://www.baidu.com and https://boob.com&#x27;</span></span><br><span class="line">re.findall(<span class="string">&#x27;https?://&#x27;</span>,key)</span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#提取出hello</span></span><br><span class="line">key=<span class="string">&#x27;lalalahellohahah&#x27;</span> <span class="comment">#输出hello</span></span><br><span class="line">re.findall(<span class="string">&#x27;&lt;[Hh][Tt][mM][lL]&gt;(.*)&#x27;</span>,key)</span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#提取出hit. </span></span><br><span class="line">key=<span class="string">&#x27;bobo@hit.edu.com&#x27;</span><span class="comment">#想要匹配到hit.</span></span><br><span class="line">re.findall(<span class="string">&#x27;h.*?\.&#x27;</span>,key)</span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#匹配sas和saas</span></span><br><span class="line">key=<span class="string">&#x27;saas and sas and saaas&#x27;</span></span><br><span class="line">re.findall(<span class="string">&#x27;sa&#123;1,2&#125;s&#x27;</span>,key)</span><br></pre></td></tr></table></figure>



<h5 id="bs4进行数据解析"><a href="#bs4进行数据解析" class="headerlink" title="bs4进行数据解析"></a><strong>bs4进行数据解析</strong></h5><pre><code>- 数据解析的原理：
    - 1.标签定位
    - 2.提取标签、标签属性中存储的数据值
</code></pre>
<ul>
<li>bs4数据解析的原理：<ul>
<li>1.实例化一个BeautifulSoup对象，并且将页面源码数据加载到该对象中</li>
<li>2.通过调用BeautifulSoup对象中相关的属性或者方法进行标签定位和数据提取</li>
</ul>
</li>
<li>环境安装：<ul>
<li><code>pip install bs4</code></li>
<li><code>pip install lxml</code></li>
</ul>
</li>
<li>如何实例化BeautifulSoup对象：<ul>
<li><code>from bs4 import BeautifulSoup</code></li>
<li>对象的实例化：<ul>
<li>1.将本地的html文档中的数据加载到该对象中<pre><code>  `fp = open(&#39;./test.html&#39;,&#39;r&#39;,encoding=&#39;utf-8&#39;)`
 ` soup = BeautifulSoup(fp,&#39;lxml&#39;)`
</code></pre>
</li>
<li>2.将互联网上获取的页面源码加载到该对象中<pre><code>  `page_text = response.text`
</code></pre>
  <code> soup = BeatifulSoup(page_text,&#39;lxml&#39;)</code></li>
</ul>
</li>
<li>提供的用于数据解析的方法和属性：<ul>
<li><code>soup.tagName</code>:返回的是文档中第一次出现的tagName对应的标签</li>
<li><code>soup.find()</code>:<ul>
<li><code>find(&#39;tagName&#39;)</code>:等同于<code>soup.div</code></li>
<li>属性定位：<br>  <code>soup.find(&#39;div&#39;,class_/id/attr=&#39;song&#39;)</code></li>
</ul>
</li>
<li><code>soup.find_all(&#39;tagName&#39;)</code>:返回符合要求的所有标签（列表）</li>
</ul>
</li>
<li><code>select</code>：<ul>
<li>select(‘某种选择器（id，class，标签…选择器）’),返回的是一个列表。</li>
<li>层级选择器：<ul>
<li><code>soup.select(&#39;.tang &gt; ul &gt; li &gt; a&#39;)</code>：&gt;表示的是一个层级</li>
<li><code>oup.select(&#39;.tang &gt; ul a&#39;)</code>：空格表示的多个层级</li>
</ul>
</li>
</ul>
</li>
<li>获取标签之间的文本数据：<ul>
<li>soup.a.text/string/get_text()</li>
<li>text/get_text():可以获取某一个标签中所有的文本内容</li>
<li>string：只可以获取该标签下面直系的文本内容</li>
</ul>
</li>
<li>获取标签中属性值：<ul>
<li>soup.a[‘href’]</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="xpath解析"><a href="#xpath解析" class="headerlink" title="xpath解析"></a>xpath解析</h5><blockquote>
<p>最常用且最便捷高效的一种解析方式。通用性。</p>
</blockquote>
<ul>
<li>xpath解析原理：<ul>
<li>1.实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中。</li>
<li>2.调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获。</li>
</ul>
</li>
<li>环境的安装：<ul>
<li>pip install lxml</li>
</ul>
</li>
<li>如何实例化一个etree对象:from lxml import etree<ul>
<li>1.将<strong>本地</strong>的html文档中的源码数据加载到etree对象中：<br>  etree.parse(filePath)</li>
<li>2.可以将从<strong>互联网</strong>上获取的源码数据加载到该对象中<br>  etree.HTML(‘page_text’)</li>
<li>xpath(‘xpath表达式’)</li>
</ul>
</li>
<li>xpath表达式:<ul>
<li><strong>/</strong>: 表示的是从根节点开始定位。表示的是一个层级。</li>
<li><strong>//</strong>: 表示的是多个层级。可以表示从任意位置开始定位。</li>
<li><strong>属性定位</strong>：//div[@class=’song’] tag[@attrName=”attrValue”]</li>
<li><strong>索引定位</strong>：//div[@class=”song”]/p[3] 索引是从1开始的。</li>
<li><strong>取文本</strong>：<ul>
<li>/text() 获取的是标签中直系的文本内容</li>
<li>//text() 标签中非直系的文本内容（所有的文本内容）</li>
</ul>
</li>
<li><strong>取属性</strong>：<br>  /@attrName     ==&gt;img/src</li>
</ul>
</li>
</ul>
<p>作业：<br>    爬取站长素材中免费简历模板</p>
<h2 id="四、验证码识别"><a href="#四、验证码识别" class="headerlink" title="四、验证码识别"></a>四、验证码识别</h2><h5 id="验证码和爬虫之间的关系"><a href="#验证码和爬虫之间的关系" class="headerlink" title="验证码和爬虫之间的关系"></a>验证码和爬虫之间的关系</h5><ul>
<li>反爬机制：验证码.识别验证码图片中的数据，用于模拟登陆操作。</li>
</ul>
<h5 id="识别验证码的操作"><a href="#识别验证码的操作" class="headerlink" title="识别验证码的操作"></a>识别验证码的操作</h5><pre><code>- 人工肉眼识别。（不推荐）
    - 第三方自动识别（推荐）
    - 云打码：http://www.yundama.com/demo.html
</code></pre>
<ul>
<li>云打码的使用流程：<ul>
<li>注册：普通和开发者用户</li>
<li>登录：<ul>
<li>普通用户的登录：查询该用户是否还有剩余的题分</li>
<li>开发者用户的登录：<ul>
<li>创建一个软件：我的软件-》添加新软件-》录入软件名称-》提交（软件id和秘钥）</li>
<li>下载示例代码：开发文档-》点此下载：云打码接口DLL-》PythonHTTP示例下载</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="实战：识别古诗文网登录页面中的验证码"><a href="#实战：识别古诗文网登录页面中的验证码" class="headerlink" title="实战：识别古诗文网登录页面中的验证码"></a>实战：识别古诗文网登录页面中的验证码</h5><p>使用打码平台识别验证码的编码流程：</p>
<ul>
<li>将验证码图片进行本地下载</li>
<li>调用平台提供的示例代码进行图片数据识别</li>
</ul>
<h2 id="五、request高级"><a href="#五、request高级" class="headerlink" title="五、request高级"></a>五、request高级</h2><h4 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h4><ul>
<li>爬取基于某些用户的用户信息。</li>
</ul>
<h4 id="需求1"><a href="#需求1" class="headerlink" title="需求1"></a>需求1</h4><blockquote>
<p>对人人网进行模拟登录。</p>
</blockquote>
<ul>
<li>点击登录按钮之后会发起一个post请求</li>
<li>post请求中会携带登录之前录入的相关的登录信息（用户名，密码，验证码……）</li>
<li>验证码：每次请求都会变化</li>
</ul>
<h4 id="需求2"><a href="#需求2" class="headerlink" title="需求2"></a>需求2</h4><blockquote>
<p>爬取当前用户的相关的用户信息（个人主页中显示的用户信息）</p>
</blockquote>
<h4 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h4><p>http/https协议特性：无状态。<br>没有请求到对应页面数据的原因：<br>    发起的第二次基于个人主页页面请求的时候，服务器端并不知道该此请求是基于登录状态下的请求。<br>cookie：用来让服务器端记录客户端的相关状态。</p>
<ul>
<li>手动处理：通过抓包工具获取cookie值，将该值封装到headers中。（不建议）</li>
<li>自动处理：<ul>
<li>cookie值的来源是哪里？<ul>
<li>模拟登录post请求后，由服务器端创建。</li>
</ul>
</li>
<li><strong>session会话对象</strong>：<ul>
<li>作用：<br>  1.可以进行请求的发送。<br>  2.如果请求过程中产生了cookie，则该cookie会被自动存储/携带在该session对象中。</li>
</ul>
</li>
<li>创建一个session对象：session = requests.Session()</li>
<li>使用session对象进行模拟登录post请求的发送（cookie就会被存储在session中）</li>
<li>session对象对个人主页对应的get请求进行发送（携带了cookie）</li>
</ul>
</li>
</ul>
<h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><blockquote>
<p>破解封IP这种反爬机制。</p>
</blockquote>
<p>什么是代理：</p>
<ul>
<li>代理服务器。</li>
</ul>
<p>代理的作用：</p>
<ul>
<li>突破自身IP访问的限制。</li>
<li>隐藏自身真实IP</li>
</ul>
<p>代理相关的网站：</p>
<ul>
<li>快代理</li>
<li>西祠代理</li>
<li><a href="http://www.goubanjia.com/">www.goubanjia.com</a></li>
</ul>
<p>代理ip的类型：</p>
<ul>
<li>http：应用到http协议对应的url中</li>
<li>https：应用到https协议对应的url中</li>
</ul>
<p>代理ip的匿名度：</p>
<ul>
<li>透明：服务器知道该次请求使用了代理，也知道请求对应的真实ip</li>
<li>匿名：知道使用了代理，不知道真实ip</li>
<li>高匿：不知道使用了代理，更不知道真实的ip</li>
</ul>
<h2 id="六、异步爬虫"><a href="#六、异步爬虫" class="headerlink" title="六、异步爬虫"></a>六、异步爬虫</h2><p>目的：在爬虫中使用异步实现高性能的数据爬取操作。</p>
<p>异步爬虫的方式：<br>    - 1.多线程，多进程（不建议）：<br>            好处：可以为相关阻塞的操作单独开启线程或者进程，阻塞操作就可以异步执行。<br>            弊端：无法无限制的开启多线程或者多进程。<br>    - 2.线程池、进程池（适当的使用）：<br>    好处：我们可以降低系统对进程或者线程创建和销毁的一个频率，从而很好的降低系统的开销。<br>    弊端：池中线程或进程的数量是有上限。</p>
<ul>
<li><p>3.单线程+异步协程（推荐）：<br>  <strong>event_loop</strong>：事件循环，相当于一个无限循环，我们可以把一些函数注册到这个事件循环上，<br>  当满足某些条件的时候，函数就会被循环执行。</p>
<p>  <strong>coroutine</strong>：协程对象，我们可以将协程对象注册到事件循环中，它会被事件循环调用。<br>  我们可以使用 async 关键字来定义一个方法，这个方法在调用时不会立即被执行，而是返回<br>  一个协程对象。</p>
<p>  <strong>task</strong>：任务，它是对协程对象的进一步封装，包含了任务的各个状态。</p>
<p>  <strong>future</strong>：代表将来执行或还没有执行的任务，实际上和 task 没有本质区别。</p>
<p>  <strong>async</strong> 定义一个协程.</p>
<p>  await 用来挂起阻塞方法的执行。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 零成本搭建web服务器【外网可访问】</title>
    <url>/2021/07/21/centosweb/</url>
    <content><![CDATA[<blockquote>
<p>更新：【Windows+Nginx+Natapp零成本搭建web服务器】教程即将上线 。</p>
</blockquote>
<span id="more"></span>

<p> 一、 <strong>技术栈</strong></p>
<blockquote>
<ul>
<li><em>虚拟机</em>：当然是选择 Linux 系统，本人使用的是 ==centos7== 版本。</li>
<li><em>服务器</em>：轻量级服务器nginx，10分钟搭建静态网站。</li>
<li><em>内网穿透</em>：使用Natapp，访问内网。</li>
</ul>
</blockquote>
<hr>
<p>二、<strong>步骤</strong></p>
<ol>
<li><p><strong>Linux系统安装与配置</strong></p>
<blockquote>
<p><em>安装linux虚拟机就跳过吧，网上一大把，当然最好是Centos系统哦。</em></p>
</blockquote>
</li>
</ol>
<ul>
<li><p>配置<br>由于是自己创建的虚拟机，需要手动打开80端口，重新配置防火墙，以及切换源。下面开始吧。</p>
<p>  <strong>==a.切换阿里源==</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">备份：mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">清理缓存：yum clean all</span><br><span class="line">生成缓存：yum makecache</span><br></pre></td></tr></table></figure>
<p>  <strong>==b.防火墙配置==</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service <span class="comment">#停止firewall</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service <span class="comment">#禁止firewall开机启动</span></span><br><span class="line">yum install iptables-services <span class="comment">#安装iptables防火墙</span></span><br><span class="line">yum install iptables-services <span class="comment">#安装iptables防火墙</span></span><br></pre></td></tr></table></figure>
<p>  <strong>==c.开启80端口==</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/iptables <span class="comment">#编辑防火墙配置文件</span></span><br><span class="line">按i进入文本编辑模式</span><br><span class="line">找到：</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span><br><span class="line">在该行下面添加：</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span><br><span class="line">保存退出：先按ESC，再输入【:wq!】输入括号里的内容。</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart iptables.service <span class="comment">#重启防火墙使配置生效</span></span><br><span class="line">systemctl <span class="built_in">enable</span> iptables.service <span class="comment">#设置防火墙开机启动</span></span><br><span class="line">firewall-cmd --query-port=80/tcp <span class="comment">#查询端口是否开启</span></span><br></pre></td></tr></table></figure>
<hr>
<p>   <strong>2. 配置Nginx服务器</strong></p>
<blockquote>
<p><em>简介</em>：Nginx是一个http服务器。是一个使用c语言开发的高性能的http服务器及反向代理服务器。Nginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发，官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。</p>
</blockquote>
<p>  <strong>==a.安装环境==</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc依赖：yum install gcc-c++</span><br><span class="line">Perl库：yum install -y pcre pcre-devel</span><br><span class="line">zlib库：yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line">nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。</span><br></pre></td></tr></table></figure>
<p>  <strong>==b.安装==</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">mkdir nginx</span><br><span class="line"><span class="built_in">cd</span> nginx	<span class="comment">#进入nginx文件夹</span></span><br><span class="line"></span><br><span class="line">wget http://nginx.org/download/nginx-1.9.7.tar.gz</span><br><span class="line">tar -zxvf nginx-1.9.7.tar.gz	<span class="comment">#解压</span></span><br><span class="line"></span><br><span class="line">./configure		<span class="comment">#安装nginx</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> sbin</span><br><span class="line">sudo ./nginx	<span class="comment">#启动</span></span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -t	<span class="comment">#查询nginx.conf是否正确</span></span><br></pre></td></tr></table></figure>
<p>  <strong>==c.配置网站文件==</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">准备好自己写的网页，以目录形式上传到 /usr/<span class="built_in">local</span>/nginx/xxx/ 路径（xxx为网站跟目录名）</span><br><span class="line"><span class="built_in">cd</span> nginx</span><br><span class="line">vim conf/nginx.conf		<span class="comment">#使用vim编辑器</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  _;</span><br><span class="line">    <span class="comment">#root /usr/local/nginx/xxx/;      # 修改1：xxx为静态页面根目录，index.html文件放在xxx下面</span></span><br><span class="line">    <span class="comment">#index index.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/local/nginx/xxx/;	<span class="comment"># 修改2</span></span><br><span class="line">        index  index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">    location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nginx -s reload 	<span class="comment">#重启</span></span><br><span class="line"></span><br><span class="line">ps aux|grep nginx	<span class="comment">#查询nginx进程</span></span><br><span class="line"></span><br><span class="line">./nginx -s stop		<span class="comment">#停止</span></span><br></pre></td></tr></table></figure></li>
</ul>
<pre><code>&gt;   到这里，就可以实现内网之间的访问了，通过ifconfig查询桥接模式下的内网地址，在本机搜索即可进入网站。但是，做好网站只有自己能看还挺不爽的，接下来就是让别人可以访问的操作辽~

---
**3.Natapp实现内网穿透**
&gt; *简介*：内网穿透简单来说就是将内网外网通过natapp隧道打通,让内网的数据让外网可以获取。比如常用的办公室软件等，一般在办公室或家里，通过拨号上网，这样办公软件只有在本地的局域网之内才能访问，那么问题来了，如果是手机上，或者公司外地的办公人员，如何访问到办公软件呢？这就需要natapp内网穿透工具了。运行natapp隧道之后，natapp会分配一个专属域名/端口,办公软件就已经在公网上了,在外地的办公人员可以在任何地方愉快的访问办公软件了~

&gt; emmm一句话：别人可以访问你的192.168.xxx.xxx
Natapp网址：[点这里](https://natapp.cn/)

**==a.购买隧道==**

- 注册账号
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201207104539729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjU0MDEw,size_16,color_FFFFFF,t_70)
- 登录，购买隧道（免费版）
- 选择web隧道协议![在这里插入图片描述](https://img-blog.csdnimg.cn/20201207104746667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjU0MDEw,size_16,color_FFFFFF,t_70)
- 获取authtoken，启动时需要用
![在这里插入图片描述](https://img-blog.csdnimg.cn/2020120710531049.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjU0MDEw,size_16,color_FFFFFF,t_70)

**==b.下载客户端==**
&gt; Linux可直接wget
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20201207105027387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjU0MDEw,size_14,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<pre><code>**==c.运行Natapp==**
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod a+x natapp	<span class="comment">#给执行权限</span></span><br><span class="line">./natapp			<span class="comment">#运行</span></span><br><span class="line"></span><br><span class="line">./natapp <span class="literal">-authtoken</span>=<span class="number">9</span>ab6b9040a624f40	<span class="comment">#参数方式运行，authtoken购买隧道后即可在控制台查看</span></span><br><span class="line">注意参数输入正确性,不要有多余的空格等!</span><br></pre></td></tr></table></figure>


&gt; 运行成功结果：![在这里插入图片描述](https://img-blog.csdnimg.cn/2020120711005848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjU0MDEw,size_16,color_FFFFFF,t_70)
</code></pre>
<p>红框内的网址就是你的内网地址了，接下来就可以访问了，可以发给您的小伙伴试试~</p>
<pre><code>&gt;更多内容，欢迎访问 [宋木头](http://aoau.top/) ~
</code></pre>
<hr>
<p>原创不易，转载请注明出处：)</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>建站</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>建站随笔</title>
    <url>/2021/07/20/hello-world/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>


<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page ‘title’</span><br></pre></td></tr></table></figure>

<h3 id="提交Git"><a href="#提交Git" class="headerlink" title="提交Git"></a>提交Git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s --debug</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>随笔</category>
        <category>hexo&amp;next</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript 随笔】DOM事件之——拖拽的实现与简单优化</title>
    <url>/2021/07/21/%E3%80%90JavaScript%20%E9%9A%8F%E7%AC%94%E3%80%91DOM%E4%BA%8B%E4%BB%B6%E4%B9%8B%E2%80%94%E2%80%94%E6%8B%96%E6%8B%BD%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a><em>效果</em></h5><p><code>鼠标点击文档中任意元素拖拽至任意位置。</code></p>
<span id="more"></span>

<h5 id="思路与流程"><a href="#思路与流程" class="headerlink" title="思路与流程"></a><em>思路与流程</em></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">鼠标按下时，开始拖拽：onmousedown</span><br><span class="line">鼠标移动，元素被拖动：onmousemove</span><br><span class="line">鼠标松开，被拖拽元素固定：onmouseup</span><br></pre></td></tr></table></figure>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a><em>代码</em></h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">184</span>, <span class="number">127</span>, <span class="number">59</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#img1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//拖拽box1元素</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">/*流程</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             *  1.当鼠标按下时，开始拖拽：onmousedown</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             *  2.鼠标移动，元素被拖动：onmousemove</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             *  3.鼠标松开，被拖拽元素固定：onmouseup</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;img1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//开启box1</span></span></span><br><span class="line"><span class="javascript">            drag(box1);</span></span><br><span class="line"><span class="javascript">            drag(box2);</span></span><br><span class="line"><span class="javascript">            drag(img);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//优化：3提前一个专门用来设置拖拽的函数</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//参数：obj</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">obj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//第一步</span></span></span><br><span class="line"><span class="javascript">                obj.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//设置box1捕获所有鼠标按下的事件</span></span></span><br><span class="line"><span class="javascript">                obj.setPointerCapture;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//优化 1</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//div的偏移量 鼠标.clientX - 元素.offsetLeft</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//div的偏移量 鼠标.clientY - 元素.offsetTop</span></span></span><br><span class="line"><span class="javascript">                event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ol = event.clientX - obj.offsetLeft;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ot = event.clientY - obj.offsetTop;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">//第二部</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//第三部</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//获取鼠标坐标</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> left = event.clientX - ol;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> top = event.clientY - ot;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//修改box1的位置</span></span></span><br><span class="line"><span class="javascript">                    obj.style.left = left+<span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    obj.style.top = top+<span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    obj.innerHTML = <span class="string">&#x27;x=&#x27;</span>+left+<span class="string">&#x27; y=&#x27;</span>+top;</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//鼠标松开时，固定在当前位置</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//取消onmousemove</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//取消onmouseup(一次性事件)</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//事件松开时，取消对事件的捕获</span></span></span><br><span class="line"><span class="javascript">                    obj.releasePointerCapture;</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//优化 2</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/1.jpg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a><em>优化</em></h5><ol>
<li><p>鼠标的偏移量</p>
<blockquote>
<p>初始代码的拖拽效果，会出现明显的偏移，即鼠标在移动时，偏离最初点击的位置，用户体验差。</p>
</blockquote>
<p><strong>解决方法</strong></p>
<blockquote>
<p>元素的偏移量 鼠标.clientX - 元素.offsetLeft<br>元素的偏移量 鼠标.clientY - 元素.offsetTop</p>
</blockquote>
</li>
<li><p>拖拽内容时，浏览器会默认去搜索引擎中搜索内容</p>
<p> <strong>解决方法1</strong></p>
<blockquote>
<p>return false (不兼容ie8及以下)</p>
</blockquote>
<p> <strong>解决方法2</strong></p>
<blockquote>
<p>setCapture()方法 (不支持Chrome)</p>
</blockquote>
<blockquote>
<p>setPointerCapture属性：鼠标单击时，捕获所有鼠标按下的事件。<br> releasePointerCapture属性：事件松开时，取消对事件的捕获</p>
</blockquote>
</li>
<li><p>提取该拖拽函数</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//优化：3提前一个专门用来设置拖拽的函数</span></span><br><span class="line"><span class="comment">//参数：obj</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//第一步</span></span><br><span class="line">    obj.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//设置box1捕获所有鼠标按下的事件</span></span><br><span class="line">    obj.setPointerCapture;</span><br><span class="line">    <span class="comment">//优化 1</span></span><br><span class="line">    <span class="comment">//div的偏移量 鼠标.clientX - 元素.offsetLeft</span></span><br><span class="line">    <span class="comment">//div的偏移量 鼠标.clientY - 元素.offsetTop</span></span><br><span class="line">    event = event || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> ol = event.clientX - obj.offsetLeft;</span><br><span class="line">    <span class="keyword">var</span> ot = event.clientY - obj.offsetTop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二部</span></span><br><span class="line">    <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        event = event || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="comment">//第三部</span></span><br><span class="line">        <span class="comment">//获取鼠标坐标</span></span><br><span class="line">        <span class="keyword">var</span> left = event.clientX - ol;</span><br><span class="line">        <span class="keyword">var</span> top = event.clientY - ot;</span><br><span class="line">        <span class="comment">//修改box1的位置</span></span><br><span class="line">        obj.style.left = left+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        obj.style.top = top+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        obj.innerHTML = <span class="string">&#x27;x=&#x27;</span>+left+<span class="string">&#x27; y=&#x27;</span>+top;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//鼠标松开时，固定在当前位置</span></span><br><span class="line">        <span class="comment">//取消onmousemove</span></span><br><span class="line">        <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//取消onmouseup(一次性事件)</span></span><br><span class="line">        <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//事件松开时，取消对事件的捕获</span></span><br><span class="line">        obj.releasePointerCapture;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//优化 2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>小舍免费图片Api</title>
    <url>/2021/07/21/xiaoshesapi/</url>
    <content><![CDATA[<blockquote>
<p>项目名称：小舍图片Api接口</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>开发人员：熙子黒</p>
<p>开源协议：MIT</p>
<p>感谢你的使用，如果喜欢请给仓库点个star：<a href="https://github.com/bai-23/photosapi">https://github.com/bai-23/photosapi</a></p>
<p>此接口已接入本人项目(小舍社交app)，请放心食用：<a href="https://github.com/bai-23/italk-uniapp">https://github.com/bai-23/italk-uniapp</a></p>
<p>注意：<strong>个人接口，请勿商用。图片收集不易，请珍惜食用。部分图片较大加载缓慢，请耐心等待。</strong></p>
</blockquote>
<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p>地址：<code>http://api.aoau.top</code></p>
<p>方法：<code>GET</code></p>
<table>
<thead>
<tr>
<th>url</th>
<th>参数</th>
<th>值</th>
<th>必须</th>
</tr>
</thead>
<tbody><tr>
<td>/photos/api</td>
<td>page</td>
<td>number</td>
<td>是</td>
</tr>
</tbody></table>
<h3 id="ajax请求示例"><a href="#ajax请求示例" class="headerlink" title="ajax请求示例"></a>ajax请求示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">fetchPhotos</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.$http.get(<span class="string">&#x27;http://api.aoau.top/photos/api?page=9&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>示例url：<code>http://api.aoau.top/photos/api?page=9</code></p>
<p>返回值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res:&#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;photoNum&quot;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">&quot;category&quot;</span>: <span class="string">&quot;写真4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;author&quot;</span>: <span class="string">&quot;收集不易，请珍惜接口，更多资源请访问Github:https://github.com/bai-23/photosapi&quot;</span>,</span><br><span class="line">        <span class="string">&quot;photoList&quot;</span>: [</span><br><span class="line">            xxx.jpg</span><br><span class="line">            ...</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;tips&quot;</span>: <span class="string">&quot;部分图片较大，加载速度较慢，请谅解。图片来源于互联网，仅供个人使用，请勿商用！&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：参数page范围为：1~14，请填写正确。</p>
<p>（建议线路5~14）</p>
</blockquote>
<hr>
<p>下面是测试，其他线路请自行尝试<br><a href="http://api.aoau.top:9999/photos/1/%20%2816%29.png">线路1</a><br><a href="http://api.aoau.top:9999/photos/2/%20%2819%29.png">线路2</a><br><a href="http://api.aoau.top:9999/photos/3/%20%2834%29.png">线路3</a><br><a href="http://api.aoau.top:9999/photos/4/%20%2883%29.png">线路4</a><br><a href="http://api.aoau.top:9999/photos/8/%20%2830%29.jpg">线路8</a><br><a href="http://api.aoau.top:9999/photos/14/%20%2860%29.jpg">线路14</a></p>
]]></content>
      <categories>
        <category>apis</category>
        <category>图片api</category>
      </categories>
      <tags>
        <tag>图片Api</tag>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax跨域解决方案</title>
    <url>/2021/07/21/%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%87%BA%E7%8E%B0%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h5 id="本地-Ajax-跨域报错-Cross-origin-requests-are-only-supported-for-protocol-schemes-http-data-chrome-chrome-extension-chrome-untrusted-https"><a href="#本地-Ajax-跨域报错-Cross-origin-requests-are-only-supported-for-protocol-schemes-http-data-chrome-chrome-extension-chrome-untrusted-https" class="headerlink" title="本地 Ajax 跨域报错 Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, chrome-untrusted, https."></a>本地 Ajax 跨域报错 Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, chrome-untrusted, https.</h5><span id="more"></span>

<hr>
<p>当我们在做练习或者写 Demo 的时候，有访问本地文件的需求，当我们在加载的时候发现不能加载，会报如下错误： </p>
<p><img src="https://images.cnblogs.com/cnblogs_com/xzsj/1888303/o_210325085243filecross.png"></p>
<p>根据错误信息大概知道原因在于使用了 File 协议，应该使用它提示的 http, data, chrome, chrome-extension, chrome-untrusted, https 这些协议，可是只是做个练习，写些小 Demo，不至于自己去创建一个服务器，开个端口。那么应该如何解决这个问题呢？各位看官，往下看。</p>
<h2 id="1-换编辑器"><a href="#1-换编辑器" class="headerlink" title="1.换编辑器"></a>1.换编辑器</h2><hr>
<p>使用 webstorm 或是 visual studio 这种重量级 IDE 的同学，应该不会遇到这种问题，这类 IDE 都内置了 HTTP 服务器。<br>但是对于一些喜欢使用 VSCode，Sublime Text 这类轻量级编辑器的同学，我们继续往下看。</p>
<h2 id="2-安装Server插件"><a href="#2-安装Server插件" class="headerlink" title="2.安装Server插件"></a>2.安装Server插件</h2><hr>
<p>这里针对 VSCode 和 Sublime 分别安利一款插件。</p>
<h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><hr>
<p>Live Server 插件，这个插件功能十分强大，不止可以解决 ajax 不支持 file 协议的问题，还可以实现在编辑器里保存修改后，页面自动刷新的功能。具体使用方法在插件安装的地方有说明，用起来也十分简单。<br>安装完成之后，打开 html 文件后，点击右下角的 GoLive 即可。</p>
<h3 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h3><hr>
<p>SublimeServer 插件，安装完成之后，点击 Tools-&gt;SublimeServer-&gt;Start SublimeServer，启动服务器，然后在 html 文件中，注意是文件中点击右键，选择 View in SublimeServer 即可。<br>（注意一定要以文件夹的方式打开 html 文件所在目录，否则可能失效。）</p>
<h2 id="3-换浏览器"><a href="#3-换浏览器" class="headerlink" title="3.换浏览器"></a>3.换浏览器</h2><hr>
<p>火狐支持 file 协议，对 Chorme 没有什么执念的童鞋，可以换成火狐。</p>
<h2 id="4-配置Chrome浏览器支持file协议"><a href="#4-配置Chrome浏览器支持file协议" class="headerlink" title="4.配置Chrome浏览器支持file协议"></a>4.配置Chrome浏览器支持file协议</h2><hr>
<p>如果你是那种非常喜欢 Chrome 开发者工具的人，也可以尝试如下方式。</p>
<p>Windows：<br>设置 Chrome 的快捷方式属性，在“目标”后面加上–allow-file-access-from-files，注意前面有个空格，重新打开 Chrome 即可。</p>
<p>Mac：<br>打开终端，输入下面命令：open -a “Google Chrome” –args –disable-web-security 然后就可以屏蔽安全访问了[ –args：此参数可有可无]</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><hr>
<p>只是更改浏览器配置使之支持 file 协议，还是有很大的局限性的，建议最好采用前两种方式，配置 http 服务器才是长久之计。</p>
<p>如需前端指导、前端资料、Java 指导和 Java 资料的请联系本人，感谢您的支持。</p>
<blockquote>
<p>WECHAT：xzsj07<br>备注：加好友请注明来源。</p>
</blockquote>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题汇总（中）</title>
    <url>/2021/07/21/Interviewquestions1/</url>
    <content><![CDATA[<p><strong>前端面试题汇总</strong></p>
<span id="more"></span>

<h1 id="三、Jquery"><a href="#三、Jquery" class="headerlink" title="三、Jquery"></a>三、Jquery</h1><h2 id="1、jQuery-的-slideUp动画-，如果目标元素是被外部事件驱动-当鼠标快速地连续触发外部元素事件-动画会滞后的反复执行，该如何处理呢"><a href="#1、jQuery-的-slideUp动画-，如果目标元素是被外部事件驱动-当鼠标快速地连续触发外部元素事件-动画会滞后的反复执行，该如何处理呢" class="headerlink" title="1、jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?"></a>1、jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?</h2><p>先stop(true,true)后slideUp()</p>
<p>示例代码参考：J:\代码,PPT,笔记,电子书\面试题\面试题_jquery_slideup.html</p>
<p>关于stop()参考：J:\代码,PPT,笔记,电子书\面试题\面试题_jquery.png</p>
<h1 id="四、HTML5-CSS3"><a href="#四、HTML5-CSS3" class="headerlink" title="四、HTML5 CSS3"></a>四、HTML5 CSS3</h1><h2 id="1、CSS3有哪些新特性？"><a href="#1、CSS3有哪些新特性？" class="headerlink" title="1、CSS3有哪些新特性？"></a>1、CSS3有哪些新特性？</h2><p>\1. CSS3实现圆角（border-radius），阴影（box-shadow），</p>
<p>\2. 对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）</p>
<p>3.transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);// 旋转,缩放,定位,倾斜</p>
<p>\4. 增加了更多的CSS选择器 多背景 rgba </p>
<p>\5. 在CSS3中唯一引入的伪元素是 ::selection.</p>
<p>\6. 媒体查询，多栏布局</p>
<p>\7. border-image</p>
<h2 id="2、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？"><a href="#2、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？" class="headerlink" title="2、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？"></a>2、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h2><p>新特性：</p>
<p>\1. 拖拽释放(Drag and drop) API </p>
<p>\2. 语义化更好的内容标签（header,nav,footer,aside,article,section）</p>
<p>\3. 音频、视频API(audio,video)</p>
<p>\4. 画布(Canvas) API</p>
<p>\5. 地理(Geolocation) API</p>
<p>\6. 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；</p>
<p>\7. sessionStorage 的数据在浏览器关闭后自动删除</p>
<p>\8. 表单控件，calendar、date、time、email、url、search </p>
<p>\9. 新的技术webworker, websocket, Geolocation</p>
<p>移除的元素：</p>
<p>\1. 纯表现的元素：basefont，big，center，font, s，strike，tt，u；</p>
<p>\2. 对可用性产生负面影响的元素：frame，frameset，noframes；</p>
<p>支持HTML5新标签：</p>
<p>\1. IE8/IE7/IE6支持通过 document.createElement 方法产生的标签，可以利用这一特性让这些浏览器支持 HTML5 新标签，浏览器支持新标签后，还需要添加标签默认的样式（当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架）：</p>
<!--[if lt IE 9]>

<script> src="http://html5shim.googlecode.com/svn/trunk/html5.js"</script>

<![endif]-->

<p>如何区分： </p>
<p>DOCTYPE声明新增的结构元素、功能元素</p>
<h2 id="3、本地存储（Local-Storage-）和cookies（储存在用户本地终端上的数据）之间的区别是什么？"><a href="#3、本地存储（Local-Storage-）和cookies（储存在用户本地终端上的数据）之间的区别是什么？" class="headerlink" title="3、本地存储（Local Storage ）和cookies（储存在用户本地终端上的数据）之间的区别是什么？"></a>3、本地存储（Local Storage ）和cookies（储存在用户本地终端上的数据）之间的区别是什么？</h2><p>Cookies:服务器和客户端都可以访问；大小只有4KB左右；有有效期，过期后将会删除；</p>
<p>本地存储：只有本地浏览器端可访问数据，服务器不能访问本地存储直到故意通过POST或者GET的通道发送到服务器；每个域5MB；没有过期数据，它将保留知道用户从浏览器清除或者使用Javascript代码移除</p>
<h2 id="4、如何实现浏览器内多个标签页之间的通信"><a href="#4、如何实现浏览器内多个标签页之间的通信" class="headerlink" title="4、如何实现浏览器内多个标签页之间的通信?"></a>4、如何实现浏览器内多个标签页之间的通信?</h2><p>调用 localstorge、cookies 等本地存储方式</p>
<h2 id="5、你如何对网站的文件和资源进行优化？"><a href="#5、你如何对网站的文件和资源进行优化？" class="headerlink" title="5、你如何对网站的文件和资源进行优化？"></a>5、你如何对网站的文件和资源进行优化？</h2><p>文件合并</p>
<p>文件最小化/文件压缩</p>
<p>使用CDN托管</p>
<p>缓存的使用</p>
<h2 id="6、什么是响应式设计？"><a href="#6、什么是响应式设计？" class="headerlink" title="6、什么是响应式设计？"></a>6、什么是响应式设计？</h2><p>它是关于网页制作的过程中让不同的设备有不同的尺寸和不同的功能。响应式设计是让所有的人能在这些设备上让网站运行正常  </p>
<h2 id="7、新的-HTML5-文档类型和字符集是？"><a href="#7、新的-HTML5-文档类型和字符集是？" class="headerlink" title="7、新的 HTML5 文档类型和字符集是？"></a>7、新的 HTML5 文档类型和字符集是？</h2><p>答：HTML5文档类型：<!doctype html></p>
<p>  HTML5使用的编码<meta charset="UTF-8"></p>
<h2 id="8、HTML5-Canvas-元素有什么用？"><a href="#8、HTML5-Canvas-元素有什么用？" class="headerlink" title="8、HTML5 Canvas 元素有什么用？"></a>8、HTML5 Canvas 元素有什么用？</h2><p>答：Canvas 元素用于在网页上绘制图形，该元素标签强大之处在于可以直接在 HTML 上进行图形操作。</p>
<h2 id="9、HTML5-存储类型有什么区别？"><a href="#9、HTML5-存储类型有什么区别？" class="headerlink" title="9、HTML5 存储类型有什么区别？"></a>9、HTML5 存储类型有什么区别？</h2><p>答：Media API、Text Track API、Application Cache API、User Interaction、Data Transfer API、Command API、Constraint Validation API、History API</p>
<h2 id="10、用H5-CSS3解决下导航栏最后一项掉下来的问题"><a href="#10、用H5-CSS3解决下导航栏最后一项掉下来的问题" class="headerlink" title="10、用H5+CSS3解决下导航栏最后一项掉下来的问题"></a>10、用H5+CSS3解决下导航栏最后一项掉下来的问题</h2><h2 id="11、CSS3新增伪类有那些？"><a href="#11、CSS3新增伪类有那些？" class="headerlink" title="11、CSS3新增伪类有那些？"></a>11、CSS3新增伪类有那些？</h2><p>  p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。</p>
<p>  p:last-of-type 选择属于其父元素的最后 <p> 元素的每个 <p> 元素。</p>
<p>  p:only-of-type 选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。</p>
<p>  p:only-child  选择属于其父元素的唯一子元素的每个 <p> 元素。</p>
<p>  p:nth-child(2) 选择属于其父元素的第二个子元素的每个 <p> 元素。</p>
<p>  :enabled、:disabled 控制表单控件的禁用状态。</p>
<p>:checked，单选框或复选框被选中。</p>
<h2 id="12、请用CSS实现：一个矩形内容，有投影，有圆角，hover状态慢慢变透明。"><a href="#12、请用CSS实现：一个矩形内容，有投影，有圆角，hover状态慢慢变透明。" class="headerlink" title="12、请用CSS实现：一个矩形内容，有投影，有圆角，hover状态慢慢变透明。"></a>12、请用CSS实现：一个矩形内容，有投影，有圆角，hover状态慢慢变透明。</h2><p>css属性的熟练程度和实践经验</p>
<h2 id="13、描述下CSS3里实现元素动画的方法"><a href="#13、描述下CSS3里实现元素动画的方法" class="headerlink" title="13、描述下CSS3里实现元素动画的方法"></a>13、描述下CSS3里实现元素动画的方法</h2><p>动画相关属性的熟悉程度</p>
<h2 id="14、html5-CSS3有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？"><a href="#14、html5-CSS3有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？" class="headerlink" title="14、html5\CSS3有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？"></a>14、html5\CSS3有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h2><p>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，地理定位等功能的增加。</p>
<p>* 绘画 canvas 元素</p>
<p> 用于媒介回放的 video 和 audio 元素</p>
<p> 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；</p>
<p> sessionStorage 的数据在浏览器关闭后自动删除</p>
<p> 语意化更好的内容元素，比如 article、footer、header、nav、section</p>
<p> 表单控件，calendar、date、time、email、url、search</p>
<p> CSS3实现圆角，阴影，对文字加特效，增加了更多的CSS选择器 多背景 rgba</p>
<p> 新的技术webworker, websockt, Geolocation</p>
<p>移除的元素</p>
<p>纯表现的元素：basefont，big，center，font, s，strike，tt，u；</p>
<p>对可用性产生负面影响的元素：frame，frameset，noframes；</p>
<p>* 是IE8/IE7/IE6支持通过document.createElement方法产生的标签，</p>
<p> 可以利用这一特性让这些浏览器支持HTML5新标签，</p>
<p> 浏览器支持新标签后，还需要添加标签默认的样式：</p>
<p>* 当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架</p>
<!--[if lt IE 9]>

<script> src="http://html5shim.googlecode.com/svn/trunk/html5.js"</script>

<![endif]-->

<h2 id="15、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作-一个满屏-品-字布局-如何设计"><a href="#15、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作-一个满屏-品-字布局-如何设计" class="headerlink" title="15、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作? 一个满屏 品 字布局 如何设计?"></a>15、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作? 一个满屏 品 字布局 如何设计?</h2><p>* 首先划分成头部、body、脚部；。。。。。 </p>
<p>* 实现效果图是最基本的工作，精确到2px；</p>
<p> 与设计师，产品经理的沟通和项目的参与</p>
<p> 做好的页面结构，页面重构和用户体验</p>
<p> 处理hack，兼容、写出优美的代码格式</p>
<p> 针对服务器的优化、拥抱 HTML5。</p>
<h2 id="16、你能描述一下渐进增强和优雅降级之间的不同吗"><a href="#16、你能描述一下渐进增强和优雅降级之间的不同吗" class="headerlink" title="16、你能描述一下渐进增强和优雅降级之间的不同吗**?**"></a><strong>16<strong><strong>、</strong></strong>你能描述一下渐进增强和优雅降级之间的不同吗**</strong>?**</h2><p>渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p>
<p>优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>
<p>　　区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。　</p>
<p>　　“优雅降级”观点</p>
<p>　　“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。</p>
<p>　　在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>
<p>　　“渐进增强”观点</p>
<p>　　“渐进增强”观点则认为应关注于内容本身。</p>
<p>　　内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</p>
<p>　　<strong>那么问题了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？</strong></p>
<h2 id="17-、为什么利用多个域名来存储网站资源会更有效？"><a href="#17-、为什么利用多个域名来存储网站资源会更有效？" class="headerlink" title="17****、为什么利用多个域名来存储网站资源会更有效？"></a><strong>17****、为什么利用多个域名来存储网站资源会更有效？</strong></h2><p>CDN缓存更方便 </p>
<p>突破浏览器并发限制 </p>
<p>节约cookie带宽 </p>
<p>节约主域名的连接数，优化页面响应速度 </p>
<p>防止不必要的安全问题</p>
<h2 id="18、请谈一下你对网页标准和标准制定机构重要性的理解。"><a href="#18、请谈一下你对网页标准和标准制定机构重要性的理解。" class="headerlink" title="18、请谈一下你对网页标准和标准制定机构重要性的理解。"></a>18、<strong>请谈一下你对网页标准和标准制定机构重要性的理解。</strong></h2><p>　　（无标准答案）网页标准和标准制定机构都是为了能让web发展的更‘健康’，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。</p>
<h2 id="19、请描述一下cookies，sessionStorage和localStorage的区别？"><a href="#19、请描述一下cookies，sessionStorage和localStorage的区别？" class="headerlink" title="19、请描述一下cookies，sessionStorage和localStorage的区别？"></a>19、<strong>请描述一下cookies，sessionStorage和localStorage的区别？</strong></h2><p>　　sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</p>
<p><strong>web storage<strong><strong>和</strong></strong>cookie****的区别</strong></p>
<p>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。</p>
<p>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。</p>
<h2 id="20-、知道css有个content属性吗？有什么作用？有什么应用？"><a href="#20-、知道css有个content属性吗？有什么作用？有什么应用？" class="headerlink" title="20****、知道css有个content属性吗？有什么作用？有什么应用？"></a><strong>20****、知道css有个content属性吗？有什么作用？有什么应用？</strong></h2><p>知道。css的content属性专门应用在 before/after 伪元素上，用来插入生成内容。最常见的应用是利用伪类清除浮动。</p>
<p>//一种常见利用伪类清除浮动的代码</p>
<p>.clearfix:after {</p>
<p>  content:”.”; //这里利用到了content属性</p>
<p>  display:block; </p>
<p>  height:0;</p>
<p>  visibility:hidden; </p>
<p>  clear:both; }</p>
<p>.clearfix { </p>
<p>  *zoom:1; </p>
<p>}</p>
<p>after伪元素通过 content 在元素的后面生成了内容为一个点的块级素，再利用clear:both清除浮动。</p>
<p>　　那么问题继续还有，<strong>知道css计数器（序列数字字符自动递增）吗？如何通过css content属性实现css计数器？</strong></p>
<p>答案：css计数器是通过设置counter-reset 、counter-increment 两个属性 、及 counter()/counters()一个方法配合after / before 伪类实现。 </p>
<h2 id="21、如何在-HTML5-页面中嵌入音频"><a href="#21、如何在-HTML5-页面中嵌入音频" class="headerlink" title="21、如何在 HTML5 页面中嵌入音频?"></a>21、如何在 HTML5 页面中嵌入音频?</h2><p>HTML 5 包含嵌入音频文件的标准方式，支持的格式包括 MP3、Wav 和 Ogg：</p>
<p><audio controls> </p>
 <source src="jamshed.mp3" type="audio/mpeg"> 

<p>  Your browser does’nt support audio embedding feature. </p>
</audio>

<h2 id="22、如何在-HTML5-页面中嵌入视频？"><a href="#22、如何在-HTML5-页面中嵌入视频？" class="headerlink" title="22、如何在 HTML5 页面中嵌入视频？"></a>22、如何在 HTML5 页面中嵌入视频？</h2><p>和音频一样，HTML5 定义了嵌入视频的标准方法，支持的格式包括：MP4、WebM 和 Ogg：</p>
<p><video width="450" height="340" controls> </p>
 <source src="jamshed.mp4" type="video/mp4"> 

<p>  Your browser does’nt support video embedding feature. </p>
</video> 

<h2 id="23、HTML5-引入什么新的表单属性？"><a href="#23、HTML5-引入什么新的表单属性？" class="headerlink" title="23、HTML5 引入什么新的表单属性？"></a>23、HTML5 引入什么新的表单属性？</h2><p>Datalist  datetime  output  keygen date month week time number  range  emailurl</p>
<h2 id="24、CSS3新增伪类有那些？"><a href="#24、CSS3新增伪类有那些？" class="headerlink" title="24、CSS3新增伪类有那些？"></a>24、CSS3新增伪类有那些？</h2><p> p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。</p>
<p>  p:last-of-type 选择属于其父元素的最后 <p> 元素的每个 <p> 元素。</p>
<p>  p:only-of-type 选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。</p>
<p>  p:only-child  选择属于其父元素的唯一子元素的每个 <p> 元素。</p>
<p>  p:nth-child(2) 选择属于其父元素的第二个子元素的每个 <p> 元素。</p>
<p>  :enabled、:disabled 控制表单控件的禁用状态。</p>
<p>:checked，单选框或复选框被选中。</p>
<h2 id="25、-写-描述一段语义的html代码吧。"><a href="#25、-写-描述一段语义的html代码吧。" class="headerlink" title="25、(写)描述一段语义的html代码吧。"></a>25、(写)描述一段语义的html代码吧。</h2><p>（HTML5中新增加的很多标签（如：<article>、<nav>、<header>和<footer>等）</p>
<p>就是基于语义化设计原则） </p>
<p>&lt; div id=”header”&gt;</p>
<p>&lt; h1&gt;标题&lt; /h1&gt;</p>
<p>&lt; h2&gt;专注Web前端技术&lt; /h2&gt;</p>
<p>&lt; /div&gt;</p>
<p>语义 HTML 具有以下特性：</p>
<p>文字包裹在元素中，用以反映内容。例如：</p>
<p>段落包含在 <p> 元素中。</p>
<p>顺序表包含在<ol>元素中。</p>
<p>从其他来源引用的大型文字块包含在<blockquote>元素中。</p>
<p>HTML 元素不能用作语义用途以外的其他目的。例如：</p>
<h1>包含标题，但并非用于放大文本。


<blockquote>包含大段引述，但并非用于文本缩进。


<p>空白段落元素 ( <p></p> ) 并非用于跳行。</p>
<p>文本并不直接包含任何样式信息。例如：</p>
<p>不使用 <font> 或 <center> 等格式标记。</p>
<p>类或 ID 中不引用颜色或位置。</p>
<h2 id="26-cookie在浏览器和服务器间来回传递。-sessionStorage和localStorage区别"><a href="#26-cookie在浏览器和服务器间来回传递。-sessionStorage和localStorage区别" class="headerlink" title="26.cookie在浏览器和服务器间来回传递。 sessionStorage和localStorage区别"></a>26.cookie在浏览器和服务器间来回传递。 sessionStorage和localStorage区别</h2><p>sessionStorage和localStorage的存储空间更大；</p>
<p>sessionStorage和localStorage有更多丰富易用的接口；</p>
<p>sessionStorage和localStorage各自独立的存储空间；</p>
<h2 id="27、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？"><a href="#27、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？" class="headerlink" title="27、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？"></a>27、html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h2><p>* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。</p>
<p>* 绘画 canvas </p>
<p> 用于媒介回放的 video 和 audio 元素 </p>
<p> 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；</p>
<p> sessionStorage 的数据在浏览器关闭后自动删除</p>
<p> 语意化更好的内容元素，比如 article、footer、header、nav、section </p>
<p> 表单控件，calendar、date、time、email、url、search </p>
<p> 新的技术webworker, websockt, Geolocation</p>
<p>* 移除的元素</p>
<p>纯表现的元素：basefont，big，center，font, s，strike，tt，u；</p>
<p>对可用性产生负面影响的元素：frame，frameset，noframes；</p>
<p>支持HTML5新标签：</p>
<p>* IE8/IE7/IE6支持通过document.createElement方法产生的标签，</p>
<p> 可以利用这一特性让这些浏览器支持HTML5新标签，</p>
<p> 浏览器支持新标签后，还需要添加标签默认的样式：</p>
<p>* 当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架</p>
<!--[if lt IE 9]>

<script> src="http://html5shim.googlecode.com/svn/trunk/html5.js"</script>

<![endif]-->

<h2 id="28、如何区分：-DOCTYPE声明-新增的结构元素-功能元素"><a href="#28、如何区分：-DOCTYPE声明-新增的结构元素-功能元素" class="headerlink" title="28、如何区分： DOCTYPE声明\新增的结构元素\功能元素"></a>28、如何区分： DOCTYPE声明\新增的结构元素\功能元素</h2><h2 id="29、语义化的理解？"><a href="#29、语义化的理解？" class="headerlink" title="29、语义化的理解？"></a>29、语义化的理解？</h2><p>用正确的标签做正确的事情！</p>
<p>html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；</p>
<p>在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。</p>
<p>搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。</p>
<p>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p>
<h2 id="30、HTML5的离线储存？"><a href="#30、HTML5的离线储存？" class="headerlink" title="30、HTML5的离线储存？"></a>30、HTML5的离线储存？</h2><p>localStorage  长期存储数据，浏览器关闭后数据不丢失；</p>
<p>sessionStorage 数据在浏览器关闭后自动删除。</p>
<h2 id="31、写出HTML5的文档声明方式"><a href="#31、写出HTML5的文档声明方式" class="headerlink" title="31、写出HTML5的文档声明方式"></a>31、写出HTML5的文档声明方式</h2><table>
<thead>
<tr>
<th></th>
<th><DOCYPE html></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="32、HTML5和CSS3的新标签"><a href="#32、HTML5和CSS3的新标签" class="headerlink" title="32、HTML5和CSS3的新标签"></a>32、HTML5和CSS3的新标签</h2><table>
<thead>
<tr>
<th></th>
<th>HTML5： nav, footer, header, section, hgroup, video, time, canvas, audio…  CSS3: RGBA, opacity, text-shadow, box-shadow, border-radius, border-image,   border-color, transform…;</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="33、自己对标签语义化的理解"><a href="#33、自己对标签语义化的理解" class="headerlink" title="33、自己对标签语义化的理解"></a>33、自己对标签语义化的理解</h2><p>  在我看来，语义化就是比如说一个段落， 那么我们就应该用 <p>标签来修饰，标题就应该用 &lt;h?&gt;标签等。符合文档语义的标签。</p>
<h1 id="五、移动web开发"><a href="#五、移动web开发" class="headerlink" title="五、移动web开发"></a>五、移动web开发</h1><h2 id="1、移动端常用类库及优缺点"><a href="#1、移动端常用类库及优缺点" class="headerlink" title="1、移动端常用类库及优缺点"></a>1、移动端常用类库及优缺点</h2><p>知识面宽度，多多益善</p>
<p>Jquery,zepto</p>
<p>Underscore 提供类似prototype.js的功能,但没有继承任何js内置对象</p>
<p>RequireJS 你可以顺序读取仅需要相关依赖模块</p>
<h1 id="六、Ajax"><a href="#六、Ajax" class="headerlink" title="六、Ajax"></a>六、Ajax</h1><h2 id="1、Ajax-是什么-如何创建一个Ajax？"><a href="#1、Ajax-是什么-如何创建一个Ajax？" class="headerlink" title="1、Ajax 是什么? 如何创建一个Ajax？"></a>1、Ajax 是什么? 如何创建一个Ajax？</h2><p>Ajax并不算是一种新的技术，全称是asynchronous javascript and xml，可以说是已有技术的组合，主要用来实现客户端与服务器端的异步通信效果，实现页面的局部刷新，早期的浏览器并不能原生支持ajax，可以使用隐藏帧（iframe）方式变相实现异步效果，后来的浏览器提供了对ajax的原生支持</p>
<p>使用ajax原生方式发送请求主要通过XMLHttpRequest(标准浏览器)、ActiveXObject(IE浏览器)对象实现异步通信效果</p>
<p>基本步骤：</p>
<p>var xhr =null;//创建对象 </p>
<p>if(window.XMLHttpRequest){</p>
<p>  xhr = new XMLHttpRequest();</p>
<p>}else{</p>
<p>  xhr = new ActiveXObject(“Microsoft.XMLHTTP”);</p>
<p>}</p>
<p>   xhr.open(“方式”,”地址”,”标志位”);//初始化请求 </p>
<p>   xhr.setRequestHeader(“”,””);//设置http头信息</p>
<p>   xhr.onreadystatechange =function(){}//指定回调函数 </p>
<p>   xhr.send();//发送请求 </p>
<p>js框架（jQuery/EXTJS等）提供的ajax API对原生的ajax进行了封装，熟悉了基础理论，再学习别的框架就会得心应手，好多都是换汤不换药的内容 </p>
<h2 id="2、同步和异步的区别"><a href="#2、同步和异步的区别" class="headerlink" title="2、同步和异步的区别?"></a>2、同步和异步的区别?</h2><p>同步：阻塞的</p>
<p>-张三叫李四去吃饭，李四一直忙得不停，张三一直等着，直到李四忙完两个人一块去吃饭</p>
<p>=浏览器向服务器请求数据，服务器比较忙，浏览器一直等着（页面白屏），直到服务器返回数据，浏览器才能显示页面</p>
<p>异步：非阻塞的</p>
<p>-张三叫李四去吃饭，李四在忙，张三说了一声然后自己就去吃饭了，李四忙完后自己去吃</p>
<p>=浏览器向服务器请求数据，服务器比较忙，浏览器可以自如的干原来的事情（显示页面），服务器返回数据的时候通知浏览器一声，浏览器把返回的数据再渲染到页面，局部更新</p>
<h2 id="3、如何解决跨域问题"><a href="#3、如何解决跨域问题" class="headerlink" title="3、如何解决跨域问题?"></a>3、如何解决跨域问题?</h2><p>理解跨域的概念：协议、域名、端口都相同才同域，否则都是跨域</p>
<p>出于安全考虑，服务器不允许ajax跨域获取数据，但是可以跨域获取文件内容，所以基于这一点，可以动态创建script标签，使用标签的src属性访问js文件的形式获取js脚本，并且这个js脚本中的内容是<strong>函数调用</strong>，该函数调用的参数是服务器返回的数据，为了获取这里的参数数据，需要事先在页面中定义回调函数，在回调函数中处理服务器返回的数据，这就是解决跨域问题的主流解决方案</p>
<h2 id="4、页面编码和被请求的资源编码如果不一致如何处理？"><a href="#4、页面编码和被请求的资源编码如果不一致如何处理？" class="headerlink" title="4、页面编码和被请求的资源编码如果不一致如何处理？"></a>4、页面编码和被请求的资源编码如果不一致如何处理？</h2><p>对于ajax请求传递的参数，如果是get请求方式，参数如果传递中文，在有些浏览器会乱码，不同的浏览器对参数编码的处理方式不同，所以对于get请求的参数需要使用 encodeURIComponent函数对参数进行编码处理，后台开发语言都有相应的解码api。对于post请求不需要进行编码</p>
<h2 id="5、简述ajax-的过程。"><a href="#5、简述ajax-的过程。" class="headerlink" title="5、简述ajax 的过程。"></a>5、简述ajax 的过程。</h2><p>\1. 创建XMLHttpRequest对象,也就是创建一个异步调用对象</p>
<p>\2. 创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息</p>
<p>\3. 设置响应HTTP请求状态变化的函数</p>
<p>\4. 发送HTTP请求</p>
<p>\5. 获取异步调用返回的数据</p>
<p>\6. 使用JavaScript和DOM实现局部刷新</p>
<h2 id="6、阐述一下异步加载。"><a href="#6、阐述一下异步加载。" class="headerlink" title="6、阐述一下异步加载。"></a>6、阐述一下异步加载。</h2><p>\1. 异步加载的方案： 动态插入 script 标签</p>
<p>\2. 通过 ajax 去获取 js 代码，然后通过 eval 执行</p>
<p>\3. script 标签上添加 defer 或者 async 属性</p>
<p>\4. 创建并插入 iframe，让它异步执行 js</p>
<h2 id="7、请解释一下-JavaScript-的同源策略。"><a href="#7、请解释一下-JavaScript-的同源策略。" class="headerlink" title="7、请解释一下 JavaScript 的同源策略。"></a>7、请解释一下 JavaScript 的同源策略。</h2><p>同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准。它最早出自Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。所谓同源指的是：协议，域名，端口相同，同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。</p>
<h2 id="8、GET和POST的区别，何时使用POST？"><a href="#8、GET和POST的区别，何时使用POST？" class="headerlink" title="8、GET和POST的区别，何时使用POST？"></a>8、GET和POST的区别，何时使用POST？</h2><p>GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符，有的浏览器是8000个字符</p>
<p>POST：一般用于修改服务器上的资源，对所发送的信息没有限制</p>
<p>在以下情况中，请使用 POST 请求：</p>
<p>\1. 无法使用缓存文件（更新服务器上的文件或数据库）</p>
<p>\2. 向服务器发送大量数据（POST 没有数据量限制）</p>
<p>\3. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</p>
<h2 id="9、ajax-是什么-ajax-的交互模型-同步和异步的区别-如何解决跨域问题"><a href="#9、ajax-是什么-ajax-的交互模型-同步和异步的区别-如何解决跨域问题" class="headerlink" title="9、ajax 是什么?ajax 的交互模型?同步和异步的区别?如何解决跨域问题?"></a>9、ajax 是什么?ajax 的交互模型?同步和异步的区别?如何解决跨域问题?</h2><p> \1. 通过异步模式，提升了用户体验</p>
<p> \2. 优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用</p>
<p>\3. Ajax在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。</p>
<h2 id="10、-Ajax的最大的特点是什么。"><a href="#10、-Ajax的最大的特点是什么。" class="headerlink" title="10、 Ajax的最大的特点是什么。"></a>10、 Ajax的最大的特点是什么。</h2><p>  Ajax可以实现异步通信效果，实现页面局部刷新，带来更好的用户体验；按需获取数据，节约带宽资源；</p>
<h2 id="11、ajax的缺点"><a href="#11、ajax的缺点" class="headerlink" title="11、ajax的缺点"></a>11、ajax的缺点</h2><p> 1、ajax不支持浏览器back按钮。</p>
<p> 2、安全问题 AJAX暴露了与服务器交互的细节。</p>
<p> 3、对搜索引擎的支持比较弱。</p>
<p> 4、破坏了程序的异常机制。</p>
<h2 id="12、ajax请求的时候get-和post方式的区别"><a href="#12、ajax请求的时候get-和post方式的区别" class="headerlink" title="12、ajax请求的时候get 和post方式的区别"></a>12、ajax请求的时候get 和post方式的区别</h2><p>get一般用来进行查询操作，url地址有长度限制，请求的参数都暴露在url地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。</p>
<p>post请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于http请求体中，数据不会暴漏在url地址中。</p>
<h2 id="13、解释jsonp的原理，以及为什么不是真正的ajax"><a href="#13、解释jsonp的原理，以及为什么不是真正的ajax" class="headerlink" title="13、解释jsonp的原理，以及为什么不是真正的ajax"></a>13、解释jsonp的原理，以及为什么不是真正的ajax</h2><p>　　Jsonp并不是一种数据格式，而json是一种数据格式，jsonp是用来解决跨域获取数据的一种解决方案，具体是通过动态创建script标签，然后通过标签的src属性获取js文件中的js脚本，该脚本的内容是一个函数调用，参数就是服务器返回的数据，为了处理这些返回的数据，需要事先在页面定义好回调函数，本质上使用的并不是ajax技术</p>
<h2 id="14、什么是Ajax和JSON，它们的优缺点。"><a href="#14、什么是Ajax和JSON，它们的优缺点。" class="headerlink" title="14、什么是Ajax和JSON，它们的优缺点。"></a>14、什么是Ajax和JSON，它们的优缺点。</h2><p>Ajax是全称是asynchronous JavaScript andXML，即异步JavaScript和xml，用于在Web页面中实现异步数据交互，实现页面局部刷新。</p>
<p>优点：可以使得页面不重载全部内容的情况下加载局部内容，降低数据传输量，避免用户不断刷新或者跳转页面，提高用户体验</p>
<p>缺点：对搜索引擎不友好；要实现ajax下的前后退功能成本较大；可能造成请求数的增加跨域问题限制；</p>
<p>JSON是一种轻量级的数据交换格式，ECMA的一个子集</p>
<p>优点：轻量级、易于人的阅读和编写，便于机器（JavaScript）解析，支持复合数据类型（数组、对象、字符串、数字）</p>
<h2 id="15、http常见的状态码有那些？分别代表是什么意思？"><a href="#15、http常见的状态码有那些？分别代表是什么意思？" class="headerlink" title="15、http常见的状态码有那些？分别代表是什么意思？"></a>15、http常见的状态码有那些？分别代表是什么意思？</h2><p>200 - 请求成功</p>
<p>301 - 资源（网页等）被永久转移到其它URL</p>
<p>404 - 请求的资源（网页等）不存在</p>
<p>500 - 内部服务器错误</p>
<h2 id="16、一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？"><a href="#16、一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="16、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"></a>16、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h2><p>分为4个步骤：</p>
<p>\1. 当发送一个 URL 请求时，不管这个 URL 是 Web 页面的 URL 还是 Web 页面上每个资源的 URL，浏览器都会开启一个线程来处理这个请求，同时在远程 DNS 服务器上启动一个 DNS 查询。这能使浏览器获得请求对应的 IP 地址。</p>
<p>\2. 浏览器与远程 Web 服务器通过 TCP 三次握手协商来建立一个 TCP/IP 连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。</p>
<p>\3. 一旦 TCP/IP 连接建立，浏览器会通过该连接向远程服务器发送 HTTP 的 GET 请求。远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。</p>
<p>\4. 此时，Web 服务器提供资源服务，客户端开始下载资源。</p>
<h2 id="17、ajax请求的时候get-和post方式的区别"><a href="#17、ajax请求的时候get-和post方式的区别" class="headerlink" title="17、ajax请求的时候get 和post方式的区别"></a>17、ajax请求的时候get 和post方式的区别</h2><p>get一般用来进行查询操作，url地址有长度限制，请求的参数都暴露在url地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。</p>
<p>post请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于http请求体中，数据不会暴漏在url地址中。</p>
<h2 id="18、ajax请求时，如何解释json数据"><a href="#18、ajax请求时，如何解释json数据" class="headerlink" title="18、ajax请求时，如何解释json数据"></a>18、ajax请求时，如何解释json数据</h2><p>使用eval() 或者JSON.parse() 鉴于安全性考虑，推荐使用JSON.parse()更靠谱，对数据的安全性更好。</p>
<h2 id="19、-javascript的本地对象，内置对象和宿主对象"><a href="#19、-javascript的本地对象，内置对象和宿主对象" class="headerlink" title="19、.javascript的本地对象，内置对象和宿主对象"></a>19、.javascript的本地对象，内置对象和宿主对象</h2><p>本地对象为独立于宿主环境的ECMAScript提供的对象，包括Array Object RegExp等可以new实例化的对象</p>
<p>内置对象为Gload，Math 等不可以实例化的(他们也是本地对象，内置对象是本地对象的一个子集)</p>
<p>宿主对象为所有的非本地对象，所有的BOM和DOM对象都是宿主对象，如浏览器自带的document,window 等对象</p>
<h2 id="20、为什么利用多个域名来存储网站资源会更有效？"><a href="#20、为什么利用多个域名来存储网站资源会更有效？" class="headerlink" title="20、为什么利用多个域名来存储网站资源会更有效？"></a>20、为什么利用多个域名来存储网站资源会更有效？</h2><p>确保用户在不同地区能用最快的速度打开网站，其中某个域名崩溃用户也能通过其他郁闷访问网站，并且不同的资源放到不同的服务器上有利于减轻单台服务器的压力。</p>
<h2 id="21、请说出三种减低页面加载时间的方法"><a href="#21、请说出三种减低页面加载时间的方法" class="headerlink" title="21、请说出三种减低页面加载时间的方法"></a>21、请说出三种减低页面加载时间的方法</h2><p>1、压缩css、js文件<br> 2、合并js、css文件，减少http请求<br> 3、外部js、css文件放在最底下<br> 4、减少dom操作，尽可能用变量替代不必要的dom操作</p>
<h2 id="22、HTTP状态码都有那些。"><a href="#22、HTTP状态码都有那些。" class="headerlink" title="22、HTTP状态码都有那些。"></a>22、HTTP状态码都有那些。</h2><p>200 OK   //客户端请求成功</p>
<p>400 Bad Request //客户端请求有语法错误，不能被服务器所理解</p>
<p>403 Forbidden //服务器收到请求，但是拒绝提供服务</p>
<p>404 Not Found //请求资源不存在，输入了错误的URL</p>
<p>500 Internal Server Error //服务器发生不可预期的错误</p>
<p>503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记</title>
    <url>/2021/07/21/TypeScript/</url>
    <content><![CDATA[<h1 id="第一章-快速入门"><a href="#第一章-快速入门" class="headerlink" title="第一章 快速入门"></a>第一章 快速入门</h1><span id="more"></span>

<h2 id="0、TypeScript简介"><a href="#0、TypeScript简介" class="headerlink" title="0、TypeScript简介"></a>0、TypeScript简介</h2><ol>
<li><p>TypeScript是<strong>JavaScript的超集</strong>。</p>
</li>
<li><p>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</p>
</li>
<li><p>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</p>
</li>
<li><p>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</p>
</li>
</ol>
<ul>
<li>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；</li>
<li>TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；</li>
<li>TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；</li>
<li>同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li>
</ul>
<h2 id="1、TypeScript-开发环境搭建"><a href="#1、TypeScript-开发环境搭建" class="headerlink" title="1、TypeScript 开发环境搭建"></a>1、TypeScript 开发环境搭建</h2><ol>
<li><p>下载Node.js</p>
<ul>
<li>64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li>
<li>32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li>
</ul>
</li>
<li><p>安装Node.js</p>
</li>
<li><p>使用npm全局安装typescript</p>
<ul>
<li>进入命令行</li>
<li>输入：npm i -g typescript</li>
</ul>
</li>
<li><p>创建一个ts文件</p>
</li>
<li><p>使用tsc对ts文件进行<strong>编译</strong></p>
<ul>
<li><p>进入命令行</p>
</li>
<li><p>进入ts文件所在目录</p>
</li>
<li><p>执行命令：tsc xxx.ts</p>
</li>
</ul>
</li>
</ol>
<h2 id="2、基本类型"><a href="#2、基本类型" class="headerlink" title="2、基本类型"></a>2、基本类型</h2><ul>
<li><h4 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h4><ul>
<li><p>类型声明是TS非常重要的一个特点</p>
</li>
<li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p>
</li>
<li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</p>
</li>
<li><p><strong>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</strong></p>
</li>
<li><p>语法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="自动类型判断"><a href="#自动类型判断" class="headerlink" title="自动类型判断"></a>自动类型判断</h4><ul>
<li>TS拥有自动的类型判断机制</li>
<li><strong>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</strong></li>
<li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</li>
</ul>
</li>
<li><h4 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h4><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">例子</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">number</td>
<td align="center">1, -33, 2.5</td>
<td align="center">任意数字</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">‘hi’, “hi”, <code>hi</code></td>
<td align="center">任意字符串</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">true、false</td>
<td align="center">布尔值true或false</td>
</tr>
<tr>
<td align="center">字面量</td>
<td align="center">其本身</td>
<td align="center">限制变量的值就是该字面量的值</td>
</tr>
<tr>
<td align="center">any</td>
<td align="center">*</td>
<td align="center">任意类型</td>
</tr>
<tr>
<td align="center">unknown</td>
<td align="center">*</td>
<td align="center">类型安全的any</td>
</tr>
<tr>
<td align="center">void</td>
<td align="center">空值（undefined）</td>
<td align="center">没有值（或undefined）</td>
</tr>
<tr>
<td align="center">never</td>
<td align="center">没有值</td>
<td align="center">不能是任何值</td>
</tr>
<tr>
<td align="center">object</td>
<td align="center">{name:’孙悟空’}</td>
<td align="center">任意的JS对象</td>
</tr>
<tr>
<td align="center">array</td>
<td align="center">[1,2,3]</td>
<td align="center">任意JS数组</td>
</tr>
<tr>
<td align="center">tuple</td>
<td align="center">[4,5]</td>
<td align="center">元素，TS新增类型，固定长度数组</td>
</tr>
<tr>
<td align="center">enum</td>
<td align="center">enum{A, B}</td>
<td align="center">枚举，TS中新增类型</td>
</tr>
</tbody></table>
</li>
<li><p>number</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> decimal: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hex: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binary: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octal: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> big: bigint = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>boolean</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>string</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> color: <span class="built_in">string</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fullName: <span class="built_in">string</span> = <span class="string">`Bob Bobbington`</span>;</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;fullName&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>字面量</p>
<ul>
<li><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p>
</li>
<li><p>```typescript<br>let color: ‘red’ | ‘blue’ | ‘black’;<br>let num: 1 | 2 | 3 | 4 | 5;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- any</span><br><span class="line"></span><br><span class="line">  - 相当于关闭该变量的ts语法，开发时不建议使用</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    let d: any = 4;</span><br><span class="line">    d = &#x27;hello&#x27;;</span><br><span class="line">    d = true;</span><br><span class="line">    </span><br><span class="line">    // 声明变量如果不指定类型，则TS解析器会自动判断变量的类型为any （隐式的any）</span><br><span class="line">    let d;</span><br><span class="line">    d = 10;</span><br><span class="line">    d = &#x27;hello&#x27;;</span><br><span class="line">    d = true;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>unknown</p>
<ul>
<li><p>区别any</p>
<ul>
<li>any，可以赋值给任意变量</li>
<li>unknown类型的变量，不能直接赋值给其他变量</li>
</ul>
</li>
<li><p>```typescript<br>let notSure: unknown = 4;<br>notSure = ‘hello’;<br>// unknown 实际上就是一个类型安全的any</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- void</span><br><span class="line"></span><br><span class="line">  ```typescript</span><br><span class="line">  let unusable: void = undefined;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>never</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>object（没啥用）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: <span class="built_in">object</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.&#123;&#125; 用来指定对象中可以包含哪些属性// 语法：&#123;属性名:属性值,属性名:属性值&#125;// 在属性名后边加上?，表示属性是可选的let b: &#123;name: string, age?: number&#125;;b = &#123;name: &#x27;孙悟空&#x27;, age: 18&#125;;// 2.[propName: string]: any 表示任意类型的属性let c: &#123;name: string, [propName: string]: any&#125;;c = &#123;name: &#x27;猪八戒&#x27;, age: 18, gender: &#x27;男&#x27;&#125;;/**  3.设置函数结构的类型声明：*       语法：(形参:类型, 形参:类型 ...) =&gt; 返回值* */let d: (a: number ,b: number)=&gt;number;let d = function (n1: string, n2: string): number&#123;   return 10;&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>array</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**   数组的类型声明：*       类型[]*       Array&lt;类型&gt;* */</span><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="comment">// string[] 表示字符串数组let e: string[];// number[] 表示数值数值let f: number[];let g: Array&lt;number&gt;;</span></span><br></pre></td></tr></table></figure></li>
<li><p>tuple</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**   元组，元组就是固定长度的数组*       语法：[类型, 类型, 类型]* */</span><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];x = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>]; </span><br></pre></td></tr></table></figure></li>
<li><p>enum</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//enum 枚举enum Color &#123;  Red,  Green,  Blue,&#125;let c: Color = Color.Green;enum Color &#123;  Red = 1,  Green,  Blue,&#125;let c: Color = Color.Green;enum Color &#123;  Red = 1,  Green = 2,  Blue = 4,&#125;let c: Color = Color.Green;// 补充let j: &#123; name: string &#125; &amp; &#123; age: number &#125;;// j = &#123;name: &#x27;孙悟空&#x27;, age: 18&#125;;</span></span><br></pre></td></tr></table></figure></li>
<li><p>类型别名</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> myType = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;<span class="keyword">let</span> k: myType;<span class="keyword">let</span> l: myType;<span class="keyword">let</span> m: myType;k = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>类型断言</p>
<ul>
<li><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，<strong>可以通过类型断言来告诉编译器变量的类型</strong>，类比强制转换。</p>
</li>
<li><p>断言有两种形式：</p>
<ul>
<li><p>第一种</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: unknown = <span class="string">&quot;this is a string&quot;</span>;<span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure></li>
<li><p>第二种</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: unknown = <span class="string">&quot;this is a string&quot;</span>;<span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3、编译选项"><a href="#3、编译选项" class="headerlink" title="3、编译选项"></a>3、编译选项</h2><h3 id="自动编译文件"><a href="#自动编译文件" class="headerlink" title="自动编译文件"></a>自动编译文件</h3><ul>
<li><p>编译文件时，使用 <code>-w</code> 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p>
</li>
<li><p>示例：</p>
<ul>
<li><p>```powershell<br>tsc xxx.ts -w</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 自动编译整个项目</span><br><span class="line"></span><br><span class="line">- 如果直接使用**tsc**指令，则可以自动将当前项目下的所有ts文件编译为js文件。</span><br><span class="line">- 但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 **tsconfig.json**</span><br><span class="line">- tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译</span><br><span class="line"></span><br><span class="line">#### 配置选项</span><br><span class="line"></span><br><span class="line">##### **include**</span><br><span class="line"></span><br><span class="line">- 定义希望被编译文件所在的目录</span><br><span class="line"></span><br><span class="line">- 默认值：[&quot;\*\*/\*&quot;]</span><br><span class="line"></span><br><span class="line">- 示例：</span><br><span class="line"></span><br><span class="line">  ```json</span><br><span class="line">  &quot;include&quot;:[    &quot;src/**/*&quot;,     &quot;tests/**/*&quot;]// &quot;**&quot;表示任意目录，“*”表示任意文件</span><br></pre></td></tr></table></figure></li>
<li><p>上述示例中，所有src目录和tests目录下的文件都会被编译</p>
</li>
</ul>
</li>
</ul>
<h5 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a><strong>exclude</strong></h5><ul>
<li><p>定义需要排除在外的目录</p>
</li>
<li><p>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</p>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;./src/hello/**/*&quot;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>上述示例中，src下hello目录下的文件都不会被编译</li>
</ul>
</li>
</ul>
<h5 id="extends"><a href="#extends" class="headerlink" title="extends"></a><strong>extends</strong></h5><ul>
<li><p>定义被继承的配置文件</p>
</li>
<li><p>示例：</p>
<ul>
<li><p>```json<br>“extends”: “./configs/base”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 上述示例中，当前配置文件中会自动包含config目录下**base.json**中的所有配置信息</span><br><span class="line"></span><br><span class="line">##### **files**</span><br><span class="line"></span><br><span class="line">- 指定被编译文件的列表，只有需要编译的文件少时才会用到</span><br><span class="line"></span><br><span class="line">- 示例：</span><br><span class="line"></span><br><span class="line">  - ```json</span><br><span class="line">    &quot;files&quot;: [    &quot;core.ts&quot;,    &quot;sys.ts&quot;,    &quot;types.ts&quot;,    &quot;scanner.ts&quot;,    &quot;parser.ts&quot;,    &quot;utilities.ts&quot;,    &quot;binder.ts&quot;,    &quot;checker.ts&quot;,    &quot;tsc.ts&quot;  ]</span><br></pre></td></tr></table></figure></li>
<li><p>列表中的文件都会被TS编译器所编译</p>
</li>
</ul>
</li>
</ul>
<h5 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a><strong>compilerOptions</strong></h5><ul>
<li><p><strong>编译选项</strong>是配置文件中非常重要也比较复杂的配置选项</p>
</li>
<li><p>在compilerOptions中包含多个子选项，用来完成对编译的配置</p>
</li>
</ul>
<h6 id="项目选项"><a href="#项目选项" class="headerlink" title="项目选项"></a>项目选项</h6><ul>
<li><p><strong>target</strong></p>
<ul>
<li><p>设置ts代码编译的目标版本</p>
</li>
<li><p>可选值：</p>
<ul>
<li>ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li>
</ul>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES6&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>lib</strong></p>
<ul>
<li><p>指定代码运行时所包含的库（宿主环境）</p>
</li>
<li><p>可选值：</p>
<ul>
<li>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</li>
</ul>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES6&quot;</span>,    <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;ES6&quot;</span>, <span class="string">&quot;DOM&quot;</span>],    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span>,    <span class="attr">&quot;outFile&quot;</span>: <span class="string">&quot;dist/aa.js&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>module</strong></p>
<ul>
<li><p>设置编译后代码使用的模块化系统</p>
</li>
<li><p>可选值：</p>
<ul>
<li>CommonJS、UMD、AMD、System、ES2020、ESNext、None</li>
</ul>
</li>
<li><p>示例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;CommonJS&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>outDir</strong></p>
<ul>
<li><p>编译后文件的所在目录</p>
</li>
<li><p>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>设置后编译后的js文件将会生成到dist目录</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>outFile</strong></p>
<ul>
<li><p>将所有的文件编译为一个js文件</p>
</li>
<li><p>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</p>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="attr">&quot;outFile&quot;</span>: <span class="string">&quot;dist/app.js&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>rootDir</strong></p>
<ul>
<li><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</p>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="attr">&quot;rootDir&quot;</span>: <span class="string">&quot;./src&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>allowJs</strong></p>
<ul>
<li>是否对js文件编译，默认是false</li>
</ul>
</li>
<li><p><strong>checkJs</strong></p>
<ul>
<li><p>是否检查js代码是否符合语法规范，默认是false</p>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="attr">&quot;allowJs&quot;</span>: <span class="literal">true</span>,    <span class="attr">&quot;checkJs&quot;</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>removeComments</strong></p>
<ul>
<li>是否删除注释</li>
<li>默认值：false</li>
</ul>
</li>
<li><p><strong>noEmit</strong></p>
<ul>
<li>不生成编译后的文件</li>
<li>默认值：false</li>
</ul>
</li>
<li><p><strong>sourceMap</strong></p>
<ul>
<li>是否生成sourceMap</li>
<li>默认值：false</li>
</ul>
</li>
<li><p><strong>noEmitOnError</strong></p>
<ul>
<li>当有错误时不生成编译后的文件</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>严格检查</strong></p>
</li>
<li><p>strict</p>
<ul>
<li>启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查</li>
<li>alwaysStrict<ul>
<li>总是以严格模式对代码进行编译</li>
</ul>
</li>
<li>noImplicitAny<ul>
<li>禁止隐式的any类型</li>
</ul>
</li>
<li>noImplicitThis<ul>
<li>禁止类型不明确的this</li>
</ul>
</li>
<li>strictBindCallApply<ul>
<li>严格检查bind、call和apply的参数列表</li>
</ul>
</li>
<li>strictFunctionTypes<ul>
<li>严格检查函数的类型</li>
</ul>
</li>
<li>strictNullChecks<ul>
<li>严格的空值检查</li>
</ul>
</li>
<li>strictPropertyInitialization<ul>
<li>严格检查属性是否初始化</li>
</ul>
</li>
</ul>
</li>
<li><p>额外检查</p>
<ul>
<li>noFallthroughCasesInSwitch<ul>
<li>检查switch语句包含正确的break</li>
</ul>
</li>
<li>noImplicitReturns<ul>
<li>检查函数没有隐式的返回值</li>
</ul>
</li>
<li>noUnusedLocals<ul>
<li>检查未使用的局部变量</li>
</ul>
</li>
<li>noUnusedParameters<ul>
<li>检查未使用的参数</li>
</ul>
</li>
</ul>
</li>
<li><p>高级</p>
<ul>
<li>allowUnreachableCode<ul>
<li>检查不可达代码</li>
<li>可选值：<ul>
<li>true，忽略不可达代码</li>
<li>false，不可达代码将引起错误</li>
</ul>
</li>
</ul>
</li>
<li>noEmitOnError<ul>
<li>有错误的情况下不进行编译</li>
<li>默认值：false</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4、webpack"><a href="#4、webpack" class="headerlink" title="4、webpack"></a>4、webpack</h2><ul>
<li><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。</p>
</li>
<li><p>步骤：</p>
<ol>
<li><p>初始化项目</p>
<ul>
<li>进入项目根目录，执行命令 <code> npm init -y</code><ul>
<li>主要作用：创建package.json文件</li>
</ul>
</li>
</ul>
</li>
<li><p>下载构建工具</p>
<ul>
<li><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code><ul>
<li>共安装了7个包<ul>
<li><strong>webpack</strong><ul>
<li>构建工具webpack</li>
</ul>
</li>
<li><strong>webpack-cli</strong><ul>
<li>webpack的命令行工具</li>
</ul>
</li>
<li><strong>webpack-dev-server</strong><ul>
<li>webpack的开发服务器</li>
</ul>
</li>
<li><strong>typescript</strong><ul>
<li>ts编译器</li>
</ul>
</li>
<li><strong>ts-loader</strong><ul>
<li>ts加载器，用于在webpack中编译ts文件</li>
</ul>
</li>
<li><strong>html-webpack-plugin</strong><ul>
<li>webpack中html插件，用来自动创建html文件</li>
</ul>
</li>
<li><strong>clean-webpack-plugin</strong><ul>
<li>webpack中的清除插件，每次构建都会先清除目录</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>根目录下创建webpack的配置文件webpack.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);<span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);<span class="built_in">module</span>.exports = &#123;    <span class="attr">optimization</span>:&#123;        <span class="attr">minimize</span>: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选    &#125;,    entry: &quot;./src/index.ts&quot;,        devtool: &quot;inline-source-map&quot;,        devServer: &#123;        contentBase: &#x27;./dist&#x27;    &#125;,    output: &#123;        path: path.resolve(__dirname, &quot;dist&quot;),        filename: &quot;bundle.js&quot;,        environment: &#123;            arrowFunction: false // 关闭webpack的箭头函数，可选        &#125;    &#125;,	// 用来设置引用模块    resolve: &#123;        extensions: [&quot;.ts&quot;, &quot;.js&quot;]    &#125;,        module: &#123;        // 指定要加载的规则        rules: [            &#123;                // test指定的是规则生效的文件                test: /\.ts$/,                // 配置babel                use: &#123;                   loader: &quot;ts-loader&quot;                     &#125;,                // 要排除的文件                exclude: /node_modules/            &#125;        ]    &#125;,    plugins: [        new CleanWebpackPlugin(),        new HtmlWebpackPlugin(&#123;            title:&#x27;TS测试&#x27;        &#125;),    ]&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>根目录下创建tsconfig.json，配置可以根据自己需要</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;    <span class="attr">&quot;compilerOptions&quot;</span>: &#123;        <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,        <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,        <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>    &#125;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改package.json添加如下配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;  ...略...  <span class="attr">&quot;scripts&quot;</span>: &#123;    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --open chrome.exe&quot;</span>  &#125;,  ...略...&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译，或者执行<code>npm start</code>来启动开发服务器</p>
</li>
</ol>
</li>
</ul>
<h2 id="5、Babel"><a href="#5、Babel" class="headerlink" title="5、Babel"></a>5、Babel</h2><ul>
<li><p>经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来<strong>对代码进行转换</strong>以使其可以<strong>兼容到更多的浏览器</strong>，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。</p>
<ol>
<li><p>安装依赖包：</p>
<ul>
<li><code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code></li>
<li>共安装了4个包，分别是：<ul>
<li>@babel/core<ul>
<li>babel的核心工具</li>
</ul>
</li>
<li>@babel/preset-env<ul>
<li>babel的预定义环境</li>
</ul>
</li>
<li>@babel-loader<ul>
<li>babel在webpack中的加载器</li>
</ul>
</li>
<li>core-js<ul>
<li>core-js用来使老版本的浏览器支持新版ES语法</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>修改webpack.config.js配置文件</p>
<ul>
<li>```javascript<br>…略…module: {  rules: [    {      test: /.ts$/,      use: [        {           loader: “babel-loader”,// 指定加载器            // 设置babel           options:{               // 设置预定义环境             presets: [                   [                  “@babel/preset-env”,// 指定环境的插件                    // 配置信息                     {                        “targets”:{                            // 要兼容的目标浏览器                           “chrome”: “58”,                              “ie”: “11”                          },                          “corejs”:”3”,// 指定corejs版本                          “useBuiltIns”: “usage” // 按需加载                       }                ]             ]            }          },          {             loader: “ts-loader”,           }          ],            exclude: /node_modules/        }    ]}…略…<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">     - 如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第二章：面向对象</span><br><span class="line"></span><br><span class="line">面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是**程序之中所有的操作都需要通过对象来完成**。</span><br><span class="line"></span><br><span class="line">- 举例来说：</span><br><span class="line">  - 操作浏览器要使用window对象</span><br><span class="line">  - 操作网页要使用document对象</span><br><span class="line">  - 操作控制台要使用console对象</span><br><span class="line"></span><br><span class="line">一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是**对现实事物的抽象**，**抽象**的反义词是**具体**，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</span><br><span class="line"></span><br><span class="line">在程序中所有的对象都被分成了两个部分：**数据**和**功能**，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，**在程序中一切皆是对象。**</span><br><span class="line"></span><br><span class="line">## 1、类（class）</span><br><span class="line"></span><br><span class="line">要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何**创建对象**。要创建对象，必须要**先定义类**，所谓的类可以理解为**对象的模型**，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</span><br><span class="line"></span><br><span class="line">- 定义类：</span><br><span class="line"></span><br><span class="line">  ```typescript</span><br><span class="line">  class 类名 &#123;	属性名: 类型;		constructor(参数: 类型)&#123;		this.属性名 = 参数;	&#125;		方法名()&#123;		....	&#125;&#125;/*    *   1.直接定义的属性是实例属性，需要通过对象的实例去访问：    *       const per = new Person();    *       per.name    *    *   2.使用static开头的属性是静态属性（类属性），可以直接通过类去访问    *       Person.age    *    *   readonly开头的属性表示一个只读的属性无法修改    * */</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>两种属性：</p>
<ul>
<li><strong>实例属性</strong><ul>
<li>直接定义的属性是实例属性，需要通过对象的实例去访问</li>
</ul>
</li>
<li><strong>静态属性</strong><ul>
<li>使用static开头的属性是静态属性（类属性），可以直接通过类去访问</li>
</ul>
</li>
</ul>
</li>
<li><p>构造函数constructor：</p>
<ul>
<li>```typescript<br>constructor(name: string, age: number) {    // 在实例方法中，this就表示当前当前的实例    // 在构造函数中当前对象就是当前新建的那个对象    // 可以通过this向新建的对象中添加属性    this.name = name;    this.age = age;}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 示例：</span><br><span class="line"></span><br><span class="line">  ```typescript</span><br><span class="line">  class Person&#123;    name: string;    age: number;    constructor(name: string, age: number)&#123;        this.name = name;        this.age = age;    &#125;    sayHello()&#123;        console.log(`大家好，我是$&#123;this.name&#125;`);    &#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用类：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);p.sayHello();</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2、面向对象的特点"><a href="#2、面向对象的特点" class="headerlink" title="2、面向对象的特点"></a>2、面向对象的特点</h2><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul>
<li><p>对象实质上就是属性和方法的容器，它的主要作用就是<strong>存储属性和方法</strong>，这就是所谓的封装</p>
</li>
<li><p>默认情况下，对象的属性是可以任意的修改的，为了<strong>确保数据的安全性</strong>，在TS中可以对属性的权限进行设置</p>
</li>
<li><p>只读属性（readonly）：</p>
<ul>
<li>如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</li>
</ul>
</li>
<li><p>TS中<strong>属性</strong>具有三种<strong>修饰符</strong>：</p>
<ul>
<li><strong>public</strong>（默认值），可以在类、子类和对象中修改</li>
<li><strong>protected</strong> ，可以在类、子类中修改</li>
<li><strong>private</strong> ，可以在类中修改</li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li><p>public</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;    <span class="keyword">public</span> name: <span class="built_in">string</span>; <span class="comment">// 写或什么都不写都是public    public age: number;    constructor(name: string, age: number)&#123;        this.name = name; // 可以在类中修改        this.age = age;    &#125;    sayHello()&#123;        console.log(`大家好，我是$&#123;this.name&#125;`);    &#125;&#125;class Employee extends Person&#123;    constructor(name: string, age: number)&#123;        super(name, age);        this.name = name; //子类中可以修改    &#125;&#125;const p = new Person(&#x27;孙悟空&#x27;, 18);p.name = &#x27;猪八戒&#x27;;// 可以通过对象修改</span></span><br></pre></td></tr></table></figure></li>
<li><p>protected</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;    <span class="keyword">protected</span> name: <span class="built_in">string</span>;    <span class="keyword">protected</span> age: <span class="built_in">number</span>;    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;        <span class="built_in">this</span>.name = name; <span class="comment">// 可以修改        this.age = age;    &#125;    sayHello()&#123;        console.log(`大家好，我是$&#123;this.name&#125;`);    &#125;&#125;class Employee extends Person&#123;    constructor(name: string, age: number)&#123;        super(name, age);        this.name = name; //子类中可以修改    &#125;&#125;const p = new Person(&#x27;孙悟空&#x27;, 18);p.name = &#x27;猪八戒&#x27;;// 不能修改</span></span><br></pre></td></tr></table></figure></li>
<li><p>private</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;    <span class="keyword">private</span> name: <span class="built_in">string</span>;    <span class="keyword">private</span> age: <span class="built_in">number</span>;    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;        <span class="built_in">this</span>.name = name; <span class="comment">// 可以修改        this.age = age;    &#125;    sayHello()&#123;        console.log(`大家好，我是$&#123;this.name&#125;`);    &#125;&#125;class Employee extends Person&#123;    constructor(name: string, age: number)&#123;        super(name, age);        this.name = name; //子类中不能修改    &#125;&#125;const p = new Person(&#x27;孙悟空&#x27;, 18);p.name = &#x27;猪八戒&#x27;;// 不能修改</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>属性存取器</p>
<ul>
<li><p>对于一些不希望被任意修改的属性，可以将其设置为private</p>
</li>
<li><p>直接将其设置为private将导致无法再通过对象修改其中的属性</p>
</li>
<li><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p>
</li>
<li><p>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</p>
</li>
<li><p>示例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;    <span class="keyword">private</span> _name: <span class="built_in">string</span>;    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span>&#123;        <span class="built_in">this</span>._name = name;    &#125;    <span class="keyword">get</span> <span class="title">name</span>()&#123;        <span class="keyword">return</span> <span class="built_in">this</span>._name;    &#125;    <span class="keyword">set</span> <span class="title">name</span>(<span class="params">name: <span class="built_in">string</span></span>)&#123;        <span class="built_in">this</span>._name = name;    &#125;&#125;<span class="keyword">const</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>);<span class="built_in">console</span>.log(p1.name); <span class="comment">// 通过getter读取name属性p1.name = &#x27;猪八戒&#x27;; // 通过setter修改name属性</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;    <span class="comment">// 定义一个表示人的类    class Person&#123;        // TS可以在属性前添加属性的修饰符        /*        *   public 修饰的属性可以在任意位置访问（修改） 默认值        *   private 私有属性，私有属性只能在类内部进行访问（修改）        *       - 通过在类中添加方法使得私有属性可以被外部访问        *   protected 受包含的属性，只能在当前类和当前类的子类中访问（修改）        *        * */        private _name: string;        private _age: number;        constructor(name: string, age: number) &#123;            this._name = name;            this._age = age;        &#125;        /*        *   getter方法用来读取属性        *   setter方法用来设置属性        *       - 它们被称为属性的存取器        * */        // 定义方法，用来获取name属性        // getName()&#123;        //     return this._name;        // &#125;        //        // // 定义方法，用来设置name属性        // setName(value: string)&#123;        //     this._name = value;        // &#125;        //        // getAge()&#123;        //     return this._age;        // &#125;        //        // setAge(value: number)&#123;        //     // 判断年龄是否合法        //     if(value &gt;= 0)&#123;        //         this._age = value;        //     &#125;        // &#125;        // TS中设置getter方法的方式        get name()&#123;            // console.log(&#x27;get name()执行了！！&#x27;);            return this._name;        &#125;        set name(value)&#123;            this._name = value;        &#125;        get age()&#123;            return this._age;        &#125;        set age(value)&#123;            if(value &gt;= 0)&#123;                this._age = value            &#125;        &#125;    &#125;    const per = new Person(&#x27;孙悟空&#x27;, 18);    /*    * 现在属性是在对象中设置的，属性可以任意的被修改,    *   属性可以任意被修改将会导致对象中的数据变得非常不安全    * */    // per.setName(&#x27;猪八戒&#x27;);    // per.setAge(-33);    per.name = &#x27;猪八戒&#x27;;    per.age = -33;    // console.log(per);    class A&#123;        protected num: number;        constructor(num: number) &#123;            this.num = num;        &#125;    &#125;    class B extends A&#123;        test()&#123;            console.log(this.num);        &#125;    &#125;    const b = new B(123);    // b.num = 33;   /* class C&#123;        name: string;        age: number        // 可以直接将属性定义在构造函数中        constructor(name: string, age: number) &#123;            this.name = name;             this.age = age;        &#125;    &#125;*/    class C&#123;        // 可以直接将属性定义在构造函数中        constructor(public name: string, public age: number) &#123;        &#125;    &#125;    const c = new C(&#x27;xxx&#x27;, 111);    console.log(c);&#125;)();</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>静态属性</p>
<ul>
<li><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</p>
</li>
<li><p>静态属性（方法）使用static开头</p>
</li>
<li><p>示例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tools</span></span>&#123;    <span class="keyword">static</span> PI = <span class="number">3.1415926</span>;        <span class="keyword">static</span> <span class="function"><span class="title">sum</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>)</span>&#123;        <span class="keyword">return</span> num1 + num2    &#125;&#125;<span class="built_in">console</span>.log(Tools.PI);<span class="built_in">console</span>.log(Tools.sum(<span class="number">123</span>, <span class="number">456</span>));</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>this</p>
<ul>
<li>在类中，使用this表示当前对象</li>
</ul>
</li>
</ul>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul>
<li><p>继承时面向对象中的又一个特性</p>
</li>
<li><p>通过继承可以将其他类中的属性和方法引入到当前类中</p>
<ul>
<li><p>示例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;    name: <span class="built_in">string</span>;    age: <span class="built_in">number</span>;    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;        <span class="built_in">this</span>.name = name;        <span class="built_in">this</span>.age = age;    &#125;&#125;<span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);    &#125;&#125;<span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);dog.bark();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>通过继承可以在不修改类的情况下完成对类的扩展</p>
</li>
</ul>
<h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><ul>
<li><p>发生继承时，如果子类中的方法会<strong>替换</strong>掉父类中的同名方法，这就称为方法的重写</p>
</li>
<li><p>示例：</p>
<ul>
<li>```typescript<br>class Animal{    name: string;    age: number;    constructor(name: string, age: number){        this.name = name;        this.age = age;    }    run(){        console.log(<code>父类中的run方法！</code>);    }}class Dog extends Animal{    bark(){        console.log(<code>$&#123;this.name&#125;在汪汪叫！</code>);    }    run(){        console.log(<code>子类中的run方法，会重写父类中的run方法！</code>);    }}const dog = new Dog(‘旺财’, 4);dog.bark();<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **super**</span><br><span class="line"></span><br><span class="line">  - 在类的方法中 **super就表示当前类的父类**</span><br><span class="line">  - 如果在子类中写了构造函数，在子类构造函数中必须对父类的构造函数进行调用</span><br><span class="line"></span><br><span class="line">  ```typescript</span><br><span class="line">  (function () &#123;    class Animal &#123;        name: string;        constructor(name: string) &#123;            this.name = name;        &#125;        sayHello() &#123;            console.log(&#x27;动物在叫~&#x27;);        &#125;    &#125;    class Dog extends Animal&#123;        age: number;        // 相当于重写了        constructor(name: string, age: number) &#123;            // 如果在子类中写了构造函数，在子类构造函数中必须对父类的构造函数进行调用            super(name); // 调用父类的构造函数            this.age = age;        &#125;        sayHello() &#123;            // 在类的方法中 super就表示当前类的父类            //super.sayHello();            console.log(&#x27;汪汪汪汪！&#x27;);        &#125;    &#125;    const dog = new Dog(&#x27;旺财&#x27;, 3);    dog.sayHello();&#125;)();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>抽象类</strong>（abstract class）</p>
<ul>
<li><p>抽象类是专门用来被其他类所继承的类，它<strong>只能被其他类所继承不能用来创建实例</strong></p>
</li>
<li><p>```typescript<br>abstract class Animal{    abstract run(): void;    bark(){        console.log(‘动物在叫<del>‘);    }}class Dog extends Animals{    run(){        console.log(‘狗在跑</del>‘);    }}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 使用**abstract**开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现（必须重写）</span><br><span class="line"></span><br><span class="line">  ```typescript</span><br><span class="line">  abstract sayHello():void;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="3、接口（Interface）"><a href="#3、接口（Interface）" class="headerlink" title="3、接口（Interface）"></a>3、接口（Interface）</h2><ul>
<li><p>接口的作用<strong>类似于抽象类</strong>，不同点在于接口中的所有方法和属性都是<strong>没有实值</strong>的，换句话说接口中的所有方法<strong>都是抽象方法</strong>。</p>
</li>
<li><p>接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。</p>
</li>
<li><p>示例（检查对象类型）：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person&#123;    name: <span class="built_in">string</span>;    sayHello():<span class="built_in">void</span>;&#125;<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">per: Person</span>)</span>&#123;    per.sayHello();&#125;fn(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>, <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;<span class="built_in">console</span>.log(<span class="string">`Hello, 我是 <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)&#125;&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</p>
</li>
<li><p>实现接口就是使类满足接口的要求</p>
</li>
<li><p>示例（实现）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person&#123;    name: <span class="built_in">string</span>;    sayHello():<span class="built_in">void</span>;&#125;<span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="title">implements</span> <span class="title">Person</span></span>&#123;    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>)</span> &#123;    &#125;    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;        <span class="built_in">console</span>.log(<span class="string">&#x27;大家好，我是&#x27;</span>+<span class="built_in">this</span>.name);    &#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4、泛型（Generic）"><a href="#4、泛型（Generic）" class="headerlink" title="4、泛型（Generic）"></a>4、泛型（Generic）</h2><ul>
<li><p>概念</p>
<ul>
<li>不确定某个类型</li>
<li><strong>自定义表示某个类型。</strong></li>
</ul>
</li>
<li><p>使用条件</p>
<ul>
<li>在定义函数或是类时，如果遇到类型不明确就可以使用泛型</li>
<li>定义一个函数或类时，有些情况下<strong>无法确定其中要使用的具体类型</strong>（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。</li>
</ul>
</li>
<li><p>举个例子：</p>
<ul>
<li><p>```typescript<br>function test(arg: any): any{    return arg;}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值**均使用了any**，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</span><br><span class="line"></span><br><span class="line">- 使用泛型：</span><br><span class="line"></span><br><span class="line">- ```typescript</span><br><span class="line">  function test&lt;T&gt;(arg: T): T&#123;	return arg;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>这里的<code>&lt;T&gt;</code>就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就<strong>表示某个类型。</strong></p>
</li>
<li><p>那么如何使用上边的函数呢？</p>
<ul>
<li><p>方式一（直接使用）：</p>
<ul>
<li><p>```typescript<br>test(10)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</span><br><span class="line"></span><br><span class="line">- 方式二（指定类型）：</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    test&lt;number&gt;(10)</span><br></pre></td></tr></table></figure></li>
<li><p>也可以在函数后手动指定泛型</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p>
<ul>
<li>```typescript<br>function test&lt;T, K&gt;(a: T, b: K): K{    return b;}test&lt;number, string&gt;(10, “hello”);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 使用泛型时，完全可以将泛型当成是一个普通的类去使用</span><br><span class="line"></span><br><span class="line">- 类中同样可以使用泛型：</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    class MyClass&lt;T&gt;&#123;    prop: T;    constructor(prop: T)&#123;        this.prop = prop;    &#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>除此之外，也可以对泛型的范围进行约束</p>
<ul>
<li><pre><code class="typescript">interface MyInter&#123;    length: number;&#125;function test&lt;T extends MyInter&gt;(arg: T): number&#123;    return arg.length;&#125;
</code></pre>
</li>
<li><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
        <tag>frontEnd</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题汇总（</title>
    <url>/2021/07/21/Interviewquestions/</url>
    <content><![CDATA[<p><strong>前端面试题汇总</strong></p>
<span id="more"></span>

<h1 id="一、HTML和CSS"><a href="#一、HTML和CSS" class="headerlink" title="一、HTML和CSS"></a>一、HTML和CSS</h1><h2 id="1、你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么"><a href="#1、你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么" class="headerlink" title="1、你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?"></a>1、你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?</h2><p>IE: trident内核</p>
<p>Firefox：gecko内核</p>
<p>Safari:webkit内核</p>
<p>Opera:以前是presto内核，Opera现已改用Google Chrome的Blink内核</p>
<p>Chrome:Blink(基于webkit，<a href="http://baike.baidu.com/view/1369399.htm#1_5">Google与Opera Software共同开发</a>)</p>
<h2 id="2、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？"><a href="#2、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？" class="headerlink" title="2、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？"></a>2、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？</h2><!DOCTYPE><p> 声明位于文档中的最前面的位置，处于 <html> 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。（重点：告诉浏览器按照何种规范解析页面）</p>
<h2 id="3、Quirks模式是什么？它和Standards模式有什么区别"><a href="#3、Quirks模式是什么？它和Standards模式有什么区别" class="headerlink" title="3、Quirks模式是什么？它和Standards模式有什么区别"></a>3、Quirks模式是什么？它和Standards模式有什么区别</h2><p>从IE6开始，引入了Standards模式，标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度。</p>
<p>在IE6之前CSS还不够成熟，所以IE5等之前的浏览器对CSS的支持很差， IE6将对CSS提供更好的支持，然而这时的问题就来了，因为有很多页面是基于旧的布局方式写的，而如果IE6 支持CSS则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的渲染机制呢？</p>
<p>在写程序时我们也会经常遇到这样的问题，如何保证原来的接口不变，又提供更强大的功能，尤其是新功能不兼容旧功能时。遇到这种问题时的一个常见做法是增加参数和分支，即当某个参数为真时，我们就使用新功能，而如果这个参数 不为真时，就使用旧功能，这样就能不破坏原有的程序，又提供新功能。IE6也是类似这样做的，它将DTD当成了这个“参数”，因为以前的页面大家都不会去写DTD，所以IE6就假定 如果写了DTD，就意味着这个页面将采用对CSS支持更好的布局，而如果没有，则采用兼容之前的布局方式。这就是Quirks模式（怪癖模式，诡异模式，怪异模式）。</p>
<p>区别：</p>
<p>总体会有布局、样式解析和脚本执行三个方面的区别。</p>
<p>盒模型：在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在Quirks 模式下，IE的宽度和高度还包含了padding和border。</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2014/10/511748c935cab6e8c46d56b2e6e9c342.png"><img src="file:///C:/Users/86136/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="191309249047905"></a></p>
<p>设置行内元素的高宽：在Standards模式下，给<span>等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。</p>
<p>设置百分比的高度：在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的用margin:0 auto设置水平居中：使用margin:0 auto在standards模式下可以使元素水平居中，但在quirks模式下却会失效。</p>
<p>（还有很多，答出什么不重要，关键是看他答出的这些是不是自己经验遇到的，还是说都是看文章看的，甚至完全不知道。）</p>
<h2 id="4、div-css的布局较table布局有什么优点？"><a href="#4、div-css的布局较table布局有什么优点？" class="headerlink" title="4、div+css的布局较table布局有什么优点？"></a>4、div+css的布局较table布局有什么优点？</h2><p>改版的时候更方便 只要改css文件。</p>
<p>页面加载速度更快、结构化清晰、页面显示简洁。</p>
<p>表现与结构相分离。</p>
<p>易于优化（seo）搜索引擎更友好，排名更容易靠前。</p>
<h2 id="5、-img的alt与title有何异同？-strong与em的异同？"><a href="#5、-img的alt与title有何异同？-strong与em的异同？" class="headerlink" title="5、 img的alt与title有何异同？ strong与em的异同？"></a>5、 img的alt与title有何异同？ strong与em的异同？</h2><p>a:alt(alt text):为不能显示图像、窗体或applets的用户代理（UA），alt属性用来指定替换文字。替换文字的语言由lang属性指定。(在IE浏览器下会在没有title时把alt当成 tool tip显示)</p>
<p>title(tool tip):该属性为设置该属性的元素提供建议性的信息。</p>
<p>strong:粗体强调标签，强调，表示内容的重要性</p>
<p>em:斜体强调标签，更强烈强调，表示内容的强调点</p>
<h2 id="6、你能描述一下渐进增强和优雅降级之间的不同吗"><a href="#6、你能描述一下渐进增强和优雅降级之间的不同吗" class="headerlink" title="6、你能描述一下渐进增强和优雅降级之间的不同吗?"></a>6、你能描述一下渐进增强和优雅降级之间的不同吗?</h2><p>渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p>
<p>优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>
<p>区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。</p>
<p>“优雅降级”观点</p>
<p>“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。</p>
<p>在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p>
<p>“渐进增强”观点</p>
<p>“渐进增强”观点则认为应关注于内容本身。</p>
<p>内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</p>
<p>那么问题来了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？</p>
<h2 id="7、为什么利用多个域名来存储网站资源会更有效？"><a href="#7、为什么利用多个域名来存储网站资源会更有效？" class="headerlink" title="7、为什么利用多个域名来存储网站资源会更有效？"></a>7、为什么利用多个域名来存储网站资源会更有效？</h2><p>CDN缓存更方便</p>
<p>突破浏览器并发限制</p>
<p>节约cookie带宽</p>
<p>节约主域名的连接数，优化页面响应速度</p>
<p>防止不必要的安全问题</p>
<h2 id="8、请谈一下你对网页标准和标准制定机构重要性的理解。"><a href="#8、请谈一下你对网页标准和标准制定机构重要性的理解。" class="headerlink" title="8、请谈一下你对网页标准和标准制定机构重要性的理解。"></a>8、请谈一下你对网页标准和标准制定机构重要性的理解。</h2><p>网页标准和标准制定机构都是为了能让web发展的更‘健康’，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。</p>
<h2 id="9、请描述一下cookies，sessionStorage和localStorage的区别？"><a href="#9、请描述一下cookies，sessionStorage和localStorage的区别？" class="headerlink" title="9、请描述一下cookies，sessionStorage和localStorage的区别？"></a>9、请描述一下cookies，sessionStorage和localStorage的区别？</h2><p>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</p>
<p>web storage和cookie的区别</p>
<p>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。</p>
<p>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。</p>
<h2 id="10、简述一下src与href的区别。"><a href="#10、简述一下src与href的区别。" class="headerlink" title="10、简述一下src与href的区别。"></a>10、简述一下src与href的区别。</h2><p>src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。</p>
<p>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。</p>
<script src =”js.js”></script>

<p>当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</p>
<p>href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加</p>
<link href="common.css" rel="stylesheet"/>

<p>那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。</p>
<h2 id="11、知道的网页制作会用到的图片格式有哪些？"><a href="#11、知道的网页制作会用到的图片格式有哪些？" class="headerlink" title="11、知道的网页制作会用到的图片格式有哪些？"></a>11、知道的网页制作会用到的图片格式有哪些？</h2><p>png-8，png-24，jpeg，gif，svg。</p>
<p>但是上面的那些都不是面试官想要的最后答案。面试官希望听到是<strong>Webp</strong>。（是否有<strong>关注新技术，新鲜事物</strong>）</p>
<p>科普一下Webp：WebP格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。Facebook Ebay等知名网站已经开始测试并使用WebP格式。</p>
<p>在质量相同的情况下，<a href="http://baike.baidu.com/view/4447461.htm">WebP</a>格式图像的体积要比JPEG格式图像小40%</p>
<h2 id="12、知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？"><a href="#12、知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？" class="headerlink" title="12、知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？"></a>12、知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？</h2><p>微格式（Microformats）是一种让机器可读的语义化XHTML词汇的集合，是结构化数据的开放标准。是为特殊应用而制定的特殊格式。</p>
<p>优点：将智能数据添加到网页上，让网站内容在搜索引擎结果界面可以显示额外的提示。（应用范例：豆瓣，有兴趣自行google）</p>
<h2 id="13、在css-js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"><a href="#13、在css-js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？" class="headerlink" title="13、在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"></a>13、在css/js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？</h2><p>答案：dns缓存，cdn缓存，浏览器缓存，服务器缓存。</p>
<h2 id="14、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。"><a href="#14、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。" class="headerlink" title="14、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。"></a>14、一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。</h2><p><strong>图片懒加载</strong>，在页面上的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。</p>
<p>如果为幻灯片、相册等，可以使用<strong>图片预加载</strong>技术，将当前展示图片的前一张和后一张优先下载。</p>
<p>如果图片为<strong>css图片</strong>，可以使用CSSsprite，SVGsprite，Iconfont、Base64等技术。</p>
<p>如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。</p>
<p>如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。</p>
<h2 id="15、你如何理解HTML结构的语义化？"><a href="#15、你如何理解HTML结构的语义化？" class="headerlink" title="15、你如何理解HTML结构的语义化？"></a>15、你如何理解HTML结构的语义化？</h2><p>去掉或样式丢失的时候能让页面呈现清晰的结构：</p>
<p>html本身是没有表现的，我们看到例如<h1>是粗体，字体大小2em，加粗；<strong>是加粗的，不要认为这是html的表现，这些其实html默认的css样式在起作用，所以去掉或样式丢失的时候能让页面呈现清晰的结构不是语义化的HTML结构的优点，但是浏览器都有有默认样式，默认样式的目的也是为了更好的表达html的语义，可以说浏览器的默认样式和语义化的HTML结构是不可分割的。</p>
<p>屏幕阅读器（如果访客有视障）会完全根据你的标记来“读”你的网页.</p>
<p>例如,如果你使用的含语义的标记,屏幕阅读器就会“逐个拼出”你的单词,而不是试着去对它完整发音.</p>
<p>PDA、手机等设备可能无法像普通电脑的浏览器一样来渲染网页（通常是因为这些设备对CSS的支持较弱）</p>
<p>使用语义标记可以确保这些设备以一种有意义的方式来渲染网页.理想情况下,观看设备的任务是符合设备本身的条件来渲染网页.</p>
<p>语义标记为设备提供了所需的相关信息,就省去了你自己去考虑所有可能的显示情况（包括现有的或者将来新的设备）.例如,一部手机可以选择使一段标记了标题的文字以粗体显示.而掌上电脑可能会以比较大的字体来显示.无论哪种方式一旦你对文本标记为标题,您就可以确信读取设备将根据其自身的条件来合适地显示页面.</p>
<p>搜索引擎的爬虫也依赖于标记来确定上下文和各个关键字的权重</p>
<p>过去你可能还没有考虑搜索引擎的爬虫也是网站的“访客”,但现在它们他们实际上是极其宝贵的用户.没有他们的话,搜索引擎将无法索引你的网站,然后一般用户将很难过来访问.</p>
<p>你的页面是否对爬虫容易理解非常重要,因为爬虫很大程度上会忽略用于表现的标记,而只注重语义标记.</p>
<p>因此,如果页面文件的标题被标记,而不是,那么这个页面在搜索结果的位置可能会比较靠后.除了提升易用性外,语义标记有利于正确使用CSS和JavaScript,因为其本身提供了许多“钩钩”来应用页面的样式与行为.</p>
<p>SEO主要还是靠你网站的内容和外部链接的。</p>
<p>便于团队开发和维护</p>
<p>W3C给我们定了一个很好的标准，在团队中大家都遵循这个标准，可以减少很多差异化的东西，方便开发和维护，提高开发效率，甚至<a href="http://www.cssforest.org/blog/index.php?id=134">实现模块化开发</a>。</p>
<h2 id="16、谈谈以前端角度出发做好SEO需要考虑什么？"><a href="#16、谈谈以前端角度出发做好SEO需要考虑什么？" class="headerlink" title="16、谈谈以前端角度出发做好SEO需要考虑什么？"></a>16、谈谈以前端角度出发做好SEO需要考虑什么？</h2><p>了解搜索引擎如何抓取网页和如何索引网页</p>
<p>你需要知道一些搜索引擎的基本工作原理，各个搜索引擎之间的区别，搜索机器人（SE robot 或叫 web crawler）如何进行工作，搜索引擎如何对搜索结果进行排序等等。</p>
<p>Meta标签优化</p>
<p>主要包括主题（Title)，网站描述(Description)，和关键词（Keywords）。还有一些其它的隐藏文字比如Author（作者），Category（目录），Language（编码语种）等。</p>
<p>如何选取关键词并在网页中放置关键词</p>
<p>搜索就得用关键词。关键词分析和选择是SEO最重要的工作之一。首先要给网站确定主关键词（一般在5个上下），然后针对这些关键词进行优化，包括关键词密度（Density），相关度（Relavancy），突出性（Prominency）等等。</p>
<p>了解主要的搜索引擎</p>
<p>虽然搜索引擎有很多，但是对网站流量起决定作用的就那么几个。比如英文的主要有Google，Yahoo，Bing等；中文的有百度，搜狗，有道等。不同的搜索引擎对页面的抓取和索引、排序的规则都不一样。还要了解各搜索门户和搜索引擎之间的关系，比如AOL网页搜索用的是Google的搜索技术，MSN用的是Bing的技术。</p>
<p>主要的互联网目录</p>
<p>Open Directory自身不是搜索引擎，而是一个大型的网站目录，他和搜索引擎的主要区别是网站内容的收集方式不同。目录是人工编辑的，主要收录网站主页；搜索引擎是自动收集的，除了主页外还抓取大量的内容页面。</p>
<p>按点击付费的搜索引擎</p>
<p>搜索引擎也需要生存，随着互联网商务的越来越成熟，收费的搜索引擎也开始大行其道。最典型的有Overture和百度，当然也包括Google的广告项目Google Adwords。越来越多的人通过搜索引擎的点击广告来定位商业网站，这里面也大有优化和排名的学问，你得学会用最少的广告投入获得最多的点击。</p>
<p>搜索引擎登录</p>
<p>网站做完了以后，别躺在那里等着客人从天而降。要让别人找到你，最简单的办法就是将网站提交（submit）到搜索引擎。如果你的是商业网站，主要的搜索引擎和目录都会要求你付费来获得收录（比如Yahoo要299美元），但是好消息是（至少到目前为止）最大的搜索引擎Google目前还是免费，而且它主宰着60％以上的搜索市场。</p>
<p>链接交换和链接广泛度（Link Popularity）</p>
<p>网页内容都是以超文本（Hypertext）的方式来互相链接的，网站之间也是如此。除了搜索引擎以外，人们也每天通过不同网站之间的链接来Surfing（“冲浪”）。其它网站到你的网站的链接越多，你也就会获得更多的访问量。更重要的是，你的网站的外部链接数越多，会被搜索引擎认为它的重要性越大，从而给你更高的排名。</p>
<p>合理的标签使用</p>
<h2 id="17、有哪项方式可以对一个DOM设置它的CSS样式？"><a href="#17、有哪项方式可以对一个DOM设置它的CSS样式？" class="headerlink" title="17、有哪项方式可以对一个DOM设置它的CSS样式？"></a>17、有哪项方式可以对一个DOM设置它的CSS样式？</h2><p><strong>外部样式表</strong>，引入一个外部css文件</p>
<p><strong>内部样式表</strong>，将css代码放在 <head> 标签内部</p>
<p><strong>内联样式</strong>，将css样式直接定义在 HTML 元素内部</p>
<h2 id="18、CSS都有哪些选择器？"><a href="#18、CSS都有哪些选择器？" class="headerlink" title="18、CSS都有哪些选择器？"></a>18、CSS都有哪些选择器？</h2><p>派生选择器（用HTML标签申明）</p>
<p>id选择器（用DOM的ID申明）</p>
<p>类选择器（用一个样式类名申明）</p>
<p>属性选择器（用DOM的属性申明，属于CSS2，IE6不支持，不常用，不知道就算了）</p>
<p>除了前3种基本选择器，还有一些扩展选择器，包括</p>
<p>后代选择器（利用空格间隔，比如div .a{ }）</p>
<p>群组选择器（利用逗号间隔，比如p,div,#a{ }）</p>
<p>那么问题来了，CSS选择器的优先级是怎么样定义的？</p>
<p>基本原则：</p>
<p>一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。</p>
<p>复杂的计算方法：</p>
<p>用1表示派生选择器的优先级</p>
<p>用10表示类选择器的优先级</p>
<p>用100标示ID选择器的优先级</p>
<p>div.test1 .span var 优先级 1+10 +10 +1</p>
<p>span#xxx .songs li 优先级1+100 + 10 + 1</p>
<p>#xxx li 优先级 100 +1</p>
<p>那么问题来了，看下列代码，<p>标签内的文字是什么颜色的？</p>
<style>


.classA{ color:blue;}

.classB{ color:red;}

</style>

<body>

<p class='classB classA'> 123 </p>

</body>

<p>答案：red。与样式定义在文件中的先后顺序有关，即是后面的覆盖前面的，与在&lt;p class=’classB classA’&gt;中的先后关系无关。</p>
<h2 id="19、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？"><a href="#19、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？" class="headerlink" title="19、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？"></a>19、CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？</h2><p>最基本的：</p>
<p>设置display属性为none，或者设置visibility属性为hidden</p>
<p>技巧性：</p>
<p>设置宽高为0，设置透明度为0，设置z-index位置在-1000</p>
<h2 id="20、超链接访问过后hover样式就不出现的问题是什么？如何解决？"><a href="#20、超链接访问过后hover样式就不出现的问题是什么？如何解决？" class="headerlink" title="20、超链接访问过后hover样式就不出现的问题是什么？如何解决？"></a>20、超链接访问过后hover样式就不出现的问题是什么？如何解决？</h2><p>答案：被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）</p>
<h2 id="21、什么是Css-Hack？ie6-7-8的hack分别是什么？"><a href="#21、什么是Css-Hack？ie6-7-8的hack分别是什么？" class="headerlink" title="21、什么是Css Hack？ie6,7,8的hack分别是什么？"></a>21、什么是Css Hack？ie6,7,8的hack分别是什么？</h2><p>答案：针对不同的浏览器写不同的CSS code的过程，就是CSS hack。</p>
<p>示例如下：</p>
<table>
<thead>
<tr>
<th>1  2  3  4  5  6  7  8  9  10  11  12</th>
<th>#test    {        width:300px;         height:300px;         background-color:blue;     /<em>firefox</em>/      background-color:red\9;     /<em>all ie</em>/      background-color:yellow;    /<em>ie8</em>/      +background-color:pink;      /<em>ie7</em>/      _background-color:orange;     /<em>ie6</em>/  }       :root #test {  background-color:purple\9; } /<em>ie9</em>/    @media all and (min-width:0px){ #test  {background-color:black;} } /<em>opera</em>/    @media screen and  (-webkit-min-device-pixel-ratio:0){ #test {background-color:gray;}  }    /<em>chrome and safari</em>/</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="22、请用Css写一个简单的幻灯片效果页面"><a href="#22、请用Css写一个简单的幻灯片效果页面" class="headerlink" title="22、请用Css写一个简单的幻灯片效果页面"></a>22、请用Css写一个简单的幻灯片效果页面</h2><p>答案：知道是要用css3。使用animation动画实现一个简单的幻灯片效果。</p>
<table>
<thead>
<tr>
<th>1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33</th>
<th>/<strong>HTML</strong>/      div.ani      /<strong>css</strong>/      .ani{       width:480px;       height:320px;       margin:50px  auto;       overflow:  hidden;       box-shadow:0  0 5px rgba(0,0,0,1);       background-size:  cover;       background-position:  center;       -webkit-animation-name:  “loops”;       -webkit-animation-duration:  20s;       -webkit-animation-iteration-count:  infinite;      }      @-webkit-keyframes  “loops” {        0%  {          background:url(<a href="http://d.hiphotos.baidu.com/image/w%3D400/sign=c01e6adca964034f0fcdc3069fc27980/e824b899a9014c08e5e38ca4087b02087af4f4d3.jpg">http://d.hiphotos.baidu.com/image/w%3D400/sign=c01e6adca964034f0fcdc3069fc27980/e824b899a9014c08e5e38ca4087b02087af4f4d3.jpg</a>)  no-repeat;                }        25%  {          background:url(<a href="http://b.hiphotos.baidu.com/image/w%3D400/sign=edee1572e9f81a4c2632edc9e72b6029/30adcbef76094b364d72bceba1cc7cd98c109dd0.jpg">http://b.hiphotos.baidu.com/image/w%3D400/sign=edee1572e9f81a4c2632edc9e72b6029/30adcbef76094b364d72bceba1cc7cd98c109dd0.jpg</a>)  no-repeat;        }        50%  {          background:url(<a href="http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be2353266255/d8f9d72a6059252d258e7605369b033b5bb5b912.jpg">http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be2353266255/d8f9d72a6059252d258e7605369b033b5bb5b912.jpg</a>)  no-repeat;        }        75%  {          background:url(<a href="http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544ebf86d71653fe9f9d736/0df431adcbef76095d61f0972cdda3cc7cd99e4b.jpg">http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544ebf86d71653fe9f9d736/0df431adcbef76095d61f0972cdda3cc7cd99e4b.jpg</a>)  no-repeat;        }        100%  {          background:url(<a href="http://c.hiphotos.baidu.com/image/w%3D400/sign=cfb239ceb0fb43161a1f7b7a10a54642/3b87e950352ac65ce2e73f76f9f2b21192138ad1.jpg">http://c.hiphotos.baidu.com/image/w%3D400/sign=cfb239ceb0fb43161a1f7b7a10a54642/3b87e950352ac65ce2e73f76f9f2b21192138ad1.jpg</a>)  no-repeat;        }      }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="24、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？"><a href="#24、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？" class="headerlink" title="24、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？"></a>24、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？</h2><p>块级元素(block)特性：</p>
<p>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;</p>
<p>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;</p>
<p>内联元素(inline)特性：</p>
<p>和相邻的内联元素在同一行;</p>
<p>宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。</p>
<p>那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？</p>
<p>答案：<input> 、<img> 、<button> 、<texterea> 、<label>。</p>
<h2 id="25、什么是外边距重叠？重叠的结果是什么？"><a href="#25、什么是外边距重叠？重叠的结果是什么？" class="headerlink" title="25、什么是外边距重叠？重叠的结果是什么？"></a>25、什么是外边距重叠？重叠的结果是什么？</h2><p>外边距重叠就是margin-collapse。</p>
<p>在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。</p>
<p>折叠结果遵循下列计算规则：</p>
<p>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。</p>
<p>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。</p>
<p>两个外边距一正一负时，折叠结果是两者的相加的和。</p>
<h2 id="26、rgba-和opacity的透明效果有什么不同？"><a href="#26、rgba-和opacity的透明效果有什么不同？" class="headerlink" title="26、rgba()和opacity的透明效果有什么不同？"></a>26、rgba()和opacity的透明效果有什么不同？</h2><p>rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度，</p>
<p>而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！）</p>
<h2 id="27、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？"><a href="#27、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？" class="headerlink" title="27、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？"></a>27、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？</h2><p>垂直方向：line-height</p>
<p>水平方向：letter-spacing</p>
<p>那么问题来了，关于letter-spacing的妙用知道有哪些么？</p>
<p>答案:可以用于消除inline-block元素间的换行符空格间隙问题。</p>
<h2 id="28、如何垂直居中一个浮动元素？"><a href="#28、如何垂直居中一个浮动元素？" class="headerlink" title="28、如何垂直居中一个浮动元素？"></a>28、如何垂直居中一个浮动元素？</h2><table>
<thead>
<tr>
<th>1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28</th>
<th>// 方法一：已知元素的高宽  #div1{    background-color:#6699FF;    width:200px;    height:200px;    position: absolute;      //父元素需要相对定位    top: 50%;    left: 50%;    margin-top:-100px ;  //二分之一的height，width    margin-left: -100px;    }     //方法二:未知元素的高宽      #div1{    width: 200px;    height: 200px;    background-color: #6699FF;       margin:auto;    position:  absolute;    //父元素需要相对定位    left: 0;    top: 0;    right: 0;    bottom: 0;    }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>那么问题来了，如何垂直居中一个<img>?（用更简便的方法。）</p>
<table>
<thead>
<tr>
<th>1  2  3  4  5  6</th>
<th>#container   //<img>的容器设置如下  {    display:table-cell;    text-align:center;    vertical-align:middle;  }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="29、px和em的区别。"><a href="#29、px和em的区别。" class="headerlink" title="29、px和em的区别。"></a>29、px和em的区别。</h2><p>px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。em得值不是固定的，并且em会继承父级元素的字体大小。</p>
<p>浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em。</p>
<h2 id="30、描述一个”reset”的CSS文件并如何使用它。知道normalize-css吗？你了解他们的不同之处？"><a href="#30、描述一个”reset”的CSS文件并如何使用它。知道normalize-css吗？你了解他们的不同之处？" class="headerlink" title="30、描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？"></a>30、描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？</h2><p>重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。</p>
<p>你可能会用<a href="http://necolas.github.io/normalize.css/">Normalize</a>来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。</p>
<p>在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的audio元素不一致或line-height不一致。</p>
<h2 id="31、Sass、LESS是什么？大家为什么要使用他们？"><a href="#31、Sass、LESS是什么？大家为什么要使用他们？" class="headerlink" title="31、Sass、LESS是什么？大家为什么要使用他们？"></a>31、Sass、LESS是什么？大家为什么要使用他们？</h2><p>他们是CSS预处理器。他是CSS上的一种抽象层。他们是一种特殊的语法/语言编译成CSS。</p>
<p>例如<a href="http://www.lesscss.org/">Less</a>是一种动态样式语言. 将CSS赋予了动态语言的特性，如变量，继承，运算， 函数. LESS 既可以在客户端上运行 (支持IE 6+, Webkit, Firefox)，也可一在服务端运行 (借助 Node.js)。</p>
<p>为什么要使用它们？</p>
<p>结构清晰，便于扩展。</p>
<p>可以方便地屏蔽浏览器私有语法差异。这个不用多说，封装对浏览器语法差异的重复处理，减少无意义的机械劳动。</p>
<p>可以轻松实现多重继承。</p>
<p>完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。</p>
<h2 id="32、display-none与visibility-hidden的区别是什么？"><a href="#32、display-none与visibility-hidden的区别是什么？" class="headerlink" title="32、display:none与visibility:hidden的区别是什么？"></a>32、display:none与visibility:hidden的区别是什么？</h2><p>display : 隐藏对应的元素但不挤占该元素原来的空间。</p>
<p>visibility: 隐藏对应的元素并且挤占该元素原来的空间。</p>
<p>即是，使用CSS display:none属性后，HTML元素（对象）的宽度、高度等各种属性值都将“丢失”;而使用visibility:hidden属性后，HTML元素（对象）仅仅是在视觉上看不见（完全透明），而它所占据的空间位置仍然存在。</p>
<h2 id="34、CSS中link和-import的区别是："><a href="#34、CSS中link和-import的区别是：" class="headerlink" title="34、CSS中link和@import的区别是："></a>34、CSS中link和@import的区别是：</h2><p>Link属于html标签，而@import是CSS中提供的</p>
<p>在页面加载的时候，link会同时被加载，而@import引用的CSS会在页面加载完成后才会加载引用的CSS</p>
<p>@import只有在ie5以上才可以被识别，而link是html标签，不存在浏览器兼容性问题</p>
<p>Link引入样式的权重大于@import的引用（@import是将引用的样式导入到当前的页面中）</p>
<h2 id="35、简介盒子模型："><a href="#35、简介盒子模型：" class="headerlink" title="35、简介盒子模型："></a>35、简介盒子模型：</h2><p>CSS的盒子模型有两种：IE盒子模型、标准的W3C盒子模型模型</p>
<p>盒模型：内容、内边距、外边距（一般不计入盒子实际宽度）、边框</p>
<p><img src="file:///C:/Users/86136/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg" alt="img"></p>
<h2 id="36、为什么要初始化样式？"><a href="#36、为什么要初始化样式？" class="headerlink" title="36、为什么要初始化样式？"></a>36、为什么要初始化样式？</h2><p>由于浏览器兼容的问题，不同的浏览器对标签的默认样式值不同，若不初始化会造成不同浏览器之间的显示差异</p>
<p>但是初始化CSS会对搜索引擎优化造成小影响</p>
<h2 id="37、BFC是什么"><a href="#37、BFC是什么" class="headerlink" title="37、BFC是什么?"></a>37、BFC是什么?</h2><p>BFC（块级格式化上下文），一个创建了新的BFC的盒子是独立布局的，盒子内元素的布局不会影响盒子外面的元素。在同一个BFC中的两个相邻的盒子在垂直方向发生margin重叠的问题</p>
<p>BFC是指浏览器中创建了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布局，这个渲染区域只对块级元素起作用</p>
<h2 id="38、html语义化是什么？"><a href="#38、html语义化是什么？" class="headerlink" title="38、html语义化是什么？"></a>38、html语义化是什么？</h2><p>当页面样式加载失败的时候能够让页面呈现出清晰的结构</p>
<p>有利于seo优化，利于被搜索引擎收录（更便于搜索引擎的爬虫程序来识别）</p>
<p>便于项目的开发及维护，使html代码更具有可读性，便于其他设备解析。</p>
<h2 id="39、Doctype的作用？严格模式与混杂模式的区别？"><a href="#39、Doctype的作用？严格模式与混杂模式的区别？" class="headerlink" title="39、Doctype的作用？严格模式与混杂模式的区别？"></a>39、Doctype的作用？严格模式与混杂模式的区别？</h2><!DOCTYPE><p>用于告知浏览器该以何种模式来渲染文档</p>
<p>严格模式下：页面排版及JS解析是以该浏览器支持的最高标准来执行</p>
<p>混杂模式：不严格按照标准执行，主要用来兼容旧的浏览器，向后兼容</p>
<h2 id="40、IE的双边距BUG：块级元素float后设置横向margin，ie6显示的margin比设置的较大。解决：加入-display：inline"><a href="#40、IE的双边距BUG：块级元素float后设置横向margin，ie6显示的margin比设置的较大。解决：加入-display：inline" class="headerlink" title="40、IE的双边距BUG：块级元素float后设置横向margin，ie6显示的margin比设置的较大。解决：加入_display：inline"></a>40、IE的双边距BUG：块级元素float后设置横向margin，ie6显示的margin比设置的较大。解决：加入_display：inline</h2><h2 id="41、HTML与XHTML——二者有什么区别？"><a href="#41、HTML与XHTML——二者有什么区别？" class="headerlink" title="41、HTML与XHTML——二者有什么区别？"></a>41、HTML与XHTML——二者有什么区别？</h2><p>\1. 所有的标记都必须要有一个相应的结束标记</p>
<p>\2. 所有标签的元素和属性的名字都必须使用小写</p>
<p>\3. 所有的 XML 标记都必须合理嵌套</p>
<p>\4. 所有的属性必须用引号 “” 括起来</p>
<p>\5. 把所有 &lt; 和 &amp; 特殊符号用编码表示</p>
<p>\6. 给所有属性赋一个值</p>
<p>\7. 不要在注释内容中使用 “–”</p>
<p>\8. 图片必须有说明文字</p>
<h2 id="42、html常见兼容性问题？"><a href="#42、html常见兼容性问题？" class="headerlink" title="42、html常见兼容性问题？"></a>42、html常见兼容性问题？</h2><p>1.双边距BUG float引起的 使用display</p>
<p>2.3像素问题 使用float引起的 使用dislpay:inline -3px </p>
<p>3.超链接hover 点击后失效 使用正确的书写顺序 link visited hover active</p>
<p>4.Ie z-index问题 给父级添加position:relative</p>
<p>5.Png 透明 使用js代码 改</p>
<p>6.Min-height 最小高度 ！Important 解决’</p>
<p>7.select 在ie6下遮盖 使用iframe嵌套</p>
<p>8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）</p>
<p>9.IE5-8不支持opacity，解决办法：</p>
<p>.opacity {</p>
<p>  opacity: 0.4</p>
<p>  filter: alpha(opacity=60); /* for IE5-7 */</p>
<p>  -ms-filter: “progid:DXImageTransform.Microsoft.Alpha(Opacity=60)”; /* for IE 8*/</p>
<p>}</p>
<p>\10. IE6不支持PNG透明背景，解决办法: IE6下使用gif图片</p>
<h2 id="43、对WEB标准以及W3C的理解与认识"><a href="#43、对WEB标准以及W3C的理解与认识" class="headerlink" title="43、对WEB标准以及W3C的理解与认识"></a>43、对WEB标准以及W3C的理解与认识</h2><p>答：标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性。</p>
<h2 id="44、行内元素有哪些-块级元素有哪些-CSS的盒模型"><a href="#44、行内元素有哪些-块级元素有哪些-CSS的盒模型" class="headerlink" title="44、行内元素有哪些?块级元素有哪些?CSS的盒模型?"></a>44、行内元素有哪些?块级元素有哪些?CSS的盒模型?</h2><p>答：块级元素：div p h1 h2 h3 h4 form ul<br> 行内元素: a b br i span input select<br> Css盒模型:内容，border ,margin，padding</p>
<h2 id="45、前端页面有哪三层构成，分别是什么-作用是什么"><a href="#45、前端页面有哪三层构成，分别是什么-作用是什么" class="headerlink" title="45、前端页面有哪三层构成，分别是什么?作用是什么?"></a>45、前端页面有哪三层构成，分别是什么?作用是什么?</h2><p>答：结构层 Html 表示层 CSS 行为层 js。</p>
<h2 id="46、Doctype作用-严格模式与混杂模式-如何触发这两种模式，区分它们有何意义"><a href="#46、Doctype作用-严格模式与混杂模式-如何触发这两种模式，区分它们有何意义" class="headerlink" title="46、Doctype作用? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?"></a>46、Doctype作用? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?</h2><p>  （1）、&lt;!DOCTYPE&gt; 声明位于文档中的最前面，处于 <html> 标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。 </p>
<p>  （2）、严格模式的排版和 JS 运作模式是 以该浏览器支持的最高标准运行。</p>
<p>  （3）、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。</p>
<p>  （4）、DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。</p>
<h2 id="47、行内元素有哪些？块级元素有哪些？-空-void-元素有那些？"><a href="#47、行内元素有哪些？块级元素有哪些？-空-void-元素有那些？" class="headerlink" title="47、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？"></a>47、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h2><p>（1）CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，比如div默认display属性值为“block”，成为“块级”元素；span默认display属性值为“inline”，是“行内”元素。 </p>
<p>（2）行内元素有：a b span img input select strong（强调的语气） 块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p </p>
<p>（3）知名的空元素：   </p>
<p><br><hr><img><input><link><meta>鲜为人知的是： <area><base><col><command></p>
<p><embed><keygen><param><source><track><wbr></p>
<h2 id="48、CSS的盒子模型？"><a href="#48、CSS的盒子模型？" class="headerlink" title="48、CSS的盒子模型？"></a>48、CSS的盒子模型？</h2><p>（1）两种， IE 盒子模型、标准 W3C 盒子模型；IE 的content部分包含了 border 和 padding;</p>
<p>（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border).</p>
<h2 id="49、CSS-选择符有哪些？哪些属性可以继承？优先级算法如何计算？-CSS3新增伪类有那些？"><a href="#49、CSS-选择符有哪些？哪些属性可以继承？优先级算法如何计算？-CSS3新增伪类有那些？" class="headerlink" title="49、CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？"></a>49、CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？</h2><p>  *  1.id选择器（ # myid）</p>
<p>​    2.类选择器（.myclassname）</p>
<p>​    3.标签选择器（div, h1, p）</p>
<p>​    4.相邻选择器（h1 + p）</p>
<p>​    5.子选择器（ul &lt; li）</p>
<p>​    6.后代选择器（li a）</p>
<p>​    7.通配符选择器（ * ）</p>
<p>​    8.属性选择器（a[rel = “external”]）</p>
<p>​    9.伪类选择器（a: hover, li: nth - child）</p>
<p>  *  可继承： font-size font-family color, UL LI DL DD DT;</p>
<p>  *  不可继承 ：border padding margin width height ;</p>
<p>  *  优先级就近原则，样式定义最近者为准;</p>
<p>  *  载入样式以最后载入的定位为准;</p>
<p>优先级为:</p>
<p>​    !important &gt; id &gt; class &gt; tag </p>
<p>​    important 比 内联优先级高</p>
<p>CSS3新增伪类举例：</p>
<p>  p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。</p>
<p>  p:last-of-type 选择属于其父元素的最后 <p> 元素的每个 <p> 元素。</p>
<p>  p:only-of-type 选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。</p>
<p>  p:only-child  选择属于其父元素的唯一子元素的每个 <p> 元素。</p>
<p>  p:nth-child(2) 选择属于其父元素的第二个子元素的每个 <p> 元素。</p>
<p>  :enabled、:disabled 控制表单控件的禁用状态。</p>
<p>  :checked，单选框或复选框被选中。</p>
<h2 id="50、如何居中div-如何居中一个浮动元素"><a href="#50、如何居中div-如何居中一个浮动元素" class="headerlink" title="50、如何居中div,如何居中一个浮动元素?"></a>50、如何居中div,如何居中一个浮动元素?</h2><p>给div设置一个宽度，然后添加margin:0 auto属性</p>
<p>  div{</p>
<p>​    width:200px;</p>
<p>​    margin:0 auto;</p>
<p>   } </p>
<p>居中一个浮动元素</p>
<p>   确定容器的宽高 宽500 高 300 的层</p>
<p>   设置层的外边距</p>
<p>   .div { </p>
<p>   Width:500px ; height:300px;//高度可以不设</p>
<p>   Margin: -150px 0 0 -250px;</p>
<p>   position:relative;相对定位</p>
<p>   background-color:pink;//方便看效果</p>
<p>   left:50%;</p>
<p>   top:50%;</p>
<p>  }</p>
<h2 id="51、浏览器的内核分别是什么-经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧-？"><a href="#51、浏览器的内核分别是什么-经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧-？" class="headerlink" title="51、浏览器的内核分别是什么?经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？"></a>51、浏览器的内核分别是什么?经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？</h2><p>  * IE浏览器的内核Trident、 Mozilla的Gecko、google的WebKit、Opera内核Presto；</p>
<p>  * png24为的图片在iE6浏览器上出现背景，解决方案是做成PNG8.</p>
<p>  * 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。</p>
<p>  * IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。</p>
<p>   浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;} </p>
<p>   这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)</p>
<p>   渐进识别的方式，从总体中逐渐排除局部。</p>
<p>   首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。 </p>
<p>   接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。</p>
<p>   css</p>
<p>​     .bb{</p>
<p>​      background-color:#f1ee18;/<em>所有识别</em>/</p>
<p>​     .background-color:#00deff\9; /<em>IE6、7、8识别</em>/</p>
<p>​     +background-color:#a200ff;/<em>IE6、7识别</em>/</p>
<p>​     _background-color:#1e0bd1;/<em>IE6识别</em>/</p>
<p>​     } </p>
<p>  * IE下,可以使用获取常规属性的方法来获取自定义属性,</p>
<p>​    也可以使用getAttribute()获取自定义属性;</p>
<p>​    Firefox下,只能使用getAttribute()获取自定义属性. </p>
<p>​    解决方法:统一通过getAttribute()获取自定义属性.</p>
<p>  * IE下,even对象有x,y属性,但是没有pageX,pageY属性; </p>
<p>   Firefox下,event对象有pageX,pageY属性,但是没有x,y属性.</p>
<p>  * （条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。</p>
<p>  * Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示, 可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决.</p>
<p>  超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:</p>
<p>  L-V-H-A : a:link {} a:visited {} a:hover {} a:active {}</p>
<h2 id="52、列出display的值，说明他们的作用。position的值，-relative和absolute定位原点是？"><a href="#52、列出display的值，说明他们的作用。position的值，-relative和absolute定位原点是？" class="headerlink" title="52、列出display的值，说明他们的作用。position的值， relative和absolute定位原点是？"></a>52、列出display的值，说明他们的作用。position的值， relative和absolute定位原点是？</h2><p> \1. block 象块类型元素一样显示。</p>
<p> none 缺省值。向行内元素类型一样显示。</p>
<p> inline-block 象行内元素一样显示，但其内容象块类型元素一样显示。</p>
<p> list-item 象块类型元素一样显示，并添加样式列表标记。</p>
<p> \2. position的值</p>
<p> *absolute </p>
<p>​    生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。 </p>
<p> *fixed （老IE不支持）</p>
<p>​    生成绝对定位的元素，相对于浏览器窗口进行定位。</p>
<p> * relative </p>
<p>​    生成相对定位的元素，相对于其正常位置进行定位。</p>
<p> * static 默认值。没有定位，元素出现在正常的流中</p>
<p> *（忽略 top, bottom, left, right z-index 声明）。</p>
<p> * inherit 规定从父元素继承 position 属性的值。</p>
<h2 id="53、absolute的containing-block计算方式跟正常流有什么不同？"><a href="#53、absolute的containing-block计算方式跟正常流有什么不同？" class="headerlink" title="53、absolute的containing block计算方式跟正常流有什么不同？"></a>53、absolute的containing block计算方式跟正常流有什么不同？</h2><h2 id="54、position跟display、margin-collapse、overflow、float这些特性相互叠加后会怎么样？"><a href="#54、position跟display、margin-collapse、overflow、float这些特性相互叠加后会怎么样？" class="headerlink" title="54、position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？"></a>54、position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</h2><h2 id="55、对WEB标准以及W3C的理解与认识"><a href="#55、对WEB标准以及W3C的理解与认识" class="headerlink" title="55、对WEB标准以及W3C的理解与认识"></a>55、对WEB标准以及W3C的理解与认识</h2><p>标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性；</p>
<h2 id="56、css的基本语句构成是"><a href="#56、css的基本语句构成是" class="headerlink" title="56、css的基本语句构成是?"></a>56、css的基本语句构成是?</h2><p>选择器{属性1:值1;属性2:值2;……}</p>
<h2 id="57、浏览器标准模式和怪异模式之间的区别是什么"><a href="#57、浏览器标准模式和怪异模式之间的区别是什么" class="headerlink" title="57、浏览器标准模式和怪异模式之间的区别是什么?"></a>57、浏览器标准模式和怪异模式之间的区别是什么?</h2><p>盒子模型 渲染模式的不同</p>
<p>使用 window.top.document.compatMode 可显示为什么模式</p>
<h2 id="58、CSS-中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？"><a href="#58、CSS-中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？" class="headerlink" title="58、CSS****中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？"></a>58、<strong>CSS****中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？</strong></h2><p>　　最基本的：</p>
<p>　　设置display属性为none，或者设置visibility属性为hidden</p>
<p>　　技巧性：</p>
<p>　　设置宽高为0，设置透明度为0，设置z-index位置在-1000</p>
<h2 id="59、超链接访问过后hover样式就不出现的问题是什么？如何解决？"><a href="#59、超链接访问过后hover样式就不出现的问题是什么？如何解决？" class="headerlink" title="59、超链接访问过后hover样式就不出现的问题是什么？如何解决？"></a>59、<strong>超链接访问过后hover样式就不出现的问题是什么？如何解决？</strong></h2><p>　　答案：被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）</p>
<h2 id="60-、什么是Css-Hack？ie6-7-8的hack分别是什么？"><a href="#60-、什么是Css-Hack？ie6-7-8的hack分别是什么？" class="headerlink" title="60****、什么是Css Hack？ie6,7,8的hack分别是什么？"></a><strong>60****、什么是Css Hack？ie6,7,8的hack分别是什么？</strong></h2><p>　　答案：针对不同的浏览器写不同的CSS code的过程，就是CSS hack。</p>
<p>　　示例如下：</p>
<p>#test    {  </p>
<p>​    width:300px;  </p>
<p>​    height:300px;  </p>
<p>​    background-color:blue;   /<em>firefox</em>/</p>
<p>​    background-color:red\9;   /<em>all ie</em>/</p>
<p>​    background-color:yellow\0;  /<em>ie8</em>/</p>
<p>​    +background-color:pink;    /<em>ie7</em>/</p>
<p>​    _background-color:orange;    /<em>ie6</em>/  } </p>
<p>​    :root #test { background-color:purple\9; } /<em>ie9</em>/</p>
<p>  @media all and (min-width:0px){ #test {background-color:black\0;} } /<em>opera</em>/</p>
<p>  @media screen and (-webkit-min-device-pixel-ratio:0){ #test {background-color:gray;} }    /<em>chrome and safari</em>/</p>
<h2 id="62-、请用Css写一个简单的幻灯片效果页面"><a href="#62-、请用Css写一个简单的幻灯片效果页面" class="headerlink" title="62****、请用Css写一个简单的幻灯片效果页面"></a><strong>62****、请用Css写一个简单的幻灯片效果页面</strong></h2><p>　　答案：知道是要用css3。使用animation动画实现一个简单的幻灯片效果。</p>
<p>/<strong>HTML</strong>/</p>
<p>​    div.ani</p>
<p>​    /<strong>css</strong>/</p>
<p>​    .ani{</p>
<p>​     width:480px;</p>
<p>​     height:320px;</p>
<p>​     margin:50px auto;</p>
<p>​     overflow: hidden;</p>
<p>​     box-shadow:0 0 5px rgba(0,0,0,1);</p>
<p>​     background-size: cover;</p>
<p>​     background-position: center;</p>
<p>​     -webkit-animation-name: “loops”;</p>
<p>​     -webkit-animation-duration: 20s;</p>
<p>​     -webkit-animation-iteration-count: infinite;</p>
<p>​    }</p>
<p>​    @-webkit-keyframes “loops” {</p>
<p>​      0% { background:url(<a href="http://d.hiphotos.baidu.com/image/w%3D400/sign=c01e6adca964034f0fcdc3069fc27980/e824b899a9014c08e5e38ca4087b02087af4f4d3.jpg">http://d.hiphotos.baidu.com/image/w%3D400/sign=c01e6adca964034f0fcdc3069fc27980/e824b899a9014c08e5e38ca4087b02087af4f4d3.jpg</a>) no-repeat;       </p>
<p>​      }</p>
<p>​      25% {</p>
<p>​        background:url(<a href="http://b.hiphotos.baidu.com/image/w%3D400/sign=edee1572e9f81a4c2632edc9e72b6029/30adcbef76094b364d72bceba1cc7cd98c109dd0.jpg">http://b.hiphotos.baidu.com/image/w%3D400/sign=edee1572e9f81a4c2632edc9e72b6029/30adcbef76094b364d72bceba1cc7cd98c109dd0.jpg</a>) no-repeat;</p>
<p>​      }</p>
<p>​      50% {</p>
<p>​        background:url(<a href="http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be2353266255/d8f9d72a6059252d258e7605369b033b5bb5b912.jpg">http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be2353266255/d8f9d72a6059252d258e7605369b033b5bb5b912.jpg</a>) no-repeat;</p>
<p>​      }</p>
<p>​      75% {</p>
<p>​        background:url(<a href="http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544ebf86d71653fe9f9d736/0df431adcbef76095d61f0972cdda3cc7cd99e4b.jpg">http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544ebf86d71653fe9f9d736/0df431adcbef76095d61f0972cdda3cc7cd99e4b.jpg</a>) no-repeat;</p>
<p>​      }</p>
<p>​      100% {</p>
<p>​        background:url(<a href="http://c.hiphotos.baidu.com/image/w%3D400/sign=cfb239ceb0fb43161a1f7b7a10a54642/3b87e950352ac65ce2e73f76f9f2b21192138ad1.jpg">http://c.hiphotos.baidu.com/image/w%3D400/sign=cfb239ceb0fb43161a1f7b7a10a54642/3b87e950352ac65ce2e73f76f9f2b21192138ad1.jpg</a>) no-repeat;</p>
<p>​      }</p>
<p>​    }</p>
<h2 id="63-、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？"><a href="#63-、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？" class="headerlink" title="63****、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？"></a><strong>63****、行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？</strong></h2><p>　　<strong>块级元素(block)特性：</strong></p>
<p>·         总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;</p>
<p>·         宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;</p>
<p>　　<strong>内联元素(inline)特性：</strong></p>
<p>·         和相邻的内联元素在同一行;</p>
<p>·         宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。</p>
<p>　　那么问题来了，<strong>浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些</strong>？</p>
<p>　　答案：<input> 、<img> 、<button> 、<textarea> 、<label></p>
<h2 id="64、什么是外边距重叠？重叠的结果是什么？"><a href="#64、什么是外边距重叠？重叠的结果是什么？" class="headerlink" title="64、什么是外边距重叠？重叠的结果是什么？"></a>64、<strong>什么是外边距重叠？重叠的结果是什么？</strong></h2><p>　　答案：</p>
<p>　　外边距重叠就是margin-collapse。</p>
<p>　　在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。</p>
<p>　　折叠结果遵循下列计算规则：</p>
<p>\1.    两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。</p>
<p>\2.    两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。</p>
<p>\3.    两个外边距一正一负时，折叠结果是两者的相加的和。</p>
<p>　　</p>
<h2 id="65-、rgba-和opacity的透明效果有什么不同？"><a href="#65-、rgba-和opacity的透明效果有什么不同？" class="headerlink" title="65****、rgba()和opacity的透明效果有什么不同？"></a><strong>65****、rgba()和opacity的透明效果有什么不同？</strong></h2><p>　　rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度，</p>
<p>　　而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！）</p>
<h2 id="66-、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？"><a href="#66-、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？" class="headerlink" title="66****、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？"></a><strong>66****、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？</strong></h2><p>　　垂直方向：line-height</p>
<p>　　水平方向：letter-spacing</p>
<p>　　<strong>那么问题来了，关于letter-spacing的妙用知道有哪些么？</strong></p>
<p>　　答案:可以用于消除inline-block元素间的换行符空格间隙问题。</p>
<h2 id="67-、如何垂直居中一个浮动元素？"><a href="#67-、如何垂直居中一个浮动元素？" class="headerlink" title="67****、如何垂直居中一个浮动元素？"></a><strong>67****、如何垂直居中一个浮动元素？</strong></h2><p>// 方法一：已知元素的高宽</p>
<p>#div1{</p>
<p>  background-color:#6699FF;</p>
<p>  width:200px;</p>
<p>  height:200px;</p>
<p>  position: absolute;    //父元素需要相对定位</p>
<p>  top: 50%;</p>
<p>  left: 50%;</p>
<p>  margin-top:-100px ;  //二分之一的height，width</p>
<p>  margin-left: -100px;</p>
<p>  }</p>
<p>//方法二:未知元素的高宽</p>
<p> #div1{</p>
<p>  width: 200px;</p>
<p>  height: 200px;</p>
<p>  background-color: #6699FF;</p>
<p>  margin:auto;</p>
<p>  position: absolute;    //父元素需要相对定位</p>
<p>  left: 0;</p>
<p>  top: 0;</p>
<p>  right: 0;</p>
<p>  bottom: 0;</p>
<p>  }</p>
<p>**那么问题来了，如何垂直居中一个<img>?**（用更简便的方法。）</p>
<p>#container   //<img>的容器设置如下</p>
<p>{</p>
<p>  display:table-cell;</p>
<p>  text-align:center;</p>
<p>  vertical-align:middle;</p>
<p>}</p>
<h2 id="68-、描述一个”reset”的CSS文件并如何使用它。知道normalize-css吗？你了解他们的不同之处？"><a href="#68-、描述一个”reset”的CSS文件并如何使用它。知道normalize-css吗？你了解他们的不同之处？" class="headerlink" title="68****、描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？"></a><strong>68****、描述一个”reset”的CSS文件并如何使用它。知道</strong><code>normalize.css</code><strong>吗？你了解他们的不同之处？</strong></h2><p>　　重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。</p>
<p>　　你可能会用<a href="http://necolas.github.io/normalize.css/">Normalize</a>来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。</p>
<p>　　在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的<code>audio</code>元素不一致或<code>line-height</code>不一致。</p>
<h2 id="69、说display属性有哪些？可以做什么？"><a href="#69、说display属性有哪些？可以做什么？" class="headerlink" title="69、说display属性有哪些？可以做什么？"></a>69、说display属性有哪些？可以做什么？</h2><p>display:block行内元素转换为块级元素</p>
<p> display:inline块级元素转换为行内元素</p>
<p> display:inline-block转为内联元素</p>
<h2 id="70、哪些css属性可以继承？"><a href="#70、哪些css属性可以继承？" class="headerlink" title="70、哪些css属性可以继承？"></a>70、哪些css属性可以继承？</h2><p>可继承： font-size font-family color, ul li dl dd dt;</p>
<p> 不可继承 ：border padding margin width height ;</p>
<h2 id="71、css优先级算法如何计算？"><a href="#71、css优先级算法如何计算？" class="headerlink" title="71、css优先级算法如何计算？"></a>71、css优先级算法如何计算？</h2><p>!important &gt; id &gt; class &gt; 标签 </p>
<p> !important 比 内联优先级高</p>
<p> *优先级就近原则，样式定义最近者为准;</p>
<p> *以最后载入的样式为准;</p>
<h2 id="72、b标签和strong标签-i标签和em标签的区别？"><a href="#72、b标签和strong标签-i标签和em标签的区别？" class="headerlink" title="72、b标签和strong标签,i标签和em标签的区别？"></a>72、b标签和strong标签,i标签和em标签的区别？</h2><p>后者有语义，前者则无。</p>
<h2 id="73、有那些行内元素、有哪些块级元素、盒模型？"><a href="#73、有那些行内元素、有哪些块级元素、盒模型？" class="headerlink" title="73、有那些行内元素、有哪些块级元素、盒模型？"></a>73、有那些行内元素、有哪些块级元素、盒模型？</h2><p>1.内联元素(inline element)</p>
<p>a – 锚点</p>
<p>abbr – 缩写</p>
<p>acronym – 首字</p>
<p>b – 粗体(不推荐)</p>
<p>big – 大字体</p>
<p>br – 换行</p>
<p>em – 强调</p>
<p>font – 字体设定(不推荐)</p>
<p>i – 斜体</p>
<p>img – 图片</p>
<p>input – 输入框</p>
<p>label – 表格标签</p>
<p>s – 中划线(不推荐)</p>
<p>select – 项目选择</p>
<p>small – 小字体文本</p>
<p>span – 常用内联容器，定义文本内区块</p>
<p>strike – 中划线</p>
<p>strong – 粗体强调</p>
<p>sub – 下标</p>
<p>sup – 上标</p>
<p>textarea – 多行文本输入框</p>
<p>tt – 电传文本</p>
<p>u – 下划线</p>
<p>var – 定义变量</p>
<p>2、块级元素</p>
<p>address – 地址</p>
<p>blockquote – 块引用</p>
<p>center – 举中对齐块</p>
<p>dir – 目录列表</p>
<p>div – 常用块级容易，也是css layout的主要标签</p>
<p>dl – 定义列表</p>
<p>fieldset – form控制组</p>
<p>form – 交互表单</p>
<p>h1 – 大标题</p>
<p>h2 – 副标题</p>
<p>h3 – 3级标题</p>
<p>h4 – 4级标题</p>
<p>h5 – 5级标题</p>
<p>h6 – 6级标题</p>
<p>hr – 水平分隔线</p>
<p>isindex – input prompt</p>
<p>menu – 菜单列表</p>
<p>noframes – frames可选内容，（对于不支持frame的浏览器显示此区块内容）</p>
<p>noscript – ）可选脚本内容（对于不支持script的浏览器显示此内容）</p>
<p>ol – 排序表单</p>
<p>p – 段落</p>
<p>pre – 格式化文本</p>
<p>table – 表格</p>
<p>ul – 非排序列表</p>
<p>3.CSS盒子模型包含四个部分组成：</p>
<p>内容、填充（padding）、边框（border）、外边界（margin）。</p>
<h2 id="74、有哪些选择符，优先级的计算公式是什么？行内样式和！important哪个优先级高？"><a href="#74、有哪些选择符，优先级的计算公式是什么？行内样式和！important哪个优先级高？" class="headerlink" title="74、有哪些选择符，优先级的计算公式是什么？行内样式和！important哪个优先级高？"></a>74、有哪些选择符，优先级的计算公式是什么？行内样式和！important哪个优先级高？</h2><p>#ID &gt; .class &gt; 标签选择符 !important优先级高</p>
<h2 id="75-我想让行内元素跟上面的元素距离10px，加margin-top和padding-top可以吗？"><a href="#75-我想让行内元素跟上面的元素距离10px，加margin-top和padding-top可以吗？" class="headerlink" title="75.我想让行内元素跟上面的元素距离10px，加margin-top和padding-top可以吗？"></a>75.我想让行内元素跟上面的元素距离10px，加margin-top和padding-top可以吗？</h2><p> margin-top,padding-top无效</p>
<h2 id="76-CSS的盒模型由什么组成？"><a href="#76-CSS的盒模型由什么组成？" class="headerlink" title="76.CSS的盒模型由什么组成？"></a>76.CSS的盒模型由什么组成？</h2><p> 内容，border ,margin，padding</p>
<h2 id="77、-说说display属性有哪些？可以做什么？"><a href="#77、-说说display属性有哪些？可以做什么？" class="headerlink" title="77、.说说display属性有哪些？可以做什么？"></a>77、.说说display属性有哪些？可以做什么？</h2><p> display:block行内元素转换为块级元素</p>
<p> display:inline块级元素转换为行内元素</p>
<p> display:inline-block转为内联元素</p>
<h2 id="78、哪些css属性可以继承？"><a href="#78、哪些css属性可以继承？" class="headerlink" title="78、哪些css属性可以继承？"></a>78、哪些css属性可以继承？</h2><p> 可继承： font-size font-family color, ul li dl dd dt;</p>
<p> 不可继承 ：border padding margin width height ;</p>
<h2 id="79、css优先级算法如何计算？"><a href="#79、css优先级算法如何计算？" class="headerlink" title="79、css优先级算法如何计算？"></a>79、css优先级算法如何计算？</h2><p> !important &gt; id &gt; class &gt; 标签</p>
<p> !important 比 内联优先级高</p>
<p> * 优先级就近原则，样式定义最近者为准;</p>
<p> * 以最后载入的样式为准;</p>
<h2 id="80、text-align-center和line-height有什么区别？"><a href="#80、text-align-center和line-height有什么区别？" class="headerlink" title="80、text-align:center和line-height有什么区别？"></a>80、text-align:center和line-height有什么区别？</h2><p> text-align是水平对齐，line-height是行间。</p>
<h2 id="81、前端页面由哪三层构成，分别是什么？作用是什么？"><a href="#81、前端页面由哪三层构成，分别是什么？作用是什么？" class="headerlink" title="81、前端页面由哪三层构成，分别是什么？作用是什么？"></a>81、前端页面由哪三层构成，分别是什么？作用是什么？</h2><p>  结构层 Html 表示层 CSS 行为层 js</p>
<h2 id="82、写一个表格以及对应的CSS-使表格奇数行为白色背景，偶数行为灰色，鼠标一上去为黄色背景。"><a href="#82、写一个表格以及对应的CSS-使表格奇数行为白色背景，偶数行为灰色，鼠标一上去为黄色背景。" class="headerlink" title="82、写一个表格以及对应的CSS,使表格奇数行为白色背景，偶数行为灰色，鼠标一上去为黄色背景。"></a>82、写一个表格以及对应的CSS,使表格奇数行为白色背景，偶数行为灰色，鼠标一上去为黄色背景。</h2><h1 id="二、JS基础"><a href="#二、JS基础" class="headerlink" title="二、JS基础"></a>二、JS基础</h1><h2 id="1、javascript的typeof返回哪些数据类型"><a href="#1、javascript的typeof返回哪些数据类型" class="headerlink" title="1、javascript的typeof返回哪些数据类型"></a>1、javascript的typeof返回哪些数据类型</h2><p>object number function boolean underfind string</p>
<p>typeof null;//object</p>
<p>typeof isNaN;//</p>
<p>typeof isNaN(123)</p>
<p>typeof [];//object </p>
<p>Array.isARRAY(); es5</p>
<p>toString.call([]);//”[object Array]”</p>
<p>var arr=[];</p>
<p>arr.constructor;//Array</p>
<h2 id="2、例举3种强制类型转换和2种隐式类型转换"><a href="#2、例举3种强制类型转换和2种隐式类型转换" class="headerlink" title="2、例举3种强制类型转换和2种隐式类型转换?"></a>2、例举3种强制类型转换和2种隐式类型转换?</h2><p>强制（parseInt,parseFloat,Number()）</p>
<p>隐式（==）</p>
<p>1==”1”//true</p>
<p>null==undefined//true</p>
<h2 id="3、split-join-的区别"><a href="#3、split-join-的区别" class="headerlink" title="3、split() join() 的区别"></a>3、split() join() 的区别</h2><p>前者是切割成数组的形式，</p>
<p>后者是将数组转换成字符串</p>
<h2 id="4、数组方法pop-push-unshift-shift"><a href="#4、数组方法pop-push-unshift-shift" class="headerlink" title="4、数组方法pop() push() unshift() shift()"></a>4、数组方法pop() push() unshift() shift()</h2><p>Push()尾部添加 pop()尾部删除</p>
<p>Unshift()头部添加 shift()头部删除</p>
<h2 id="5、事件绑定和普通事件有什么区别"><a href="#5、事件绑定和普通事件有什么区别" class="headerlink" title="5、事件绑定和普通事件有什么区别"></a>5、事件绑定和普通事件有什么区别</h2><p>传统事件绑定和符合W3C标准的事件绑定有什么区别？</p>
<p>普通事件:div1.onclick=function(){};</p>
<p><button onmouseover=""></button></p>
<p>1、如果说给同一个元素绑定了两次或者多次相同类型的事件，那么后面的绑定会覆盖前面的绑定</p>
<p>2、不支持DOM事件流 事件捕获阶段è目标元素阶段=&gt;事件冒泡阶段</p>
<p>事件绑定:addEventListener</p>
<p>1、 如果说给同一个元素绑定了两次或者多次相同类型的事件，所以的绑定将会依次触发</p>
<p>2、 支持DOM事件流的</p>
<p>3、 进行事件绑定传参不需要on前端</p>
<p>addEventListener(“click”,function(){},true);//此时的事件就是在事件冒泡阶段执行</p>
<p>ie9开始，ie11 edge：addEventListener</p>
<p>ie9以前：attachEvent/detachEvent</p>
<p>1、 进行事件类型传参需要带上on前缀</p>
<p>2、 这种方式只支持事件冒泡，不支持事件捕获</p>
<p>事件绑定是指把事件注册到具体的元素之上，普通事件指的是可以用来注册的事件</p>
<p>普通添加事件的方法不支持添加多个事件，最下面的事件会覆盖上面的，不支持事件冒泡</p>
<p>而事件绑定（addEventListener）方式添加事件可以添加多个,支持事件冒泡</p>
<h2 id="6、IE和DOM事件流的区别"><a href="#6、IE和DOM事件流的区别" class="headerlink" title="6、IE和DOM事件流的区别"></a>6、IE和DOM事件流的区别</h2><p>1.执行顺序不一样、</p>
<p>2.参数不一样</p>
<p>3.事件加不加on</p>
<p>4.this指向问题</p>
<p><strong>IE9</strong>以前：<a href="http://www.baidu.com/link?url=fVtfIQaNBwj3KUO_767M8Y2AoHQa2q1pSY0iwTzkigv1ue0E8r5tBI4bezzlCu01KrbygrzNAJ-jw5H8FTc-1a">attachEvent(“onclick”)、detachEvent</a>(“onclick”)</p>
<p><strong>IE9</strong>开始跟DOM事件流是一样的，都是addEventListener</p>
<h2 id="7、IE和标准下有哪些兼容性的写法"><a href="#7、IE和标准下有哪些兼容性的写法" class="headerlink" title="7、IE和标准下有哪些兼容性的写法"></a>7、IE和标准下有哪些兼容性的写法</h2><p>var ev = ev || window.event</p>
<p>document.documentElement.clientWidth || document.body.clientWidth</p>
<p>var target = ev.srcElement||ev.target</p>
<h2 id="8、call和apply的区别"><a href="#8、call和apply的区别" class="headerlink" title="8、call和apply的区别"></a>8、call和apply的区别</h2><p>call和apply相同点：</p>
<p>都是为了用一个本不属于一个对象的方法，让这个对象去执行</p>
<p>toString.call([],1,2,3)</p>
<p>toString.apply([],[1,2,3])</p>
<p>Object.call(this,obj1,obj2,obj3)</p>
<p>Object.apply(this,arguments)</p>
<h2 id="9、b继承a的方法"><a href="#9、b继承a的方法" class="headerlink" title="9、b继承a的方法"></a>9、b继承a的方法</h2><p>考点：继承的多种方式</p>
<p>function b(){}</p>
<p>b.protoototype=new a;</p>
<h2 id="10、JavaScript-this指针、闭包、作用域"><a href="#10、JavaScript-this指针、闭包、作用域" class="headerlink" title="10、JavaScript this指针、闭包、作用域"></a>10、JavaScript this指针、闭包、作用域</h2><p>this：指向调用上下文</p>
<p>闭包：内层作用域可以访问外层作用域的变量</p>
<p>作用域：定义一个函数就开辟了一个局部作用域，整个js执行环境有一个全局作用域</p>
<h2 id="11、事件委托是什么"><a href="#11、事件委托是什么" class="headerlink" title="11、事件委托是什么"></a>11、事件委托是什么</h2><p>符合W3C标准的事件绑定addEventLisntener /attachEvent</p>
<p>让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！</p>
<h2 id="12、闭包是什么，有什么特性，对页面有什么影响"><a href="#12、闭包是什么，有什么特性，对页面有什么影响" class="headerlink" title="12、闭包是什么，有什么特性，对页面有什么影响"></a>12、闭包是什么，有什么特性，对页面有什么影响</h2><p>闭包就是能够读取其他函数内部变量的函数。</p>
<p>闭包的缺点：滥用闭包函数会造成内存泄露，因为闭包中引用到的包裹函数中定义的变量都永远不会被释放，所以我们应该在必要的时候，及时释放这个闭包函数</p>
<h2 id="13、如何阻止事件冒泡和默认事件"><a href="#13、如何阻止事件冒泡和默认事件" class="headerlink" title="13、如何阻止事件冒泡和默认事件"></a>13、如何阻止事件冒泡和默认事件</h2><p>e. stopPropagation();//标准浏览器</p>
<p>event.canceBubble=true;//ie9之前</p>
<p>阻止默认事件：</p>
<p>为了不让a点击之后跳转，我们就要给他的点击事件进行阻止</p>
<p>return false </p>
<p>e.preventDefault();</p>
<h2 id="14、添加-删除-替换-插入到某个接点的方法"><a href="#14、添加-删除-替换-插入到某个接点的方法" class="headerlink" title="14、添加 删除 替换 插入到某个接点的方法"></a>14、添加 删除 替换 插入到某个接点的方法</h2><p>obj.appendChild()</p>
<p>obj.insertBefore() //原生的js中不提供insertAfter();</p>
<p>obj.replaceChild()//替换</p>
<p>obj.removeChild()//删除</p>
<h2 id="15、javascript的本地对象，内置对象和宿主对象"><a href="#15、javascript的本地对象，内置对象和宿主对象" class="headerlink" title="15、javascript的本地对象，内置对象和宿主对象"></a>15、javascript的本地对象，内置对象和宿主对象</h2><p>本地对象为array obj regexp等可以new实例化</p>
<p>内置对象为gload Math 等不可以实例化的</p>
<p>宿主为浏览器自带的document,window 等</p>
<h2 id="16、document-load-和document-ready的区别"><a href="#16、document-load-和document-ready的区别" class="headerlink" title="16、document load 和document ready的区别"></a>16、document load 和document ready的区别</h2><p>Document.onload 是在结构和样式加载完才执行js</p>
<p>window.onload：不仅仅要在结构和样式加载完，还要执行完所有的样式、图片这些资源文件，全部加载完才会触发window.onload事件</p>
<p>Document.ready原生种没有这个方法，jquery中有 $().ready(function)</p>
<h2 id="17、”-”和“-”的不同"><a href="#17、”-”和“-”的不同" class="headerlink" title="17、”==”和“===”的不同"></a>17、”==”和“===”的不同</h2><p>前者会自动转换类型</p>
<p>后者不会</p>
<p>1==”1”</p>
<p>null==undefined</p>
<p>===先判断左右两边的数据类型，如果数据类型不一致，直接返回false</p>
<p>  之后才会进行两边值的判断</p>
<h2 id="18、javascript的同源策略"><a href="#18、javascript的同源策略" class="headerlink" title="18、javascript的同源策略"></a>18、javascript的同源策略</h2><p>一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、协议和端口号的组合</p>
<p>http,ftp:协议</p>
<p>主机名；localhost</p>
<p>端口名：80:http协议的默认端口</p>
<p>https:默认端口是8083</p>
<p>同源策略带来的麻烦：ajax在不同域名下的请求无法实现，</p>
<p>如果说想要请求其他来源的js文件，或者json数据，那么可以通过jsonp来解决</p>
<h2 id="19、编写一个数组去重的方法"><a href="#19、编写一个数组去重的方法" class="headerlink" title="19、编写一个数组去重的方法"></a>19、编写一个数组去重的方法</h2><p>var arr=[1,1,3,4,2,4,7];</p>
<p>=&gt;[1,3,4,2,7]</p>
<p>一个比较简单的实现就是：</p>
<p>1、 先创建一个空数组，用来保存最终的结果</p>
<p>2、 循环原数组中的每个元素</p>
<p>3、 再对每个元素进行二次循环，判断是否有与之相同的元素，如果没有，将把这个元素放到新数组中</p>
<p>4、 返回这个新数组</p>
<p>function oSort(arr) {<br> var result ={};<br> var newArr=[];<br> for(var i=0;i&lt;arr.length;i++){<br> if(!result[arr]) {<br> newArr.push(arr)<br> result[arr]=1<br> }<br> }<br> return newArr<br> }&lt;/arr.length;i++)</p>
<h2 id="20、JavaScript是一门什么样的语言，它有哪些特点？"><a href="#20、JavaScript是一门什么样的语言，它有哪些特点？" class="headerlink" title="20、JavaScript是一门什么样的语言，它有哪些特点？"></a>20、JavaScript是一门什么样的语言，它有哪些特点？</h2><p>没有标准答案。</p>
<p>运行环境：浏览器中的JS引擎（v8.。。）</p>
<p>语言特性：面向对象，动态语言：</p>
<p>//动态语言的特性<br> var <em>num</em>=10;//num是一个数字类型<br> <em>num</em>=”jim”;//此时num又变成一个字符串类型<br> //我们把一个变量用来保存不同数据类型的语言称之为一个动态语言<br> //静态语言：c# java c c++<br> //静态语言在声明一个变量就已经确定了这个变量的数据类型，<br> // 而且在任何时候都不可以改变他的数据类型</p>
<h2 id="21、JavaScript的数据类型都有什么？"><a href="#21、JavaScript的数据类型都有什么？" class="headerlink" title="21、JavaScript的数据类型都有什么？"></a>21、JavaScript的数据类型都有什么？</h2><p>基本数据类型：String,Boolean,number,undefined,object,Null</p>
<p>引用数据类型：Object(Array,Date,RegExp,Function)</p>
<p>那么问题来了，如何判断某变量是否为数组数据类型？</p>
<p>方法一.判断其是否具有“数组性质”，如slice()方法。可自己给该变量定义slice方法，故有时会失效</p>
<p>方法二.obj instanceof Array 在某些IE版本中不正确</p>
<p>方法三.方法一二皆有漏洞，在ECMA Script5中定义了新方法Array.isArray(), 保证其兼容性，最好的方法如下：</p>
<p>toString.call(18);//”[object Number]”</p>
<p>toString.call(“”);//”[object String]”</p>
<p>解析这种简单的数据类型直接通过typeof就可以直接判断[<a href="#_msocom_1">张曼莉1]</a> </p>
<p>toString.call常用于判断数组、正则这些复杂类型</p>
<p>toString.call(/[0-9]{10}/)//”[object RegExp]”</p>
<table>
<thead>
<tr>
<th></th>
<th>if(typeof Array.isArray===”undefined”){   Array.isArray = function(arg){      return Object.prototype.toString.call(arg)===”[object  Array]”    };  }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="22、已知ID的Input输入框，希望获取这个输入框的输入值，怎么做？-不使用第三方框架"><a href="#22、已知ID的Input输入框，希望获取这个输入框的输入值，怎么做？-不使用第三方框架" class="headerlink" title="22、已知ID的Input输入框，希望获取这个输入框的输入值，怎么做？(不使用第三方框架)"></a>22、已知ID的Input输入框，希望获取这个输入框的输入值，怎么做？(不使用第三方框架)</h2><table>
<thead>
<tr>
<th></th>
<th>document.getElementById(“ID”).value</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="23、希望获取到页面中所有的checkbox怎么做？-不使用第三方框架"><a href="#23、希望获取到页面中所有的checkbox怎么做？-不使用第三方框架" class="headerlink" title="23、希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)"></a>23、希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)</h2><table>
<thead>
<tr>
<th></th>
<th>var domList = document.getElementsByTagName(‘input’)  var checkBoxList = [];//返回的所有的checkbox  var len = domList.length;　　//缓存到局部变量  while (len–) {　　//使用while的效率会比for循环更高  　　if  (domList[len].type == ‘checkbox’) {    　　checkBoxList.push(domList[len]);  　　}  }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="24、设置一个已知ID的DIV的html内容为xxxx，字体颜色设置为黑色-不使用第三方框架"><a href="#24、设置一个已知ID的DIV的html内容为xxxx，字体颜色设置为黑色-不使用第三方框架" class="headerlink" title="24、设置一个已知ID的DIV的html内容为xxxx，字体颜色设置为黑色(不使用第三方框架)"></a>24、设置一个已知ID的DIV的html内容为xxxx，字体颜色设置为黑色(不使用第三方框架)</h2><table>
<thead>
<tr>
<th></th>
<th>var dom =  document.getElementById(“ID”);  dom.innerHTML = “xxxx”  dom.style.color = “#000”</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="25、当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做？"><a href="#25、当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做？" class="headerlink" title="25、当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做？"></a>25、当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做？</h2><p>直接在DOM里绑定事件：<div onclick="test()"></div></p>
<p>在JS里通过onclick绑定：xxx.onclick = test</p>
<p>通过事件添加进行绑定：addEventListener(xxx, ‘click’, test)</p>
<p>那么问题来了，Javascript的事件流模型都有什么？</p>
<p>“事件冒泡”：事件开始由最具体的元素接受，然后逐级向上传播</p>
<p>“事件捕捉”：事件由最不具体的节点先接收，然后逐级向下，一直到最具体的</p>
<p>“DOM事件流”：三个阶段：事件捕捉，目标阶段，事件冒泡</p>
<h2 id="26、看下列代码输出为何？解释原因。"><a href="#26、看下列代码输出为何？解释原因。" class="headerlink" title="26、看下列代码输出为何？解释原因。"></a>26、看下列代码输出为何？解释原因。</h2><table>
<thead>
<tr>
<th></th>
<th>var  a;  alert(typeof  a); // “undefined”  //alert(b);  // 报错   b=10;  alert(typeof  b);//”number”</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>解释：Undefined是一个只有一个值的数据类型，这个值就是“undefined”，在使用var声明变量但并未对其赋值进行初始化时，这个变量的值就是undefined。而b由于未声明将报错。注意未申明的变量和声明了未赋值的是不一样的。</p>
<p><strong>undefined</strong>会在以下三种情况下产生：</p>
<p>1、 一个变量定义了却没有被赋值</p>
<p>2、 想要获取一个对象上不存在的属性或者方法:</p>
<p>3、 一个数组中没有被赋值的元素</p>
<p>注意区分undefined跟not defnied(语法错误)是不一样的</p>
<h2 id="27、看下列代码-输出什么？解释原因。"><a href="#27、看下列代码-输出什么？解释原因。" class="headerlink" title="27、看下列代码,输出什么？解释原因。"></a>27、看下列代码,输出什么？解释原因。</h2><table>
<thead>
<tr>
<th></th>
<th>var a = null;  alert(typeof a); //object</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>解释：null是一个只有一个值的数据类型，这个值就是null。表示一个空指针对象，所以用typeof检测会返回”object”。</p>
<h2 id="28、看下列代码-输出什么？解释原因。"><a href="#28、看下列代码-输出什么？解释原因。" class="headerlink" title="28、看下列代码,输出什么？解释原因。"></a>28、看下列代码,输出什么？解释原因。</h2><table>
<thead>
<tr>
<th></th>
<th>var undefined;//此时undefined这个变量的值是undefined  undefined <strong>==</strong> null; // true  1 == true;  // true  此时会把布尔类型的值转换为数字类型 true=1 false=0  2 == true;  // false  0 == false; // true  <strong>0 == ‘’</strong>;   //  true  <strong>NaN == NaN</strong>; // false  [] == false; // true  [] == ![];  // true</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>·   undefined与null相等，但不恒等（===）</p>
<p>一个是number一个是string时，会尝试将string转换为number</p>
<p>尝试将boolean转换为number，0或1</p>
<p>尝试将Object转换成number或string，取决于另外一个对比量的类型</p>
<p>所以，对于0、空字符串的判断，建议使用 “===” 。“===”会先判断两边的值类型，类型不匹配时为false。</p>
<p>那么问题来了，看下面的代码，输出什么，foo的值为什么？</p>
<table>
<thead>
<tr>
<th></th>
<th>var foo =  “11”+2-“1”;  console.log(foo);//111  console.log(typeof foo);</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>执行完后foo的值为111，foo的类型为number。</p>
<h2 id="29、看代码给答案。"><a href="#29、看代码给答案。" class="headerlink" title="29、看代码给答案。"></a>29、看代码给答案。</h2><table>
<thead>
<tr>
<th></th>
<th>var a = new Object();  a.value = 1;  b = a; {value:1}  b.value = 2;  alert(a.value);//2</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>答案：2（考察引用数据类型细节）</p>
<h2 id="30、已知数组var-stringArray-“This”-“is”-“Baidu”-“Campus”-，Alert出”This-is-Baidu-Campus”。"><a href="#30、已知数组var-stringArray-“This”-“is”-“Baidu”-“Campus”-，Alert出”This-is-Baidu-Campus”。" class="headerlink" title="30、已知数组var stringArray = [“This”, “is”, “Baidu”, “Campus”]，Alert出”This is Baidu Campus”。"></a>30、已知数组var stringArray = [“This”, “is”, “Baidu”, “Campus”]，Alert出”This is Baidu Campus”。</h2><p>答案：alert(stringArray.join(“ ”))</p>
<p>已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。</p>
<p>//</p>
<table>
<thead>
<tr>
<th></th>
<th>function combo(msg){    var arr=msg.split(“-“);//[get,element,by,id]    for(var  i=1;i&lt;arr.length;i++){      arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);//Element    }    msg=arr.join(“”);//msg=”  getElementById”    return  msg;  }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>(考察基础API)</p>
<h2 id="31、var-numberArray-3-6-2-4-1-5-（考察基础API）"><a href="#31、var-numberArray-3-6-2-4-1-5-（考察基础API）" class="headerlink" title="31、var numberArray = [3,6,2,4,1,5]; （考察基础API）"></a>31、var numberArray = [3,6,2,4,1,5]; （考察基础API）</h2><ol>
<li><p>实现对该数组的倒排，输出[5,1,4,2,6,3]</p>
</li>
<li><p>实现对该数组的降序排列，输出[6,5,4,3,2,1]</p>
</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>function combo(msg){    var  arr=msg.split(“-“);    for(var  i=1;i&lt;arr.length;i++){      arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);    }    msg=arr.join(“”);    return  msg;  }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="32、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26"><a href="#32、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26" class="headerlink" title="32、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26"></a>32、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26</h2><table>
<thead>
<tr>
<th></th>
<th>var d = new Date();  // 获取年，getFullYear()返回4位的数字  var year = d.getFullYear();  // 获取月，<strong>月份比较特殊，0是1月，11是12月</strong>  var month = d.getMonth() + 1;  // 变成两位  month = month &lt; 10 ? ‘0’ +  month : month;  // 获取日  var day = d.getDate();  day = day &lt; 10 ? ‘0’ + day :  day;  alert(year + ‘-‘ + month + ‘-‘  + day);</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="33、将字符串"><a href="#33、将字符串" class="headerlink" title="33、将字符串"></a>33、将字符串</h2><p>”<tr><td>{$id}</td><td>{$name}</td></tr>”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）</p>
<p>答案：”<tr><td>{$id}</td><td>{$id}_{$name}</td></tr>”.replace(/{$id}/g, ’10′).replace(/{$name}/g, ‘Tony’);</p>
<h2 id="34、为了保证页面输出安全，我们经常需要对一些特殊的字符进行转义，请写一个函数escapeHtml，将-lt-gt-amp-“进行转义"><a href="#34、为了保证页面输出安全，我们经常需要对一些特殊的字符进行转义，请写一个函数escapeHtml，将-lt-gt-amp-“进行转义" class="headerlink" title="34、为了保证页面输出安全，我们经常需要对一些特殊的字符进行转义，请写一个函数escapeHtml，将&lt;, &gt;, &amp;, “进行转义"></a>34、为了保证页面输出安全，我们经常需要对一些特殊的字符进行转义，请写一个函数escapeHtml，将&lt;, &gt;, &amp;, “进行转义</h2><table>
<thead>
<tr>
<th></th>
<th>function escapeHtml(str) {  //[&lt;&gt;”&amp;]:中括号中字符只要其中的一个出现就代表满足条件  //给replace第二个参数传递一个回调函数，回调函数中参数就是匹配结果，如果匹配不到就是null  return  str.replace(/[&lt;&gt;”&amp;]/g, function(match) {    switch  (match) {     case  “&lt;”:        return “&lt;”;     case  “&gt;”:       return “&gt;”;     case  “&amp;”:       return “&amp;”;     case  “\””:        return “&quot;”;     }   });  }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="35、foo-foo-bar-，这行代码是什么意思？为什么要这样写？"><a href="#35、foo-foo-bar-，这行代码是什么意思？为什么要这样写？" class="headerlink" title="35、foo = foo||bar ，这行代码是什么意思？为什么要这样写？"></a>35、foo = foo||bar ，这行代码是什么意思？为什么要这样写？</h2><p>这种写法称之为短路表达式</p>
<p>答案：if(!foo) foo = bar; //如果foo存在，值不变，否则把bar的值赋给foo。</p>
<p>短路表达式：作为”&amp;&amp;”和”||”操作符的操作数表达式，这些表达式在进行求值时，只要最终的结果已经可以确定是真或假，求值过程便告终止，这称之为短路求值。</p>
<p>注意if条件的真假判定，<strong>记住以下是false的情况</strong>：</p>
<p><strong>空字符串、false、undefined、null、0</strong></p>
<h2 id="36、看下列代码，将会输出什么-变量声明提升"><a href="#36、看下列代码，将会输出什么-变量声明提升" class="headerlink" title="36、看下列代码，将会输出什么?(变量声明提升)"></a>36、看下列代码，将会输出什么?(变量声明提升)</h2><table>
<thead>
<tr>
<th></th>
<th>var foo = 1;  function(){    console.log(foo);    var foo  = 2;    console.log(foo);  }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>答案：输出undefined 和 2。上面代码相当于：</p>
<table>
<thead>
<tr>
<th></th>
<th>var foo = 1;  function(){    var  foo;    console.log(foo);  //undefined    foo =  2;    console.log(foo);  // 2;    }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>函数声明与变量声明会被JavaScript引擎隐式地提升到当前作用域的顶部，但是只提升名称不会提升赋值部分。</p>
<h2 id="37、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。"><a href="#37、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。" class="headerlink" title="37、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。"></a>37、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。</h2><table>
<thead>
<tr>
<th></th>
<th>var iArray = [];   funtion getRandom(istart,  iend){      var  iChoice = istart - iend +1;      return  Math.floor(<strong>Math.random()</strong>  * iChoice + istart;  }  Math.random()就是获取0-1之间的随机数（永远获取不到1）  for(var i=0; i&lt;10; i++){  var result= getRandom(10,100);      iArray.push(result);  }  <strong>iArray.sort();</strong></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="38、把两个数组合并，并删除第二个元素。"><a href="#38、把两个数组合并，并删除第二个元素。" class="headerlink" title="38、把两个数组合并，并删除第二个元素。"></a>38、把两个数组合并，并删除第二个元素。</h2><table>
<thead>
<tr>
<th></th>
<th>var array1 = [‘a’,’b’,’c’];  var bArray = [‘d’,’e’,’f’];  var cArray = array1.<strong>concat</strong>(bArray);  cArray.splice(1,1);</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="39、怎样添加、移除、移动、复制、创建和查找节点（原生JS，实在基础，没细写每一步）"><a href="#39、怎样添加、移除、移动、复制、创建和查找节点（原生JS，实在基础，没细写每一步）" class="headerlink" title="39、怎样添加、移除、移动、复制、创建和查找节点（原生JS，实在基础，没细写每一步）"></a>39、怎样添加、移除、移动、复制、创建和查找节点（原生JS，实在基础，没细写每一步）</h2><p>1）创建新节点</p>
<p>createDocumentFragment()  //创建一个DOM片段</p>
<p>createElement()  //创建一个具体的元素</p>
<p>createTextNode()  //创建一个文本节点</p>
<p>2）添加、移除、替换、插入</p>
<p>appendChild()   //添加</p>
<p>removeChild()   //移除</p>
<p>replaceChild()   //替换</p>
<p>insertBefore()   //插入</p>
<p>3）查找</p>
<p>getElementsByTagName()  //通过标签名称</p>
<p>getElementsByName()   //通过元素的Name属性的值</p>
<p>getElementById()    //通过元素Id，唯一性</p>
<h2 id="40、有这样一个URL：http-item-taobao-com-item-htm-a-1-amp-b-2-amp-c-amp-d-xxx-amp-e，请写一段JS程序提取URL中的各个GET参数-参数名和参数个数不确定-，将其按key-value形式返回到一个json结构中，如-a-’1′-b-’2′-c-”-d-’xxx’-e-undefined-。"><a href="#40、有这样一个URL：http-item-taobao-com-item-htm-a-1-amp-b-2-amp-c-amp-d-xxx-amp-e，请写一段JS程序提取URL中的各个GET参数-参数名和参数个数不确定-，将其按key-value形式返回到一个json结构中，如-a-’1′-b-’2′-c-”-d-’xxx’-e-undefined-。" class="headerlink" title="40、有这样一个URL：http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如{a:’1′, b:’2′, c:”, d:’xxx’, e:undefined}。"></a>40、有这样一个URL：<a href="http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e%EF%BC%8C%E8%AF%B7%E5%86%99%E4%B8%80%E6%AE%B5JS%E7%A8%8B%E5%BA%8F%E6%8F%90%E5%8F%96URL%E4%B8%AD%E7%9A%84%E5%90%84%E4%B8%AAGET%E5%8F%82%E6%95%B0(%E5%8F%82%E6%95%B0%E5%90%8D%E5%92%8C%E5%8F%82%E6%95%B0%E4%B8%AA%E6%95%B0%E4%B8%8D%E7%A1%AE%E5%AE%9A)%EF%BC%8C%E5%B0%86%E5%85%B6%E6%8C%89key-value%E5%BD%A2%E5%BC%8F%E8%BF%94%E5%9B%9E%E5%88%B0%E4%B8%80%E4%B8%AAjson%E7%BB%93%E6%9E%84%E4%B8%AD%EF%BC%8C%E5%A6%82%7Ba:%E2%80%991%E2%80%B2">http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按key-value形式返回到一个json结构中，如{a:’1′</a>, b:’2′, c:”, d:’xxx’, e:undefined}。</h2><p>答案：</p>
<p><strong>var</strong> <strong>url</strong> <strong>=</strong> **’<a href="http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e&#39;">http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e&#39;</a>****;<br>**   <strong>var</strong> <strong>result</strong> <strong>=</strong> **{};</p>
<p>**   <strong>url</strong> <strong>=</strong> <strong>url</strong><strong>.<strong><strong>split</strong></strong>(<strong><strong>“?”</strong></strong>)[<strong><strong>1</strong></strong>];<br>**   <strong>var</strong> <strong>map</strong> <strong>=</strong> <strong>url</strong></strong>.<strong><strong>split</strong></strong>(<strong><strong>“&amp;”</strong></strong>);<br>**   <strong>console</strong><strong>.<strong><strong>log</strong></strong>(<strong><strong>map</strong></strong>);<br>**   <strong>for</strong></strong>(<strong><strong>var</strong> <strong>i</strong> <strong>=</strong> <strong>0</strong></strong>;** <strong>i</strong> <strong>&lt;</strong> <strong>map</strong><strong>.<strong><strong>length</strong></strong>;</strong> <strong>i</strong><strong>++****) {<br>**     <strong>var</strong> <strong>arr</strong> <strong>=</strong> <strong>map</strong></strong>[<strong><strong>i</strong></strong>].<strong><strong>split</strong></strong>(<strong><strong>‘=’</strong></strong>);<br>**     <strong>result</strong><strong>[<strong><strong>arr</strong></strong>[<strong><strong>0</strong></strong>]]</strong> <strong>=</strong> <strong>arr</strong><strong>[<strong><strong>1</strong></strong>];<br>   }<br>**   <strong>console</strong></strong>.<strong><strong>log</strong></strong>(<strong><strong>result</strong></strong>);**</p>
<h2 id="41、正则表达式构造函数var-reg-new-RegExp-“xxx”-与正则表达字面量var-reg-有什么不同？匹配邮箱的正则表达式？"><a href="#41、正则表达式构造函数var-reg-new-RegExp-“xxx”-与正则表达字面量var-reg-有什么不同？匹配邮箱的正则表达式？" class="headerlink" title="41、正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？"></a>41、正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？</h2><p>答案：当使用RegExp()构造函数的时候，不仅需要转义引号（即\”表示”），并且还需要双反斜杠（即\表示一个\）。使用正则表达字面量的效率更高。 </p>
<p>邮箱的正则匹配：</p>
<table>
<thead>
<tr>
<th></th>
<th>var regMail =  /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/;</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>24.看下面代码，给出输出结果。</p>
<table>
<thead>
<tr>
<th></th>
<th>for(var i=1;i&lt;=3;i++){   setTimeout(function(){     console.log(i);       },0);   };</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>答案：4 4 4。</p>
<p>原因：Javascript事件处理器在线程空闲之前不会运行。追问，如何让上述代码输出1 2 3？</p>
<table>
<thead>
<tr>
<th></th>
<th>for(var i=1;i&lt;=3;i++){    setTimeout((function(a){   //改成立即执行函数      console.log(a);        })(i),0);     };  1       //输出  2  3</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="42、写一个function，清除字符串前后的空格。（兼容所有浏览器）"><a href="#42、写一个function，清除字符串前后的空格。（兼容所有浏览器）" class="headerlink" title="42、写一个function，清除字符串前后的空格。（兼容所有浏览器）"></a>42、写一个function，清除字符串前后的空格。（兼容所有浏览器）</h2><p>使用自带接口trim()，考虑兼容性：</p>
<table>
<thead>
<tr>
<th></th>
<th>if (!String.prototype.trim) {    String.prototype.trim =  function() {    return  this.replace(/^\s+/, “”).replace(/\s+$/,””);  //\s匹配空白字符：回车、换行、制表符tab 空格   }   }    // test the function   var str = “ \t\n test  string “.trim();   alert(str == “test  string”); // alerts “true”</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="43、Javascript中callee和caller的作用？"><a href="#43、Javascript中callee和caller的作用？" class="headerlink" title="43、Javascript中callee和caller的作用？"></a>43、Javascript中callee和caller的作用？</h2><p>arguments.callee：获得当前函数的引用</p>
<p>caller是返回一个对函数的引用，该函数调用了当前函数；</p>
<p>callee是返回正在被执行的function函数，也就是所指定的function对象的正文。</p>
<p>那么问题来了？如果一对兔子每月生一对兔子；一对新生兔，从第二个月起就开始生兔子；假定每对兔子都是一雌一雄，试问一对兔子，第n个月能繁殖成多少对兔子？（使用callee完成）</p>
<table>
<thead>
<tr>
<th></th>
<th>var result=[];  function fn(n){ //典型的斐波那契数列    if(n==1){      return  1;    }else  if(n==2){        return  1;    }else{      if(result[n]){          return  result[n];      }else{          //argument.callee()表示fn()          result[n]=arguments.callee(n-1)+arguments.callee(n-2);          return  result[n];      }    }  }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="44、Javascript中-以下哪条语句一定会产生运行错误？-答案-BC"><a href="#44、Javascript中-以下哪条语句一定会产生运行错误？-答案-BC" class="headerlink" title="44、Javascript中, 以下哪条语句一定会产生运行错误？   答案( BC  )"></a>44、Javascript中, 以下哪条语句一定会产生运行错误？   答案( BC  )</h2><p>A、  var _变量=NaN;B、var 0bj = [];C、var obj = //; D、var obj = {};</p>
<p>//正确答案：BC</p>
<h2 id="45、以下两个变量a和b，a-b的哪个结果是NaN？-答案-C"><a href="#45、以下两个变量a和b，a-b的哪个结果是NaN？-答案-C" class="headerlink" title="45、以下两个变量a和b，a+b的哪个结果是NaN？   答案(  C )"></a>45、以下两个变量a和b，a+b的哪个结果是NaN？   答案(  C )</h2><p>A、var a=undefind; b=NaN // undefind拼写错误</p>
<p>B、var a=‘123’; b=NaN//字符串’中文输入法</p>
<p>C、var a =undefined , b =NaN</p>
<p>D、var a=NaN , b=’undefined’//” NaNundefined”</p>
<p>//var a=10; b=20; c=4; ++b+c+a++<br> //21+4+10=35;</p>
<h2 id="46、var-a-10-b-20-c-4-b-c-a-以下哪个结果是正确的？答案-B"><a href="#46、var-a-10-b-20-c-4-b-c-a-以下哪个结果是正确的？答案-B" class="headerlink" title="46、var a=10; b=20; c=4; ++b+c+a++ 以下哪个结果是正确的？答案( B )"></a>46、var a=10; b=20; c=4; ++b+c+a++ 以下哪个结果是正确的？答案( B )</h2><p>A、  34  B、35 C、36 D、37</p>
<h2 id="47、下面的JavaScript语句中，（-D-）实现检索当前页面中的表单元素中的所有文本框，并将它们全部清空"><a href="#47、下面的JavaScript语句中，（-D-）实现检索当前页面中的表单元素中的所有文本框，并将它们全部清空" class="headerlink" title="47、下面的JavaScript语句中，（ D ）实现检索当前页面中的表单元素中的所有文本框，并将它们全部清空"></a>47、下面的JavaScript语句中，（ D ）实现检索当前页面中的表单元素中的所有文本框，并将它们全部清空</h2><p>A. for(vari=0;i&lt; form1.elements.length;i++) {</p>
<p>if(form1.elements.type==”text”)</p>
<p>form1.elements.value=””;}</p>
<p>B. for(vari=0;i&lt;document.forms.length;i++) {</p>
<p>if(forms[0].elements.type==”text”)</p>
<p>forms[0].elements.value=””;</p>
<p>}</p>
<p>C. if(document.form.elements.type==”text”)</p>
<p>form.elements.value=””;</p>
<p>D. for(vari=0;i&lt;document.forms.length; i++){</p>
<p>for(var j=0;j&lt;document.forms.elements.length; j++){</p>
<p>if(document.forms.elements[j].type==”text”)</p>
<p>document.forms.elements[j].value=””;</p>
<p>}</p>
<p>}</p>
<p>48、要将页面的状态栏中显示“已经选中该文本框”，下列JavaScript语句正确的是（ A ）</p>
<p>A. window.status=”已经选中该文本框”</p>
<p>B. document.status=”已经选中该文本框”</p>
<p>C. window.screen=”已经选中该文本框”</p>
<p>D. document.screen=”已经选中该文本框”</p>
<h2 id="49、以下哪条语句会产生运行错误：（A）正确答案：A、D"><a href="#49、以下哪条语句会产生运行错误：（A）正确答案：A、D" class="headerlink" title="49、以下哪条语句会产生运行错误：（A）正确答案：A、D"></a>49、以下哪条语句会产生运行错误：（A）正确答案：A、D</h2><h2 id="A-var-obj"><a href="#A-var-obj" class="headerlink" title="A.var obj = ();"></a>A.var obj = ();</h2><h2 id="B-var-obj"><a href="#B-var-obj" class="headerlink" title="B.var obj = [];"></a>B.var obj = [];</h2><h2 id="C-var-obj"><a href="#C-var-obj" class="headerlink" title="C.var obj = {};"></a>C.var obj = {};</h2><h2 id="D-var-obj"><a href="#D-var-obj" class="headerlink" title="D.var obj = //;"></a>D.var obj = //;</h2><h2 id="50、以下哪个单词不属于javascript保留字：（B）"><a href="#50、以下哪个单词不属于javascript保留字：（B）" class="headerlink" title="50、以下哪个单词不属于javascript保留字：（B）"></a>50、以下哪个单词不属于javascript保留字：（B）</h2><h2 id="A-with"><a href="#A-with" class="headerlink" title="A.with"></a>A.with</h2><h2 id="B-parent"><a href="#B-parent" class="headerlink" title="B.parent"></a>B.parent</h2><h2 id="C-class"><a href="#C-class" class="headerlink" title="C.class"></a>C.class</h2><h2 id="D-void"><a href="#D-void" class="headerlink" title="D.void"></a>D.void</h2><h2 id="51、请选择结果为真的表达式：（C）"><a href="#51、请选择结果为真的表达式：（C）" class="headerlink" title="51、请选择结果为真的表达式：（C）"></a>51、请选择结果为真的表达式：（C）</h2><h2 id="A-null-instanceof-Object"><a href="#A-null-instanceof-Object" class="headerlink" title="A.null instanceof Object"></a>A.null instanceof Object</h2><h2 id="B-null-undefined"><a href="#B-null-undefined" class="headerlink" title="B.null === undefined"></a>B.null === undefined</h2><h2 id="C-null-undefined"><a href="#C-null-undefined" class="headerlink" title="C.null == undefined"></a>C.null == undefined</h2><h2 id="D-NaN-NaN"><a href="#D-NaN-NaN" class="headerlink" title="D.NaN == NaN"></a>D.NaN == NaN</h2><h2 id="52、Javascript中-如果已知HTML页面中的某标签对象的id-”username”，用-document-getElementById-‘username’-方法获得该标签对象。"><a href="#52、Javascript中-如果已知HTML页面中的某标签对象的id-”username”，用-document-getElementById-‘username’-方法获得该标签对象。" class="headerlink" title="52、Javascript中, 如果已知HTML页面中的某标签对象的id=”username”，用____document.getElementById(‘username’)___ _方法获得该标签对象。"></a>52、Javascript中, 如果已知HTML页面中的某标签对象的id=”username”，用____document.getElementById(‘username’)___ _方法获得该标签对象。</h2><h2 id="53、typeof运算符返回值中有一个跟javascript数据类型不一致，它是-”function”-。"><a href="#53、typeof运算符返回值中有一个跟javascript数据类型不一致，它是-”function”-。" class="headerlink" title="53、typeof运算符返回值中有一个跟javascript数据类型不一致，它是________”function”_________。"></a>53、typeof运算符返回值中有一个跟javascript数据类型不一致，它是________”function”_________。</h2><p>typeof Number</p>
<p>typeof Object</p>
<h2 id="54、定义了一个变量，但没有为该变量赋值，如果alert该变量，javascript弹出的对话框中显示-undefined-。"><a href="#54、定义了一个变量，但没有为该变量赋值，如果alert该变量，javascript弹出的对话框中显示-undefined-。" class="headerlink" title="54、定义了一个变量，但没有为该变量赋值，如果alert该变量，javascript弹出的对话框中显示___undefined______ 。"></a>54、定义了一个变量，但没有为该变量赋值，如果alert该变量，javascript弹出的对话框中显示___undefined______ 。</h2><h2 id="55、分析代码，得出正确的结果。"><a href="#55、分析代码，得出正确的结果。" class="headerlink" title="55、分析代码，得出正确的结果。"></a>55、分析代码，得出正确的结果。</h2><p>var a=10, b=20 , c=30;</p>
<p> ++a;</p>
<p> a++;</p>
<p> e=++a+(++b)+(c++)+a++;</p>
<p> alert(e);</p>
<p>弹出提示对话框：77</p>
<p>var <em>a</em>=10, <em>b</em>=20 , <em>c</em>=30;<br> ++<em>a</em>;//a=11<br> <em>a</em>++;//a=12<br> <em>e</em>=++<em>a</em>+(++<em>b</em>)+(<em>c</em>++)+<em>a</em>++;<br> //a=12 -&gt;13+21+30+13=77<br> alert(e);</p>
<h2 id="56、写出函数DateDemo的返回结果，系统时间假定为今天"><a href="#56、写出函数DateDemo的返回结果，系统时间假定为今天" class="headerlink" title="56、写出函数DateDemo的返回结果，系统时间假定为今天"></a>56、写出函数DateDemo的返回结果，系统时间假定为今天</h2><p>function DateDemo(){</p>
<p> var d, s=”今天日期是：”;</p>
<p> d = new Date();</p>
<p>s += d.getMonth() + “/“;</p>
<p>s += d.getDate() + “/“;</p>
<p>s += d.<strong>getFullYear</strong>();</p>
<p>return s;}</p>
<p>结果：今天日期是：7/17/2010</p>
<h2 id="57、写出程序运行的结果？"><a href="#57、写出程序运行的结果？" class="headerlink" title="57、写出程序运行的结果？"></a>57、写出程序运行的结果？</h2><p>for(i=0, j=0; i&lt;10, j&lt;6; i++, j++){</p>
<p>k = i + j;}</p>
<p>结果：10</p>
<p>for(i=0, j=0; i&lt;10, j&lt;6; i++, j++){<br>   //j=5 i=5<br>   k = i + j;//k=10<br> }<br> //结果：10</p>
<h2 id="58、阅读以下代码，请分析出结果："><a href="#58、阅读以下代码，请分析出结果：" class="headerlink" title="58、阅读以下代码，请分析出结果："></a>58、阅读以下代码，请分析出结果：</h2><p>  var arr = new Array(1 ,3 ,5);</p>
<p>  arr[4]=’z’;//[1,3,5,undefined,’z’]</p>
<p>  arr2 = arr.<strong>reverse</strong>();//arr2=[’z’,undefined,5,3,1];</p>
<p>​            //arr=[’z’,undefined,5,3,1]</p>
<p>  arr3 = arr.concat(arr2);</p>
<p>  alert(arr3);</p>
<p>弹出提示对话框：z,,5,3,1,z,,5,3,1</p>
<p><strong>reverse</strong> <strong>方法颠倒数组中元素的位置，并返回该数组的引用。</strong></p>
<h2 id="59、补充按钮事件的函数，确认用户是否退出当前页面，确认之后关闭窗口；"><a href="#59、补充按钮事件的函数，确认用户是否退出当前页面，确认之后关闭窗口；" class="headerlink" title="59、补充按钮事件的函数，确认用户是否退出当前页面，确认之后关闭窗口； "></a>59、补充按钮事件的函数，确认用户是否退出当前页面，确认之后关闭窗口； <html></h2><head>


<script type=”text/javascript” >


function closeWin(){

//在此处添加代码

if(**confirm**(“确定要退出吗？”)){

window.close();

}

}

</script>

</head>

<body>

<p>&lt;input type=”button”value=”关闭窗口”onclick=”closeWin()”/&gt;</p>
</body>

</html>

<h2 id="60、写出简单描述html标签（不带属性的开始标签和结束标签）的正则表达式，并将以下字符串中的html标签去除掉"><a href="#60、写出简单描述html标签（不带属性的开始标签和结束标签）的正则表达式，并将以下字符串中的html标签去除掉" class="headerlink" title="60、写出简单描述html标签（不带属性的开始标签和结束标签）的正则表达式，并将以下字符串中的html标签去除掉"></a>60、写出简单描述html标签（不带属性的开始标签和结束标签）的正则表达式，并将以下字符串中的html标签去除掉</h2><p>var str = “<div>这里是div<p>里面的段落</p></div>”;</p>
<p>//       </p>
<p>&lt;scripttype=”text/javascript”&gt;</p>
<p>var reg = /&lt;/?\w+/?&gt;/gi;//</p>
<table>
<thead>
<tr>
<th><em>x</em>?</th>
<th>匹配问号前面的内容出现0 或 1 次。</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>var str = “<div>这里是div<p>里面的段落</p></div>”;</p>
<p>alert(str.replace(reg,””));</p>
<p></script></p>
<h2 id="61、完成foo-函数的内容，要求能够弹出对话框提示当前选中的是第几个单选框。"><a href="#61、完成foo-函数的内容，要求能够弹出对话框提示当前选中的是第几个单选框。" class="headerlink" title="61、完成foo()函数的内容，要求能够弹出对话框提示当前选中的是第几个单选框。"></a>61、完成foo()函数的内容，要求能够弹出对话框提示当前选中的是第几个单选框。</h2><html>

<head>


<p>&lt;metahttp-equiv=”Content-Type” content=”text/html;charset=utf-8″ /&gt;</p>
</head>

<body>

<script type=”text/javascript” >


function foo() {

//在此处添加代码

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var rdo = document.getElementsByTagName(&#x27;input&#x27;);</span><br></pre></td></tr></table></figure>

for(var i =0 ;i<rdo.length-1;i++){

if(rdo.checked){

alert(“您选择的是第”+(i+1)+”个单选框”);

}

}

}

</script>

<body>

<form name=”form1″ >


<input type="radio" name="radioGroup" />

<input type="radio" name="radioGroup"/>

<input type="radio" name="radioGroup"/>

<input type="radio" name="radioGroup"/>

<input type="submit"/>

</form>

</body>

</html>

<h2 id="62、完成函数showImg-，要求能够动态根据下拉列表的选项变化，更新图片的显示"><a href="#62、完成函数showImg-，要求能够动态根据下拉列表的选项变化，更新图片的显示" class="headerlink" title="62、完成函数showImg()，要求能够动态根据下拉列表的选项变化，更新图片的显示"></a>62、完成函数showImg()，要求能够动态根据下拉列表的选项变化，更新图片的显示</h2><body>

<script type=”text/javascript” >


function showImg (oSel) {

//在此处添加代码

var str = oSel.value;

document.getElementById(“pic”).src= str+”.jpg”;

}

</script>

<p>&lt;img id=”pic”src=”img1.jpg”width=”200″ height=”200″ /&gt;</p>
<br />

<select id=”sel”>


<option value="img1">城市生活</option>

<option value="img2">都市早报</option>

<option value="img3">青山绿水</option>

<p></select></body></p>
<h2 id="63、截取字符串abcdefg的efg"><a href="#63、截取字符串abcdefg的efg" class="headerlink" title="63、截取字符串abcdefg的efg"></a>63、截取字符串abcdefg的efg</h2><p>alert(‘abcdefg’.<strong>substring</strong>(4));</p>
<h2 id="64、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个"><a href="#64、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个" class="headerlink" title="64、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个"></a>64、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个</h2><p>对象：Window document location screen history navigator</p>
<p>方法：Alert() confirm() prompt() open() close() </p>
<h2 id="65、简述列举文档对象模型DOM里document的常用的查找访问节点的方法并做简单说明"><a href="#65、简述列举文档对象模型DOM里document的常用的查找访问节点的方法并做简单说明" class="headerlink" title="65、简述列举文档对象模型DOM里document的常用的查找访问节点的方法并做简单说明"></a>65、简述列举文档对象模型DOM里document的常用的查找访问节点的方法并做简单说明</h2><p>Document.getElementById 根据元素id查找元素</p>
<p>Document.getElementByName 根据元素name查找元素</p>
<p>Document.getElementTagName 根据指定的元素名查找元素</p>
<h2 id="66、希望获取到页面中所有的checkbox怎么做？-不使用第三方框架"><a href="#66、希望获取到页面中所有的checkbox怎么做？-不使用第三方框架" class="headerlink" title="66、希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)"></a>66、希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)</h2><p>var domList = document.getElementsByTagName(‘input’)</p>
<p>var checkBoxList = [];</p>
<p>var len = domList.length;　　//缓存到局部变量</p>
<p>while (len–) {　　//使用while的效率会比for循环更高</p>
<p>　　if (domList[len].type == ‘checkbox’) {</p>
<p>  　　checkBoxList.push(domList[len]);</p>
<p>　　}</p>
<p>}</p>
<h2 id="67、JavaScript的数据类型都有什么？"><a href="#67、JavaScript的数据类型都有什么？" class="headerlink" title="67、JavaScript的数据类型都有什么？"></a>67、JavaScript的数据类型都有什么？</h2><p>基本数据类型：String,Boolean,Number,Undefined,Null</p>
<p>引用数据类型：Object(Array,Date,RegExp,Function)</p>
<h2 id="68、javascript中有哪几种数据类型，分别写出中文和英文。"><a href="#68、javascript中有哪几种数据类型，分别写出中文和英文。" class="headerlink" title="68、javascript中有哪几种数据类型，分别写出中文和英文。"></a>68、javascript中有哪几种数据类型，分别写出中文和英文。</h2><p>string boolean number null undefined object</p>
<p>字符串 布尔 数值 空值 未定义 对象</p>
<h2 id="69、javascript中-和-的区别是什么？举例说明。"><a href="#69、javascript中-和-的区别是什么？举例说明。" class="headerlink" title="69、javascript中==和===的区别是什么？举例说明。"></a>69、javascript中==和===的区别是什么？举例说明。</h2><p>==会自动进行类型转换， ===不会</p>
<h2 id="70、简述创建函数的几种方式"><a href="#70、简述创建函数的几种方式" class="headerlink" title="70、简述创建函数的几种方式"></a>70、简述创建函数的几种方式</h2><p>第一种（函数声明）：</p>
<p>function sum1(num1,num2){</p>
<p>  return num1+num2;</p>
<p>}</p>
<p>第二种（函数表达式）：</p>
<p>var sum2 = function(num1,num2){</p>
<p>  return num1+num2;</p>
<p>}</p>
<p>匿名函数：</p>
<p>function(){}:只能自己执行自己</p>
<p>第三种（函数对象方式）：</p>
<p>var sum3 = new Function(“num1”,”num2”,”return num1+num2”);</p>
<h2 id="71、Javascript如何实现继承？"><a href="#71、Javascript如何实现继承？" class="headerlink" title="71、Javascript如何实现继承？"></a>71、Javascript如何实现继承？</h2><p>原型链继承，借用构造函数继承，组合继承，寄生式继承，寄生组合继承</p>
<h2 id="72、Javascript创建对象的几种方式？"><a href="#72、Javascript创建对象的几种方式？" class="headerlink" title="72、Javascript创建对象的几种方式？"></a>72、Javascript创建对象的几种方式？</h2><p>工厂方式，构造函数方式，原型模式，混合构造函数原型模式，动态原型方式</p>
<h2 id="73、把-Script-标签-放在页面的最底部的body封闭之前-和封闭之后有什么区别？浏览器会如何解析它们？"><a href="#73、把-Script-标签-放在页面的最底部的body封闭之前-和封闭之后有什么区别？浏览器会如何解析它们？" class="headerlink" title="73、把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？"></a>73、把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？</h2><p>如果说放在body的封闭之前，将会阻塞其他资源的加载</p>
<p>如果放在body封闭之后，不会影响body内元素的加载</p>
<h2 id="74、iframe的优缺点？"><a href="#74、iframe的优缺点？" class="headerlink" title="74、iframe的优缺点？"></a>74、iframe的优缺点？</h2><p>优点：</p>
<p>\1. 解决加载缓慢的第三方内容如图标和广告等的加载问题</p>
<p>\2. Security sandbox</p>
<p>\3. 并行加载脚本</p>
<p>缺点：</p>
<p>\1. iframe会阻塞主页面的Onload事件</p>
<p>\2. 即时内容为空，加载也需要时间</p>
<p>\3. 没有语意</p>
<h2 id="75、请你谈谈Cookie的弊端？"><a href="#75、请你谈谈Cookie的弊端？" class="headerlink" title="75、请你谈谈Cookie的弊端？"></a>75、请你谈谈Cookie的弊端？</h2><p>缺点：</p>
<p>1.<code>Cookie</code>数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。</p>
<p>　Firefox每个域名cookie限制为50个。</p>
<p>　　Opera每个域名cookie限制为30个。</p>
<p>　　Safari/WebKit貌似没有cookie限制。但是如果cookie很多，则会使header大小超过<a href="http://product.it168.com/files/0402search.shtml">服务器</a>的处理的限制，会导致错误发生。</p>
<p>　　注：“每个域名cookie限制为20个”将不再正确！</p>
<p>2.安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。</p>
<p>3.有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。</p>
<h2 id="76、DOM操作——怎样添加、移除、移动、复制、创建和查找节点。"><a href="#76、DOM操作——怎样添加、移除、移动、复制、创建和查找节点。" class="headerlink" title="76、DOM操作——怎样添加、移除、移动、复制、创建和查找节点。"></a>76、DOM操作——怎样添加、移除、移动、复制、创建和查找节点。</h2><p>\1. 创建新节点</p>
<p>createDocumentFragment() // 创建一个DOM片段</p>
<p>createElement() // 创建一个具体的元素</p>
<p>createTextNode() // 创建一个文本节点</p>
<p>\2. 添加、移除、替换、插入</p>
<p>appendChild()</p>
<p>removeChild()</p>
<p>replaceChild()</p>
<p>insertBefore() // 在已有的子节点前插入一个新的子节点</p>
<p>\3. 查找</p>
<p>getElementsByTagName() // 通过标签名称</p>
<p>getElementsByName() // 通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</p>
<p>getElementById() // 通过元素Id，唯一性</p>
<h2 id="77、js延迟加载的方式有哪些？"><a href="#77、js延迟加载的方式有哪些？" class="headerlink" title="77、js延迟加载的方式有哪些？"></a>77、js延迟加载的方式有哪些？</h2><p>\1. defer和async</p>
<p>\2. 动态创建DOM方式（创建script，插入到DOM中，加载完毕后callBack）</p>
<p>\3. 按需异步载入js</p>
<h2 id="78、documen-write和-innerHTML-的区别？"><a href="#78、documen-write和-innerHTML-的区别？" class="headerlink" title="78、documen.write和 innerHTML 的区别？"></a>78、documen.write和 innerHTML 的区别？</h2><p>document.write 只能重绘整个页面</p>
<p>innerHTML 可以重绘页面的一部分</p>
<h2 id="79、哪些操作会造成内存泄漏？"><a href="#79、哪些操作会造成内存泄漏？" class="headerlink" title="79、哪些操作会造成内存泄漏？"></a>79、哪些操作会造成内存泄漏？</h2><p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。</p>
<p>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</p>
<p>\1. setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。</p>
<p>\2. 闭包</p>
<p>\3. 控制台日志</p>
<p>\4. 循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</p>
<h2 id="80、javascript的typeof返回哪些数据类型"><a href="#80、javascript的typeof返回哪些数据类型" class="headerlink" title="80、javascript的typeof返回哪些数据类型?"></a>80、javascript的typeof返回哪些数据类型?</h2><p>答：object、 number、 function 、boolean、 underfind</p>
<h2 id="81、split-join-的区别"><a href="#81、split-join-的区别" class="headerlink" title="81、split() join() 的区别"></a>81、split() join() 的区别</h2><p>答：前者是切割成数组的形式，后者是将数组转换成字符串</p>
<h2 id="82、数组方法pop-push-unshift-shift-各表示什么意思？"><a href="#82、数组方法pop-push-unshift-shift-各表示什么意思？" class="headerlink" title="82、数组方法pop() push() unshift() shift()各表示什么意思？"></a>82、数组方法pop() push() unshift() shift()各表示什么意思？</h2><p>答：Push()尾部添加、pop()尾部删除、Unshift()头部添加、shift()头部删除</p>
<h2 id="83、判断一个字符串中出现次数最多的字符，统计这个次数"><a href="#83、判断一个字符串中出现次数最多的字符，统计这个次数" class="headerlink" title="83、判断一个字符串中出现次数最多的字符，统计这个次数"></a>83、判断一个字符串中出现次数最多的字符，统计这个次数</h2><p>答：var str = ‘asdfssaaasasasasaa’;<br> var json = {};<br> for (var i = 0; i &lt; str.length; i++) {<br>     if(!json[str.charAt(i)]){<br>         json[str.charAt(i)] = 1;<br>     }else{<br>         json[str.charAt(i)]++;<br>     }<br> };<br> var iMax = 0;<br> var iIndex = ‘’;<br> for(var i in json){<br>     if(json[i]&gt;iMax){<br>         iMax = json[i];<br>         iIndex = i;<br>     }<br> }<br> alert(‘出现次数最多的是:’+iIndex+’出现’+iMax+’次’);</p>
<h2 id="84、javascript的typeof返回哪些数据类型"><a href="#84、javascript的typeof返回哪些数据类型" class="headerlink" title="84、javascript的typeof返回哪些数据类型"></a>84、javascript的typeof返回哪些数据类型</h2><p>Object number function boolean underfind</p>
<h2 id="85、例举3种强制类型转换和2种隐式类型转换"><a href="#85、例举3种强制类型转换和2种隐式类型转换" class="headerlink" title="85、例举3种强制类型转换和2种隐式类型转换?"></a>85、例举3种强制类型转换和2种隐式类型转换?</h2><p>强制（parseInt,parseFloat,number）</p>
<p>隐式（== – ===）</p>
<h2 id="86、split-join-的区别"><a href="#86、split-join-的区别" class="headerlink" title="86、split() join() 的区别"></a>86、split() join() 的区别</h2><p>前者是切割成数组的形式，后者是将数组转换成字符串</p>
<h2 id="87、数组方法pop-push-unshift-shift"><a href="#87、数组方法pop-push-unshift-shift" class="headerlink" title="87、数组方法pop() push() unshift() shift()"></a>87、数组方法pop() push() unshift() shift()</h2><p>Push()尾部添加 shift() 尾部删除</p>
<p>Unshift() 头部添加 shift() 头部删除</p>
<h2 id="89、IE和DOM事件流的区别"><a href="#89、IE和DOM事件流的区别" class="headerlink" title="89、IE和DOM事件流的区别"></a>89、IE和DOM事件流的区别</h2><p>1.执行顺序不一样、</p>
<body> 

 <div> 
 <button>点击这里</button> 
 </div> 

 </body> 
 冒泡型事件模型： button->div->body (IE事件流) 
 捕获型事件模型： body->div->button (Netscape事件流)
 DOM事件模型： body->div->button->button->div->body (先捕获后冒泡) 

 

<p>2.参数不一样</p>
<p>3.事件加不加on</p>
<p>4.this指向问题</p>
<h2 id="90、IE和标准下有哪些兼容性的写法"><a href="#90、IE和标准下有哪些兼容性的写法" class="headerlink" title="90、IE和标准下有哪些兼容性的写法"></a>90、IE和标准下有哪些兼容性的写法</h2><p>Var ev = ev || window.event</p>
<p>document.documentElement.clientWidth || document.body.clientWidth</p>
<p>Var target = ev.srcElement||ev.target</p>
<h2 id="91、call和apply的区别"><a href="#91、call和apply的区别" class="headerlink" title="91、call和apply的区别"></a>91、call和apply的区别</h2><p>Object.call(this,obj1,obj2,obj3)</p>
<p>Object.apply(this,arguments)</p>
<h2 id="93、写一个获取非行间样式的函数"><a href="#93、写一个获取非行间样式的函数" class="headerlink" title="93、写一个获取非行间样式的函数"></a>93、写一个获取非行间样式的函数</h2><p>function getStyle(obj,attr,value)</p>
<p>{</p>
<p> if(!value)</p>
<p> {</p>
<p>   <strong>if(obj.currentStyle)//ie</strong></p>
<p>   <strong>{</strong></p>
<p>​    <strong>return obj.currentStyle(attr);</strong></p>
<p>   <strong>}</strong></p>
<p>   **else{//**<strong>标准浏览器</strong></p>
<p>​    <strong>obj.getComputedStyle(attr,false);</strong></p>
<p>   <strong>}</strong></p>
<p> }    </p>
<p> else</p>
<p> {</p>
<p>   obj.style[attr] = value;</p>
<p> }</p>
<p>}</p>
<h2 id="95、闭包是什么，有什么特性，对页面有什么影响"><a href="#95、闭包是什么，有什么特性，对页面有什么影响" class="headerlink" title="95、闭包是什么，有什么特性，对页面有什么影响"></a>95、闭包是什么，有什么特性，对页面有什么影响</h2><p>闭包就是能够读取其他函数内部变量的函数。</p>
<p><a href="http://blog.csdn.net/gaoshanwudi/article/details/7355794">http://blog.csdn.net/gaoshanwudi/article/details/7355794</a> 此链接可查看（问这个问题的不是一个公司）</p>
<h2 id="96、解释jsonp的原理，以及为什么不是真正的ajax"><a href="#96、解释jsonp的原理，以及为什么不是真正的ajax" class="headerlink" title="96、解释jsonp的原理，以及为什么不是真正的ajax"></a>96、解释jsonp的原理，以及为什么不是真正的ajax</h2><p>动态创建script标签，回调函数</p>
<p>Ajax是页面无刷新请求数据操作</p>
<h2 id="97、javascript的本地对象，内置对象和宿主对象"><a href="#97、javascript的本地对象，内置对象和宿主对象" class="headerlink" title="97、javascript的本地对象，内置对象和宿主对象"></a>97、javascript的本地对象，内置对象和宿主对象</h2><p>本地对象为array obj regexp等可以new实例化</p>
<p>内置对象为gload Math 等不可以实例化的</p>
<p>宿主为浏览器自带的document,window 等</p>
<h2 id="98、document-load-和document-ready的区别"><a href="#98、document-load-和document-ready的区别" class="headerlink" title="98、document load 和document ready的区别"></a>98、document load 和document ready的区别</h2><p>Document.onload 是在结构和样式加载完才执行js</p>
<p>Document.ready原生种没有这个方法，jquery中有 $().ready(function)</p>
<h2 id="99、字符串反转，如将-‘12345678’-变成-‘87654321’"><a href="#99、字符串反转，如将-‘12345678’-变成-‘87654321’" class="headerlink" title="99、字符串反转，如将 ‘12345678’ 变成 ‘87654321’"></a>99、字符串反转，如将 ‘12345678’ 变成 ‘87654321’</h2><table>
<thead>
<tr>
<th></th>
<th>//大牛做法；  //思路：先将字符串转换为数组 split()，利用数组的反序函数 reverse()颠倒数组，再利用 jion() 转换为字符串  var str = ‘12345678’;  str = str.split(‘’).reverse().join(‘’);</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="100、将数字-12345678-转化成-RMB形式-如：-12-345-678"><a href="#100、将数字-12345678-转化成-RMB形式-如：-12-345-678" class="headerlink" title="100、将数字 12345678 转化成 RMB形式 如： 12,345,678"></a>100、将数字 12345678 转化成 RMB形式 如： 12,345,678</h2><table>
<thead>
<tr>
<th></th>
<th>//个人方法；  //思路：先将数字转为字符， str= str + ‘’ ;  //利用反转函数，每三位字符加一个 ‘,’最后一位不加； re()是自定义的反转函数，最后再反转回去！  for(var i = 1; i &lt;= re(str).length; i++){    tmp += re(str)[i - 1];    if(i % 3 == 0 &amp;&amp; i != re(str).length){      tmp += ‘,’;    }  }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="101、生成5个不同的随机数；"><a href="#101、生成5个不同的随机数；" class="headerlink" title="101、生成5个不同的随机数；"></a>101、生成5个不同的随机数；</h2><table>
<thead>
<tr>
<th></th>
<th>//思路：5个不同的数，每生成一次就和前面的所有数字相比较，如果有相同的，则放弃当前生成的数字！  var num1 = [];  for(var i = 0; i &lt; 5; i++){    num1[i] = Math.floor(Math.random()*10) + 1; //范围是 [1, 10]    for(var j = 0; j &lt; i; j++){      if(num1[i] == num1[j]){        i–;      }    }  }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="102、去掉数组中重复的数字-方法一；"><a href="#102、去掉数组中重复的数字-方法一；" class="headerlink" title="102、去掉数组中重复的数字 方法一；"></a>102、去掉数组中重复的数字 方法一；</h2><table>
<thead>
<tr>
<th></th>
<th>//思路：每遍历一次就和之前的所有做比较，不相等则放入新的数组中！  //这里用的原型 个人做法；  <strong>Array.prototype.unique</strong> = function(){    var len = this.length,      newArr = [],      flag = 1;    for(var i = 0; i &lt; len; i++, flag = 1){      for(var j = 0; j &lt; i; j++){        if(this[i] == this[j]){          flag = 0;    //找到相同的数字后，不执行添加数据        }      }      flag ? newArr.push(this[i]) : ‘’;    }    return newArr;  }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>  方法二：</p>
<table>
<thead>
<tr>
<th></th>
<th>(function(arr){    var len = arr.length,      newArr = [],       flag;    for(var i = 0; i &lt; len; i+=1, flag = 1){      for(var j = 0; j &lt; i; j++){        if(arr[i] == arr[j]){          flag = 0;        }       }      flag?newArr.push(arr[i]):’’;    }    alert(newArr);  })([1, 1, 22, 3, 4, 55, 66]);</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="103、阶乘函数；98765…-1"><a href="#103、阶乘函数；98765…-1" class="headerlink" title="103、阶乘函数；98765…*1"></a>103、阶乘函数；9<em>8</em>7<em>6</em>5…*1</h2><table>
<thead>
<tr>
<th></th>
<th>//原型方法  Number.prototype.N = function(){    var re = 1;    for(var i = 1; i &lt;= this; i++){      re *= i;    }    return re;  }  var num = 5;  alert(num.N());</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="104、window-location-search返回的是什么？"><a href="#104、window-location-search返回的是什么？" class="headerlink" title="104、window.location.search返回的是什么？"></a>104、window.location.search返回的是什么？</h2><p>  答：查询(参数)部分。除了给动态语言赋值以外，我们同样可以给静态页面,并使用javascript来获得相信应的参数值</p>
<p>​    返回值：?ver=1.0&amp;id=timlq 也就是问号后面的！</p>
<p>//url:<a href="http://www.sina.com/getage?number=1&amp;year=2016">http://www.sina.com/getage?number=1&amp;year=2016</a></p>
<h2 id="105、window-location-hash-返回的是什么？"><a href="#105、window-location-hash-返回的是什么？" class="headerlink" title="105、window.location.hash 返回的是什么？"></a>105、window.location.hash 返回的是什么？</h2><p>答：锚点 ， 返回值：#love ；</p>
<p>//url:<a href="http://www.sina.com/getage#age">http://www.sina.com/getage?#age</a></p>
<p>这时就返回”#age”</p>
<h2 id="106、window-location-reload-作用？"><a href="#106、window-location-reload-作用？" class="headerlink" title="106、window.location.reload() 作用？"></a>106、window.location.reload() 作用？</h2><p>  答：刷新当前页面。</p>
<h2 id="107、阻止冒泡函数"><a href="#107、阻止冒泡函数" class="headerlink" title="107、阻止冒泡函数"></a>107、阻止冒泡函数</h2><table>
<thead>
<tr>
<th></th>
<th>function stopPropagation(e) {     e = e || window.event;     if(e.stopPropagation) { //W3C阻止冒泡方法       e.stopPropagation();     } else {       e.cancelBubble = true; //IE阻止冒泡方法     }   }   document.getElementById(‘need_hide’).onclick = function(e) {     stopPropagation(e);   }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="108、什么是闭包？-写一个简单的闭包？；"><a href="#108、什么是闭包？-写一个简单的闭包？；" class="headerlink" title="108、什么是闭包？ 写一个简单的闭包？；"></a>108、什么是闭包？ 写一个简单的闭包？；</h2><p>  答：我的理解是，闭包就是能够读取其他函数内部变量的函数。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<table>
<thead>
<tr>
<th></th>
<th>function outer(){    var num = 1;    function inner(){      var n = 2;      alert(n + num);    }    return inner;  }  outer()();</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="109、javascript-中的垃圾回收机制？"><a href="#109、javascript-中的垃圾回收机制？" class="headerlink" title="109、javascript 中的垃圾回收机制？"></a>109、javascript 中的垃圾回收机制？</h2><p>  答：在Javascript中，如果一个对象不再被引用，那么这个对象就会被<strong>GC</strong>回收。如果两个对象互相引用，而不再  被第3者所引用，那么这两个互相引用的对象也会被回收。因为函数a被b引用，b又被a外的c引用，这就是为什么  函数a执行后不会被回收的原因。</p>
<h2 id="110、看题做答："><a href="#110、看题做答：" class="headerlink" title="110、看题做答："></a>110、看题做答：</h2><table>
<thead>
<tr>
<th></th>
<th>function f1(){    var tmp = 1;    this.x = 3;    console.log(tmp);  //A    console.log(this.x)；   //B  }  var obj = new f1(); //1  console.log(obj.x)   //2  console.log(f1());    //3</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>  分析：  </p>
<p>​    这道题让我重新认识了对象和函数，首先看代码（1），这里实例话化了 f1这个类。相当于执行了 f1函数。所以这个时候 A 会输出 1， 而 B 这个时候的 this 代表的是 实例化的当前对象 obj B 输出 3.。 代码（2）毋庸置疑会输出 3， 重点 代码（3）首先这里将不再是一个类，它只是一个函数。那么 A输出 1， B呢？这里的this 代表的其实就是window对象，那么this.x 就是一个全局变量 相当于在外部 的一个全局变量。所以 B 输出 3。最后代码由于f没有返回值那么一个函数如果没返回值的话，将会返回 underfined ，所以答案就是 ： 1， 3， 3， 1， 3， underfined 。</p>
<h2 id="111、下面输出多少？"><a href="#111、下面输出多少？" class="headerlink" title="111、下面输出多少？"></a>111、下面输出多少？</h2><table>
<thead>
<tr>
<th></th>
<th>var o1 = new Object();  var o2 = o1;  o2.name = “CSSer”;  console.log(o1.name);</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p> 如果不看答案，你回答真确了的话，那么说明你对javascript的数据类型了解的还是比较清楚了。js中有两种数据类型，分别是：基本数据类型和引用数据类型（object Array）。对于保存基本类型值的变量，变量是按值访问的，因为我们操作的是变量实际保存的值。对于保存引用类型值的变量，变量是按引用访问的，我们操作的是变量值所引用（指向）的对象。答案就清楚了：  //CSSer;</p>
<h2 id="112、再来一个"><a href="#112、再来一个" class="headerlink" title="112、再来一个"></a>112、再来一个</h2><table>
<thead>
<tr>
<th></th>
<th>function changeObjectProperty (o) {    o.siteUrl = “<a href="http://www.csser.com/&quot;">http://www.csser.com/&quot;</a>;    o = new Object();    o.siteUrl = “<a href="http://www.popcg.com/&quot;">http://www.popcg.com/&quot;</a>;  }  var CSSer = new Object();  changeObjectProperty(CSSer);  console.log(CSSer.siteUrl); //</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>  如果CSSer参数是按引用传递的，那么结果应该是”<a href="http://www.popcg.com/&quot;%EF%BC%8C%E4%BD%86%E5%AE%9E%E9%99%85%E7%BB%93%E6%9E%9C%E5%8D%B4%E4%BB%8D%E6%98%AF&quot;http://www.csser.com/&quot;%E3%80%82%E4%BA%8B%E5%AE%9E%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84%EF%BC%9A%E5%9C%A8%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8%E4%BF%AE%E6%94%B9%E4%BA%86%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%80%BC%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%8C%E8%AF%A5%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E5%8E%9F%E5%A7%8B%E5%BC%95%E7%94%A8%E4%BF%9D%E6%8C%81%E4%B8%8D%E5%8F%98%E3%80%82%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%8A%8A%E5%8F%82%E6%95%B0%E6%83%B3%E8%B1%A1%E6%88%90%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%EF%BC%8C%E5%BD%93%E5%8F%82%E6%95%B0%E8%A2%AB%E9%87%8D%E5%86%99%E6%97%B6%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%8F%98%E9%87%8F%E5%BC%95%E7%94%A8%E7%9A%84%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%EF%BC%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E7%94%9F%E5%AD%98%E6%9C%9F%E4%BB%85%E9%99%90%E4%BA%8E%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%EF%BC%8C%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%EF%BC%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%8D%B3%E8%A2%AB%E9%94%80%E6%AF%81%E4%BB%A5%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98%E3%80%82">http://www.popcg.com/&quot;，但实际结果却仍是&quot;http://www.csser.com/&quot;。事实是这样的：在函数内部修改了引用类型值的参数，该参数值的原始引用保持不变。我们可以把参数想象成局部变量，当参数被重写时，这个变量引用的就是一个局部变量，局部变量的生存期仅限于函数执行的过程中，函数执行完毕，局部变量即被销毁以释放内存。</a>  </p>
<p>  （补充：内部环境可以通过作用域链访问所有的外部环境中的变量对象，但外部环境无法访问内部环境。每个环境都可以向上搜索作用域链，以查询变量和函数名，反之向下则不能。）</p>
<h2 id="113、输出多少？"><a href="#113、输出多少？" class="headerlink" title="113、输出多少？"></a>113、输出多少？</h2><table>
<thead>
<tr>
<th></th>
<th>var a = 6;  setTimeout(function () {      var a = 666;//<strong>由于变量a是一个局部变量</strong>    alert(a);   // 输出666，  }, 1000);  a = 66;</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>因为var a = 666;定义了局部变量a，并且赋值为666，根据变量作用域链，<br> 全局变量处在作用域末端，优先访问了局部变量，从而覆盖了全局变量 。</p>
<table>
<thead>
<tr>
<th></th>
<th>var a = 6;  setTimeout(function () {                   //变量声明提前    alert(a);   // 输出undefined     var a = 666;  }, 1000);  a = 66;</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>因为var a = 666;定义了局部变量a，同样覆盖了全局变量，但是在alert(a);之前<br> a并未赋值，所以输出undefined。</p>
<table>
<thead>
<tr>
<th></th>
<th>var  <em>a</em> = 6;   setTimeout(function(){     alert(a);     var a = 66;   }, 1000);   <em>a</em> = 666;   alert(<em>a</em>);   //结果：666 undefined</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>记住： 异步处理，一切OK 声明提前</p>
<h2 id="114、输出多少？"><a href="#114、输出多少？" class="headerlink" title="114、输出多少？"></a>114、输出多少？</h2><table>
<thead>
<tr>
<th></th>
<th>function setN(obj){    obj.name=’屌丝’;    obj = new Object();     obj.name = ‘腐女’;  };  var per = new Object();  setN(per);  alert(per.name); //屌丝 内部</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="115、JS的继承性"><a href="#115、JS的继承性" class="headerlink" title="115、JS的继承性"></a>115、JS的继承性</h2><table>
<thead>
<tr>
<th></th>
<th>window.color = ‘red’;  var o = {color: ‘blue’};  function sayColor(){    alert(this.color);  }  考点：1、this的指向     2、call的用法  sayColor(); //red  sayColor.call(this); //red this指向的是window对象  sayColor.call(window); //red  sayColor.call(o); //blue</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="116、精度问题-JS-精度不能精确到-0-1-所以-。。。。同时存在于值和差值中"><a href="#116、精度问题-JS-精度不能精确到-0-1-所以-。。。。同时存在于值和差值中" class="headerlink" title="116、精度问题: JS 精度不能精确到 0.1 所以  。。。。同时存在于值和差值中"></a>116、精度问题: JS 精度不能精确到 0.1 所以  。。。。同时存在于值和差值中</h2><table>
<thead>
<tr>
<th></th>
<th>var n = 0.3,m = 0.2, i = 0.2, j = 0.1;  alert((n - m) == (i - j)); //false  alert((n-m) == 0.1); //false  alert((i-j)==0.1); //true</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="117、加减运算"><a href="#117、加减运算" class="headerlink" title="117、加减运算"></a>117、加减运算</h2><table>
<thead>
<tr>
<th></th>
<th>alert(‘5’+3); //53 string  alert(‘5’+’3’); //53 string  alert(‘5’-3); //2 number  alert(‘5’-‘3’); //2 number</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="118、什么是同源策略？"><a href="#118、什么是同源策略？" class="headerlink" title="118、什么是同源策略？"></a>118、什么是同源策略？</h2><p>  指： 同协议、端口、域名的安全策略，由网景(Netscape)公司提出来的安全协议！</p>
<h2 id="119、call和apply的区别是什么？"><a href="#119、call和apply的区别是什么？" class="headerlink" title="119、call和apply的区别是什么？"></a>119、call和apply的区别是什么？</h2><p>  参数形式不同，call(obj, pra, pra)后面是单个参数。apply(obj, [args])后面是数组。</p>
<h2 id="120、为什么不能定义1px左右的div容器？"><a href="#120、为什么不能定义1px左右的div容器？" class="headerlink" title="120、为什么不能定义1px左右的div容器？"></a>120、为什么不能定义1px左右的div容器？</h2><p>IE6下这个问题是因为默认的行高造成的，解决的方法也有很多，例如：</p>
<p>overflow:hidden | zoom:0.08 | line-height:1px</p>
<h2 id="121、结果是什么？"><a href="#121、结果是什么？" class="headerlink" title="121、结果是什么？"></a>121、结果是什么？</h2><table>
<thead>
<tr>
<th></th>
<th>function foo(){    foo.a = function(){alert(1)};     this.a = function(){alert(2)};    a = function(){alert(3)};    var a = function(){alert(4)};  };   foo.prototype.a = function(){alert(5)};  foo.a = function(){alert(6)};  foo.a(); //6  var obj = new foo();  obj.a(); //2  foo.a(); //1</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="122、输出结果"><a href="#122、输出结果" class="headerlink" title="122、输出结果"></a>122、输出结果</h2><table>
<thead>
<tr>
<th></th>
<th>var a = 5;   function test(){    a = 0;     alert(a);     alert(this.a); //没有定义 a这个属性    var a;     alert(a)  }  test(); // 0, 5, 0  new test(); // 0, undefined, 0 //由于类它自身没有属性a， 所以是undefined</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="123、计算字符串字节数："><a href="#123、计算字符串字节数：" class="headerlink" title="123、计算字符串字节数："></a>123、计算字符串字节数：</h2><table>
<thead>
<tr>
<th></th>
<th>new function(s){      if(!arguments.length||!s) return null;      if(“”==s) return 0;   //无效代码，因为上一句!s已经判断过     var l=0;     for(var i=0;i&lt;s.length;i++){           if(s.**charCodeAt**(i)&gt;255) l+=2; else l+=1; //charCodeAt()得到的是unCode码       }   //汉字的unCode码大于 255bit 就是两个字节     alert(l);   }(“hello world!”);</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="124、结果是："><a href="#124、结果是：" class="headerlink" title="124、结果是："></a>124、结果是：</h2><table>
<thead>
<tr>
<th></th>
<th>var bool = !!2; alert(bool)；//true;</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>技巧：双向非操作可以把字符串和数字转换为布尔值。</p>
<h2 id="125、声明对象，添加属性，输出属性"><a href="#125、声明对象，添加属性，输出属性" class="headerlink" title="125、声明对象，添加属性，输出属性"></a>125、声明对象，添加属性，输出属性</h2><table>
<thead>
<tr>
<th></th>
<th>var obj = {      name: ‘leipeng’,      showName: function(){        alert(this.name);      }    }  obj.showName();</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="126、匹配输入的字符：第一个必须是字母或下划线开头，后面就是字母和数字或者下划线构成，长度5-20"><a href="#126、匹配输入的字符：第一个必须是字母或下划线开头，后面就是字母和数字或者下划线构成，长度5-20" class="headerlink" title="126、匹配输入的字符：第一个必须是字母或下划线开头，后面就是字母和数字或者下划线构成，长度5-20"></a>126、匹配输入的字符：第一个必须是字母或下划线开头，后面就是字母和数字或者下划线构成，长度5-20</h2><table>
<thead>
<tr>
<th></th>
<th>var reg = /^[a-zA-Z_][a-zA-Z0-9_]{4,19}/,        name1 = ‘leipeng’,        name2 = ‘0leipeng’,        name3 = ‘你好leipeng’,        name4 = ‘hi’;           alert(reg.test(name1));      alert(reg.test(name2));      alert(reg.test(name3));      alert(reg.test(name4));</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="127、检测变量类型"><a href="#127、检测变量类型" class="headerlink" title="127、检测变量类型"></a>127、检测变量类型</h2><table>
<thead>
<tr>
<th></th>
<th>function checkStr(str){      typeof str == ‘string’? alert(‘true’):alert(‘false’);    }    checkStr(‘leipeng’);</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="128、如何在HTML中添加事件，几种方法？"><a href="#128、如何在HTML中添加事件，几种方法？" class="headerlink" title="128、如何在HTML中添加事件，几种方法？"></a>128、如何在HTML中添加事件，几种方法？</h2><p>  1、标签之中直接添加 onclick=”fun()”;</p>
<p>  2、JS添加 Eobj.onclick = method;</p>
<p>  3、现代事件 IE9以前： obj.attachEvent(‘onclick’, method)；</p>
<p>​     标准浏览器: obj.addEventListener(‘click’, method, false);</p>
<h2 id="129、BOM对象有哪些，列举window对象？"><a href="#129、BOM对象有哪些，列举window对象？" class="headerlink" title="129、BOM对象有哪些，列举window对象？"></a>129、BOM对象有哪些，列举window对象？</h2><p>  1、window对象 ，是JS的最顶层对象，其他的BOM对象都是window对象的属性；</p>
<p>  2、document对象，文档对象；</p>
<p>  3、location对象，浏览器当前URL信息；</p>
<p>  4、navigator对象，浏览器本身信息；</p>
<p>  5、screen对象，客户端屏幕信息；</p>
<p>  6、history对象，浏览器访问历史信息；</p>
<h2 id="130、请问代码实现-outerHTML"><a href="#130、请问代码实现-outerHTML" class="headerlink" title="130、请问代码实现 outerHTML"></a>130、请问代码实现 outerHTML</h2><p>  //说明：outerHTML其实就是innerHTML再加上本身；</p>
<table>
<thead>
<tr>
<th></th>
<th>Object.prototype.outerHTML = function(){      var innerCon = this.innerHTML, //获得里面的内容        outerCon = this.appendChild(innerCon); //添加到里面      alert(outerCon);     }</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>  演示代码：</p>
   <!doctype html>   <html>   <head>    <meta charset="UTF-8">    <title>Document</title>   </head>   <body>    <div id="outer">      hello    </div>   <script>    Object.prototype.outerHTML = function(){    var innerCon = this.innerHTML, //获得里面的内容    outerCon = this.appendChild(innerCon); //添加到里面    alert(outerCon);      }    function $(id){    return document.getElementById(id);    }    alert($('outer').innerHTML);    alert($('outer').outerHTML);   </script>   </body>   </html>  


<h2 id="131、JS中的简单继承-call方法！"><a href="#131、JS中的简单继承-call方法！" class="headerlink" title="131、JS中的简单继承 call方法！"></a>131、JS中的简单继承 call方法！</h2><table>
<thead>
<tr>
<th></th>
<th>//顶一个父母类，注意：类名都是首字母大写的哦！   function Parent(name, money){        this.name = name;        this.money = money;        this.info = function(){          alert(‘姓名： ‘+this.name+’ 钱： ‘+ this.money);        }      }      //定义孩子类      function Children(name){        Parent.call(this, name); //继承 姓名属性，不要钱。         this.info = function(){          alert(‘姓名： ‘+this.name);        }      }      //实例化类      var per = new Parent(‘parent’, 800000000000);      var chi = new Children(‘child’);      per.info();      chi.info();</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="132、bind-live-delegate-的区别"><a href="#132、bind-live-delegate-的区别" class="headerlink" title="132、bind(), live(), delegate()的区别"></a>132、bind(), live(), delegate()的区别</h2><p>  bind： 绑定事件，对新添加的事件不起作用，方法用于将一个处理程序附加到每个匹配元素的事件上并返回jQuery对象。</p>
<p>  live： 方法将一个事件处理程序附加到与当前选择器匹配的所有元素（包含现有的或将来添加的）的指定事件上并返回jQuery对象。</p>
<p>delegate： 方法基于一组特定的根元素将处理程序附加到匹配选择器的所有元素（现有的或将来的）的一个或多个事件上。</p>
<p>最佳实现：on() off()</p>
<h2 id="133、typeof-的返回类型有哪些？"><a href="#133、typeof-的返回类型有哪些？" class="headerlink" title="133、typeof 的返回类型有哪些？"></a>133、typeof 的返回类型有哪些？</h2><table>
<thead>
<tr>
<th></th>
<th>alert(typeof [1, 2]); //object    alert(typeof ‘leipeng’); //string    var i = true;     alert(typeof i); //boolean    alert(typeof 1); //number    var a;     alert(typeof a); //undefined    function a(){;};    alert(typeof a) //function</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="134、简述link和import的区别？"><a href="#134、简述link和import的区别？" class="headerlink" title="134、简述link和import的区别？"></a>134、简述link和import的区别？</h2><p>区别1：link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</p>
<p>区别2：link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</p>
<p>区别3：link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</p>
<p>区别4：link支持使用Javascript控制DOM去改变样式；而@import不支持。</p>
<h2 id="135、window-onload-和-document-ready的区别？"><a href="#135、window-onload-和-document-ready的区别？" class="headerlink" title="135、window.onload 和 document.ready的区别？"></a>135、window.onload 和 document.ready的区别？</h2><p>load要等到图片和包含的文件都加在进来之后执行；</p>
<p>ready是不包含图片和非文字文件的文档结构准备好就执行；</p>
<h2 id="136、-解析URL成一个对象？"><a href="#136、-解析URL成一个对象？" class="headerlink" title="136、 解析URL成一个对象？"></a>136、 解析URL成一个对象？</h2><p>​        String.prototype.urlQueryString = function(){          var url = this.split(‘?’)[1].split(‘&amp;’),            len = url.length;                 this.url = {};          for(var i = 0; i &lt; len; i += 1){            var cell = url[i].split(‘=’),                key = cell[0],              val = cell[1];            this.url[‘’+key+’’] = val;          }           return this.url;        }        var url = ‘?name=12&amp;age=23’;        console.log(url.urlQueryString().age);  </p>
<h2 id="137、看下列代码输出什么？"><a href="#137、看下列代码输出什么？" class="headerlink" title="137、看下列代码输出什么？"></a>137、看下列代码输出什么？</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var foo = &quot;11&quot;+2-&quot;1&quot;;</span><br><span class="line">console.log(foo);</span><br><span class="line">console.log(typeof foo);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行完后foo的值为111，foo的类型为Number。</span><br></pre></td></tr></table></figure>

<h2 id="138、看下列代码-输出什么？"><a href="#138、看下列代码-输出什么？" class="headerlink" title="138、看下列代码,输出什么？"></a>138、看下列代码,输出什么？</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = new Object();</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.value = 1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b = a;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.value = 2;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(a.value);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行完后输出结果为2</span><br></pre></td></tr></table></figure>

<h2 id="139、已知数组var-stringArray-“This”-“is”-“Baidu”-“Campus”-，Alert出”This-is-Baidu-Campus”。"><a href="#139、已知数组var-stringArray-“This”-“is”-“Baidu”-“Campus”-，Alert出”This-is-Baidu-Campus”。" class="headerlink" title="139、已知数组var stringArray = [“This”, “is”, “Baidu”, “Campus”]，Alert出”This is Baidu Campus”。"></a>139、已知数组var stringArray = [“This”, “is”, “Baidu”, “Campus”]，Alert出”This is Baidu Campus”。</h2><p>答案：alert(stringArray.join(“ “))</p>
<h2 id="140、已知有字符串foo-”get-element-by-id”-写一个function将其转化成驼峰表示法”getElementById”。"><a href="#140、已知有字符串foo-”get-element-by-id”-写一个function将其转化成驼峰表示法”getElementById”。" class="headerlink" title="140、已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。"></a>140、已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。</h2><p>答案：function combo(msg){</p>
<p> var arr = msg.split(“-“);</p>
<p> var len = arr.length; //将arr.length存储在一个局部变量可以提高for循环效率</p>
<p> for(var i=1;i&lt;len;i++){</p>
<p>  arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);</p>
<p> }</p>
<p> msg=arr.join(“”);</p>
<p> return msg;</p>
<p>}</p>
<h2 id="141、怎样添加、移除、移动、复制、创建和查找节点"><a href="#141、怎样添加、移除、移动、复制、创建和查找节点" class="headerlink" title="141、怎样添加、移除、移动、复制、创建和查找节点"></a>141、怎样添加、移除、移动、复制、创建和查找节点</h2><p>　　1）创建新节点</p>
<p>createDocumentFragment() //创建一个DOM片段<br> createElement() //创建一个具体的元素<br> createTextNode() //创建一个文本节点</p>
<p>2）添加、移除、替换、插入<br> appendChild() //添加<br> removeChild() //移除<br> replaceChild() //替换<br> insertBefore() //插入</p>
<p>3）查找<br> getElementsByTagName() //通过标签名称<br> getElementsByName() //通过元素的Name属性的值<br> getElementById() //通过元素Id，唯一性</p>
<h2 id="142、原生JS的window-onload与Jquery的-document-ready-function-有什么不同？"><a href="#142、原生JS的window-onload与Jquery的-document-ready-function-有什么不同？" class="headerlink" title="142、原生JS的window.onload与Jquery的$(document).ready(function(){})有什么不同？"></a>142、原生JS的window.onload与Jquery的$(document).ready(function(){})有什么不同？</h2><p>　　window.onload()方法是必须等到页面内包括图片的所有元素加载完毕后才能执行。</p>
<p>$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。 </p>
<h2 id="143、你如何优化自己的代码？"><a href="#143、你如何优化自己的代码？" class="headerlink" title="143、你如何优化自己的代码？"></a>143、你如何优化自己的代码？</h2><p>代码重用</p>
<p>避免全局变量（命名空间，封闭空间，模块化mvc..）</p>
<p>拆分函数避免函数过于臃肿：<strong>单一职责</strong>原则</p>
<p><strong>适当的注释，尤其是一些复杂的业务逻辑或者是计算逻辑，都应该写出这个业务逻辑的具体过程</strong></p>
<p>内存管理，尤其是闭包中的变量释放</p>
<h2 id="144、请描述出下列代码运行的结果"><a href="#144、请描述出下列代码运行的结果" class="headerlink" title="144、请描述出下列代码运行的结果"></a>144、请描述出下列代码运行的结果</h2><p>function d(){</p>
<p>​    console.log(this);</p>
<p>}</p>
<p>d();//window</p>
<h2 id="145、需要将变量e的值修改为“a-b-c-d”-请写出对应的代码"><a href="#145、需要将变量e的值修改为“a-b-c-d”-请写出对应的代码" class="headerlink" title="145、需要将变量e的值修改为“a+b+c+d”,请写出对应的代码"></a>145、需要将变量e的值修改为“a+b+c+d”,请写出对应的代码</h2><p>var e=”abcd”;</p>
<p>设计一段代码能够遍历下列整个DOM节点</p>
<div>


<p>        <p></p>
<p>​      <span><a/></span></p>
<p>​      <span><a/></span></p>
<p>​    </p></p>
<p>​    <ul></p>
<p>​      <li></li></p>
<p>​      <li></li></p>
<p>​    </ul></p>
</div>

<h2 id="146、怎样实现两栏等高？"><a href="#146、怎样实现两栏等高？" class="headerlink" title="146、怎样实现两栏等高？"></a>146、怎样实现两栏等高？</h2><h2 id="147、使用js实现这样的效果：在文本域里输入文字时，当按下enter键时不换行，而是替换成“”-只需要考虑在行尾按下enter键的情况"><a href="#147、使用js实现这样的效果：在文本域里输入文字时，当按下enter键时不换行，而是替换成“”-只需要考虑在行尾按下enter键的情况" class="headerlink" title="147、使用js实现这样的效果：在文本域里输入文字时，当按下enter键时不换行，而是替换成“”,(只需要考虑在行尾按下enter键的情况)."></a>147、使用js实现这样的效果：在文本域里输入文字时，当按下enter键时不换行，而是替换成“”,(只需要考虑在行尾按下enter键的情况).</h2><p>textarea.onkeydown=function(e){</p>
<p> e.preventDefault();//为了阻止enter键的默认换行效果</p>
<p> if(e.keycode==”enter键码”){</p>
<p>  testarea.value+=””;</p>
<p> }</p>
<p>}</p>
<h2 id="148、以下代码中end字符串什么时候输出"><a href="#148、以下代码中end字符串什么时候输出" class="headerlink" title="148、以下代码中end字符串什么时候输出"></a>148、以下代码中end字符串什么时候输出</h2><p>var t=true;</p>
<p>setTimeout(function(){  </p>
<p>  console.log(123);</p>
<p>  t=false;</p>
<p>  },1000);</p>
<p>while(t){}// <strong>此时是一个死循环，永远不可能执行setTimeout中的回调函数</strong></p>
<p>console.log(‘end’);</p>
<h2 id="149、specify-‘hello-world’-gt-’h-e-l-l-o-w-o-r-l-d’实现specify函数"><a href="#149、specify-‘hello-world’-gt-’h-e-l-l-o-w-o-r-l-d’实现specify函数" class="headerlink" title="149、specify(‘hello,world’)//=&gt;’h,e,l,l,o,w,o,r,l,d’实现specify函数"></a>149、specify(‘hello,world’)//=&gt;’h,e,l,l,o,w,o,r,l,d’实现specify函数</h2><h2 id="150、请将一个URL的search部分参数与值转换成一个json对象"><a href="#150、请将一个URL的search部分参数与值转换成一个json对象" class="headerlink" title="150、请将一个URL的search部分参数与值转换成一个json对象"></a>150、请将一个URL的search部分参数与值转换成一个json对象</h2><p>//search部分的参数格式：a=1&amp;b=2&amp;c=3</p>
<p>function getJsonFromUrlSearch(<em>search</em>){<br>   var item;<br>   var result={};<br>   if(<em>search</em>.indexOf(‘&amp;’)&lt;0){<br>     item=<em>search</em>.split(‘=’);<br>     result[item[0]]=item[1];<br>     return result;<br>   }<br>   var splitArray=<em>search</em>.split(‘&amp;’);<br>   for (var i = 0; i &lt; splitArray.length; i++) {<br>     var obj = splitArray[i];<br>     item=obj.split(‘=’);<br>     result[item[0]]=item[1];<br>   }<br>   return result;<br> }<br> var <em>c</em>=getJsonFromUrlSearch(“a=1&amp;b=2&amp;c=3”);</p>
<h2 id="151、请用原生js实现jquery的get-post功能，以及跨域情况下"><a href="#151、请用原生js实现jquery的get-post功能，以及跨域情况下" class="headerlink" title="151、请用原生js实现jquery的get\post功能，以及跨域情况下"></a>151、请用原生js实现jquery的get\post功能，以及跨域情况下</h2><h2 id="152、请简要描述web前端性能需要考虑哪方面，你的优化思路是什么？"><a href="#152、请简要描述web前端性能需要考虑哪方面，你的优化思路是什么？" class="headerlink" title="152、请简要描述web前端性能需要考虑哪方面，你的优化思路是什么？"></a>152、请简要描述web前端性能需要考虑哪方面，你的优化思路是什么？</h2><p>//参见雅虎14web优化规则</p>
<p>//减少http请求：</p>
<p>//1、小图弄成大图，2、合理的设置缓存</p>
<p>//3、资源合并、压缩</p>
<p>//将外部的js文件置底[<a href="#_msocom_2">张曼莉2]</a> </p>
<h2 id="153、简述readyonly与disabled的区别"><a href="#153、简述readyonly与disabled的区别" class="headerlink" title="153、简述readyonly与disabled的区别"></a>153、简述readyonly与disabled的区别</h2><p>readonly只针对input(text / password)和textarea有效，</p>
<p>而disabled对于所有的表单元素都有效，当表单元素在使用了disabled后，当我们将表单以POST或GET的方式提交的话，这个元素的值不会被传递出去，而readonly会将该值传递出去</p>
<h2 id="154、判断一个字符串出现次数最多的字符，统计这个次数并输出"><a href="#154、判断一个字符串出现次数最多的字符，统计这个次数并输出" class="headerlink" title="154、判断一个字符串出现次数最多的字符，统计这个次数并输出"></a>154、判断一个字符串出现次数最多的字符，统计这个次数并输出</h2><h2 id="155、编写一个方法，去掉一个数组的复重元素"><a href="#155、编写一个方法，去掉一个数组的复重元素" class="headerlink" title="155、编写一个方法，去掉一个数组的复重元素"></a>155、编写一个方法，去掉一个数组的复重元素</h2><h2 id="156、写出3个使用this的典型应用"><a href="#156、写出3个使用this的典型应用" class="headerlink" title="156、写出3个使用this的典型应用"></a>156、写出3个使用this的典型应用</h2><p>构造函数中使用this，原型中使用this，对象字面量使用this</p>
<h2 id="157、请尽可能详尽的解释ajax的工作原理"><a href="#157、请尽可能详尽的解释ajax的工作原理" class="headerlink" title="157、请尽可能详尽的解释ajax的工作原理"></a>157、请尽可能详尽的解释ajax的工作原理</h2><p><strong>思路：</strong>先解释异步，再解释ajax如何使用</p>
<p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。</p>
<p>　XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。</p>
<h2 id="158、为什么扩展javascript内置对象不是好的做法？"><a href="#158、为什么扩展javascript内置对象不是好的做法？" class="headerlink" title="158、为什么扩展javascript内置对象不是好的做法？"></a>158、为什么扩展javascript内置对象不是好的做法？</h2><p>因为扩展内置对象会影响整个程序中所使用到的该内置对象的原型属性</p>
<h2 id="159、请解释一下javascript的同源策略"><a href="#159、请解释一下javascript的同源策略" class="headerlink" title="159、请解释一下javascript的同源策略"></a>159、请解释一下javascript的同源策略</h2><p>域名、协议、端口相同</p>
<h2 id="160、什么是三元表达式？“三元”表示什么意思？"><a href="#160、什么是三元表达式？“三元”表示什么意思？" class="headerlink" title="160、什么是三元表达式？“三元”表示什么意思？"></a>160、什么是三元表达式？“三元”表示什么意思？</h2><p>? :</p>
<p>因为运算符会涉及3个表达式</p>
<h2 id="161、浏览器标准模式和怪异模式之间的区别是什么？"><a href="#161、浏览器标准模式和怪异模式之间的区别是什么？" class="headerlink" title="161、浏览器标准模式和怪异模式之间的区别是什么？"></a>161、浏览器标准模式和怪异模式之间的区别是什么？</h2><p>标准模式是指，浏览器按W3C标准解析执行代码；</p>
<p>怪异模式则是使用浏览器自己的方式解析执行代码，因为不同浏览器解析执行的方式不一样，所以我们称之为怪异模式。</p>
<p>浏览器解析时到底使用标准模式还是怪异模式，与你网页中的DTD声明直接相关，DTD声明定义了标准文档的类型（标准模式解析）文档类型，会使浏览器使用相应的方式加载网页并显示，忽略DTD声明,将使网页进入怪异模式</p>
<h2 id="162、如果设计中使用了非标准的字体，你该如何去实现？"><a href="#162、如果设计中使用了非标准的字体，你该如何去实现？" class="headerlink" title="162、如果设计中使用了非标准的字体，你该如何去实现？"></a>162、如果设计中使用了非标准的字体，你该如何去实现？</h2><p>先通过font-face定义字体，再引用</p>
<p>@font-face</p>
<p>{</p>
<p>font-family: myFirstFont;</p>
<p>src: url(‘Sansation_Light.ttf’),</p>
<p>   url(‘Sansation_Light.eot’); /* IE9+ */</p>
<p>}</p>
<h2 id="163、用css分别实现某个div元素上下居中和左右居中"><a href="#163、用css分别实现某个div元素上下居中和左右居中" class="headerlink" title="163、用css分别实现某个div元素上下居中和左右居中"></a>163、用css分别实现某个div元素上下居中和左右居中</h2><p>margin:0 auto;</p>
<h2 id="164、module-12-5-2-实现满足这个结果的modulo函数"><a href="#164、module-12-5-2-实现满足这个结果的modulo函数" class="headerlink" title="164、module(12,5)//2 实现满足这个结果的modulo函数"></a>164、module(12,5)//2 实现满足这个结果的modulo函数</h2><p>function modulo(<em>a</em>,<em>b</em>){<br>   return a%b;//return a/b;<br> }</p>
<h2 id="165、HTTP协议中，GET和POST有什么区别？分别适用什么场景-？"><a href="#165、HTTP协议中，GET和POST有什么区别？分别适用什么场景-？" class="headerlink" title="165、HTTP协议中，GET和POST有什么区别？分别适用什么场景 ？"></a>165、HTTP协议中，GET和POST有什么区别？分别适用什么场景 ？</h2><p>get传送的数据长度有限制，post没有</p>
<p>get通过url传递，在浏览器地址栏可见，post是在报文中传递</p>
<p>适用场景：</p>
<p>post一般用于表单提交</p>
<p>get一般用于简单的数据查询，严格要求不是那么高的场景</p>
<h2 id="166、HTTP状态消息200-302-304-403-404-500分别表示什么"><a href="#166、HTTP状态消息200-302-304-403-404-500分别表示什么" class="headerlink" title="166、HTTP状态消息200 302 304 403 404 500分别表示什么"></a>166、HTTP状态消息200 302 304 403 404 500分别表示什么</h2><p>200：请求已成功，请求所希望的响应头或数据体将随此响应返回。</p>
<p>302：请求的资源临时从不同的 URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的</p>
<p>304：如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</p>
<p>403：服务器已经理解请求，但是拒绝执行它。</p>
<p>404：请求失败，请求所希望得到的资源未被在服务器上发现。</p>
<p>500：服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。</p>
<h2 id="167、HTTP协议中，header信息里面，怎么控制页面失效时间（last-modified-cache-control-Expires分别代表什么）"><a href="#167、HTTP协议中，header信息里面，怎么控制页面失效时间（last-modified-cache-control-Expires分别代表什么）" class="headerlink" title="167、HTTP协议中，header信息里面，怎么控制页面失效时间（last-modified,cache-control,Expires分别代表什么）"></a>167、HTTP协议中，header信息里面，怎么控制页面失效时间（last-modified,cache-control,Expires分别代表什么）</h2><table>
<thead>
<tr>
<th>Last-Modified</th>
<th>文 档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档 才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</th>
</tr>
</thead>
<tbody><tr>
<td>Expires</td>
<td>应该在什么时候认为文档已经过期，从而不再缓存它？</td>
</tr>
</tbody></table>
<h2 id="168、HTTP协议目前常用的有哪几个？KEEPALIVE从哪个版本开始出现的？"><a href="#168、HTTP协议目前常用的有哪几个？KEEPALIVE从哪个版本开始出现的？" class="headerlink" title="168、HTTP协议目前常用的有哪几个？KEEPALIVE从哪个版本开始出现的？"></a>168、HTTP协议目前常用的有哪几个？KEEPALIVE从哪个版本开始出现的？</h2><p>http1.0</p>
<p>http1.1 keeplive</p>
<h2 id="169、业界常用的优化WEB页面加载速度的方法（可以分别从页面元素展现，请求连接，css-js-服务器等方面介绍）"><a href="#169、业界常用的优化WEB页面加载速度的方法（可以分别从页面元素展现，请求连接，css-js-服务器等方面介绍）" class="headerlink" title="169、业界常用的优化WEB页面加载速度的方法（可以分别从页面元素展现，请求连接，css,js,服务器等方面介绍）"></a>169、业界常用的优化WEB页面加载速度的方法（可以分别从页面元素展现，请求连接，css,js,服务器等方面介绍）</h2><h2 id="170、列举常用的web页面开发，调试以及优化工具"><a href="#170、列举常用的web页面开发，调试以及优化工具" class="headerlink" title="170、列举常用的web页面开发，调试以及优化工具"></a>170、列举常用的web页面开发，调试以及优化工具</h2><p>sublime vscode webstorm hbuilder dw</p>
<p>httpwatch=&gt;ie</p>
<p>ff:firebug</p>
<p>chrome:</p>
<h2 id="171、解释什么是sql注入，xss漏洞"><a href="#171、解释什么是sql注入，xss漏洞" class="headerlink" title="171、解释什么是sql注入，xss漏洞"></a>171、解释什么是sql注入，xss漏洞</h2><h2 id="172、如何判断一个js变量是数组类型"><a href="#172、如何判断一个js变量是数组类型" class="headerlink" title="172、如何判断一个js变量是数组类型"></a>172、如何判断一个js变量是数组类型</h2><p>ES5:Array.isArray()</p>
<p>[] instanceof Array</p>
<p>Object.prototype.toString.call([]);//“[object Array]”</p>
<h2 id="173、请列举js数组类型中的常用方法"><a href="#173、请列举js数组类型中的常用方法" class="headerlink" title="173、请列举js数组类型中的常用方法"></a>173、请列举js数组类型中的常用方法</h2><table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_concat_array.asp">concat()</a></td>
<td>连接两个或更多的数组，并返回结果。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_join.asp">join()</a></td>
<td>把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_pop.asp">pop()</a></td>
<td>删除并返回数组的最后一个元素</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_push.asp">push()</a></td>
<td>向数组的末尾添加一个或更多元素，并返回新的长度。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_reverse.asp">reverse()</a></td>
<td>颠倒数组中元素的顺序。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_shift.asp">shift()</a></td>
<td>删除并返回数组的第一个元素</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_slice_array.asp">slice()</a></td>
<td>从某个已有的数组返回选定的元素</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_sort.asp">sort()</a></td>
<td>对数组的元素进行排序</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_splice.asp">splice()</a></td>
<td>删除元素，并向数组添加新元素。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_tosource_array.asp">toSource()</a></td>
<td>返回该对象的源代码。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_toString_array.asp">toString()</a></td>
<td>把数组转换为字符串，并返回结果。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_toLocaleString_array.asp">toLocaleString()</a></td>
<td>把数组转换为本地数组，并返回结果。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_unshift.asp">unshift()</a></td>
<td>向数组的开头添加一个或更多元素，并返回新的长度。</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/jsref/jsref_valueof_array.asp">valueOf()</a></td>
<td>返回数组对象的原始值</td>
</tr>
</tbody></table>
<h2 id="174、FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素"><a href="#174、FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素" class="headerlink" title="174、FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素"></a>174、FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素</h2><h2 id="175、列举常用的js框架以及分别适用的领域"><a href="#175、列举常用的js框架以及分别适用的领域" class="headerlink" title="175、列举常用的js框架以及分别适用的领域"></a>175、列举常用的js框架以及分别适用的领域</h2><p>jquery：简化了js的一些操作，并且提供了一些非常好用的API</p>
<p>jquery ui、jquery-easyui：在jqeury的基础上提供了一些常用的组件 日期，下拉框，表格这些组件</p>
<p>require.js、sea.js（阿里的玉帛）+》模块化开发使用的</p>
<p>zepto：精简版的jquery，常用于手机web前端开发 提供了一些手机页面实用功能,touch</p>
<p>ext.js：跟jquery差不多，但是不开源，也没有jquery轻量</p>
<p>angular、knockoutjs、avalon(去哪儿前端总监)：MV*框架，适合用于单页应用开发(SPA)</p>
<h2 id="176、js中如何实现一个map"><a href="#176、js中如何实现一个map" class="headerlink" title="176、js中如何实现一个map"></a>176、js中如何实现一个map</h2><p>数组的map方法：</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>map()</strong> 方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><em>array</em><code>.map(</code><em>callback</em><code>[,</code> <em>thisArg</em><code>])</code></p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><code>**callback**</code></p>
<p>原数组中的元素经过该方法后返回一个新的元素。</p>
<p><code>**currentValue**</code></p>
<p><code>callback</code> 的第一个参数，数组中当前被传递的元素。</p>
<p><code>**index**</code></p>
<p><code>callback</code> 的第二个参数，数组中当前被传递的元素的索引。</p>
<p><code>**array**</code></p>
<p><code>callback</code> 的第三个参数，调用 <code>map</code> 方法的数组。</p>
<p><code>**thisArg**</code></p>
<p>执行 <code>callback</code> 函数时 <code>this</code> 指向的对象。</p>
<p>实现：</p>
<p>Array.prototype.map2=function(<em>callback</em>){<br>   for (var i = 0; i &lt; this.length; i++) {<br>     this[i]=<em>callback</em>(this[i]);<br>   }<br> };</p>
<h2 id="177、js可否实现面向对象编程，如果可以如何实现js对象的继承"><a href="#177、js可否实现面向对象编程，如果可以如何实现js对象的继承" class="headerlink" title="177、js可否实现面向对象编程，如果可以如何实现js对象的继承"></a>177、js可否实现面向对象编程，如果可以如何实现js对象的继承</h2><p>创建对象的几种方式</p>
<p>实现继承的几种方式</p>
<p><strong>原型链</strong></p>
<h2 id="178、约瑟夫环—已知n个人（以编号1，2，3…分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列-张曼莉3-。"><a href="#178、约瑟夫环—已知n个人（以编号1，2，3…分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列-张曼莉3-。" class="headerlink" title="178、约瑟夫环—已知n个人（以编号1，2，3…分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列[张曼莉3] 。"></a>178、约瑟夫环—已知n个人（以编号1，2，3…分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列[<a href="#_msocom_3">张曼莉3]</a> 。</h2><h2 id="179、有1到10w这个10w个数，去除2个并打乱次序，如何找出那两个数？"><a href="#179、有1到10w这个10w个数，去除2个并打乱次序，如何找出那两个数？" class="headerlink" title="179、有1到10w这个10w个数，去除2个并打乱次序，如何找出那两个数？"></a>179、有1到10w这个10w个数，去除2个并打乱次序，如何找出那两个数？</h2><h2 id="180、如何获取对象a拥有的所有属性（可枚举的、不可枚举的，不包括继承来的属性）"><a href="#180、如何获取对象a拥有的所有属性（可枚举的、不可枚举的，不包括继承来的属性）" class="headerlink" title="180、如何获取对象a拥有的所有属性（可枚举的、不可枚举的，不包括继承来的属性）"></a>180、如何获取对象a拥有的所有属性（可枚举的、不可枚举的，不包括继承来的属性）</h2><p>Object.keys——IE9+</p>
<p>或者使用<strong>for…in</strong>并过滤出继承的属性</p>
<p>for(o in obj){</p>
<p> if(obj.hasOwnproperty(o)){</p>
<p>  //把o这个属性放入到一个数组中</p>
<p>}</p>
<p>}</p>
<h2 id="181、有下面这样一段HTML结构，使用css实现这样的效果："><a href="#181、有下面这样一段HTML结构，使用css实现这样的效果：" class="headerlink" title="181、有下面这样一段HTML结构，使用css实现这样的效果："></a>181、有下面这样一段HTML结构，使用css实现这样的效果：</h2><p>左边容器无论宽度如何变动，右边容器都能自适应填满父容器剩余的宽度。</p>
<div class=”warp”>


<div class=”left”></div>

<div class=”right”></div>

</div>

<h2 id="182、下面这段代码想要循环昝输出结果01234，请问输出结果是否正确，如果不正确，请说明为什么，并修改循环内的代码使其输出正确结果"><a href="#182、下面这段代码想要循环昝输出结果01234，请问输出结果是否正确，如果不正确，请说明为什么，并修改循环内的代码使其输出正确结果" class="headerlink" title="182、下面这段代码想要循环昝输出结果01234，请问输出结果是否正确，如果不正确，请说明为什么，并修改循环内的代码使其输出正确结果"></a>182、下面这段代码想要循环昝输出结果01234，请问输出结果是否正确，如果不正确，请说明为什么，并修改循环内的代码使其输出正确结果</h2><p>for(var i=0;i&lt;5;++i){</p>
<p>  setTimeout(function(){</p>
<p>​      console.log(i+’’);</p>
<p>​    },100*i);</p>
<p>}</p>
<h2 id="183、解释下这个css选择器什么发生什么？"><a href="#183、解释下这个css选择器什么发生什么？" class="headerlink" title="183、解释下这个css选择器什么发生什么？"></a>183、解释下这个css选择器什么发生什么？</h2><p>[role=nav]&gt;ul a:not([href^-mailto]){}</p>
<h2 id="184、JavaScript以下哪条语句会产生运行错误"><a href="#184、JavaScript以下哪条语句会产生运行错误" class="headerlink" title="184、JavaScript以下哪条语句会产生运行错误"></a>184、JavaScript以下哪条语句会产生运行错误</h2><p>A. var obj = ();   B. var obj = [];   C. var obj = {};   D. var obj = //;</p>
<p>答案：AD</p>
<h2 id="185、以下哪些是javascript的全局函数：（ABCDE）"><a href="#185、以下哪些是javascript的全局函数：（ABCDE）" class="headerlink" title="185、以下哪些是javascript的全局函数：（ABCDE）"></a>185、以下哪些是javascript的全局函数：（ABCDE）</h2><p>A. escape  函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。ECMAScript v3 反对使用该方法，应用使用 decodeURI() 和 decodeURIComponent() 替代它。</p>
<p>B. parseFloat  parseFloat() 函数可解析一个字符串，并返回一个浮点数。</p>
<p>该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。</p>
<p>C. eval  函数可计算某个字符串，并执行其中的的 JavaScript 代码。</p>
<p>D. setTimeout</p>
<p>E. alert</p>
<h2 id="186、关于IE的window对象表述正确的有：（CD）"><a href="#186、关于IE的window对象表述正确的有：（CD）" class="headerlink" title="186、关于IE的window对象表述正确的有：（CD）"></a>186、关于IE的window对象表述正确的有：（CD）</h2><p>A. window.opener属性本身就是指向window对象</p>
<p>window.opener返回打开当前窗口的那个窗口的引用.</p>
<p>如果当前窗口是由另一个窗口打开的, <strong>window.opener</strong>保留了那个窗口的引用. 如果当前窗口不是由其他窗口打开的, 则该属性返回 null.</p>
<p>B. window.reload()方法可以用来刷新当前页面 //正确答案：应该是location.reload或者window.location.reload</p>
<p>C. window.location=”a.html”和window.location.href=”a.html”的作用都是把当前页面替换成a.html页面</p>
<p>D. 定义了全局变量g；可以用window.g的方式来存取该变量</p>
<h2 id="187、描述错误的是-D"><a href="#187、描述错误的是-D" class="headerlink" title="187、描述错误的是 D"></a>187、描述错误的是 D</h2><p>A：Http状态码302表示暂时性转移 对 </p>
<p>B:domContentLoaded事件早于onload事件 //正确</p>
<p>当 onload 事件触发时，页面上所有的DOM，样式表，脚本，图片，flash都已经加载完成了。</p>
<p>当 DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash。</p>
<p>C: IE678不支持事件捕获 </p>
<p>D:localStorage 存储的数据在电脑重启后丢失   //错误，因为没有时间限制</p>
<p>try…catch 语句。(在 IE5+、Mozilla 1.0、和 Netscape 6 中可用) </p>
<h2 id="188、关于link和-import的区别正确的是-A"><a href="#188、关于link和-import的区别正确的是-A" class="headerlink" title="188、关于link和@import的区别正确的是 A"></a>188、关于link和@import的区别正确的是 A</h2><p>A: link属于XHTML标签，而@import是CSS提供的；</p>
<p>B：页面被加载时，link会同时被加载，而后者引用的CSS会等到页面被加载完再加载</p>
<p>C：import只在IE5以上才能识别 而link是XHTML标签，无兼容问题</p>
<p>D: link方式的样式的权重高于@import的权重</p>
<h2 id="189、下面正确的是-A"><a href="#189、下面正确的是-A" class="headerlink" title="189、下面正确的是 A"></a>189、下面正确的是 A</h2><p>A: 跨域问题能通过JsonP方案解决 </p>
<p>B：不同子域名间仅能通过修改window.name解决跨域  //还可以通过script标签src jsonp</p>
<p>C：只有在IE中可通过iframe嵌套跨域 //任何浏览器都可以使用iframe</p>
<p>D：MediaQuery属性是进行视频格式检测的属性是做响应式的</p>
<h2 id="188、错误的是：AC"><a href="#188、错误的是：AC" class="headerlink" title="188、错误的是：AC"></a>188、错误的是：AC</h2><p>A: Ajax本质是XMLHttpRequest      //异步请求json和xml数据</p>
<p>B: 块元素实际占用的宽度与它的width、border、padding属性有关，与background无关</p>
<p>C: position属性absolute、fixed、—relative—会使文档脱标</p>
<p>D: float属性left也会使div脱标</p>
<h2 id="189、不用任何插件，如何实现一个tab栏切换？"><a href="#189、不用任何插件，如何实现一个tab栏切换？" class="headerlink" title="189、不用任何插件，如何实现一个tab栏切换？"></a>189、不用任何插件，如何实现一个tab栏切换？</h2><p>通过改变不同层的css设置层的显示和隐藏</p>
<h2 id="190、基本数据类型的专业术语以及单词拼写"><a href="#190、基本数据类型的专业术语以及单词拼写" class="headerlink" title="190、基本数据类型的专业术语以及单词拼写"></a>190、基本数据类型的专业术语以及单词拼写</h2><h2 id="191、变量的命名规范以及命名推荐"><a href="#191、变量的命名规范以及命名推荐" class="headerlink" title="191、变量的命名规范以及命名推荐"></a>191、变量的命名规范以及命名推荐</h2><h2 id="192、三种弹窗的单词以及三种弹窗的功能"><a href="#192、三种弹窗的单词以及三种弹窗的功能" class="headerlink" title="192、三种弹窗的单词以及三种弹窗的功能"></a>192、三种弹窗的单词以及三种弹窗的功能</h2><p>alert</p>
<p>confirm</p>
<p>prompt</p>
<h2 id="193、console-log-8-1-输出值是多少？"><a href="#193、console-log-8-1-输出值是多少？" class="headerlink" title="193、console.log( 8 | 1 ); 输出值是多少？"></a>193、console.log( 8 | 1 ); 输出值是多少？</h2><p>答案：9</p>
<h2 id="194、只允许使用-和-Math-，求一个函数-y-f-x-a-b-当x-gt-100-时返回-a-的值，否则返回-b-的值，不能使用-if-else-等条件语句，也不能使用-数组。"><a href="#194、只允许使用-和-Math-，求一个函数-y-f-x-a-b-当x-gt-100-时返回-a-的值，否则返回-b-的值，不能使用-if-else-等条件语句，也不能使用-数组。" class="headerlink" title="194、只允许使用 + - * / 和 Math.* ，求一个函数 y = f(x, a, b);当x &gt; 100 时返回 a 的值，否则返回 b 的值，不能使用 if else 等条件语句，也不能使用|,?:,数组。"></a>194、只允许使用 + - * / 和 Math.* ，求一个函数 y = f(x, a, b);当x &gt; 100 时返回 a 的值，否则返回 b 的值，不能使用 if else 等条件语句，也不能使用|,?:,数组。</h2><p>答案：</p>
<p>function f(x, a, b) {</p>
<p>  var temp = Math.ceil(Math.min(Math.max(x - 100, 0), 1));</p>
<p>  return a * temp + b * (1 - temp);</p>
<p>}</p>
<p>console.log(f(-10, 1, 2));</p>
<h2 id="195、JavaScript-alert-0-4-0-2-结果是多少？和你预期的一样吗？如果不一样该如何处理？"><a href="#195、JavaScript-alert-0-4-0-2-结果是多少？和你预期的一样吗？如果不一样该如何处理？" class="headerlink" title="195、JavaScript alert(0.4*0.2);结果是多少？和你预期的一样吗？如果不一样该如何处理？"></a>195、JavaScript alert(0.4*0.2);结果是多少？和你预期的一样吗？如果不一样该如何处理？</h2><p>  有误差，应该比准确结果偏大。 一般我会将小数变为整数来处理。当前之前遇到这个问题时也上网查询发现有人用try catch return写了一个函数，</p>
<p>  当然原理也是一致先转为整数再计算。看起来挺麻烦的，我没用过。</p>
<h2 id="196、一个div，有几种方式得到这个div的jQuery对象？想直接获取这个div的dom对象，如何获取？dom对象如何转化为jQuery对象？"><a href="#196、一个div，有几种方式得到这个div的jQuery对象？想直接获取这个div的dom对象，如何获取？dom对象如何转化为jQuery对象？" class="headerlink" title="196、一个div，有几种方式得到这个div的jQuery对象？想直接获取这个div的dom对象，如何获取？dom对象如何转化为jQuery对象？"></a>196、一个div，有几种方式得到这个div的jQuery对象？<div class='aabbcc' id='nodesView'></div>想直接获取这个div的dom对象，如何获取？dom对象如何转化为jQuery对象？</h2><p>var domView=document.getElementById(“nodesView”)</p>
<p>document.getElementsByClassName(“aabbcc”);</p>
<p>document.querySelector(“.aabbcc#nodesView”);</p>
<p>转换为jquery对象：$( domView)</p>
<h2 id="197、主流浏览器内核"><a href="#197、主流浏览器内核" class="headerlink" title="197、主流浏览器内核"></a>197、主流浏览器内核</h2><p>IE trident 火狐gecko 谷歌苹果webkit </p>
<p>Opera：Presto</p>
<h2 id="198、如何显示-隐藏一个dom元素？请用原生的JavaScript方法实现"><a href="#198、如何显示-隐藏一个dom元素？请用原生的JavaScript方法实现" class="headerlink" title="198、如何显示/隐藏一个dom元素？请用原生的JavaScript方法实现"></a>198、如何显示/隐藏一个dom元素？请用原生的JavaScript方法实现</h2><p>dom.style.display=”none”;</p>
<p>dom.style.display=””;</p>
<h2 id="199、JavaScript有哪几种数据类型"><a href="#199、JavaScript有哪几种数据类型" class="headerlink" title="199、JavaScript有哪几种数据类型"></a>199、JavaScript有哪几种数据类型</h2><p>​      Number String Boolean Null Undefined Object</p>
<h2 id="200、jQuery框架中-ajax-的常用参数有哪些？"><a href="#200、jQuery框架中-ajax-的常用参数有哪些？" class="headerlink" title="200、jQuery框架中$.ajax()的常用参数有哪些？"></a>200、jQuery框架中$.ajax()的常用参数有哪些？</h2><p><strong>type</strong></p>
<p>类型：String</p>
<p>默认值: “GET”)。请求方式 (“POST” 或 “GET”)， 默认为 “GET”。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。</p>
<p><strong>url</strong></p>
<p>类型：String</p>
<p>默认值: 当前页地址。发送请求的地址。</p>
<p><strong>success</strong></p>
<p>类型：Function</p>
<p>请求成功后的回调函数。</p>
<p>参数：由服务器返回，并根据 dataType 参数进行处理后的数据；描述状态的字符串。</p>
<p>这是一个 Ajax 事件。</p>
<p><strong>options</strong></p>
<p>类型：Object</p>
<p>可选。AJAX 请求设置。所有选项都是可选的。</p>
<p><strong>async</strong></p>
<p>类型：Boolean</p>
<p>默认值: true。默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。</p>
<p>注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。</p>
<p><strong>beforeSend(XHR)</strong></p>
<p>类型：Function</p>
<p>发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。</p>
<p>XMLHttpRequest 对象是唯一的参数。</p>
<p>这是一个 Ajax 事件。如果返回 false 可以取消本次 ajax 请求。</p>
<p><strong>cache</strong></p>
<p>类型：Boolean</p>
<p>默认值: true，dataType 为 script 和 jsonp 时默认为 false。设置为 false 将不缓存此页面。</p>
<p>jQuery 1.2 新功能。</p>
<p><strong>contentType</strong></p>
<p>类型：String</p>
<p>默认值: “application/x-www-form-urlencoded”。发送信息至服务器时内容编码类型。</p>
<p>默认值适合大多数情况。如果你明确地传递了一个 content-type 给 $.ajax() 那么它必定会发送给服务器（即使没有数据要发送）。</p>
<p><strong>data</strong></p>
<p>类型：String</p>
<p>发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:[“bar1”, “bar2”]} 转换为 ‘&amp;foo=bar1&amp;foo=bar2’。</p>
<p><strong>dataFilter</strong></p>
<p>类型：Function</p>
<p>给 Ajax 返回的原始数据的进行预处理的函数。提供 data 和 type 两个参数：data 是 Ajax 返回的原始数据，type 是调用 jQuery.ajax 时提供的 dataType 参数。函数返回的值将由 jQuery 进一步处理。</p>
<p><strong>dataType</strong></p>
<p>类型：String</p>
<p>预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，比如 XML MIME 类型就被识别为 XML。在 1.4 中，JSON 就会生成一个 JavaScript 对象，而 script 则会执行这个脚本。随后服务器端返回的数据会根据这个值解析后，传递给回调函数。可用值:</p>
<p>·    “xml”: 返回 XML 文档，可用 jQuery 处理。</p>
<p>·    “html”: 返回纯文本 HTML 信息；包含的 script 标签会在插入 dom 时执行。</p>
<p>·    “script”: 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 “cache” 参数。注意：在远程请求时(不在同一个域下)，所有 POST 请求都将转为 GET 请求。（因为将使用 DOM 的 script标签来加载）</p>
<p>·    “json”: 返回 JSON 数据 。</p>
<p>·    “jsonp”: JSONP 格式。使用 JSONP 形式调用函数时，如 “myurl?callback=?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。</p>
<p>·    “text”: 返回纯文本字符串</p>
<p><strong>error</strong></p>
<p>类型：Function</p>
<p>默认值: 自动判断 (xml 或 html)。请求失败时调用此函数。</p>
<p>有以下三个参数：XMLHttpRequest 对象、错误信息、（可选）捕获的异常对象。</p>
<p>如果发生了错误，错误信息（第二个参数）除了得到 null 之外，还可能是 “timeout”, “error”, “notmodified” 和 “parsererror”。</p>
<p>这是一个 Ajax 事件。</p>
<h4 id="写一个post请求并带有发送数据和返回数据的样例"><a href="#写一个post请求并带有发送数据和返回数据的样例" class="headerlink" title="写一个post请求并带有发送数据和返回数据的样例"></a>写一个post请求并带有发送数据和返回数据的样例</h4><p><em>$</em>.ajax({<br>   url:”1.html”,<br>   data:{name:”张三”,age:18},//post数据<br>   dataType:”json”,<br>   type:”POST”,<br>   success:function(<em>data</em>){<br>     //data：返回的数据<br>   },<br>   error:function(){<br>     //异常处理<br>   }<br> });</p>
<h2 id="201、JavaScript数组元素添加、删除、排序等方法有哪些？"><a href="#201、JavaScript数组元素添加、删除、排序等方法有哪些？" class="headerlink" title="201、JavaScript数组元素添加、删除、排序等方法有哪些？"></a>201、JavaScript数组元素添加、删除、排序等方法有哪些？</h2><p>Array.concat( ) 连接数组 </p>
<p>Array.join( ) 将数组元素连接起来以构建一个字符串 </p>
<p>Array.length 数组的大小</p>
<p>Array.pop( ) 删除并返回数组的最后一个元素</p>
<p>Array.push( ) 给数组添加元素 </p>
<p>Array.reverse( ) 颠倒数组中元素的顺序 </p>
<p>Array.shift( ) 将元素移出数组 </p>
<p>Array.slice( ) 返回数组的一部分 </p>
<p>Array.sort( ) 对数组元素进行排序 </p>
<p>Array.splice( ) 插入、删除或替换数组的元素 </p>
<p>Array.toLocaleString( ) 把数组转换成局部字符串 </p>
<p>Array.toString( ) 将数组转换成一个字符串 </p>
<p>Array.unshift( ) 在数组头部插入一个元素</p>
<h2 id="202、如何添加html元素的事件，有几种方法？请列举"><a href="#202、如何添加html元素的事件，有几种方法？请列举" class="headerlink" title="202、如何添加html元素的事件，有几种方法？请列举"></a>202、如何添加html元素的事件，有几种方法？请列举</h2><p>a、直接在标签里添加：<div onclick="alert(你好)">这是一个层</div></p>
<p>b、在元素上通过js添加:</p>
<p>c、使用事件注册函数添加</p>
<h2 id="203、JavaScript的循环语句有哪些？"><a href="#203、JavaScript的循环语句有哪些？" class="headerlink" title="203、JavaScript的循环语句有哪些？"></a>203、JavaScript的循环语句有哪些？</h2><p>while for do while for…in</p>
<h2 id="204、作用域-编译期执行期以及全局局部作用域问题"><a href="#204、作用域-编译期执行期以及全局局部作用域问题" class="headerlink" title="204、作用域-编译期执行期以及全局局部作用域问题"></a>204、作用域-编译期执行期以及全局局部作用域问题</h2><p>理解js执行主要的两个阶段：预解析和执行期</p>
<h2 id="205、闭包：下面这个ul，如何点击每一列的时候alert其index？"><a href="#205、闭包：下面这个ul，如何点击每一列的时候alert其index？" class="headerlink" title="205、闭包：下面这个ul，如何点击每一列的时候alert其index？"></a>205、闭包：下面这个ul，如何点击每一列的时候alert其index？</h2><ul id="test">


<li>这是第一条</li>

<li>这是第二条</li>

<li>这是第三条</li>

</ul>

<p>//非闭包实现</p>
<p>var <em>lis</em>=document.querySelectorAll(‘li’);<br> document.querySelector(‘#test’).onclick=function(<em>e</em>){<br>   for (var i = 0; i &lt; <em>lis</em>.length; i++) {<br>     var li = <em>lis</em>[i];<br>     if(li==<em>e</em>.target){<br>       alert(i);<br>     }<br>   }<br> };</p>
<p>//闭包实现</p>
<p>var <em>lis</em>=document.querySelectorAll(‘li’);<br> for (var <em>i</em> = 0; <em>i</em> &lt; <em>lis</em>.length; <em>i</em>++) {<br>   var <em>li</em> = <em>lis</em>[<em>i</em>];<br>   <em>li</em>.onclick=(function(<em>index</em>){<br>     return function(<em>e</em>){<br>       alert(<em>index</em>);<br>     };<br>   })(<em>i</em>);<br> }</p>
<h2 id="206、列出3条以上ff和IE的脚本兼容问题"><a href="#206、列出3条以上ff和IE的脚本兼容问题" class="headerlink" title="206、列出3条以上ff和IE的脚本兼容问题"></a>206、列出3条以上ff和IE的脚本兼容问题</h2><p>1、在IE下可通过document.frames[“id”];得到该IFRAME对象，</p>
<p>而在火狐下则是通过document.getElementById(“content_panel_if”).contentWindow;</p>
<p>2、IE的写法： _tbody=_table.childNodes[0]</p>
<p>在FF中，firefox会在子节点中包含空白则第一个子节点为空白””， 而ie不会返回空白</p>
<p>可以通过if(“” != node.nodeName)过滤掉空白子对象</p>
<p>3、模拟点击事件</p>
<p>if(document.all){ //ie下</p>
<p>  document.getElementById(“a3”).click();</p>
<p>}</p>
<p>else{ //非IE</p>
<p>  var evt = document.createEvent(“MouseEvents”);</p>
<p>  evt.initEvent(“click”, true, true);</p>
<p>  document.getElementById(“a3”).dispatchEvent(evt);</p>
<p>}</p>
<p>4、事件注册</p>
<p>if (isIE){window.attachEvent(“onload”, init);}else{window.addEventListener(“load”, init, false);}</p>
<h2 id="207、列举可以哪些方面对前端开发进行优化"><a href="#207、列举可以哪些方面对前端开发进行优化" class="headerlink" title="207、列举可以哪些方面对前端开发进行优化"></a>207、列举可以哪些方面对前端开发进行优化</h2><p>代码压缩、合并减少http请求，图片制作精灵图、代码优化</p>
<h2 id="208、至少列出一种JavaScript继承的实现方式"><a href="#208、至少列出一种JavaScript继承的实现方式" class="headerlink" title="208、至少列出一种JavaScript继承的实现方式"></a>208、至少列出一种JavaScript继承的实现方式</h2><h2 id="209、如现在有一个效果，有显示用户头像、用户昵称、用户其他信息；当用户鼠标移到头像上时，会弹出用户的所有信息；如果是你，你会如何实现这个功能，请用代码实现？"><a href="#209、如现在有一个效果，有显示用户头像、用户昵称、用户其他信息；当用户鼠标移到头像上时，会弹出用户的所有信息；如果是你，你会如何实现这个功能，请用代码实现？" class="headerlink" title="209、如现在有一个效果，有显示用户头像、用户昵称、用户其他信息；当用户鼠标移到头像上时，会弹出用户的所有信息；如果是你，你会如何实现这个功能，请用代码实现？"></a>209、如现在有一个效果，有显示用户头像、用户昵称、用户其他信息；当用户鼠标移到头像上时，会弹出用户的所有信息；如果是你，你会如何实现这个功能，请用代码实现？</h2><p>//答案见：J:\代码,PPT,笔记,电子书\面试题\面试题02.html</p>
<h2 id="210、call与apply有什么作用？又有什么什么区别？用callee属性实现函数递归？"><a href="#210、call与apply有什么作用？又有什么什么区别？用callee属性实现函数递归？" class="headerlink" title="210、call与apply有什么作用？又有什么什么区别？用callee属性实现函数递归？"></a>210、call与apply有什么作用？又有什么什么区别？用callee属性实现函数递归？</h2><p>apply的参数是数组,call的参数是单个的值，除此之外，两者没有差别，重点理解this的改变，callee已经不推荐使用</p>
<h2 id="211、用正则表达式，写出由字母开头，其余由数字、字母、下划线组成的6-30的字符串？"><a href="#211、用正则表达式，写出由字母开头，其余由数字、字母、下划线组成的6-30的字符串？" class="headerlink" title="211、用正则表达式，写出由字母开头，其余由数字、字母、下划线组成的6~30的字符串？"></a>211、用正则表达式，写出由字母开头，其余由数字、字母、下划线组成的6~30的字符串？</h2><p>var reg=/^[a-ZA-Z][\da-zA-Z_]{5,29}/;</p>
<h2 id="212、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个-（10分）"><a href="#212、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个-（10分）" class="headerlink" title="212、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个 （10分）"></a>212、列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个 （10分）</h2><p>对象：window document location screen history navigator</p>
<p>方法：alert() confirm() prompt() open() close() setInterval() setTimeout() clearInterval() clearTimeout() </p>
<p>(详细参见：J:\代码,PPT,笔记,电子书\面试题\window对象方法.png)</p>
<h2 id="213、Javascript中callee和caller的作用？"><a href="#213、Javascript中callee和caller的作用？" class="headerlink" title="213、Javascript中callee和caller的作用？"></a>213、Javascript中callee和caller的作用？</h2><p>caller是返回一个对函数的引用，该函数调用了当前函数；</p>
<p>用法：fn.caller</p>
<p>callee是返回正在被执行的function函数，也就是所指定的function对象的正文。</p>
<p>用法：arguments.callee</p>
<h2 id="214、对于apply和call两者在作用上是相同的，即是调用一个对象的一个方法，以另一个对象替换当前对象。将一个函数的对象上下文从初始的上下文改变为由-thisObj-指定的新对象。"><a href="#214、对于apply和call两者在作用上是相同的，即是调用一个对象的一个方法，以另一个对象替换当前对象。将一个函数的对象上下文从初始的上下文改变为由-thisObj-指定的新对象。" class="headerlink" title="214、对于apply和call两者在作用上是相同的，即是调用一个对象的一个方法，以另一个对象替换当前对象。将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。"></a>214、对于apply和call两者在作用上是相同的，即是调用一个对象的一个方法，以另一个对象替换当前对象。将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。</h2><p>但两者在参数上有区别的。对于第一个参数意义都一样，但对第二个参数：?apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。?如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3]) 。</p>
<h2 id="215、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？"><a href="#215、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？" class="headerlink" title="215、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？"></a>215、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？</h2><p>伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。</p>
<p>可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。</p>
<h2 id="216、写一个函数可以计算-sum-5-0-5-输出0-sum-1-2-3-4-输出10"><a href="#216、写一个函数可以计算-sum-5-0-5-输出0-sum-1-2-3-4-输出10" class="headerlink" title="216、写一个函数可以计算 sum(5,0,-5);输出0; sum(1,2,3,4);输出10;"></a>216、写一个函数可以计算 sum(5,0,-5);输出0; sum(1,2,3,4);输出10;</h2><p>function calc(){<br>   var result=0;<br>   for (var i = 0; i &lt; arguments.length; i++) {<br>     var obj = arguments[i];<br>     result+=obj;<br>   }<br>   return result;<br> }<br> alert(calc(1,2,3,4));</p>
<p>Js基本功</p>
<h2 id="217、事件代理怎么实现？"><a href="#217、事件代理怎么实现？" class="headerlink" title="217、事件代理怎么实现？"></a>217、事件代理怎么实现？</h2><p>在元素的父节点注册事件，通过事件冒泡，在父节点捕获事件</p>
<h2 id="218、《正则》写出正确的正则表达式匹配固话号，区号3-4位，第一位为0，中横线，7-8位数字，中横线，3-4位分机号格式的固话号"><a href="#218、《正则》写出正确的正则表达式匹配固话号，区号3-4位，第一位为0，中横线，7-8位数字，中横线，3-4位分机号格式的固话号" class="headerlink" title="218、《正则》写出正确的正则表达式匹配固话号，区号3-4位，第一位为0，中横线，7-8位数字，中横线，3-4位分机号格式的固话号"></a>218、《正则》写出正确的正则表达式匹配固话号，区号3-4位，第一位为0，中横线，7-8位数字，中横线，3-4位分机号格式的固话号</h2><p>常用正则表达式语法要熟悉</p>
<p>/0[0-9]{2,3}-\d{7,8}/</p>
<h2 id="219、《算法》-一下A-B可任选一题作答，两题全答加分"><a href="#219、《算法》-一下A-B可任选一题作答，两题全答加分" class="headerlink" title="219、《算法》 一下A,B可任选一题作答，两题全答加分"></a>219、《算法》 一下A,B可任选一题作答，两题全答加分</h2><p>A:农场买了一只羊，第一年是小羊，第二年底生一只，第三年不生，第四年底再生一只，第五年死掉。</p>
<h3 id="B-写出代码对下列数组去重并从大到小排列-5-2-3-6-8-6-5-4-7-1-9"><a href="#B-写出代码对下列数组去重并从大到小排列-5-2-3-6-8-6-5-4-7-1-9" class="headerlink" title="B:写出代码对下列数组去重并从大到小排列{5,2,3,6,8,6,5,4,7,1,9}"></a>B:写出代码对下列数组去重并从大到小排列{5,2,3,6,8,6,5,4,7,1,9}</h3><p>先去重再排序</p>
<p>去重方法参考：J:\代码,PPT,笔记,电子书\面试题</p>
<h2 id="220、请写出一张图片的HTML代码，已知道图片地址为“images-abc-jpg”-宽100px，高50px"><a href="#220、请写出一张图片的HTML代码，已知道图片地址为“images-abc-jpg”-宽100px，高50px" class="headerlink" title="220、请写出一张图片的HTML代码，已知道图片地址为“images/abc.jpg”,宽100px，高50px"></a>220、请写出一张图片的HTML代码，已知道图片地址为“images/abc.jpg”,宽100px，高50px</h2><h2 id="221、请写一个正则表达式：要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成"><a href="#221、请写一个正则表达式：要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成" class="headerlink" title="221、请写一个正则表达式：要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成"></a>221、请写一个正则表达式：要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成</h2><p>^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z])[a-zA-Z\d]{6,20}$</p>
<h2 id="222、统计1到400亿之间的自然数中含有多少个1？比如1-21中，有1、10、11、12、13、14、15、16、17、18、19、20、21这么多自然数有13个1"><a href="#222、统计1到400亿之间的自然数中含有多少个1？比如1-21中，有1、10、11、12、13、14、15、16、17、18、19、20、21这么多自然数有13个1" class="headerlink" title="222、统计1到400亿之间的自然数中含有多少个1？比如1-21中，有1、10、11、12、13、14、15、16、17、18、19、20、21这么多自然数有13个1"></a>222、统计1到400亿之间的自然数中含有多少个1？比如1-21中，有1、10、11、12、13、14、15、16、17、18、19、20、21这么多自然数有13个1</h2><p>答案参考：J:\代码,PPT,笔记,电子书\面试题\面试题_222.html</p>
<h2 id="223、删除与某个字符相邻且相同的字符，比如fdaffdaaklfjklja字符串处理之后成为“fdafdaklfjklja”"><a href="#223、删除与某个字符相邻且相同的字符，比如fdaffdaaklfjklja字符串处理之后成为“fdafdaklfjklja”" class="headerlink" title="223、删除与某个字符相邻且相同的字符，比如fdaffdaaklfjklja字符串处理之后成为“fdafdaklfjklja”"></a>223、删除与某个字符相邻且相同的字符，比如fdaffdaaklfjklja字符串处理之后成为“fdafdaklfjklja”</h2><p>答案参考：J:\代码,PPT,笔记,电子书\面试题\面试题_223.html</p>
<h2 id="224、请写出三种以上的Firefox有但InternetExplorer没有的属性和函数"><a href="#224、请写出三种以上的Firefox有但InternetExplorer没有的属性和函数" class="headerlink" title="224、请写出三种以上的Firefox有但InternetExplorer没有的属性和函数"></a>224、请写出三种以上的Firefox有但InternetExplorer没有的属性和函数</h2><p>1、在IE下可通过document.frames[“id”];得到该IFRAME对象，</p>
<p>而在火狐下则是通过document.getElementById(“content_panel_if”).contentWindow;</p>
<p>2、IE的写法： _tbody=_table.childNodes[0]</p>
<p>在FF中，firefox会在子节点中包含空白则第一个子节点为空白””， 而ie不会返回空白</p>
<p>可以通过if(“” != node.nodeName)过滤掉空白子对象[<a href="#_msocom_4">4]</a> </p>
<p>3、模拟点击事件</p>
<p>if(document.all){ //ie下 </p>
<p>  document.getElementById(“a3”).click(); </p>
<p>}</p>
<p>else{ //非IE</p>
<p>  var evt = document.createEvent(“MouseEvents”); </p>
<p>  evt.initEvent(“click”, true, true); </p>
<p>  document.getElementById(“a3”).dispatchEvent(evt); </p>
<p>} </p>
<p>4、事件注册</p>
<p>if (isIE){window.attachEvent(“onload”, init);}else{window.addEventListener(“load”, init, false);}</p>
<h2 id="225、请写出一个程序，在页面加载完成后动态创建一个form表单，并在里面添加一个input对象并给它任意赋值后义post方式提交到：http-127-0-0-1-save-php"><a href="#225、请写出一个程序，在页面加载完成后动态创建一个form表单，并在里面添加一个input对象并给它任意赋值后义post方式提交到：http-127-0-0-1-save-php" class="headerlink" title="225、请写出一个程序，在页面加载完成后动态创建一个form表单，并在里面添加一个input对象并给它任意赋值后义post方式提交到：http://127.0.0.1/save.php"></a>225、请写出一个程序，在页面加载完成后动态创建一个form表单，并在里面添加一个input对象并给它任意赋值后义post方式提交到：<a href="http://127.0.0.1/save.php">http://127.0.0.1/save.php</a></h2><p>答案参考：J:\代码,PPT,笔记,电子书\面试题\面试题_225.html</p>
<h2 id="226、用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24"><a href="#226、用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24" class="headerlink" title="226、用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24"></a>226、用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24</h2><p>面试经常遇到的排序，查找算法要熟悉</p>
<h2 id="227、解释一下什么叫闭包，并实现一段闭包代码"><a href="#227、解释一下什么叫闭包，并实现一段闭包代码" class="headerlink" title="227、解释一下什么叫闭包，并实现一段闭包代码"></a>227、解释一下什么叫闭包，并实现一段闭包代码</h2><p>简单理解就是函数的嵌套形成闭包，闭包包括函数本身及其外部作用域</p>
<h2 id="228、简述一下什么叫事件委托以及其原理"><a href="#228、简述一下什么叫事件委托以及其原理" class="headerlink" title="228、简述一下什么叫事件委托以及其原理"></a>228、简述一下什么叫事件委托以及其原理</h2><p>在元素的父节点注册事件，通过事件冒泡，在父节点捕获事件</p>
<h2 id="229、前端代码优化的方法"><a href="#229、前端代码优化的方法" class="headerlink" title="229、前端代码优化的方法"></a>229、前端代码优化的方法</h2><p>var User = { 对象</p>
<p>  count = 1，属性</p>
<p>  getCount：function（）{ 方法</p>
<p>​    return this.count;</p>
<p>  }</p>
<p>}</p>
<p>console.log(User.getCount());</p>
<p>var func = User.getCount;</p>
<p>console.log(func());</p>
<p>1 undefined（window）;</p>
<h2 id="230、下列JavaScript代码执行后，依次alert的结果是"><a href="#230、下列JavaScript代码执行后，依次alert的结果是" class="headerlink" title="230、下列JavaScript代码执行后，依次alert的结果是"></a>230、下列JavaScript代码执行后，依次alert的结果是</h2><p>(function test(){</p>
<p>   var a=b=5;</p>
<p>   alert(typeof a);</p>
<p>   alert(typeof b);</p>
<p>})();</p>
<p>alert(typeof a);</p>
<p>alert(typeof b);</p>
<p>//number number undefined number</p>
<h2 id="231、下列JavaScript代码执行后，iNum的值是"><a href="#231、下列JavaScript代码执行后，iNum的值是" class="headerlink" title="231、下列JavaScript代码执行后，iNum的值是"></a>231、下列JavaScript代码执行后，iNum的值是</h2><p>var iNum = 0;</p>
<p>for(var i = 1; i&lt; 10; i++){</p>
<p>   if(i % 5 == 0){</p>
<p>​     continue;</p>
<p>  }</p>
<p>iNum++;</p>
<p>}</p>
<p>分析：</p>
<p>i=1 1</p>
<p>i=2 2</p>
<p>i=3 3</p>
<p>i=4 4</p>
<p>i=5</p>
<p>i=6 6</p>
<p>i=7 7</p>
<p>i=8 8</p>
<p>i=9 9</p>
<h2 id="232、输出结果是多少？"><a href="#232、输出结果是多少？" class="headerlink" title="232、输出结果是多少？"></a>232、输出结果是多少？</h2><p> 1）  var a;</p>
<p>var b = a * 0;</p>
<p>if (b == b) {</p>
<p>   console.log(b * 2 + “2” - 0 + 4);</p>
<p>} else {</p>
<p>   console.log(!b * 2 + “2” - 0 + 4); </p>
<p>}</p>
<p>答案：26</p>
<p>扩展：关于乘法操作符：J:\代码,PPT,笔记,电子书\面试题\乘性操作符.png</p>
<p>2） <script></p>
<p>   var a = 1;</p>
<p></script></p>
<script>


var a;

var b = a * 0;

if (b == b) {      **//b=0**

​    console.log(b * 2 + "2" - 0 + 4);

} else {

​    console.log(!b * 2 + "2" - 0 + 4);

}

</script>

<p>答案：6</p>
<p>3） var t = 10;</p>
<p>function test(t){</p>
<p>​    var t = t++;//此时的t是一个局部变量，全局变量没有任何变化</p>
<p>​    console.log(t);//此时的结果又是多少？</p>
<p>}test(t);</p>
<p>console.log(t);</p>
<p>答案：10</p>
<p>4） var t = 10;</p>
<p>function test(test){</p>
<p>   var t = test++;</p>
<p>}test(t);</p>
<p>console.log(t);</p>
<p>答案：10</p>
<p>6） var t = 10;</p>
<p>function test(test){</p>
<p>​    t = test++;</p>
<p>}test(t);</p>
<p>console.log(t);</p>
<p>答案：10</p>
<p>7） var t = 10;</p>
<p>function test(test){</p>
<p>   t = t + test;//undefined+10=NaN</p>
<p>   console.log(t);</p>
<p>   var t = 3;</p>
<p>}test(t);</p>
<p>console.log(t);</p>
<p>答案：NaN 10</p>
<p>8）var a;</p>
<p>var b = a / 0;</p>
<p>if (b == b) {//b=NaN</p>
<p>​    console.log(!b * 2 + “2” - 0 + 4);</p>
<p>} else {</p>
<p>​    console.log(!b * 2 + “2” - 0 + 4);</p>
<p>}</p>
<p>答案：26</p>
<p>9）<script></p>
<p>   var a = 1;</p>
<p></script></p>
<script>


  var a;

  var b = a / 0;

  if (b == b) { **//b=Infinity**

​    console.log(b * 2 + "2" + 4);

  } else {

​    console.log(!b * 2 + "2" + 4);

  }

</script>

<p>答案：Infinity24</p>
<h2 id="233、用程序实现找到html中id名相同的元素？"><a href="#233、用程序实现找到html中id名相同的元素？" class="headerlink" title="233、用程序实现找到html中id名相同的元素？"></a>233、用程序实现找到html中id名相同的元素？</h2><body>

<form id='form1'>


<div id='div1'></div>

<div id='div2'></div>

<div id='div3'></div>

<div id='div4'></div>

<div id='div5'></div>

<div id='div3'>id名重复的元素</div>

</form>

</body>

<h2 id="234、下列JavaScript代码执行后，运行的结果是"><a href="#234、下列JavaScript代码执行后，运行的结果是" class="headerlink" title="234、下列JavaScript代码执行后，运行的结果是"></a>234、下列JavaScript代码执行后，运行的结果是</h2><p><button id='btn'>点击我</button></p>
<p>var btn = document.getElementById(‘btn’);</p>
<p>var handler = {</p>
<p>  id: ‘_eventHandler’,</p>
<p>  exec: function(){</p>
<p>​    alert(this.id);</p>
<p>  }</p>
<p>}</p>
<p>btn.addEventListener(‘click’, handler.exec);</p>
<p>答案：btn，因为handler.exec是由btn这个按钮执行的</p>
<h2 id="235、☆☆☆下列JavaScript代码执行后，依次alert的结果是"><a href="#235、☆☆☆下列JavaScript代码执行后，依次alert的结果是" class="headerlink" title="235、☆☆☆下列JavaScript代码执行后，依次alert的结果是"></a>235、☆☆☆下列JavaScript代码执行后，依次alert的结果是</h2><p>var obj = {proto: {a:1,b:2}};</p>
<p>function F(){};</p>
<p>F.prototype = obj.proto;</p>
<p>var f = new F();</p>
<p>obj.proto.c = 3;</p>
<p>obj.proto = {a:-1, b:-2};</p>
<p>alert(f.a);//1</p>
<p>alert(f.c);//3</p>
<p>delete F.prototype[‘a’];</p>
<p>alert(f.a);//undefined</p>
<p>alert(obj.proto.a);//-1</p>
<h2 id="236、下列JavaScript代码执行后的效果是"><a href="#236、下列JavaScript代码执行后的效果是" class="headerlink" title="236、下列JavaScript代码执行后的效果是"></a>236、下列JavaScript代码执行后的效果是</h2><ul id='list'>


<li>item</li>

<li>item</li>

<li>item</li>

<li>item</li>

<li>item</li>

</ul>

<p>var items = document.querySelectorAll(‘#list&gt;li’);</p>
<p>for(var i = 0;i &lt; items.length; i++){</p>
<p>   setTimeout(function(){</p>
<p>​      items[i].style.backgroundColor = ‘#fee’; //元素不存在</p>
<p>  }, 5);</p>
<p>}</p>
<p>答案：异常</p>
<h2 id="237、下列JavaScript代码执行后的li元素的数量是"><a href="#237、下列JavaScript代码执行后的li元素的数量是" class="headerlink" title="237、下列JavaScript代码执行后的li元素的数量是"></a>237、下列JavaScript代码执行后的li元素的数量是</h2><ul>


<li>Item</li>

<li></li>

<li></li>

<li>Item</li>

<li>Item</li>

</ul>

<p>var items = document.getElementsByTagName(‘li’);</p>
<p>for(var i = 0; i&lt; items.length; i++){</p>
<p>  if(items[i].innerHTML == ‘’){</p>
<p>​    items[i].parentNode.removeChild(items[i]);</p>
<p>  }</p>
<p>}</p>
<p>答案：4个 //删除后长度变化导致</p>
<h2 id="238、程序中捕获异常的方法？"><a href="#238、程序中捕获异常的方法？" class="headerlink" title="238、程序中捕获异常的方法？"></a>238、程序中捕获异常的方法？</h2><p>window.error</p>
<p>try{}catch(){}finally{}</p>
<h2 id="239、将字符串”-id-name-”中的-id-替换成10，-name-替换成Tony-（使用正则表达式）"><a href="#239、将字符串”-id-name-”中的-id-替换成10，-name-替换成Tony-（使用正则表达式）" class="headerlink" title="239、将字符串”{$id}{$name}”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）"></a>239、将字符串”<tr><td>{$id}</td><td>{$name}</td></tr>”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）</h2><p>答案：”<tr><td>{$id}</td><td>{$id}_{$name}</td></tr>”.replace(/{$id}/g,’10′).replace(/{$name}/g,‘Tony’);</p>
<h2 id="240、给String对象添加一个方法，传入一个string类型的参数，然后将string的每个字符间价格空格返回，例如："><a href="#240、给String对象添加一个方法，传入一个string类型的参数，然后将string的每个字符间价格空格返回，例如：" class="headerlink" title="240、给String对象添加一个方法，传入一个string类型的参数，然后将string的每个字符间价格空格返回，例如："></a>240、给String对象添加一个方法，传入一个string类型的参数，然后将string的每个字符间价格空格返回，例如：</h2><p>addSpace(“hello world”) // -&gt; ‘h e l l o ?w o r l d’</p>
<p>​     String.prototype.spacify = function(){</p>
<p>return this.split(‘’).join(‘ ‘);</p>
<p>};</p>
<h2 id="241、写出函数DateDemo的返回结果，系统时间假定为今天"><a href="#241、写出函数DateDemo的返回结果，系统时间假定为今天" class="headerlink" title="241、写出函数DateDemo的返回结果，系统时间假定为今天"></a>241、写出函数DateDemo的返回结果，系统时间假定为今天</h2><p>function DateDemo(){</p>
<p> var d, s=”今天日期是：”;</p>
<p>d = new Date();</p>
<p>s += d.getMonth() + “/“;</p>
<p>s += d.getDate() + “/“;</p>
<p>s += d.getFullYear();</p>
<p> return s;</p>
<p>}</p>
<p>结果：今天日期是：7/17/2010</p>
<h2 id="242、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26"><a href="#242、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26" class="headerlink" title="242、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26"></a>242、输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26</h2><p>var d = new Date();</p>
<p>// 获取年，getFullYear()返回4位的数字</p>
<p>var year = d.getFullYear();</p>
<p>// 获取月，月份比较特殊，0是1月，11是12月</p>
<p>var month = d.getMonth() + 1;</p>
<p>// 变成两位</p>
<p>month = month &lt; 10 ? ‘0’ + month : month;</p>
<p>// 获取日</p>
<p>var day = d.getDate();</p>
<p>day = day &lt; 10 ? ‘0’ + day : day;</p>
<p>alert(year + ‘-‘ + month + ‘-‘ + day);</p>
<h2 id="243、已知数组var-stringArray-“This”-“is”-“Baidu”-“Campus”-，Alert出”This-is-Baidu-Campus”。"><a href="#243、已知数组var-stringArray-“This”-“is”-“Baidu”-“Campus”-，Alert出”This-is-Baidu-Campus”。" class="headerlink" title="243、已知数组var?stringArray?=?[“This”,?“is”,?“Baidu”,?“Campus”]，Alert出”This?is?Baidu?Campus”。"></a>243、已知数组var?stringArray?=?[“This”,?“is”,?“Baidu”,?“Campus”]，Alert出”This?is?Baidu?Campus”。</h2><p>答案：alert(stringArray.join(“”))</p>
<h2 id="244、已知有字符串foo-”get-element-by-id”-写一个function将其转化成驼峰表示法”getElementById”。"><a href="#244、已知有字符串foo-”get-element-by-id”-写一个function将其转化成驼峰表示法”getElementById”。" class="headerlink" title="244、已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。"></a>244、已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”。</h2><p>function combo(msg){</p>
<p>var arr=msg.split(“-“);</p>
<p>for(var i=1;i&lt;arr.length;i++){</p>
<p>arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);</p>
<p>}</p>
<p>msg=arr.join(“”);</p>
<p>return msg;</p>
<p>}</p>
<h2 id="245、-var-numberArray-3-6-2-4-1-5-（考察基础API）"><a href="#245、-var-numberArray-3-6-2-4-1-5-（考察基础API）" class="headerlink" title="245、.var numberArray=[3,6,2,4,1,5]; （考察基础API）"></a>245、.var numberArray=[3,6,2,4,1,5]; （考察基础API）</h2><p>1)实现对该数组的倒排，输出[5,1,4,2,6,3]</p>
<p>2)实现对该数组的降序排列，输出[6,5,4,3,2,1]</p>
<p>function combo(msg){</p>
<p>var arr=msg.split(“-“);</p>
<p>for(var i=1;i&lt;arr.length;i++){</p>
<p>arr[i]=arr[i].charAt(0).toUpperCase()+arr[i].substr(1,arr[i].length-1);</p>
<p>}</p>
<p>msg=arr.join(“”);</p>
<p>return msg;</p>
<p>}</p>
<h2 id="246、把两个数组合并，并删除第二个元素。"><a href="#246、把两个数组合并，并删除第二个元素。" class="headerlink" title="246、把两个数组合并，并删除第二个元素。"></a>246、把两个数组合并，并删除第二个元素。</h2><p>var array1 = [‘a’,’b’,’c’];</p>
<p>var bArray = [‘d’,’e’,’f’];</p>
<p>var cArray = array1</p>
<p>答案：</p>
<p>array1=array1.concat(bArray)</p>
<p>array1.splice(1,1)</p>
<h2 id="247、如何消除一个数组里面重复的元素？"><a href="#247、如何消除一个数组里面重复的元素？" class="headerlink" title="247、如何消除一个数组里面重复的元素？"></a>247、如何消除一个数组里面重复的元素？</h2><p>var arr=[1,2,3,3,4,4,5,5,6,1,9,3,25,4];</p>
<p>function deRepeat(){</p>
<p>var newArr=[];</p>
<p>var obj={};</p>
<p>var index=0;</p>
<p>var l=arr.length;</p>
<p>for(var i=0;i&lt;l;i++){</p>
<p>if(obj[arr[i]]==undefined)</p>
<p>{</p>
<p>obj[arr[i]]=1;</p>
<p>newArr[index++]=arr[i];</p>
<p>}</p>
<p>else if(obj[arr[i]]==1)</p>
<p>}</p>
<p>return newArr;</p>
<p>}</p>
<p>var newArr2=deRepeat(arr);</p>
<p>alert(newArr2); //输出1,2,3,4,5,6,9,25</p>
<h2 id="248、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。"><a href="#248、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。" class="headerlink" title="248、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。"></a>248、用js实现随机选取10–100之间的10个数字，存入一个数组，并排序。</h2><p>var iArray = []; </p>
<p>funtion getRandom(istart, iend){</p>
<p>var iChoice = istart - iend +1;</p>
<p>return Math.floor(Math.random() * iChoice + istart;</p>
<p>}</p>
<p>for(var i=0; i&lt;10; i++){</p>
<p>iArray.push(getRandom(10,100));</p>
<p>}</p>
<p>iArray.sort();</p>
<h2 id="249、正则表达式构造函数var-reg-new-RegExp-“xxx”-与正则表达字面量var-reg-有什么不同？匹配邮箱的正则表达式？"><a href="#249、正则表达式构造函数var-reg-new-RegExp-“xxx”-与正则表达字面量var-reg-有什么不同？匹配邮箱的正则表达式？" class="headerlink" title="249、正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？"></a>249、正则表达式构造函数var reg=new RegExp(“xxx”)与正则表达字面量var reg=//有什么不同？匹配邮箱的正则表达式？</h2><p>答案：当使用RegExp()构造函数的时候，不仅需要转义引号（即\”表示”），并且还需要双反斜杠（即\表示一个\）。使用正则表达字面量的效率更高。?</p>
<h2 id="250、1-var-regMail-a-zA-Z0-9-a-zA-Z0-9-a-zA-Z0-9-2-3-1-2"><a href="#250、1-var-regMail-a-zA-Z0-9-a-zA-Z0-9-a-zA-Z0-9-2-3-1-2" class="headerlink" title="250、1 var regMail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/;"></a>250、1 var regMail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/;</h2><p>正则表达式对象3 – 清除空格</p>
<p>写一个function，清除字符串前后的空格。（兼容所有浏览器）</p>
<p>使用自带接口trim()，考虑兼容性：</p>
<p>if (!String.prototype.trim) { </p>
<p>String.prototype.trim = function() { </p>
<p>return this.replace(/^\s+/, “”).replace(/\s+$/,””);</p>
<p>} } </p>
<p>// test the function </p>
<p>var str = “ \t\n test string “.trim(); </p>
<p>alert(str == “test string”); // alerts “true”</p>
<h2 id="251、数组和字符串"><a href="#251、数组和字符串" class="headerlink" title="251、数组和字符串"></a>251、数组和字符串</h2><script lang="JavaScript" type="text/javascript">


  function outPut(s) {

​    document.writeln(s);

  }

  var a = "lashou";

  var b = a;

  outPut(b);

  a = "拉手";

  outPut(a);

  outPut(b);

  var a_array = [1, 2, 3];

  var b_array = a_array;

  outPut(b_array);

  a_array[3] = 4;

  outPut(a_array);

  outPut(b_array);

</script>

<p>输出结果：</p>
<p>答案：lashou 拉手 lashou 1,2,3 1,2,3,4 1,2,3,4</p>
<h2 id="252、下列控制台都输出什么"><a href="#252、下列控制台都输出什么" class="headerlink" title="252、下列控制台都输出什么"></a>252、下列控制台都输出什么</h2><p>第1题：</p>
<p>function setName(){</p>
<p>  name=”张三”;</p>
<p>}</p>
<p>setName();</p>
<p>console.log(name);</p>
<p>答案：”张三”</p>
<h2 id="253、第2题："><a href="#253、第2题：" class="headerlink" title="253、第2题："></a>253、第2题：</h2><p>//考点：1、变量声明提升 2、变量搜索机制</p>
<p>var a=1;</p>
<p>function test(){</p>
<p>  console.log(a);</p>
<p>  var a=1;</p>
<p>}</p>
<p>test();</p>
<p>答案：undefined</p>
<h2 id="254、第3题："><a href="#254、第3题：" class="headerlink" title="254、第3题："></a>254、第3题：</h2><p>var b=2;</p>
<p>function test2(){</p>
<p>  window.b=3;</p>
<p>  console.log(b);</p>
<p>}</p>
<p>test2();</p>
<p>答案：3</p>
<h2 id="255、第4题："><a href="#255、第4题：" class="headerlink" title="255、第4题："></a>255、第4题：</h2><p>c=5;//声明一个全局变量c </p>
<p>function test3(){</p>
<p>  window.c=3;</p>
<p>  console.log(c);   //答案：undefined，原因：由于此时的c是一个局部变量c，并且没有被赋值</p>
<p>  var c;</p>
<p>  console.log(window.c);//答案：3，原因：这里的c就是一个全局变量c</p>
<p>}</p>
<p>test3();</p>
<h2 id="256、第5题："><a href="#256、第5题：" class="headerlink" title="256、第5题："></a>256、第5题：</h2><p>var arr = [];</p>
<p>arr[0] = ‘a’;</p>
<p>arr[1] = ‘b’;</p>
<p>arr[10] = ‘c’;</p>
<p>alert(arr.length); //答案：11</p>
<p>console.log(arr[5]);  //答案：undefined</p>
<h2 id="257、第6题："><a href="#257、第6题：" class="headerlink" title="257、第6题："></a>257、第6题：</h2><p>var a=1;</p>
<p>console.log(a++);   //答案：1</p>
<p>console.log(++a);   //答案：3</p>
<h2 id="258、第7题："><a href="#258、第7题：" class="headerlink" title="258、第7题："></a>258、第7题：</h2><p>console.log(null==undefined);  //答案：true</p>
<p>console.log(“1”==1);    //答案：true，因为会将数字1先转换为字符串1</p>
<p>console.log(“1”===1);   //答案：false，因为数据类型不一致</p>
<h2 id="259、第8题："><a href="#259、第8题：" class="headerlink" title="259、第8题："></a>259、第8题：</h2><p>typeof 1;    “number”</p>
<p>typeof “hello”;   “string”</p>
<p>typeof /[0-9]/;   “object”</p>
<p>typeof {};   “object”</p>
<p>typeof null;    “object”</p>
<p>typeof undefined;  “undefined”</p>
<p>typeof [1,2,3];   “object”</p>
<p>typeof function(){};  //“function”</p>
<h2 id="260、第9题："><a href="#260、第9题：" class="headerlink" title="260、第9题："></a>260、第9题：</h2><p>parseInt(3.14);    //3</p>
<p>parseFloat(“3asdf”);    //3</p>
<p>parseInt(“1.23abc456”);</p>
<p>parseInt(true);//“true” NaN</p>
<h2 id="261、第10题："><a href="#261、第10题：" class="headerlink" title="261、第10题："></a>261、第10题：</h2><p>//考点：函数声明提前</p>
<p>function bar() {</p>
<p>  return foo;</p>
<p>  foo = 10;</p>
<p>  function foo() {}</p>
<p>  //var foo = 11;</p>
<p>}</p>
<p>alert(typeof bar());//“function”</p>
<h2 id="262、第11题：考点：函数声明提前"><a href="#262、第11题：考点：函数声明提前" class="headerlink" title="262、第11题：考点：函数声明提前"></a>262、第11题：考点：函数声明提前</h2><p>var foo = 1;</p>
<p>function bar() {</p>
<p>  foo = 10;</p>
<p>  return;</p>
<p>  function foo() {}</p>
<p>}</p>
<p>bar();</p>
<p>alert(foo);//答案：1</p>
<h2 id="263、第12题："><a href="#263、第12题：" class="headerlink" title="263、第12题："></a>263、第12题：</h2><p>console.log(a);//是一个函数</p>
<p>var a = 3;</p>
<p>function a(){}</p>
<p>console.log(a);////3</p>
<h2 id="264、第13题："><a href="#264、第13题：" class="headerlink" title="264、第13题："></a>264、第13题：</h2><p>//考点：对arguments的操作</p>
<p>function foo(a) {</p>
<p>  arguments[0] = 2;</p>
<p>  alert(a);//答案：2，因为：a、arguments是对实参的访问，b、通过arguments[i]可以修改指定实参的值</p>
<p>}</p>
<p>foo(1);</p>
<h2 id="265、第14题："><a href="#265、第14题：" class="headerlink" title="265、第14题："></a>265、第14题：</h2><p>function foo(a) {</p>
<p>  alert(arguments.length);//答案：3，因为arguments是对实参的访问</p>
<p>}</p>
<p>foo(1, 2, 3);</p>
<h2 id="266、第15题"><a href="#266、第15题" class="headerlink" title="266、第15题"></a>266、第15题</h2><p>bar();//报错</p>
<p>var foo = function bar(name) {</p>
<p>  console.log(“hello”+name);</p>
<p>  console.log(bar);</p>
<p>};</p>
<p>//alert(typeof bar);</p>
<p>foo(“world”);//“hello”</p>
<p>console.log(bar);//undefined</p>
<p>console.log(foo.toString());</p>
<p>bar();//报错</p>
<h2 id="267、第16题"><a href="#267、第16题" class="headerlink" title="267、第16题"></a>267、第16题</h2><p>function test(){</p>
<p>  console.log(“test函数”);</p>
<p>}</p>
<p>setTimeout(function(){</p>
<p>  console.log(“定时器回调函数”);</p>
<p>}, 0)</p>
<p>test();</p>
<p>function foo(){</p>
<p>  var name=”hello”;</p>
<p>}</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
