<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【WebGL之巅】00-使用canvas绘制2d矩形</title>
    <url>/00-%E4%BD%BF%E7%94%A8canvas%E7%BB%98%E5%88%B62d%E7%9F%A9%E5%BD%A2-HelloCanvas2d/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：00-HelloCanvas2d</p>
</blockquote>
<span id="more"></span>

<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol>
<li>canvas绘图机制：上下文。要在<code>&lt;canvas&gt;</code>上绘制图像，须先获取绘图上下文，“2d”代表我们要绘制二维图形。</li>
<li><code>fillstyle</code>：设置或返回用于填充绘画的颜色、渐变或模式。</li>
<li>使用填充颜色填充矩形。<br><code>fillRect(x,y,width,height)</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">参数：x    矩形左上角的 x 坐标</span><br><span class="line">	 y    矩形左上角的 y 坐标</span><br><span class="line">	 width  矩形的宽度</span><br><span class="line">	 height 矩形的高度</span><br></pre></td></tr></table></figure>

<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><code>HelloCanvas2d.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Clear canvas<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;mycanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">		Please use the browser supporting &quot;canvas&quot;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;HelloCanvas2d.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>HelloCanvas2d.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HelloCanvas2d.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">//获取&lt;canvas&gt;标签</span></span><br><span class="line">	<span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mycanvas&quot;</span>);</span><br><span class="line">	<span class="comment">//如果没找到&lt;canvas&gt;标签，则输出错误信息</span></span><br><span class="line">	<span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;Failed to retrieve the &lt;canvas&gt; element.&#x27;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// canvas绘图机制：上下文。要在&lt;canvas&gt;上绘制图像，须先获取绘图上下文，“2d”代表我们要绘制二维图形。</span></span><br><span class="line">	<span class="comment">// 注意区分‘2d’大小写</span></span><br><span class="line">	<span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	ctx.fillStyle = <span class="string">&quot;rgba(0,100,0,1)&quot;</span>;</span><br><span class="line">	ctx.fillRect(<span class="number">120</span>, <span class="number">10</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】01-使用webgl清空绘图区</title>
    <url>/01-%E4%BD%BF%E7%94%A8webgl%E6%B8%85%E7%A9%BA%E7%BB%98%E5%9B%BE%E5%8C%BA-HellCanvas/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：01-HelloCanvas</p>
</blockquote>
<span id="more"></span>

<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>获取<code>&lt;canvas&gt;</code>元素</li>
<li>获取webgl绘图上下文</li>
<li>设置背景色</li>
<li>清空<code>&lt;canvas&gt;</code></li>
</ol>
<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol>
<li><p>gl.cleanColor()的参数</p>
</li>
<li><p>一旦指定了背景色，背景色就会驻存在WebGL系统中，在下次调用clearColor前不会改变</p>
</li>
<li><p>若想显示webgl调试错误，在调用getWebGLContext时，传入第二个参数<code>true</code>即可开启，例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gl = getWebGLContext(canvas, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>gl.clear(buffer)清空背景色; 关于缓冲区，可以<a href="">查看这里</a></p>
</li>
</ol>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><code>HelloCanvas.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Clear canvas<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">		Please use the browser supporting &quot;canvas&quot;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;HelloCanvas.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>HelloCanvas.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HelloCanvas.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//获取&lt;canvas&gt;元素</span></span><br><span class="line">	<span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;webgl&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取WebGl绘图上下文</span></span><br><span class="line">	<span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">	<span class="keyword">if</span>(!gl)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the rendering context for WebGL&#x27;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指定清空&lt;canvas&gt;的颜色</span></span><br><span class="line">	gl.clearColor(<span class="number">0.6</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//清空&lt;canvas&gt;</span></span><br><span class="line">	gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/HellCanvas.png"></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><code>getWebGLContext()</code>是《webgl编程指南》一书所编写的工具库(<code>cuon-utils.js</code>)中的方法，若有需要，可找博主私信即可。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】02-绘制一个点_v1</title>
    <url>/02-%E7%BB%98%E5%88%B6%E4%B8%80%E4%B8%AA%E7%82%B9_v1-HelloPoint-v1/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：02-HelloPoint1</p>
<p>要点：着色器、着色器代码规范、vec4（齐次坐标）、gl.drawArrays()</p>
</blockquote>
<span id="more"></span>

<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>获取<code>&lt;canvas&gt;</code>元素</li>
<li>获取WebGL上下文</li>
<li><strong>初始化着色器</strong></li>
<li>设置<code>&lt;canvas&gt;</code>背景色</li>
<li>清除<code>&lt;canvas&gt;</code></li>
<li>绘图</li>
</ol>
<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol>
<li><h6 id="着色器"><a href="#着色器" class="headerlink" title="着色器"></a>着色器</h6><p><strong>顶点着色器</strong>：用来描述顶点特性（位置、颜色等）的程序。<code>顶点</code>是指二维或三维空间中的一个点（端点或交点）。</p>
<p><strong>片元着色器</strong>：进行逐片元处理过程如’光照‘的程序。<code>片元</code>是一个WebGL术语，可理解为<code>像素</code>（图像的单元）。</p>
</li>
<li><h6 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h6><p>因为着色器程序代码必须预先处理成单个字符串形式，所以用<code>+</code>将多行字符串连成长字符串，当着色器内部出错时，可以获取出错行号，也可以不使用<code>\n</code></p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顶点着色器程序</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position = vec4(0.1, 0.1, 0.0, 1.0);\n&#x27;</span> + <span class="comment">//设置坐标</span></span><br><span class="line">        <span class="string">&#x27;gl_PointSize = 10.0;\n&#x27;</span> +                    <span class="comment">//设置尺寸</span></span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n&#x27;</span>+ <span class="comment">//设置颜色</span></span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><h6 id="initShaders-gl-vshader-fshader-初始化着色器，"><a href="#initShaders-gl-vshader-fshader-初始化着色器，" class="headerlink" title="initShaders(gl, vshader, fshader)初始化着色器，"></a>initShaders(gl, vshader, fshader)初始化着色器，</h6><p>返回值：true/false</p>
<p>作用：将字符串形式的着色器代码从js传给webgl系统，并建立着色器。</p>
<p>运行位置：着色器运行在WebGL系统，而不是js程序中。</p>
</li>
<li><p><strong>WebGL程序 = 运行在浏览器中的js + 运行在WebGL系统的着色器程序</strong></p>
</li>
<li><h6 id="vec4：表示三个浮点数组成的矢量（vector）"><a href="#vec4：表示三个浮点数组成的矢量（vector）" class="headerlink" title="vec4：表示三个浮点数组成的矢量（vector）"></a>vec4：表示<strong>三个浮点数</strong>组成的<strong>矢量</strong>（vector）</h6></li>
<li><h6 id="vec4-v0-v1-v2-v3"><a href="#vec4-v0-v1-v2-v3" class="headerlink" title="vec4(v0, v1, v2, v3)"></a>vec4(v0, v1, v2, v3)</h6><p>作用：创建vec4类型的变量</p>
<p>返回值：由v0~v3组成的vec4对象</p>
<p>参数：X、Y、Z坐标 + 1.0</p>
</li>
<li><h6 id="齐次坐标：由4个分离组成的矢量被称为其次坐标。"><a href="#齐次坐标：由4个分离组成的矢量被称为其次坐标。" class="headerlink" title="齐次坐标：由4个分离组成的矢量被称为其次坐标。"></a><strong>齐次坐标</strong>：由4个分离组成的矢量被称为其次坐标。</h6><p>齐次坐标用如下符号描述：(x,y,z,w)，等价于(x/w, y/w, z/w)。所以当w等于1，就可以当成三维坐标使用。w值必须大于0，若w趋近于0， 那么它表示的点趋近于无穷远。</p>
<p>作用：用矩阵乘法来描述顶点变化称为可能。</p>
</li>
<li><h6 id="gl-drawArrays"><a href="#gl-drawArrays" class="headerlink" title="gl.drawArrays()"></a>gl.drawArrays()</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">作用：执行顶点着色器，按照mode参数指定的方式绘制图形</span><br><span class="line">参数：</span><br><span class="line">	mode，指定绘制的方式（gl.POINTS/gl.LINES/gl.LINE_STRIP/gl.LINE_LOOP/gl.TRIANGLES/gl.TRIANGLE_STRIP/gl.TRIANGLE_FAN）。</span><br><span class="line">	first, 指定从那个顶点开始绘制（整数型），<span class="number">0</span>表示从第一个顶点开始画起。</span><br><span class="line">	count, 指定绘制需要多少个顶点（整数型），顶点着色器执行的次数，每次处理一个顶点。执行完后，片元着色器开始执行</span><br><span class="line">返回值：无</span><br><span class="line">错误：/</span><br></pre></td></tr></table></figure></li>
<li><h6 id="WebGL坐标系统：右手坐标系（暂时这么认为）"><a href="#WebGL坐标系统：右手坐标系（暂时这么认为）" class="headerlink" title="WebGL坐标系统：右手坐标系（暂时这么认为）"></a>WebGL坐标系统：右手坐标系（暂时这么认为）</h6></li>
</ol>
<p><img src="/images/HelloPoint-v1-01.png" alt="1"></p>
<p><img src="/images/HelloPoint-v1-02.png" alt="1"></p>
<ol start="10">
<li>WebGL不需要交换颜色缓冲区</li>
</ol>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Draw a point<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">        Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;HelloPoint1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HelloPoint1.js</span></span><br><span class="line"><span class="comment">// 顶点着色器程序</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position = vec4(-0.5, -0.5, 0.0, 1.0);\n&#x27;</span> + <span class="comment">//设置坐标：顶点位置</span></span><br><span class="line">        <span class="string">&#x27;gl_PointSize = 10.0;\n&#x27;</span> +                    <span class="comment">//设置尺寸（px数），默认值1.0</span></span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n&#x27;</span>+ <span class="comment">//设置颜色，RGBA格式</span></span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;webgl&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>( !gl )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the rendering context for WebGL&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化着色器</span></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to initialize shaders.&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.POINTS, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/HelloPoint-v1-03.png" alt="1"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】03-绘制一个点_v2_attribute变量</title>
    <url>/03-%E7%BB%98%E5%88%B6%E4%B8%80%E4%B8%AA%E7%82%B9_v2_attribute%E5%8F%98%E9%87%8F-HelloPoint-v2/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：03-HelloPoint2</p>
<p>要点：JavaScript与着色器之前数据的传输（attribute变量使用步骤）、存储限定符（attribute）、gl.getAttribLocation()、gl.vertexAttrib3f()、WebGL函数命名规范</p>
</blockquote>
<span id="more"></span>

<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol>
<li><h6 id="位置信息的传输"><a href="#位置信息的传输" class="headerlink" title="位置信息的传输"></a>位置信息的传输</h6><p>方式1：attribute变量，传输与顶点相关的数据</p>
<p>方式2：uniform变量，传输对于所有顶点都相同（与顶点无关）的数据</p>
</li>
<li><h6 id="attribute变量使用步骤"><a href="#attribute变量使用步骤" class="headerlink" title="attribute变量使用步骤"></a>attribute变量使用步骤</h6><p>① 在顶点着色器中，声明attribute变量</p>
<p>② 将attribute变量赋值给gl_Position变量</p>
<p>③ 向attribute变量传输数据</p>
</li>
<li><h6 id="存储限定符"><a href="#存储限定符" class="headerlink" title="存储限定符"></a>存储限定符</h6><p>关键词attribute被称为存储限定符</p>
<p>声明attribute变量：**&lt;存储限定符&gt;&lt;类型&gt;&lt;变量名&gt;**</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">存储限定符  类型    变量名</span><br><span class="line">     ↓      ↓        ↓</span><br><span class="line"><span class="string">&#x27;attribute vec4 a_Position;&#x27;</span></span><br><span class="line"></span><br><span class="line">注意：以后所有attribute变量名都使用‘a_’，uniform变量名使用‘u_’规范</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute float a_PointSize;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position = a_Position;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_PointSize = a_PointSize;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line">准备好从外部接收顶点坐标及尺寸</span><br></pre></td></tr></table></figure></li>
<li><h6 id="gl-getAttribLocation"><a href="#gl-getAttribLocation" class="headerlink" title="gl.getAttribLocation()"></a>gl.getAttribLocation()</h6></li>
</ol>
<table>
<thead>
<tr>
<th>作用</th>
<th>获取attribute变量地址</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>参数</td>
<td>program：程序对象，包含了顶点和片元着色器</td>
<td>name：attribute变量名称</td>
</tr>
<tr>
<td>返回值</td>
<td>大于等于0：attribute变量的存储地址</td>
<td>-1：attribute变量不存在或命名错误</td>
</tr>
<tr>
<td>错误</td>
<td>INVALID_OPERATION 程序对象未能成功连接</td>
<td>INVALID_VALUE name参数长度越界</td>
</tr>
</tbody></table>
<ol start="5">
<li><h6 id="gl-vertexAttrib3f"><a href="#gl-vertexAttrib3f" class="headerlink" title="gl.vertexAttrib3f()"></a>gl.vertexAttrib3f()</h6></li>
</ol>
<table>
<thead>
<tr>
<th>作用</th>
<th>将顶点位置传输给attribute变量</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>参数</td>
<td>location：指定将要修改的attribute变量的存储位置(a_Position)</td>
<td>v0,v1,v2,[,1.0]: 指定填充值(x,y,z坐标)</td>
</tr>
<tr>
<td>返回值</td>
<td>无</td>
<td></td>
</tr>
<tr>
<td>错误</td>
<td>INVALID_OPERATION 没有当前的program对象</td>
<td>INVALID_VALUE location数目大于attribute变量的最大数目</td>
</tr>
<tr>
<td>同族函数</td>
<td>gl.vertexAttrib1f、gl.vertexAttrib2f、gl.vertexAttrib4f</td>
<td>矢量版本：gl.vertexAttrib3f<strong>v</strong>, 可接受数组作为参数</td>
</tr>
</tbody></table>
<ol start="6">
<li><h6 id="WebGL函数命名规范"><a href="#WebGL函数命名规范" class="headerlink" title="WebGL函数命名规范"></a>WebGL函数命名规范</h6><p>遵循openGL：&lt;基础函数名&gt;&lt;参数个数&gt;&lt;参数类型&gt;</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gl.vertexAttrib <span class="number">3</span>     f ()</span><br><span class="line">       ↑        ↑     ↑</span><br><span class="line">  基础函数名  参数个数  参数类型（f：浮点数，i：整数）</span><br></pre></td></tr></table></figure>



<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>draw a point 2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">    Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;HelloPoint2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HelloPoint2</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute float a_PointSize;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position = a_Position;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_PointSize = a_PointSize;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n&#x27;</span>+ <span class="comment">// 设置颜色</span></span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;webgl&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> gl=getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>(!gl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the rendering context for WebGL&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化着色器</span></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to initialize shaders.&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取attribute变量的存储位置</span></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of a_Position&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取attribute变量的存储位置</span></span><br><span class="line">    <span class="keyword">var</span> a_PointSize = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_PointSize&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_PointSize&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of a_PointSize&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将顶点位置传输给attribute变量</span></span><br><span class="line">    <span class="comment">// gl.vertexAttrib2f(a_Position, 0.2,0.5);</span></span><br><span class="line">    gl.vertexAttrib3f(a_Position, <span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">0.0</span>);</span><br><span class="line">    gl.vertexAttrib1f(a_PointSize, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.POINTS, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/HelloPoint-v2.png" alt="1"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】05-通过鼠标点击绘点_v2_彩色版</title>
    <url>/05-%E9%80%9A%E8%BF%87%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%BB%98%E7%82%B9_v2_%E5%BD%A9%E8%89%B2%E7%89%88-ClickedPoints-color/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：05-ColorPoints</p>
<p>要点：注册js事件、匿名函数、坐标转换、g_points.push()</p>
</blockquote>
<span id="more"></span>

<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="一、为何使用匿名函数？"><a href="#一、为何使用匿名函数？" class="headerlink" title="一、为何使用匿名函数？"></a>一、为何使用匿名函数？</h5><p>先看示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册鼠标点击事件响应函数(匿名函數)</span></span><br><span class="line">canvas.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    click(event, gl, canvas, a_Position);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>当你要画一个点时，需要传入三个变量（gl、canvas、a_Position），这三个变量是定义在<code>main()</code>函数中的局部变量。</p>
<p>当用户点击鼠标时，浏览器会自动调用注册到<code>&lt;canvas&gt;</code>的ommousedown属性上的函数，并传入<code>event</code>（后面简写为‘e’）参数，通常你会这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">canvas.onmousedown = mousedown	<span class="comment">// 注册响应函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mousedown</span>(<span class="params">e</span>) </span>&#123; ... &#125;<span class="comment">// 接收事件响应参数</span></span><br></pre></td></tr></table></figure>

<p>但是，这样写会出现一个问题，定义在main()函数外部的mousedown()函数就无法获取 main函数中的局部变量，而使用匿名函数就可以解决这个问题。</p>
<p>当用户点击鼠标后，程序先调用匿名函数function(e)，再调用匿名函数中的click()传入参数。</p>
<p>当然，这里也可以使用<code>ES6</code>的箭头函数更加简洁：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">canvas.onmousedown = <span class="function"><span class="params">ev</span> =&gt;</span> click(ev, gl, canvas, a_Position);</span><br></pre></td></tr></table></figure>

<h5 id="二、坐标转换"><a href="#二、坐标转换" class="headerlink" title="二、坐标转换"></a>二、坐标转换</h5><p>区别：</p>
<p>​    ①**客户区原点(0,0)**：位于浏览器视图区的左上角顶点处</p>
<p>​    ②<strong>canvas原点</strong>：位于绘图区左上角顶点处（…）</p>
<p>​    ③<strong>WebGL原点</strong>：位于绘图区中心点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取&lt;canvas&gt;在浏览器客户区中的坐标</span></span><br><span class="line"><span class="keyword">var</span> rect = ev.target.getBoundingClientRect();</span><br><span class="line">x = ((x - rect.left) - canvas.height / <span class="number">2</span>) / (canvas.height / <span class="number">2</span>);</span><br><span class="line">y = (canvas.width / <span class="number">2</span> - (y - rect.top)) / (canvas.width / <span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">rect.left：<canvas>原点在客户区中x坐标</th>
<th>使用*{margin:0;padding:0;list-style: none;}清除默认样式后，与客户区原点重和,即(0,0)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">rect.top：<canvas>原点在客户区中y坐标</td>
<td>若不清除默认样式后，canvas原点可能位于(8,8)，仅限博主浏览器测试。</td>
</tr>
<tr>
<td align="left">x</td>
<td>相对于浏览器左上角顶点处的鼠标横轴位置</td>
</tr>
<tr>
<td align="left">y</td>
<td>相对于浏览器左上角顶点处的鼠标纵轴位置</td>
</tr>
<tr>
<td align="left"><strong>x - rect.left：鼠标点击处相对于canvas原点位置</strong></td>
<td>将(x,y)转换成canvas坐标系的坐标</td>
</tr>
<tr>
<td align="left"><strong>y - rect.top：鼠标点击处相对于canvas原点位置</strong></td>
<td>将(x,y)转换成canvas坐标系的坐标</td>
</tr>
<tr>
<td align="left">canvas.height/width</td>
<td>绘图区的宽高</td>
</tr>
<tr>
<td align="left">(canvas.height/width) / 2</td>
<td>绘图区的中心点</td>
</tr>
<tr>
<td align="left">(x - rect.left) - canvas.width / 2</td>
<td>WebGL系统的原点</td>
</tr>
<tr>
<td align="left">canvas.height / 2 - (y - rect.top)</td>
<td>WebGL系统的原点</td>
</tr>
<tr>
<td align="left">((x - rect.left) - canvas.width / 2) / (canvas.width / 2)</td>
<td>将canvas坐标系下的坐标转换为WebGL坐标系中，最终渲染位置</td>
</tr>
<tr>
<td align="left">(canvas.height / 2 - (y - rect.top))</td>
<td>将canvas坐标系下的坐标转换为WebGL坐标系中，最终渲染位置</td>
</tr>
</tbody></table>
<h5 id="三、为啥用g-points-push"><a href="#三、为啥用g-points-push" class="headerlink" title="三、为啥用g_points.push()"></a>三、为啥用g_points.push()</h5><p>因为WebGL系统中的绘制操作实际上是在颜色缓冲区中进行绘制，绘制结束后系统将缓冲区中的内容显示在屏幕上，然后颜色缓冲区就会被重置，其中内容就会丢失。也由此，每次点击后，浏览器会重新绘制之前的并绘制新点击的。</p>
<h5 id="四、uniform变量"><a href="#四、uniform变量" class="headerlink" title="四、uniform变量"></a>四、uniform变量</h5><p>作用：从js程序向顶点和片元着色器传输“一致的”（不变的）数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">声明变量：&lt;存储限定符&gt;&lt;类型&gt;&lt;变量名&gt;</span><br><span class="line">          uniform    vec4  u_FragColor</span><br><span class="line">精度限定词：指定变量的范围和精度</span><br><span class="line">precision mediump float(中等精度)</span><br></pre></td></tr></table></figure>





<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ColoredPoints<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* body &#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            margin:0;</span></span></span><br><span class="line"><span class="comment"><span class="css">            padding:0;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">        Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;ClickedPoints.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ColoredPoints.js</span></span><br><span class="line"><span class="comment">//顶点着色器程序</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_Position=a_Position;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_PointSize=10.0;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;uniform vec4 u_FragColor;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = u_FragColor;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取canvas元素</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取WebGL绘图上下文</span></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>(!gl)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化着色器</span></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl,VSHADER_SOURCE,FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取a_Position变量存储位置</span></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取u_FragColor 变量存储位置</span></span><br><span class="line">    <span class="keyword">var</span> u_FragColor = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_FragColor&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!u_FragColor)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of u_FragColor&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    canvas.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        click(ev,gl,canvas,a_Position,u_FragColor);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定清空&lt;canvas&gt;颜色</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_points = [];</span><br><span class="line"><span class="keyword">var</span> g_colors = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params">ev, gl, canvas, a_Position,u_FragColor</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x= ev.clientX;</span><br><span class="line">    <span class="keyword">var</span> y = ev.clientY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rect = ev.target.getBoundingClientRect();</span><br><span class="line">    x = ((x - rect.left) - canvas.width / <span class="number">2</span>) / (canvas.width / <span class="number">2</span>);</span><br><span class="line">    y = (canvas.height / <span class="number">2</span> - (y - rect.top)) / (canvas.height / <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//将坐标存储到g_points数组中</span></span><br><span class="line">    g_points.push([x, y]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 教程示例</span></span><br><span class="line">    <span class="comment">// if(x &gt;= 0.0 &amp;&amp; y &gt;= 0.0)&#123;  //第一象限</span></span><br><span class="line">    <span class="comment">//     g_colors.push([1.0, 0.0, 0.0, 1.0]);  //红色</span></span><br><span class="line">    <span class="comment">// &#125;else if(x &lt; 0.0 &amp;&amp; y &lt; 0.0)&#123;  //第三象限</span></span><br><span class="line">    <span class="comment">//     g_colors.push([0.0, 1.0, 0.0, 1.0]);  //绿色</span></span><br><span class="line">    <span class="comment">// &#125;else&#123;</span></span><br><span class="line">    <span class="comment">//     g_colors.push([1.0, 1.0, 1.0, 1.0]);  //白色</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改示例</span></span><br><span class="line">    g_colors.push([<span class="built_in">Math</span>.random(), <span class="built_in">Math</span>.random(), <span class="built_in">Math</span>.random(), <span class="built_in">Math</span>.random()])</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> len = g_points.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> xy=g_points[i];</span><br><span class="line">        <span class="keyword">var</span> rgba = g_colors[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将点的位置传递到a_Position变量中</span></span><br><span class="line">        gl.vertexAttrib3f(a_Position, xy[<span class="number">0</span>], xy[<span class="number">1</span>], <span class="number">0.0</span>);</span><br><span class="line">        <span class="comment">//将点的颜色传递到u_FragColor变量中</span></span><br><span class="line">        gl.uniform4f(u_FragColor, rgba[<span class="number">0</span>],  rgba[<span class="number">1</span>], rgba[<span class="number">2</span>], rgba[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制点</span></span><br><span class="line">        gl.drawArrays(gl.POINTS, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/ColorPoints.png" alt="1"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】04-通过鼠标点击绘点_v1</title>
    <url>/04-%E9%80%9A%E8%BF%87%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%BB%98%E7%82%B9_v1-ClickedPoints/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：04-ClickPoint</p>
<p>要点：注册js事件</p>
</blockquote>
<span id="more"></span>

<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol>
<li>为何使用匿名函数？</li>
</ol>
<p>先看示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册鼠标点击事件响应函数(匿名函數)</span></span><br><span class="line">canvas.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    click(event, gl, canvas, a_Position);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>当你要画一个点时，需要传入三个变量（gl、canvas、a_Position），这三个变量是定义在<code>main()</code>函数中的局部变量。</p>
<p>当用户点击鼠标时，浏览器会自动调用注册到<code>&lt;canvas&gt;</code>的ommousedown属性上的函数，并传入<code>event</code>（后面简写为‘e’）参数，通常你会这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">canvas.onmousedown = mousedown	<span class="comment">// 注册响应函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mousedown</span>(<span class="params">e</span>) </span>&#123; ... &#125;<span class="comment">// 接收事件响应参数</span></span><br></pre></td></tr></table></figure>

<p>但是，这样写会出现一个问题，定义在main()函数外部的mousedown()函数就无法获取 main函数中的局部变量，而使用匿名函数就可以解决这个问题。</p>
<p>当用户点击鼠标后，程序先调用匿名函数function(e)，再调用匿名函数中的click()传入参数。</p>
<p>当然，这里也可以使用<code>ES6</code>的箭头函数更加简洁：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">canvas.onmousedown = <span class="function"><span class="params">ev</span> =&gt;</span> click(ev, gl, canvas, a_Position);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>坐标转换</p>
<p>区别：</p>
<p>​    ①**客户区原点(0,0)**：位于浏览器视图区的左上角顶点处</p>
<p>​    ②<strong>canvas原点</strong>：位于绘图区左上角顶点处（…）</p>
<p>​    ③<strong>WebGL原点</strong>：位于绘图区中心点</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取&lt;canvas&gt;在浏览器客户区中的坐标</span></span><br><span class="line"><span class="keyword">var</span> rect = ev.target.getBoundingClientRect();</span><br><span class="line">x = ((x - rect.left) - canvas.height / <span class="number">2</span>) / (canvas.height / <span class="number">2</span>);</span><br><span class="line">y = (canvas.width / <span class="number">2</span> - (y - rect.top)) / (canvas.width / <span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">rect.left：<canvas>原点在客户区中x坐标</th>
<th>使用*{margin:0;padding:0;list-style: none;}清除默认样式后，与客户区原点重和,即(0,0)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">rect.top：<canvas>原点在客户区中y坐标</td>
<td>若不清除默认样式后，canvas原点可能位于(8,8)，仅限博主浏览器测试。</td>
</tr>
<tr>
<td align="left">x</td>
<td>相对于浏览器左上角顶点处的鼠标横轴位置</td>
</tr>
<tr>
<td align="left">y</td>
<td>相对于浏览器左上角顶点处的鼠标纵轴位置</td>
</tr>
<tr>
<td align="left"><strong>x - rect.left：鼠标点击处相对于canvas原点位置</strong></td>
<td>将(x,y)转换成canvas坐标系的坐标</td>
</tr>
<tr>
<td align="left"><strong>y - rect.top：鼠标点击处相对于canvas原点位置</strong></td>
<td>将(x,y)转换成canvas坐标系的坐标</td>
</tr>
<tr>
<td align="left">canvas.height/width</td>
<td>绘图区的宽高</td>
</tr>
<tr>
<td align="left">(canvas.height/width) / 2</td>
<td>绘图区的中心点</td>
</tr>
<tr>
<td align="left">(x - rect.left) - canvas.width / 2</td>
<td>WebGL系统的原点</td>
</tr>
<tr>
<td align="left">canvas.height / 2 - (y - rect.top)</td>
<td>WebGL系统的原点</td>
</tr>
<tr>
<td align="left">((x - rect.left) - canvas.width / 2) / (canvas.width / 2)</td>
<td>将canvas坐标系下的坐标转换为WebGL坐标系中，最终渲染位置</td>
</tr>
<tr>
<td align="left">(canvas.height / 2 - (y - rect.top))</td>
<td>将canvas坐标系下的坐标转换为WebGL坐标系中，最终渲染位置</td>
</tr>
</tbody></table>
<ol start="3">
<li><p>为啥用g_points.push()</p>
<p>因为WebGL系统中的绘制操作实际上是在颜色缓冲区中进行绘制，绘制结束后系统将缓冲区中的内容显示在屏幕上，然后颜色缓冲区就会被重置，其中内容就会丢失。也由此，每次点击后，浏览器会重新绘制之前的并绘制新点击的。</p>
</li>
</ol>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ClickedPoints<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* body &#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            margin:0;</span></span></span><br><span class="line"><span class="comment"><span class="css">            padding:0;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">        Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;ClickedPoints.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ClickedPoints.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_Position=a_Position;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_PointSize=15.0;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取canvas元素</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取WebGL绘图上下文</span></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>(!gl)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化着色器</span></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl,VSHADER_SOURCE,FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取attribute变量存储位置</span></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册鼠标点击事件响应函数(匿名函數)</span></span><br><span class="line">    canvas.onmousedown = <span class="function"><span class="params">ev</span> =&gt;</span> click(ev, gl, canvas, a_Position);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定清空&lt;canvas&gt;颜色</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_points = [];  <span class="comment">// 鼠标点击位置数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params">ev, gl, canvas, a_Position</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x= ev.clientX;  <span class="comment">// 鼠标点击处的x坐标</span></span><br><span class="line">    <span class="keyword">var</span> y = ev.clientY; <span class="comment">// 鼠标点击处的y坐标</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> rect = ev.target.getBoundingClientRect();</span><br><span class="line">    x = ((x - rect.left) - canvas.width / <span class="number">2</span>) / (canvas.width / <span class="number">2</span>);</span><br><span class="line">    y = (canvas.height / <span class="number">2</span> - (y - rect.top)) / (canvas.height / <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将坐标存储到g_points数组中</span></span><br><span class="line">    g_points.push(x);</span><br><span class="line">    g_points.push(y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> len = g_points.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">// 将点的位置传递到变量中</span></span><br><span class="line">        gl.vertexAttrib3f(a_Position, g_points[i], g_points[i+<span class="number">1</span>], <span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制点</span></span><br><span class="line">        gl.drawArrays(gl.POINTS, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h4><p>将计算出来的x、y值以数组方式存入g_points中，简化程序并提高可读性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params">ev, gl, canvas, a_Position</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x= ev.clientX;  <span class="comment">// 鼠标点击处的x坐标</span></span><br><span class="line">    <span class="keyword">var</span> y = ev.clientY; <span class="comment">// 鼠标点击处的y坐标</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> rect = ev.target.getBoundingClientRect();</span><br><span class="line">    x = ((x - rect.left) - canvas.width / <span class="number">2</span>) / (canvas.width / <span class="number">2</span>);</span><br><span class="line">    y = (canvas.height / <span class="number">2</span> - (y - rect.top)) / (canvas.height / <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将坐标存储到g_points数组中</span></span><br><span class="line">    g_points.push([x, y]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> len = g_points.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> xy = g_points[i]</span><br><span class="line">        <span class="comment">// 将点的位置传递到变量中</span></span><br><span class="line">        gl.vertexAttrib3f(a_Position, xy[<span class="number">0</span>], xy[<span class="number">1</span>], <span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制点</span></span><br><span class="line">        gl.drawArrays(gl.POINTS, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/ClickPoints-v1.png" alt="1"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】06-绘制三个点</title>
    <url>/06-%E7%BB%98%E5%88%B6%E4%B8%89%E4%B8%AA%E7%82%B9-MultiPoints/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：06-MultiPoints</p>
<p>要点：缓冲区对象、gl.drawArrays、缓冲区对象向着色器传入多个顶点的数据的5个步骤</p>
<p>复习：<a href="https://freepiao.cn/2021/07/24/HelloPoint-v2/">03-绘制一个点_v2_attribute变量</a></p>
</blockquote>
<span id="more"></span>

<h4 id="绘制步骤"><a href="#绘制步骤" class="headerlink" title="绘制步骤"></a>绘制步骤</h4><p>获取WebGL上下文 <code>→</code> 初始化着色器 <code>→</code> <strong>设置点的坐标信息</strong> <code>→</code> 设置<code>&lt;canvas&gt;</code>背景色 <code>→</code> 清空<code>&lt;canvas&gt;</code> <code>→</code> 绘制</p>
<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="一、缓冲区对象"><a href="#一、缓冲区对象" class="headerlink" title="一、缓冲区对象"></a>一、缓冲区对象</h5><p>​    作用：可以一次性地向着色器传入多个顶点的数据。</p>
<p>​    本质：是WebGL系统中的的一块内存区域。</p>
<h5 id="二、initVertexBuffers-gl"><a href="#二、initVertexBuffers-gl" class="headerlink" title="二、initVertexBuffers(gl)"></a>二、initVertexBuffers(gl)</h5><p>​    作用：创建顶点缓冲区对象，并将多个顶点的数据保存在缓冲区中，然后将缓冲区传给顶点着色器.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.5</span>, </span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">0.5</span>, </span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">0.5</span></span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!vertexBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.连接a_Postion变量与分配给它的缓冲区对象(开启attribute变量)</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="三、缓冲区对象向着色器传入多个顶点的数据的5个步骤"><a href="#三、缓冲区对象向着色器传入多个顶点的数据的5个步骤" class="headerlink" title="三、缓冲区对象向着色器传入多个顶点的数据的5个步骤"></a>三、缓冲区对象向着色器传入多个顶点的数据的5个步骤</h5><h6 id="1-创建缓冲区对象"><a href="#1-创建缓冲区对象" class="headerlink" title="1.创建缓冲区对象"></a>1.创建缓冲区对象</h6><table>
<thead>
<tr>
<th>gl.createBuffer()</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>返回值</td>
<td>非null：新创建的缓冲区对象</td>
<td>null：创建失败</td>
</tr>
<tr>
<td>ERROR</td>
<td>/</td>
<td></td>
</tr>
</tbody></table>
<p>​    补充：</p>
<table>
<thead>
<tr>
<th>gl.deleteBuffer(Buffer)</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>参数</td>
<td>buffer：待删除的的缓冲区对象</td>
</tr>
<tr>
<td>返回值</td>
<td>/</td>
</tr>
</tbody></table>
<h6 id="2-将缓冲区对象保存到目标上"><a href="#2-将缓冲区对象保存到目标上" class="headerlink" title="2.将缓冲区对象保存到目标上"></a>2.将缓冲区对象保存到目标上</h6><table>
<thead>
<tr>
<th>gl.bindBuffer(target, buffer)</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>参数</td>
<td>target（gl.ARRAY_BUFFER表示缓冲区对象中包含了顶点的数据 / gl.ELEMENT_ARRAT_BUFFER表示缓冲区对象中包含了顶点的索引值）</td>
<td>buffer：由gl.createBuffer()创建的缓冲区对象</td>
</tr>
<tr>
<td>返回值</td>
<td>/</td>
<td></td>
</tr>
<tr>
<td>错误</td>
<td>INVALID_ENUM：target不是上述值之一</td>
<td></td>
</tr>
</tbody></table>
<p>​    注解：</p>
<p>​        ①gl.ARRAY_BUFFER，缓冲区对象存储者关于顶点的数据（顶点的位置坐标）</p>
<h6 id="3-向缓存对象写入数据"><a href="#3-向缓存对象写入数据" class="headerlink" title="3.向缓存对象写入数据"></a>3.向缓存对象写入数据</h6><table>
<thead>
<tr>
<th>gl.bufferData(target, data, usage)</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>参数</td>
<td>target（gl.ARRAY_BUFFER / gl.ELEMENT_ARRAT_BUFFER）</td>
<td>data：写入缓冲区对象的数据</td>
<td>usage：程序将如何使用存储在缓冲区对象中的数据</td>
</tr>
<tr>
<td>返回值</td>
<td>/</td>
<td></td>
<td></td>
</tr>
<tr>
<td>错误</td>
<td>INVALID_ENUM：target不是上述值之一</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>​    注解：</p>
<p>​        ①usage值：</p>
<p>​            gl.STATIC_DRAW：只会向缓冲区对象中写入一次数据，但需要绘制很多次</p>
<p>​            gl.STREAM_DRAW：只会向缓冲区对象中写入一次数据，然后绘制若干次</p>
<p>​            gl.DYNAMIC_DRAW：会向缓冲区对象中写入多次数据，并绘制很多次</p>
<p>​        ②Float32Array()：通常用来存储顶点坐标或颜色数据，类型化数组，解决了js一般Array数组存储类型杂乱问题，不支持pop、push方法，且只能使用new运算符创建，不能使用<code>[]</code></p>
<p>​    常见类型化数组：</p>
<table>
<thead>
<tr>
<th align="center">数组类型</th>
<th align="center">每个元素所占字节数</th>
<th align="center">描述（c语言中的数据类型）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Int8Array</td>
<td align="center">1</td>
<td align="center">8位整型数</td>
</tr>
<tr>
<td align="center">UInt8Array</td>
<td align="center">1</td>
<td align="center">8位无符号整型数</td>
</tr>
<tr>
<td align="center">Int16Array</td>
<td align="center">2</td>
<td align="center">16位整型数</td>
</tr>
<tr>
<td align="center">UInt16Array</td>
<td align="center">2</td>
<td align="center">16位无符号整型数</td>
</tr>
<tr>
<td align="center">Int32Array</td>
<td align="center">4</td>
<td align="center">32位整型数</td>
</tr>
<tr>
<td align="center">UInt32Array</td>
<td align="center">4</td>
<td align="center">32位无符号整型数</td>
</tr>
<tr>
<td align="center">Float32Array</td>
<td align="center">4</td>
<td align="center">单精度32位浮点数</td>
</tr>
<tr>
<td align="center">Float64Array</td>
<td align="center">8</td>
<td align="center">双精度64位浮点数</td>
</tr>
</tbody></table>
<h6 id="4-将缓冲区对象分配给a-Postion变量"><a href="#4-将缓冲区对象分配给a-Postion变量" class="headerlink" title="4.将缓冲区对象分配给a_Postion变量"></a>4.将缓冲区对象分配给a_Postion变量</h6><p><code>gl.vertexAttribPointer(location, size, type, normalized, stride, offset);</code></p>
<ul>
<li><p><strong>参数1：location</strong><br>指定要修改的顶点属性的索引。（a_Position）</p>
</li>
<li><p><strong>参数2：size</strong><br>指定每个顶点属性的组成数量，必须是1，2，3或4。</p>
</li>
<li><p><strong>参数3：type</strong><br>指定数组中每个元素的数据类型可能是：</p>
<ul>
<li><p><code>gl.BYTE</code>: signed 8-bit integer, with values in [-128, 127]<br>有符号的8位整数，范围[-128, 127]</p>
</li>
<li><p><code>gl.SHORT</code>: signed 16-bit integer, with values in [-32768, 32767]<br>有符号的16位整数，范围[-32768, 32767]</p>
</li>
<li><p><code>gl.UNSIGNED_BYTE</code>: unsigned 8-bit integer, with values in [0, 255]<br>无符号的8位整数，范围[0, 255]</p>
</li>
<li><p><code>gl.UNSIGNED_SHORT</code>: unsigned 16-bit integer, with values in [0, 65535]<br>无符号的16位整数，范围[0, 65535]</p>
</li>
<li><p><code>gl.FLOAT</code>: 32-bit IEEE floating point number<br>32位IEEE标准的浮点数</p>
</li>
<li><p>使用WebGL2版本的还可以使用以下值：</p>
<ul>
<li><code>gl.HALF_FLOAT</code>: 16-bit IEEE floating point number<br>16位IEEE标准的浮点数</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>参数4：normalized</strong><br>当转换为浮点数时是否应该将整数数值归一化到特定的范围（true/false）。</p>
<ul>
<li>For types <code>gl.BYTE</code> and <code>gl.SHORT</code>, normalizes the values to [-1, 1] if <strong>true</strong>.<br>对于类型<code>gl.BYTE</code>和<code>gl.SHORT</code>，如果是true则将值归一化为[-1, 1]</li>
<li>For types <code>gl.UNSIGNED_BYTE</code> and <code>gl.UNSIGNED_SHORT</code>, normalizes the values to [0, 1] if true.<br>对于类型<code>gl.UNSIGNED_BYTE</code>和<code>gl.UNSIGNED_SHORT</code>，如果是true则将值归一化为[0, 1]</li>
<li>For types <code>gl.FLOAT</code> and <code>gl.HALF_FLOAT</code>, this parameter has no effect.<br>对于类型<code>gl.FLOAT</code>和<code>gl.HALF_FLOAT</code>，此参数无效</li>
</ul>
</li>
<li><p><strong>参数5：stride</strong></p>
<p>指定相邻两个顶点间的字节数，默认为0.</p>
<p>一个GLsizei，以字节为单位指定连续顶点属性开始之间的偏移量(即数组中一行长度)。不能大于255。如果stride为0，则假定该属性是紧密打包的，即不交错属性，每个属性在一个单独的块中，下一个顶点的属性紧跟当前顶点之后。</p>
</li>
<li><p><strong>参数6：offset</strong></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Types"><code>GLintptr</code> (en-US)</a>指定顶点属性数组中第一部分的字节偏移量。即attribute变量从缓冲区何处开始存储。必须是类型的字节长度的倍数。</p>
</li>
</ul>
<h6 id="5-连接a-Postion变量与分配给它的缓冲区对象-开启attribute变量"><a href="#5-连接a-Postion变量与分配给它的缓冲区对象-开启attribute变量" class="headerlink" title="5.连接a_Postion变量与分配给它的缓冲区对象(开启attribute变量)"></a>5.连接a_Postion变量与分配给它的缓冲区对象(开启attribute变量)</h6><p>​    <code>gl.enableVertexAttribArray(a_Position)</code></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>location：指定attribute变量的存储位置</th>
</tr>
</thead>
<tbody><tr>
<td>返回值</td>
<td>/</td>
</tr>
<tr>
<td>错误</td>
<td>INVALID_VALUE</td>
</tr>
</tbody></table>
<p>​    关闭分配：</p>
<p>​    <code>gl.disableVertexAttribArray(a_Position)</code></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>location：指定attribute变量的存储位置</th>
</tr>
</thead>
<tbody><tr>
<td>返回值</td>
<td>/</td>
</tr>
<tr>
<td>错误</td>
<td>INVALID_VALUE</td>
</tr>
</tbody></table>
<h5 id="四、gl-drawArrays-gl-POINTS-first-count"><a href="#四、gl-drawArrays-gl-POINTS-first-count" class="headerlink" title="四、gl.drawArrays(gl.POINTS, first, count)"></a>四、gl.drawArrays(gl.POINTS, first, count)</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">作用：执行顶点着色器，按照mode参数指定的方式绘制图形</span><br><span class="line">参数：</span><br><span class="line">	mode，指定绘制的方式（gl.POINTS/gl.LINES/gl.LINE_STRIP/gl.LINE_LOOP/gl.TRIANGLES/gl.TRIANGLE_STRIP/gl.TRIANGLE_FAN）。</span><br><span class="line">	first, 指定从那个顶点开始绘制（整数型），<span class="number">0</span>表示从第一个顶点开始画起。</span><br><span class="line">	count, 指定绘制需要多少个顶点（整数型），顶点着色器执行的次数，每次处理一个顶点。执行完后，片元着色器开始执行</span><br><span class="line">返回值：无</span><br><span class="line">错误：/</span><br></pre></td></tr></table></figure>

<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>setPoint<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">     Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;MultiPoints.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MultiPoints.js</span></span><br><span class="line"><span class="comment">// 顶点着色器程序</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_Position=a_Position;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_PointSize=10.0;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取canvas元素</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取WebGL绘图上下文</span></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>(!gl)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化着色器</span></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl,VSHADER_SOURCE,FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定清空&lt;canvas&gt;颜色</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制三个点</span></span><br><span class="line">    gl.drawArrays(gl.POINTS, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.5</span>, </span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">0.5</span>, </span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">0.5</span></span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!vertexBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// attribute变量的存储位置</span></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.连接a_Postion变量与分配给它的缓冲区对象(开启attribute变量)</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/MultiPoints.png" alt="1"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】07-绘制三角形</title>
    <url>/07-%E7%BB%98%E5%88%B6%E4%B8%89%E8%A7%92%E5%BD%A2-HelloTriangle/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：07-HelloTriangle</p>
<p>要点：缓冲区对象、gl.drawArrays</p>
<p>复习：<a href="https://freepiao.cn/2021/07/25/MultiPoints/">【WebGL之巅】06-绘制三个点</a></p>
<p>参考：《WebGL编程指南》p82~84讲解</p>
</blockquote>
<span id="more"></span>



<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>set first triangle<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">     Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;HelloTriangle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HelloTriangle.js</span></span><br><span class="line"><span class="comment">// 顶点着色器程序</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_Position=a_Position;&#x27;</span>+</span><br><span class="line">        <span class="comment">// &#x27;gl_PointSize=10.0;&#x27;+   // 修改1 绘制单个点时起作用</span></span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">    	<span class="string">&#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取canvas元素</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取WebGL绘图上下文</span></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>(!gl)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化着色器</span></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl,VSHADER_SOURCE,FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定清空&lt;canvas&gt;颜色</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改2 绘制三角形 </span></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);     <span class="comment">// 三角形</span></span><br><span class="line">    <span class="comment">// gl.drawArrays(gl.LINE_LOOP, 0, n);  // 三角框</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span></span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">// 点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!vertexBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/HelloTriangle01.png" alt="1"></p>
<p><img src="/images/HelloTriangle02.png" alt="2"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】08-绘制一个矩形</title>
    <url>/08-%E7%BB%98%E5%88%B6%E4%B8%80%E4%B8%AA%E7%9F%A9%E5%BD%A2-HelloRectangle/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：08-HelloRectangle</p>
<p>要点：缓冲区对象、gl.drawArrays()参数</p>
<p>复习：<a href="https://freepiao.cn/2021/07/25/HelloTriangle/">【WebGL之巅】07-绘制三角形</a></p>
</blockquote>
<span id="more"></span>

<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HelloRectangle.js</span></span><br><span class="line"><span class="comment">// 顶点着色器程序</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;gl_Position=a_Position;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取canvas元素</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取WebGL绘图上下文</span></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>(!gl)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化着色器</span></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl,VSHADER_SOURCE,FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定清空&lt;canvas&gt;颜色</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制4个点</span></span><br><span class="line">    <span class="comment">// gl.drawArrays(gl.TRIANGLE_STRIP, 0, n);  // 矩形</span></span><br><span class="line">    gl.drawArrays(gl.LINE_LOOP, <span class="number">0</span>, n);  <span class="comment">// 矩形框</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">        <span class="comment">// -0.5, 0.5, -0.5, -0.5, 0.5, 0.5, 0.5, -0.5 // 矩形</span></span><br><span class="line">        -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span> <span class="comment">// 矩形框</span></span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">4</span>; <span class="comment">// 点的个数+1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!vertexBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/HelloRectangle01.png" alt="1"></p>
<p><img src="/images/HelloRectangle02.png" alt="2"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】09-仿射变换之平移三角形</title>
    <url>/09-%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2%E4%B9%8B%E5%B9%B3%E7%A7%BB%E4%B8%89%E8%A7%92%E5%BD%A2-TranslatedTriangle/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：10-TranslatedTriangle</p>
<p>要点：平移变换、gl.uniform4f()、gl.getUniformLocation()、矢量的加法</p>
</blockquote>
<span id="more"></span>

<h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>将一个三角形向上和向右平移0.5个单位</p>
<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="一、逐顶点操作"><a href="#一、逐顶点操作" class="headerlink" title="一、逐顶点操作"></a>一、逐顶点操作</h5><p>​    为顶点坐标的每个分量加上一个常量就可以实现</p>
<h5 id="二、矢量的加法"><a href="#二、矢量的加法" class="headerlink" title="二、矢量的加法"></a>二、矢量的加法</h5><p>​    方便的矢量相加运算是GLSL ES提供的特性之一</p>
<table>
<thead>
<tr>
<th>矢量</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>vec4 a_Position</td>
<td>(x1, y1, z1, w1)</td>
</tr>
<tr>
<td>vec4 u_Translation</td>
<td>(x2, y2, z2, w2)</td>
</tr>
<tr>
<td>answer</td>
<td>(x1+x2, y1+y2, z1+z2, w1+w2)</td>
</tr>
</tbody></table>
<p>​    注意：这里的w2必须等于0.0，因为齐次坐标的最后一位为1.0，那么前三个分量才表示一个三维坐标</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>set first triangle<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">     Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;TranslatedTriangle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TranslatedTriangle.js</span></span><br><span class="line"><span class="comment">//顶点着色器程序</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;uniform vec4 u_Translations;\n&#x27;</span> +    <span class="comment">// 接收平移变量 </span></span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_Position=a_Position + u_Translations;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Tx = <span class="number">0.5</span>, Ty = <span class="number">0.5</span>, Tz = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取canvas元素</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取WebGL绘图上下文</span></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>(!gl)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化着色器</span></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl,VSHADER_SOURCE,FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将平移距离传给顶点着色器</span></span><br><span class="line">    <span class="keyword">var</span> u_Translation = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_Translations&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    gl.uniform4f(u_Translation, Tx, Ty, Tz, <span class="number">0.0</span>);   <span class="comment">// 第4分量必须是0.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定清空&lt;canvas&gt;颜色</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制三个点</span></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span></span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!vertexBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/TranslatedTriangle.png" alt="1"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】10-仿射变换之旋转三角形</title>
    <url>/10-%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2%E4%B9%8B%E6%97%8B%E8%BD%AC%E4%B8%89%E8%A7%92%E5%BD%A2-RotatedTriangle/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：11-RotatedTriangle</p>
<p>要点：旋转变换、gl.uniform4f()、gl.getUniformLocation()、矢量的加法</p>
</blockquote>
<span id="more"></span>

<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>目的：将三角形逆时针旋转90度</p>
<p>计算90度的正余弦值 → 传给顶点着色器uniform变量</p>
<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="一、正旋转"><a href="#一、正旋转" class="headerlink" title="一、正旋转"></a>一、正旋转</h5><p>​    ①描述旋转操作：绕Z轴，逆时针旋转β角度。</p>
<p>​    ②关于“逆时针”的约定：如果β是正值，观察者在Z轴正半轴某处，<strong>视线沿着Z轴负方向</strong>观察，看到的物体是逆时针旋转的，称为为正旋转。同时满足<strong>右手法则旋转</strong>（右手握拳，大拇指指向旋转轴的正方向，其余手指的方向就是旋转的方向。）</p>
<h5 id="二、角度计算"><a href="#二、角度计算" class="headerlink" title="二、角度计算"></a>二、角度计算</h5><p>$x’ = x<em>cosβ - y</em>sinβ$</p>
<p>$y’ = x<em>sinβ + y</em>cosβ$</p>
<p>$z’ = z$</p>
<p>代码实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;uniform float u_CosB, u_SinB;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;gl_Position.x = a_Position.x * u_CosB - a_Position.y * u_SinB;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;gl_Position.y = a_Position.x * u_SinB + a_Position.y * u_CosB;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;gl_Position.z = a_Position.z;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;gl_Position.w = 1.0;\n&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>角度转弧度制（三角函数的计算一般是用弧度计算）：<code>弧度 = π*角度/180°</code>，单位：rad</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> radian = <span class="built_in">Math</span>.PI * ANGLE / <span class="number">180.0</span>;   <span class="comment">// 转为弧度制（πβ/180°）= π/2</span></span><br><span class="line"><span class="keyword">var</span> cosB = <span class="built_in">Math</span>.cos(radian); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">var</span> sinB = <span class="built_in">Math</span>.sin(radian); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(cosB, sinB) <span class="comment">// 6.123233995736766e-17 1</span></span><br></pre></td></tr></table></figure>

<h5 id="三、a-Position的分量访问"><a href="#三、a-Position的分量访问" class="headerlink" title="三、a_Position的分量访问"></a>三、a_Position的分量访问</h5><p>vec4 a_Position = (x, y, z, w)</p>
<p>可用 a_Position.x、a_Position.y来访问</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>rotate triangle<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">    Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;RotatedTriangle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by hushhw on 17/12/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//RotatedTriangle.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="comment">//x&#x27; = x cos b - y sin b</span></span><br><span class="line">    <span class="comment">//y&#x27; = x sin b + y cosb</span></span><br><span class="line">    <span class="comment">//z&#x27; = z</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform float u_CosB, u_SinB;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position.x = a_Position.x * u_CosB - a_Position.y * u_SinB;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position.y = a_Position.x * u_SinB + a_Position.y * u_CosB;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position.z = a_Position.z;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position.w = 1.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转角度 </span></span><br><span class="line"><span class="keyword">var</span> ANGLE = <span class="number">90.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>(!gl)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl,VSHADER_SOURCE,FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 角度计算</span></span><br><span class="line">    <span class="keyword">var</span> radian = <span class="built_in">Math</span>.PI * ANGLE / <span class="number">180.0</span>;   <span class="comment">// 转为弧度制（πβ/180°）</span></span><br><span class="line">    <span class="keyword">var</span> cosB = <span class="built_in">Math</span>.cos(radian);</span><br><span class="line">    <span class="keyword">var</span> sinB = <span class="built_in">Math</span>.sin(radian);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_CosB = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_CosB&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(u_CosB &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of u_CosB&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_SinB = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_SinB&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(u_SinB &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of u_SinB&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 赋值给uniform变量</span></span><br><span class="line">    gl.uniform1f(u_CosB, cosB);</span><br><span class="line">    gl.uniform1f(u_SinB, sinB);</span><br><span class="line"></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [<span class="number">0.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!vertexBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/RotatedTriangle.png" alt="1"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】11-使用Matrix变换矩阵实现三角形旋转、平移、缩放</title>
    <url>/11-%E4%BD%BF%E7%94%A8Matrix%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2%E6%97%8B%E8%BD%AC%E3%80%81%E5%B9%B3%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE-RotatedTriangle-Matrix/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：12-RotatedTriangle_Matrix</p>
<p>要点：矩阵和矢量的乘法、矩阵变换（旋转矩阵、平移矩阵、缩放矩阵）、gl.uniformMatrix4fv</p>
</blockquote>
<span id="more"></span>

<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="一、矩阵和矢量的乘法"><a href="#一、矩阵和矢量的乘法" class="headerlink" title="一、矩阵和矢量的乘法"></a>一、矩阵和矢量的乘法</h5><p>矩阵示例：</p>
<p>​    $<br>\begin{bmatrix}<br>​    8 &amp; 3 &amp; 0 \\<br>​    4 &amp; 3 &amp; 6 \\<br>​    3 &amp; 2 &amp; 6<br>\end{bmatrix}<br>$​</p>
<p>矩阵相乘：</p>
<p>​    $<br>\begin{bmatrix}<br>​    x’  \\<br>​    y’  \\<br>​    z’<br>\end{bmatrix}<br> = $$<br>\begin{bmatrix}<br>​    a &amp; b &amp; c \\<br>​    d &amp; e &amp; f \\<br>​    g &amp; h &amp; i<br>\end{bmatrix}<br>$ * $<br>\begin{bmatrix}<br>​    x  \\<br>​    y  \\<br>​    z<br>\end{bmatrix}$</p>
<p>结果：</p>
<p>$  \begin{cases} x’ = ax + by + cz \\ y’ = dx + ey + fz \\ z’ = gx + hy + iz \end{cases} $​​</p>
<p>注意：只有在矩阵列数与矢量的行数相等时才能相乘，且不满足交换律</p>
<h5 id="二、变换矩阵：旋转"><a href="#二、变换矩阵：旋转" class="headerlink" title="二、变换矩阵：旋转"></a>二、变换矩阵：旋转</h5><p>对比上一节计算角度变换的公式：</p>
<p>$  \begin{cases} x’ = xcosβ - ysinβ \\ y’ = xsinβ + ycosβ \\ z’ = z \end{cases} $</p>
<p>这里假设 </p>
<p>$  \begin{cases} a = cosβ, b = -sinβ, c = 0 \\ d = sinβ, e = cosβ, f = 0 \\ g = 0, h = 0, i = 1 \end{cases} $</p>
<p>那么此时矩阵的乘法就可以变成：</p>
<p>​    $<br>\begin{bmatrix}<br>​    x’  \\<br>​    y’  \\<br>​    z’<br>\end{bmatrix}<br> = $$<br>\begin{bmatrix}<br>​    cosβ &amp; -sinβ &amp; 0 \\<br>​    sinβ &amp; cosβ &amp; 0 \\<br>​    0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$ * $<br>\begin{bmatrix}<br>​    x  \\<br>​    y  \\<br>​    z<br>\end{bmatrix}$</p>
<p>这个矩阵就被称为<strong>变换矩阵</strong>，将（x, y, z）变换成（x’, y’, z’），这个矩阵又可以称为<strong>旋转矩阵</strong></p>
<p>接下来就是代码中的变换矩阵：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xformMatrix = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">    [</span><br><span class="line">        cosB, sinB, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">        -sinB, cosB, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span></span><br><span class="line">    ]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u_xformMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_xformMatrix&#x27;</span>);</span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">gl.uniformMatrix4fv(u_xformMatrix, <span class="literal">false</span>, xformMatrix);</span><br></pre></td></tr></table></figure>

<h5 id="三、变换矩阵：平移"><a href="#三、变换矩阵：平移" class="headerlink" title="三、变换矩阵：平移"></a>三、变换矩阵：平移</h5><p>对比一般平移计算公式：</p>
<p>​    $x’ = ax+by+cz$</p>
<p>​    $x’ = x + Tx$     (一般方法)</p>
<p>分析：这里的<code>Tx</code>是一个常量，但是第一个等式中没有常量，意味着3X3的矩阵无法表示平移，所有这里使用4X4矩阵，以及具有第4个分量的矢量（通常设为1.0），也就是说，假设要进行平移的点<code>p(x, y, z, 1)</code>，平移后坐标为<code>p&#39;(x&#39;, y&#39;, z&#39;, 1)</code>，如下等式：</p>
<p>$<br>\begin{bmatrix}<br>    x’  \\<br>    y’  \\<br>    z’  \\<br>    1<br>\end{bmatrix}<br> = $$<br>\begin{bmatrix}<br>    a &amp; b &amp; c &amp; d \\<br>    e &amp; f &amp; g &amp; h \\<br>    i &amp; j &amp; k &amp; l \\<br>    m &amp; n &amp; o &amp; p<br>\end{bmatrix}<br>$​ * $<br>\begin{bmatrix}<br>    x  \\<br>    y  \\<br>    z  \\<br>    1<br>\end{bmatrix}$​​​​</p>
<p>结果如下：</p>
<p>$  \begin{cases} x’ = ax + by + cz + d \\ y’ = ex + fy + gz + h \\ z’ = ix + jy + kz + l \\ 1 = mx + ny + oz + p \end{cases} $​</p>
<p>根据式子$1 = mx + ny + oz + p$​​，计算出$m=0，n=0，o=0，p=1$​​，其中d、h、lp均为常数​，比较等式：</p>
<p>$  \begin{cases} x’ = x + Tx \\ y’ = y + Ty \\ z’ = z + Tz \end{cases} $</p>
<p>得出<strong>平移矩阵</strong></p>
<p>$<br>\begin{bmatrix}<br>    x’  \\<br>    y’  \\<br>    z’  \\<br>    1<br>\end{bmatrix}<br> = $$<br>\begin{bmatrix}<br>    1 &amp; 0 &amp; 0 &amp; Tx \\<br>    0 &amp; 1 &amp; 0 &amp; Ty \\<br>    0 &amp; 0 &amp; 1 &amp; Tz \\<br>    0 &amp; 0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$​ * $<br>\begin{bmatrix}<br>    x  \\<br>    y  \\<br>    z  \\<br>    1<br>\end{bmatrix}$​​</p>
<p>程序示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xformMatrix = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">            <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">            Tx, Ty, Tz, <span class="number">1.0</span></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u_xformMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_xformMatrix&#x27;</span>);</span><br><span class="line">gl.uniformMatrix4fv(u_xformMatrix, <span class="literal">false</span>, xformMatrix);</span><br></pre></td></tr></table></figure>

<h5 id="四、4x4旋转矩阵——先旋转再平移"><a href="#四、4x4旋转矩阵——先旋转再平移" class="headerlink" title="四、4x4旋转矩阵——先旋转再平移"></a>四、4x4旋转矩阵——先旋转再平移</h5><p>分析：要达到先旋转再平移的效果，需要将两个矩阵组合起来，而旋转矩阵（3x3）与平移矩阵（4x4）的阶数不同，需要某种手段使两者阶数一致</p>
<p>将3x3阶矩阵转换为4X4阶矩阵，可以比较：</p>
<p>$  \begin{cases} x’ = xcosβ - ysinβ \\ y’ = xsinβ + ycosβ \\ z’ = z \end{cases} 与$​ $  \begin{cases} x’ = ax + by + cz + d \\ y’ = ex + fy + gz + h \\ z’ = ix + jy + kz + l \\ 1 = mx + ny + oz + p \end{cases} $</p>
<p>可知，例如两者x’表达式中，令a=cosβ，b=-sinβ，c=0，d=0即可相等，以此类推解出y’、z’中的系数，得出<strong>4x4的旋转矩阵</strong>:</p>
<p>$<br>\begin{bmatrix}<br>    x’  \\<br>    y’  \\<br>    z’  \\<br>    1<br>\end{bmatrix}<br> = $$<br>\begin{bmatrix}<br>    cosβ &amp; -sinβ &amp; 0 &amp; 0 \\<br>    sinβ &amp; cosβ &amp; 0 &amp; 0 \\<br>    0 &amp; 0 &amp; 1 &amp; 0 \\<br>    0 &amp; 0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$​​ * $<br>\begin{bmatrix}<br>    x  \\<br>    y  \\<br>    z  \\<br>    1<br>\end{bmatrix}$​​</p>
<h5 id="五、变换矩阵：缩放"><a href="#五、变换矩阵：缩放" class="headerlink" title="五、变换矩阵：缩放"></a>五、变换矩阵：缩放</h5><p>仍然假设最初的点p(x, y, z)，缩放过后的点p’(x’, y’, z’)，假设缩放因子Sx，Sy，Sz，那么有</p>
<p>$  \begin{cases} x’ = Sx * x \\ y’ = Sy * y \\ z’ = Sz * z \end{cases} $   与等式   $  \begin{cases} x’ = ax + by + cz + d \\ y’ = ex + fy + gz + h \\ z’ = ix + jy + kz + l \\ 1 = mx + ny + oz + p \end{cases} $​    比较</p>
<p>可知<strong>缩放矩阵</strong>如下：</p>
<p>$<br>\begin{bmatrix}<br>    x’  \\<br>    y’  \\<br>    z’  \\<br>    1<br>\end{bmatrix}<br> = $​$<br>\begin{bmatrix}<br>    Sx &amp; 0 &amp; 0 &amp; 0 \\<br>    0 &amp; Sy &amp; 0 &amp; 0 \\<br>    0 &amp; 0 &amp; Sz &amp; 0 \\<br>    0 &amp; 0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$​​ * $<br>\begin{bmatrix}<br>    x  \\<br>    y  \\<br>    z  \\<br>    1<br>\end{bmatrix}$​​</p>
<h5 id="六、gl-uniformMatrix4fv-location-transpose-array"><a href="#六、gl-uniformMatrix4fv-location-transpose-array" class="headerlink" title="六、gl.uniformMatrix4fv(location, transpose, array);"></a>六、gl.uniformMatrix4fv(location, transpose, array);</h5><p>作用：将array表示的4x4矩阵分配给location指定的uniform变量</p>
<p>参数：</p>
<p>​    location：uniform变量的存储位置</p>
<p>​    transpose：表示是否转置矩阵，在webGl中必须设置为false</p>
<p>​    array：待传输的类型化数组（按列主序的4x4矩阵）</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="固定代码"><a href="#固定代码" class="headerlink" title="固定代码"></a>固定代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>rotate triangle<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">    Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;RotatedTriangle_Matrix.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [<span class="number">0.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!vertexBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4x4旋转"><a href="#4x4旋转" class="headerlink" title="4x4旋转"></a>4x4旋转</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="comment">//x&#x27; = x cos b - y sin b</span></span><br><span class="line">    <span class="comment">//y&#x27; = x sin b + y cosb</span></span><br><span class="line">    <span class="comment">//z&#x27; = z</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_xformMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position = u_xformMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ANGLE = <span class="number">90.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>(!gl)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl,VSHADER_SOURCE,FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 角度转弧度制</span></span><br><span class="line">    <span class="keyword">var</span> radian = <span class="built_in">Math</span>.PI * ANGLE / <span class="number">180.0</span>;</span><br><span class="line">    <span class="keyword">var</span> cosB = <span class="built_in">Math</span>.cos(radian);</span><br><span class="line">    <span class="keyword">var</span> sinB = <span class="built_in">Math</span>.sin(radian);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xformMatrix = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">            cosB, sinB, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">            -sinB, cosB, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_xformMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_xformMatrix&#x27;</span>);</span><br><span class="line">	<span class="comment">// 将旋转矩阵传输给顶点着色器</span></span><br><span class="line">    gl.uniformMatrix4fv(u_xformMatrix, <span class="literal">false</span>, xformMatrix);</span><br><span class="line"></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="分析代码1：顶点着色器——-’uniform-mat4-u-xformMatrix-n’"><a href="#分析代码1：顶点着色器——-’uniform-mat4-u-xformMatrix-n’" class="headerlink" title="分析代码1：顶点着色器——*’uniform mat4 u_xformMatrix;\n’*"></a>分析代码1：顶点着色器——*’uniform mat4 u_xformMatrix;\n’*</h6><p>​    u_xformMatrix：旋转矩阵</p>
<p>​    a_Position：顶点坐标，即4x4旋转矩阵右侧矢量</p>
<p>​    mat4类型：表示4x4的矩阵变量</p>
<h6 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h6><p><img src="/images/RotatedTriangle_Matrix01.png" alt="1"></p>
<h5 id="4x4平移矩阵"><a href="#4x4平移矩阵" class="headerlink" title="4x4平移矩阵"></a>4x4平移矩阵</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="comment">//x&#x27; = x cos b - y sin b</span></span><br><span class="line">    <span class="comment">//y&#x27; = x sin b + y cosb</span></span><br><span class="line">    <span class="comment">//z&#x27; = z</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_xformMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    	<span class="string">&#x27;gl_Position = u_xformMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">    	<span class="string">&#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Tx = <span class="number">0.5</span>, Ty = <span class="number">0.5</span>, Tz = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl,VSHADER_SOURCE,FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xformMatrix = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">            <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">            Tx, Ty, Tz, <span class="number">1.0</span></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_xformMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_xformMatrix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    gl.uniformMatrix4fv(u_xformMatrix, <span class="literal">false</span>, xformMatrix);</span><br><span class="line"></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="分析代码2："><a href="#分析代码2：" class="headerlink" title="分析代码2："></a>分析代码2：</h6><p>​    这是我们计算出的平移矩阵：</p>
<p>$<br>\begin{bmatrix}<br>    x’  \\<br>    y’  \\<br>    z’  \\<br>    1<br>\end{bmatrix}<br> = $$<br>\begin{bmatrix}<br>    1 &amp; 0 &amp; 0 &amp; Tx \\<br>    0 &amp; 1 &amp; 0 &amp; Ty \\<br>    0 &amp; 0 &amp; 1 &amp; Tz \\<br>    0 &amp; 0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$ * $<br>\begin{bmatrix}<br>    x  \\<br>    y  \\<br>    z  \\<br>    1<br>\end{bmatrix}$</p>
<p>​    然而，JavaScript只能定义数组，没有表示矩阵的类型，数组只是一维，其元素只能排成一行，而矩阵是多维。这里，有两种方式来存储矩阵元素：<strong>按行主序</strong>和<strong>按列主序</strong></p>
<p>​    WebGL与OpenGL都是采用<strong>按列主序</strong>的方式来存储矩阵：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xformMatrix = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">    [</span><br><span class="line">        <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">        Tx, Ty, Tz, <span class="number">1.0</span></span><br><span class="line">    ]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h6 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h6><p><img src="/images/RotatedTriangle_Matrix02.png" alt="2"></p>
<h5 id="4x4缩放矩阵"><a href="#4x4缩放矩阵" class="headerlink" title="4x4缩放矩阵"></a>4x4缩放矩阵</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变换矩阵缩放</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="comment">//x&#x27; = x cos b - y sin b</span></span><br><span class="line">    <span class="comment">//y&#x27; = x sin b + y cosb</span></span><br><span class="line">    <span class="comment">//z&#x27; = z</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_xformMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;gl_Position = u_xformMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Sx = <span class="number">1.5</span>, Sy = <span class="number">1.7</span>, Sz = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>(!gl)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl,VSHADER_SOURCE,FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xformMatrix = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">            Sx, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>, Sy, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>, <span class="number">0.0</span>, Sz, <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_xformMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_xformMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(u_xformMatrix &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of u_xformMatrix&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gl.uniformMatrix4fv(u_xformMatrix, <span class="literal">false</span>, xformMatrix);</span><br><span class="line"></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h6><p><img src="/images/RotatedTriangle_Matrix03.png" alt="3"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】12-使用Matrix4变换矩阵实现三角形旋转、平移、缩放</title>
    <url>/12-%E4%BD%BF%E7%94%A8Matrix4%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2%E6%97%8B%E8%BD%AC%E3%80%81%E5%B9%B3%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE-RotatedTriangle-Matrix4/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：13-RotatedTriangle_Matrix4</p>
<p>要点：矩阵变换库（cuon-matrix.js 本书专用）、Matrix4对象</p>
</blockquote>
<span id="more"></span>

<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="一、矩阵变换库cuon-matrix-js"><a href="#一、矩阵变换库cuon-matrix-js" class="headerlink" title="一、矩阵变换库cuon-matrix.js"></a>一、矩阵变换库cuon-matrix.js</h5><p>OpenGL中提供了一系列有用的函数来创建变换矩阵，而WebGL没有，本书作者编写了一套函数库（cuon-matrix.js）解决这个问题。</p>
<p>cuon-matrix.js在其中的Matrix4对象中提供了创建变换矩阵的方法。Matrix4对象（实例）是指Matrix4类型的对象，即“调用Matrix4构造函数生成的对象”，表示一个4x4矩阵，该对象内部使用<code>Floated32Array</code>来存储矩阵元素。</p>
<p>例：创建一个选择矩阵</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为旋转矩阵创建Matrix4对象</span></span><br><span class="line"><span class="keyword">var</span> xformMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"><span class="comment">// 将xformMatrix设置为旋转矩阵</span></span><br><span class="line">xformMatrix.setRotate(ANGLE, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> u_xformMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_xformMatrix&#x27;</span>);</span><br><span class="line"><span class="comment">// 将旋转矩阵传输给顶点着色器</span></span><br><span class="line">gl.uniformMatrix4fv(u_xformMatrix, <span class="literal">false</span>, xformMatrix.elements);</span><br></pre></td></tr></table></figure>

<h5 id="二、setRotate-ANGLE-0-0-1"><a href="#二、setRotate-ANGLE-0-0-1" class="headerlink" title="二、setRotate(ANGLE, 0, 0, 1)"></a>二、setRotate(ANGLE, 0, 0, 1)</h5><p>参数：</p>
<p>​    旋转角(角度值)：ANGLE＞0，表示逆时针方向</p>
<p>​    旋转轴(x, y, z)：(0, 0, 1)表示绕z轴旋转</p>
<h5 id="三、Matrix4对象支持的方法和属性"><a href="#三、Matrix4对象支持的方法和属性" class="headerlink" title="三、Matrix4对象支持的方法和属性"></a>三、Matrix4对象支持的方法和属性</h5><h6 id="setIdentity"><a href="#setIdentity" class="headerlink" title="setIdentity()"></a>setIdentity()</h6><p>​    将Matrix4实例初始化为单位阵。（单位阵：对角线为1，其余全为0的矩阵，类似1的效果）</p>
<h6 id="setTranslate-x-y-z"><a href="#setTranslate-x-y-z" class="headerlink" title="setTranslate(x, y, z)"></a>setTranslate(x, y, z)</h6><p>​    将Matrix4实例设置为平移变换矩阵，在x轴上平移的距离为x，在y轴上平移的距离为y，在z轴上平移的距离为z</p>
<h6 id="setRotate-angle-x-y-z"><a href="#setRotate-angle-x-y-z" class="headerlink" title="setRotate(angle, x, y, z)"></a>setRotate(angle, x, y, z)</h6><p>​    将Matrix4实例设置为旋转变换矩阵，旋转角度为angle,旋转轴为(x, y, z)。旋转轴(x,y,z)无需归一化（参加“光照”）</p>
<h6 id="setScale-x-y-z"><a href="#setScale-x-y-z" class="headerlink" title="setScale(x, y, z)"></a>setScale(x, y, z)</h6><p>​    将Matrix4实例设置为缩放变换矩阵，在三个轴上的缩放因子分别为x、y、z</p>
<h6 id="translate-x-y-z"><a href="#translate-x-y-z" class="headerlink" title="translate(x, y, z)"></a>translate(x, y, z)</h6><p>​    将Matrix4实例乘以一个平移变换矩阵（该平移矩阵在x轴上的平移距离为x，在y轴上的平移距离为y，在z轴上的平移距离为z），所得到的结果存储在Matrix4中</p>
<h6 id="rotate-angle-x-y-z"><a href="#rotate-angle-x-y-z" class="headerlink" title="rotate(angle, x, y, z)"></a>rotate(angle, x, y, z)</h6><p>​    将Matrix4实例乘以一个旋转变换矩阵（该旋转矩阵旋转的角度为angle，旋转轴为（x、y、z）。旋转轴（x、y、z）无须归一化），所得的结果还存储在Matrix4中</p>
<h6 id="scale-x-y-z"><a href="#scale-x-y-z" class="headerlink" title="scale(x, y, z)"></a>scale(x, y, z)</h6><p>​    将Matrix4实例乘以一个缩放变换矩阵（该缩放矩阵在三个轴上的缩放因子分别为x、y、z。），所得结果还存储在Matrix4中</p>
<h6 id="set-m"><a href="#set-m" class="headerlink" title="set( m )"></a>set( m )</h6><p>​    将Matrix4实例设置为m，m必须也是一个Matrix4实例</p>
<h6 id="elements"><a href="#elements" class="headerlink" title="elements"></a>elements</h6><p>​    类型化数组(Float32Array)包含了Matrix4实例的矩阵元素</p>
<p>  说明：单位阵在矩阵乘法中的行为，就像数字1在乘法中的行为一样。将一个矩阵生意单位阵，得到的结果和原矩阵完全相同。在单位阵中，对角线的元素为1.0，其余的元素为0.0。</p>
<h6 id="multiply-matrix"><a href="#multiply-matrix" class="headerlink" title="multiply(matrix)"></a>multiply(matrix)</h6><p>​    两个矩阵相乘，返回的结果为一个新的matrix4对象，并且值为两个矩阵相乘的结果。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> modelViewMatrix = viewMatrix.multiply(modelMatrix);</span><br></pre></td></tr></table></figure>

<h6 id="setOrtho-left-right-bottom-top-near-far"><a href="#setOrtho-left-right-bottom-top-near-far" class="headerlink" title="setOrtho(left, right, bottom, top, near, far)"></a>setOrtho(left, right, bottom, top, near, far)</h6><p>​    通过各参数计算正射投影矩阵，将其存储在Matrix4中。注意，left不一定与right相等，bottom不一定与top相等，near与far不相等。参数：</p>
<p>​    left、right：指定近裁剪面的左边界和右边界</p>
<p>​    bottom、top：指定近裁剪面的上边界和下边界</p>
<p>​    near、far：指定近裁剪面和远裁剪面的位置，即可视空间的近边界和远边界</p>
<h6 id="setPerspective-fov-aspect-near-far"><a href="#setPerspective-fov-aspect-near-far" class="headerlink" title="setPerspective(fov, aspect, near, far)"></a>setPerspective(fov, aspect, near, far)</h6><p>​    通过各参数计算透视投影矩阵，将其存储在Matrix4中。注意，near的值必须小于far。参数：</p>
<p>​    fov:指定垂直视角，即可视空间顶面和底面键的夹角，必须大于0</p>
<p>​    aspect:指定近裁剪面的高宽比（宽度/高度）</p>
<p>​    near、far：指定近裁剪面和远裁剪面的位置，即可视空间的近边界和远边界（near和far必须都大于0）</p>
<p>​    注意，第二个参数aspect是近裁剪面的宽高比，而不是水平视角（第一个参数是垂直视角）。比如说，如果近裁剪面的高度100和宽度200，那么宽高比为2。</p>
<h6 id="setInverseOf-m"><a href="#setInverseOf-m" class="headerlink" title="setInverseOf (m)"></a>setInverseOf (m)</h6><p>​    使自身称为矩阵m的逆矩阵。</p>
<h6 id="transpose"><a href="#transpose" class="headerlink" title="transpose()"></a>transpose()</h6><p>​    对自身进行转置操作，并将自身设为转置后的结果。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>rotate triangle<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">    Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-matrix.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;RotatedTriangle_Matrix4.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 缓冲区对象向着色器传入多个顶点的数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [<span class="number">0.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!vertexBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变换矩阵旋转</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="comment">//x&#x27; = x cos b - y sin b</span></span><br><span class="line">    <span class="comment">//y&#x27; = x sin b + y cosb</span></span><br><span class="line">    <span class="comment">//z&#x27; = z</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_xformMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position = u_xformMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ANGLE = <span class="number">90.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>(!gl)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl,VSHADER_SOURCE,FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为旋转矩阵创建Matrix4对象</span></span><br><span class="line">    <span class="keyword">var</span> xformMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    <span class="comment">// 将xformMatrix设置为旋转矩阵</span></span><br><span class="line">    xformMatrix.setRotate(ANGLE, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_xformMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_xformMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(u_xformMatrix &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of u_xformMatrix&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将旋转矩阵传输给顶点着色器</span></span><br><span class="line">    gl.uniformMatrix4fv(u_xformMatrix, <span class="literal">false</span>, xformMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="平移矩阵"><a href="#平移矩阵" class="headerlink" title="平移矩阵"></a>平移矩阵</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将上例第47行改为如下内容：</span></span><br><span class="line">xformMatrix.setTranslate(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.0</span>);</span><br></pre></td></tr></table></figure>

<h5 id="缩放矩阵"><a href="#缩放矩阵" class="headerlink" title="缩放矩阵"></a>缩放矩阵</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同理修改47行为：</span></span><br><span class="line">xformMatrix.setScale(<span class="number">0.5</span>, <span class="number">1.5</span>, <span class="number">1.0</span>);</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><blockquote>
<p>实现效果与上一节相同（<a href="https://freepiao.cn/2021/07/26/RotatedTriangle-Matrix/">【WebGL之巅】11-使用Matrix变换矩阵实现三角形旋转、平移、缩放</a>）</p>
</blockquote>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】13-使用Matrix4变换矩阵实现三角形复合变换</title>
    <url>/13-%E4%BD%BF%E7%94%A8Matrix4%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2%E5%A4%8D%E5%90%88%E5%8F%98%E6%8D%A2-RotatedTranslatedTriangle/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：14-RotatedTranslatedTriangle</p>
<p>要点：矩阵变换库（cuon-matrix.js 本书专用）、Matrix4对象、复合变换</p>
</blockquote>
<span id="more"></span>

<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>1.将三角形沿着X轴平移一段距离</p>
<p>2.旋转三角形</p>
<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="一、模型变换"><a href="#一、模型变换" class="headerlink" title="一、模型变换"></a>一、模型变换</h5><p>建立下面的等式：</p>
<p>​    <code>&lt;“平移后旋转”后的坐标&gt; = &lt;旋转矩阵&gt; X (&lt;平移矩阵&gt; X &lt;原始坐标&gt;)</code></p>
<p>这里，<code>&lt;旋转矩阵&gt; X (&lt;平移矩阵&gt; X &lt;原始坐标&gt;)</code> 等价于 <code>(&lt;旋转矩阵&gt; X &lt;平移矩阵&gt;) X &lt;原始坐标&gt;</code>，即可在JavaScript中计算<code>(&lt;旋转矩阵&gt; X &lt;平移矩阵&gt;)</code>，然后将得到的结果传入顶点着色器，实现复合效果。</p>
<p>一个模型可能经过多次变换，将这些变换全部复合成一个等效的变换，就得到了<strong>模型变换</strong>，或称<strong>建模变换</strong>，相应地，模型变换的矩阵称为<strong>模型矩阵</strong>。</p>
<h5 id="二、Matrix4对象实现矩阵乘法"><a href="#二、Matrix4对象实现矩阵乘法" class="headerlink" title="二、Matrix4对象实现矩阵乘法"></a>二、Matrix4对象实现矩阵乘法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ANGLE = <span class="number">60.0</span>;</span><br><span class="line"><span class="keyword">var</span> Tx = <span class="number">0.5</span>;</span><br><span class="line"><span class="comment">// 执行完后modelMatrix中包含了一个旋转矩阵</span></span><br><span class="line">modelMatrix.setRotate(ANGLE, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);	</span><br><span class="line"><span class="comment">// 乘法：(&lt;旋转矩阵&gt; X &lt;平移矩阵&gt;)</span></span><br><span class="line">modelMatrix.translate(Tx, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>你可能会发现，“先平移后旋转”的顺序与代码中构造模型矩阵<code>(&lt;旋转矩阵&gt; X &lt;平移矩阵&gt;)</code>的顺序是相反的，这是因为变换矩阵最终要与三角形的三个顶点的原始坐标矢量相乘。</p>
<p>明白这个原理后，也可以尝试“先旋转后平移”：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">modelMatrix.setTranslate(Tx, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">modelMatrix.rotate(ANGLE, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RotatedTriangle.js</span></span><br><span class="line"><span class="comment">// 变换矩阵旋转</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="comment">//x&#x27; = x cos b - y sin b</span></span><br><span class="line">    <span class="comment">//y&#x27; = x sin b + y cosb</span></span><br><span class="line">    <span class="comment">//z&#x27; = z</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ModelMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position = u_ModelMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>(!gl)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl,VSHADER_SOURCE,FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ANGLE = <span class="number">60.0</span>;</span><br><span class="line">    <span class="keyword">var</span> Tx = <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先平移后旋转</span></span><br><span class="line">    <span class="comment">// modelMatrix.setRotate(ANGLE, 0, 0, 1);</span></span><br><span class="line">    <span class="comment">// modelMatrix.translate(Tx, 0, 0);</span></span><br><span class="line">    <span class="comment">// 先旋转后平移</span></span><br><span class="line">    modelMatrix.setTranslate(Tx, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    modelMatrix.rotate(ANGLE, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_ModelMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ModelMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(u_ModelMatrix &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of u_xformMatrix&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gl.uniformMatrix4fv(u_ModelMatrix, <span class="literal">false</span>, modelMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [<span class="number">0.0</span>, <span class="number">0.3</span>, -<span class="number">0.3</span>, -<span class="number">0.3</span>, <span class="number">0.3</span>, -<span class="number">0.3</span>]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!vertexBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><h5 id="先平移后旋转"><a href="#先平移后旋转" class="headerlink" title="先平移后旋转"></a>先平移后旋转</h5><p><img src="/images/RotatedTranslatedTriangle01.png" alt="1"></p>
<h5 id="先旋转后平移"><a href="#先旋转后平移" class="headerlink" title="先旋转后平移"></a>先旋转后平移</h5><p><img src="/images/RotatedTranslatedTriangle02.png" alt="2"></p>
<p>可以看到，两者的变换结果是不同的。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】16-颜色与纹理-绘制三个不同颜色的顶点</title>
    <url>/16-%E9%A2%9C%E8%89%B2%E4%B8%8E%E7%BA%B9%E7%90%86-%E7%BB%98%E5%88%B6%E4%B8%89%E4%B8%AA%E4%B8%8D%E5%90%8C%E9%A2%9C%E8%89%B2%E7%9A%84%E9%A1%B6%E7%82%B9-MultiAttributeColor/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：18-MultiAttributeColor</p>
<p>要点：绘制三个不同color的点、交错组织</p>
</blockquote>
<span id="more"></span>

<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="一、varying变量"><a href="#一、varying变量" class="headerlink" title="一、varying变量"></a>一、varying变量</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +	</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +	<span class="comment">// 先在顶点着色器声明</span></span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position = a_Position;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +<span class="comment">//!!! 需要声明浮点数精度，否则报错No precision specified for (float)  </span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +	<span class="comment">// 再片元着色器接收同名变量</span></span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>该程序使用了一个varying变量将颜色传入片元着色器，因为：</p>
<p>​        uniform变量：“一致的”，所有顶点都是同一个颜色；</p>
<p>​        varying变量：“可变的”</p>
<p><strong>varying变量作用</strong>：从顶点着色器向片元着色器传输数据。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>MultiAttributeColor<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">    Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-matrix.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;MultiAttributeColor.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MultiAttributeColor.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position = a_Position;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +<span class="comment">//!!! 需要声明浮点数精度，否则报错No precision specified for (float)  </span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定清空&lt;canvas&gt;颜色</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.POINTS, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [<span class="number">0.0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> verteColorBuffer = gl.createBuffer();</span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);</span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE*<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE*<span class="number">5</span>, FSIZE*<span class="number">2</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/MultiAttributeColor.png" alt="1"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】14-简单动画-使三角形旋转</title>
    <url>/14-%E7%AE%80%E5%8D%95%E5%8A%A8%E7%94%BB-%E4%BD%BF%E4%B8%89%E8%A7%92%E5%BD%A2%E6%97%8B%E8%BD%AC-RotatingTriangle/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：15-RotatingTriangle</p>
<p>要点：矩阵变换库（cuon-matrix.js 本书专用）、Matrix4对象、<a href="https://freepiao.cn/2021/07/27/RotatedTriangle-Matrix4/#setRotate-angle-x-y-z">setRotate</a>方法</p>
<p>tips：当前页含有动画示例，Tag Cloud可能会失效。</p>
</blockquote>
<span id="more"></span>

<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="一、动画原理"><a href="#一、动画原理" class="headerlink" title="一、动画原理"></a>一、动画原理</h5><p>基本原理：不断擦除和重绘三角形，并且每次重绘时轻微改变其角度</p>
<p>为了生成动画，需要两个关键机制：</p>
<p>​    机制一：在规定时刻反复调用同一个函数来绘制三角形。</p>
<p>​    机制二：在每次绘制之前，清除上次绘制的内容，并使三角形旋转相应的角度</p>
<p>​    另外：由于程序需要反复绘制三角形，所有提前指定背景色，而不是在进行绘制之前（设置好的背景色在重设之前一直有效）</p>
<h5 id="二、反复调用绘制函数（tick-）"><a href="#二、反复调用绘制函数（tick-）" class="headerlink" title="二、反复调用绘制函数（tick()）"></a>二、反复调用绘制函数（tick()）</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    currentAngle = animate(currentAngle);   <span class="comment">// 更新旋转角</span></span><br><span class="line">    draw(gl, n, currentAngle, modelMatrix, u_ModelMatrix); <span class="comment">// 绘制三角形</span></span><br><span class="line">    requestAnimationFrame(tick);    <span class="comment">// 请求浏览器调用tick</span></span><br><span class="line">&#125;;</span><br><span class="line">tick();</span><br></pre></td></tr></table></figure>

<h5 id="三、按照指定的旋转角度绘制三角形（draw-）"><a href="#三、按照指定的旋转角度绘制三角形（draw-）" class="headerlink" title="三、按照指定的旋转角度绘制三角形（draw()）"></a>三、按照指定的旋转角度绘制三角形（draw()）</h5><table>
<thead>
<tr>
<th>参数</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>gl</td>
<td>绘制三角形的上下文</td>
</tr>
<tr>
<td>n</td>
<td>顶点个数</td>
</tr>
<tr>
<td>currentAngle</td>
<td>当前的旋转角度</td>
</tr>
<tr>
<td>modelMatrix</td>
<td>根据当前的旋转角度计算出的旋转矩阵，存储在matrix4对象中</td>
</tr>
<tr>
<td>u_ModelMatrix</td>
<td>顶点着色器中同名的uniform变量的存储位置，modelMatrix变量将被传递至此处</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">gl, n, currentAngle, modelMatrix, u_ModelMatrix</span>)</span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">// 设置旋转矩阵</span></span><br><span class="line">    modelMatrix.setRotate(currentAngle, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 将旋转矩阵传输给顶点着色器</span></span><br><span class="line">    gl.uniformMatrix4fv( u_ModelMatrix, <span class="literal">false</span>, modelMatrix.elements);</span><br><span class="line">    <span class="comment">// 清除canvas</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line">    <span class="comment">// 绘制三角形</span></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="四、请求再次被调用（requestAnimationFrame-tick-）"><a href="#四、请求再次被调用（requestAnimationFrame-tick-）" class="headerlink" title="四、请求再次被调用（requestAnimationFrame(tick)）"></a>四、请求再次被调用（requestAnimationFrame(tick)）</h5><p>按传统习惯，JavaScript想要重复执行某个任务可以使用setInterval()函数。</p>
<p>现代浏览器都支持多个标签页，每个标签页具有单独JavaScript环境，但是自setInterval()诞生之初，浏览器还没有支持多标签页，所以现代浏览器中，不管标签页是否被激活，其中的setInterval()函数都会反复调用func，如果标签页过多，就会增加浏览器负荷。于是引入了requestAnimationFrame()方法，该方法只有当标签页激活时才触发。注意，<strong>该函数无法指定重复调用的间隔</strong>，传入的函数func会在浏览器需要网页的某个元素重绘时被调用，其机制更像setTimeOut，想要再次调用就必须重新发起一次请求</p>
<h5 id="五、更新旋转角（animate-）"><a href="#五、更新旋转角（animate-）" class="headerlink" title="五、更新旋转角（animate()）"></a>五、更新旋转角（animate()）</h5><p><strong>函数逻辑</strong>：根据本次调用与上次调用之间的时间间隔来决定这一帧的旋转角度比上一帧大出多少。</p>
<p>why？requestAnimationFrame只是请求浏览器在适当的时机调用参数函数，那么浏览器就会根据自身状态决定每次调用的时刻，在不同浏览器上，或在同一浏览器不同状态下，都有所不同。既然调用tick函数的间隔不恒定，那么每次调用时简单的向currentAngle加上一个<strong>固定角度值</strong>（度/秒）就会导致不可控的加速或减速的旋转效果。</p>
<p>currentAngle: 三角形当前旋转角度，即从初始位置算起，当前三角形旋转了多少度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录上一次调用函数的时刻</span></span><br><span class="line"><span class="keyword">var</span> g_last = <span class="built_in">Date</span>.now();	<span class="comment">// 上一帧</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">angle</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 计算距离上一次调用经过多长时间</span></span><br><span class="line">    <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();	<span class="comment">// 这一帧</span></span><br><span class="line">    <span class="keyword">var</span> elapsed = now - g_last; <span class="comment">// 毫秒</span></span><br><span class="line">    g_last = now;	<span class="comment">// 更新调用时间，下一次调用时刻与该时刻做比较</span></span><br><span class="line">    <span class="comment">// 根据距离上次调用的时间，更新当前的旋转角度</span></span><br><span class="line">    <span class="keyword">var</span> newAngle = angle + (ANGLE_STEP * elapsed) / <span class="number">1000.0</span>;</span><br><span class="line">    <span class="comment">// 保证newAngle始终小于360度</span></span><br><span class="line">    <span class="keyword">return</span> newAngle %= <span class="number">360</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>rotate triangle<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">    Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-matrix.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;RotatingTriangle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RotatingTriangle.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ModelMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position = u_ModelMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转速度，单位：度/秒</span></span><br><span class="line"><span class="keyword">var</span> ANGLE_STEP = <span class="number">40.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提前设置canvas背景色</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_ModelMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ModelMatrix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模型矩阵</span></span><br><span class="line">    <span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三角形当前角度</span></span><br><span class="line">    <span class="keyword">var</span> currentAngle = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始绘制三角形</span></span><br><span class="line">    <span class="keyword">var</span> tick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        currentAngle = animate(currentAngle);   <span class="comment">// 更新旋转角</span></span><br><span class="line">        draw(gl, n, currentAngle, modelMatrix, u_ModelMatrix); <span class="comment">// 绘制三角形</span></span><br><span class="line">        requestAnimationFrame(tick);    <span class="comment">// 请求浏览器调用tick</span></span><br><span class="line">    &#125;;</span><br><span class="line">    tick();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [<span class="number">0.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!vertexBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">gl, n, currentAngle, modelMatrix, u_ModelMatrix</span>)</span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">// 设置旋转矩阵</span></span><br><span class="line">    modelMatrix.setRotate(currentAngle, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    modelMatrix.translate(<span class="number">0.35</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 将旋转矩阵传输给顶点着色器</span></span><br><span class="line">    gl.uniformMatrix4fv( u_ModelMatrix, <span class="literal">false</span>, modelMatrix.elements);</span><br><span class="line">    <span class="comment">// 清除canvas</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line">    <span class="comment">// 绘制三角形</span></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录上一次调用函数的时刻</span></span><br><span class="line"><span class="keyword">var</span> g_last = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">angle</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 计算距离上一次调用经过多长时间</span></span><br><span class="line">    <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">var</span> elapsed = now - g_last; <span class="comment">// 毫秒</span></span><br><span class="line">    g_last = now;   <span class="comment">// 更新调用时间，下一次调用时刻与该时刻做比较</span></span><br><span class="line">    <span class="comment">// 根据距离上次调用的时间，更新当前的旋转角度</span></span><br><span class="line">    <span class="keyword">var</span> newAngle = angle + (ANGLE_STEP * elapsed) / <span class="number">1000.0</span>;</span><br><span class="line">    <span class="keyword">return</span> newAngle %= <span class="number">360</span>;   <span class="comment">// 保证newAngle始终小于360度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ANGLE_STEP += <span class="number">10</span> </span><br><span class="line">    <span class="keyword">if</span> (ANGLE_STEP &gt; <span class="number">180</span>)&#123;</span><br><span class="line">        ANGLE_STEP = <span class="number">40</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> speed = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;speed&#x27;</span>)</span><br><span class="line">    speed.innerHTML = ANGLE_STEP</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">down</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ANGLE_STEP -= <span class="number">10</span> </span><br><span class="line">    <span class="keyword">if</span> (ANGLE_STEP &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        ANGLE_STEP = <span class="number">40</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> speed = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;speed&#x27;</span>)</span><br><span class="line">    speed.innerHTML = ANGLE_STEP</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><script src="\lib\webgl-utils.js"></script>
<script src="\lib\webgl-debug.js"></script>
<script src="\lib\cuon-utils.js"></script>
<script src="\lib\cuon-matrix.js"></script>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
  <title>rotate triangle</title>
</head>
<body onload="main()">
<canvas id="webgl" width="300" height="300">
  Please use the browser supporting "canvas".
</canvas>
<div>
    当前速度：<span id="speed">40</span>度/秒
    <button onclick="up()" id='up'>加速</button>
    <button onclick="down()" id="down">减速</button>
</div>
<script type='text/javascript'>
    //RotatingTriangle.js
var VSHADER_SOURCE =
    'attribute vec4 a_Position;\n' +
    'uniform mat4 u_ModelMatrix;\n' +
    'void main() {\n' +
    'gl_Position = u_ModelMatrix * a_Position;\n' +
    '}\n';
var FSHADER_SOURCE=
    'void main(){'+
    'gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);'+
    '}';
var ANGLE_STEP = 40.0;
function main() {
    var canvas = document.getElementById("webgl");
    if (!canvas) {
        console.log("Failed to retrieve the <canvas> element");
        return;
    }
    var gl = getWebGLContext(canvas);
    if (!gl) {
        console.log("Failed to get the rendering context for WebGL");
        return;
    }
    if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
        console.log("Failed to initialize shaders.");
        return;
    }
    //设置顶点位置
    var n = initVertexBuffers(gl);
    if (n < 0) {
        console.log('Failed to set the positions of the vertices');
        return;
    }
    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    var u_ModelMatrix = gl.getUniformLocation(gl.program, 'u_ModelMatrix');
    if (u_ModelMatrix < 0) {
        console.log("Failed to get the storage location of u_xformMatrix");
        return;
    }
    var modelMatrix = new Matrix4();
    var currentAngle = 0.0;
    var tick = function () {
        currentAngle = animate(currentAngle);
        draw(gl, n, currentAngle, modelMatrix, u_ModelMatrix);
        requestAnimationFrame(tick);
    };
    tick();
}
function initVertexBuffers(gl) {
    var vertices = new Float32Array(
        [0.0, 0.5, -0.5, -0.5, 0.5, -0.5]
    );
    var n=3; //点的个数
    //创建缓冲区对象
    var vertexBuffer = gl.createBuffer();
    if(!vertexBuffer){
        console.log("Failed to create thie buffer object");
        return -1;
    }
    //将缓冲区对象保存到目标上
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    //向缓存对象写入数据
    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
    var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
    if(a_Position < 0){
        console.log("Failed to get the storage location of a_Position");
        return -1;
    }
    //将缓冲区对象分配给a_Postion变量
    gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 0, 0);
    //连接a_Postion变量与分配给它的缓冲区对象
    gl.enableVertexAttribArray(a_Position);    
    return n;
}
function draw(gl, n, currentAngle, modelMatrix, u_ModelMatrix)
{
    modelMatrix.setRotate(currentAngle, 0, 0, 1);
    modelMatrix.translate(0.35, 0, 0)
    gl.uniformMatrix4fv( u_ModelMatrix, false, modelMatrix.elements);
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.drawArrays(gl.TRIANGLES, 0, n);
}
var g_last = Date.now();
function animate(angle)
{
    var now = Date.now();
    var elapsed = now - g_last;
    g_last = now;
    var newAngle = angle + (ANGLE_STEP * elapsed) / 1000.0;
    return newAngle %= 360;
}
function up(){
    ANGLE_STEP += 10.0 
    if (ANGLE_STEP > 360.0){
        ANGLE_STEP = 40.0
    }
    var speed = document.getElementById('speed')
    speed.innerHTML = ANGLE_STEP
}
function down(){
    ANGLE_STEP -= 10.0 
    if (ANGLE_STEP < -360.0){
        ANGLE_STEP = 40
    }
    var speed = document.getElementById('speed')
    speed.innerHTML = ANGLE_STEP
}
</script>
</body>
</html>

]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】15-颜色与纹理-将非坐标数据传入顶点着色器</title>
    <url>/15-%E9%A2%9C%E8%89%B2%E4%B8%8E%E7%BA%B9%E7%90%86-%E5%B0%86%E9%9D%9E%E5%9D%90%E6%A0%87%E6%95%B0%E6%8D%AE%E4%BC%A0%E5%85%A5%E9%A1%B6%E7%82%B9%E7%9D%80%E8%89%B2%E5%99%A8-MultiAttributeSize/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：16-MultiAttributeSize、17-MultiAttributeSize_Interleaved</p>
<p>要点：绘制三个不同size的点、交错组织</p>
</blockquote>
<span id="more"></span>

<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="一、回顾—将顶点坐标传入着色器步骤"><a href="#一、回顾—将顶点坐标传入着色器步骤" class="headerlink" title="一、回顾—将顶点坐标传入着色器步骤"></a>一、回顾—将顶点坐标传入着色器步骤</h5><p>1.<a href="https://freepiao.cn/2021/07/25/MultiPoints/#1-%E5%88%9B%E5%BB%BA%E7%BC%93%E5%86%B2%E5%8C%BA%E5%AF%B9%E8%B1%A1">创建缓冲区对象</a></p>
<p>2.<a href="https://freepiao.cn/2021/07/25/MultiPoints/#2-%E5%B0%86%E7%BC%93%E5%86%B2%E5%8C%BA%E5%AF%B9%E8%B1%A1%E4%BF%9D%E5%AD%98%E5%88%B0%E7%9B%AE%E6%A0%87%E4%B8%8A">将缓冲区对象绑定到target上</a></p>
<p>3.<a href="https://freepiao.cn/2021/07/25/MultiPoints/#3-%E5%90%91%E7%BC%93%E5%AD%98%E5%AF%B9%E8%B1%A1%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE">向缓存对象写入数据</a></p>
<p>4.<a href="https://freepiao.cn/2021/07/25/MultiPoints/#4-%E5%B0%86%E7%BC%93%E5%86%B2%E5%8C%BA%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E7%BB%99a-Postion%E5%8F%98%E9%87%8F">将缓冲区对象分配给a_Postion变量(attribute变量)</a></p>
<p>5.<a href="https://freepiao.cn/2021/07/25/MultiPoints/#5-%E8%BF%9E%E6%8E%A5a-Postion%E5%8F%98%E9%87%8F%E4%B8%8E%E5%88%86%E9%85%8D%E7%BB%99%E5%AE%83%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA%E5%AF%B9%E8%B1%A1-%E5%BC%80%E5%90%AFattribute%E5%8F%98%E9%87%8F">连接a_Postion变量与分配给它的缓冲区对象(开启attribute变量)</a></p>
<h5 id="二、交错组织"><a href="#二、交错组织" class="headerlink" title="二、交错组织"></a>二、交错组织</h5><p>一般思维，通过创建多个缓冲区对象，可以实现传入顶点不同数据，但是当顶点数量庞大起来时，代码冗余增大。</p>
<p>WebGL允许我们把顶点坐标和尺寸数据打包到同一个缓冲区对象中，并通过某种机制分别访问缓冲区对象中不同种类的数据。比如，可以将顶点的坐标和尺寸数据按照如下方式<strong>交错组织</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> verticesSizes = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">    [<span class="number">0.0</span>, <span class="number">0.5</span>, <span class="number">10.0</span>,</span><br><span class="line">     -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">10.0</span>,</span><br><span class="line">     <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">30.0</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>可见，一旦将几种顶点数据交叉存储在一个数组中，WebGL就需要有差别的从缓冲区对象中获取某种特定的数据，即使用<a href="https://freepiao.cn/2021/07/25/MultiPoints/#4-%E5%B0%86%E7%BC%93%E5%86%B2%E5%8C%BA%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E7%BB%99a-Postion%E5%8F%98%E9%87%8F">gl.vertexAttribPointer</a>函数的第5个参数stride和第6个参数offset。</p>
<h5 id="三、步进参数"><a href="#三、步进参数" class="headerlink" title="三、步进参数"></a>三、步进参数</h5><p>gl.vertexAttribPointer(location, size, type, normalized, stride, offset);</p>
<p>1.将缓冲区对象分配给a_Postion变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">var</span> FSIZE = verticesSizes.BYTES_PER_ELEMENT;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE*<span class="number">3</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>​    参数stride表示：在缓冲区对象中，单个顶点的所有数据（坐标和大小）的字节数，也就是相邻两个顶点间的距离，即步进参数。之前的缓冲区只含有一种数据即坐标，将其设置为0即可。</p>
<p>stride和offset如图：</p>
<p><img src="/images/MultiAttributeSize_Interleaved.png" alt="1"></p>
<p>​    如图所示，每个顶点有3个数据值（两个坐标一个尺寸数据），因此stride应该设置为每项数据大小的三倍，即<code>3 x FSIZE</code>（Float32Array中每个元素所占的字节数）。</p>
<p>​    参数offset表示当前考虑的数据项距离首个元素的距离，即偏移参数。在verticesSizes数组中，顶点的坐标数据是放在最前面的，所有offset为0。</p>
<p>2.将缓冲区对象分配给a_Postion变量</p>
<p>​    接下来对顶点尺寸数据采取同样操作：将缓冲区对象分配给a_PointSize变量。缓冲区对象还是原来的那一个，改变的是关注的数据不同，需要将offset参数设置为顶点尺寸数据在缓冲区对象中的初始位置。由前面可以知道，前两个数据是顶点坐标，后一个是顶点尺寸，因此offset设置为<code>FSIZE * 2</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a_PointSize = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_PointSize&#x27;</span>);</span><br><span class="line"></span><br><span class="line">gl.vertexAttribPointer(a_PointSize, <span class="number">1</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE*<span class="number">3</span>, FSIZE*<span class="number">2</span>);</span><br><span class="line">gl.enableVertexAttribArray(a_PointSize);</span><br></pre></td></tr></table></figure>





<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>rotate triangle<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">    Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-matrix.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;MultiAttributeSize.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="方法一、创建多个缓冲区对象"><a href="#方法一、创建多个缓冲区对象" class="headerlink" title="方法一、创建多个缓冲区对象"></a>方法一、创建多个缓冲区对象</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MultiAttributeSize.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute float a_PointSize;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position = a_Position;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_PointSize = a_PointSize;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定清空&lt;canvas&gt;颜色</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.POINTS, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [<span class="number">0.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sizes = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [<span class="number">10.0</span>, <span class="number">20.0</span>, <span class="number">30.0</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建多个缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">var</span> sizeBuffer = gl.createBuffer();</span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, sizeBuffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, sizes, gl.STATIC_DRAW);</span><br><span class="line">    <span class="keyword">var</span> a_PointSize = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_PointSize&#x27;</span>);</span><br><span class="line">    gl.vertexAttribPointer(a_PointSize, <span class="number">1</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_PointSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方法二、使用交错组织配合gl-vertexAttribPointer的步进和偏移量"><a href="#方法二、使用交错组织配合gl-vertexAttribPointer的步进和偏移量" class="headerlink" title="方法二、使用交错组织配合gl.vertexAttribPointer的步进和偏移量"></a>方法二、使用交错组织配合gl.vertexAttribPointer的步进和偏移量</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by hushhw on 17/12/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//MultiAttributeSize.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute float a_PointSize;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;gl_Position = a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;gl_PointSize = a_PointSize;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定清空&lt;canvas&gt;颜色</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.POINTS, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesSizes = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [<span class="number">0.0</span>, <span class="number">0.5</span>, <span class="number">10.0</span>,</span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">20.0</span>,</span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">30.0</span>]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexSizeBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!vertexSizeBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexSizeBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesSizes, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesSizes.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE*<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_PointSize = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_PointSize&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gl.vertexAttribPointer(a_PointSize, <span class="number">1</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE*<span class="number">3</span>, FSIZE*<span class="number">2</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_PointSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/MultiAttributeSize.png" alt="1"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】17-颜色与纹理-绘制彩色与渐变三角形</title>
    <url>/17-%E9%A2%9C%E8%89%B2%E4%B8%8E%E7%BA%B9%E7%90%86-%E7%BB%98%E5%88%B6%E5%BD%A9%E8%89%B2%E4%B8%8E%E6%B8%90%E5%8F%98%E4%B8%89%E8%A7%92%E5%BD%A2-ColoredTriangle/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：19-ColoredTriangle</p>
<p>要点：<a href="https://freepiao.cn/2021/07/29/ColoredTriangle/">【WebGL之巅】17-颜色与纹理-绘制三个不同颜色的顶点</a>、gl.drawArrays、几何形状的装配和光栅化</p>
</blockquote>
<span id="more"></span>

<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="一、几何形状的装配和光栅化"><a href="#一、几何形状的装配和光栅化" class="headerlink" title="一、几何形状的装配和光栅化"></a>一、几何形状的装配和光栅化</h5><p>在顶点着色器和片元着色器之间，有这样两个步骤：</p>
<p>​        <strong>图形装配过程</strong>：这一步是将两个孤立的顶点坐标装配成几何图形。几何图形的类比由gl.drawArrays的第一个参数决定</p>
<p>​        <strong>光栅化过程</strong>：将装配好的几何图形转化为片元。</p>
<p><img src="/images/ColoredTriangle2.png" alt="3"></p>
<p>通过上图可以理解，gl_Position实际上是<strong>几何图形装配</strong>阶段的输入数据。注意几何图形装配过程又被称为<strong>图元装配过程</strong>，因为被装配出的基本图形（点线面）又被称为<strong>图元</strong>。</p>
<p>下图展示了顶点着色器和片元着色器之间图形装配与光栅化的<strong>过程</strong>。</p>
<p><img src="/images/ColoredTriangle4.png" alt="4"></p>
<p><img src="/images/ColoredTriangle1.png" alt="2"></p>
<p>总结下来就是：<br> （1）根据 <code>gl.drawArrays()</code>的参数n，将执行顶点着色器<strong>n</strong>次（执行顶点着色器结果：将坐标传入并存储在装配区）<br> （2）开始装配图形。使用传入的点坐标，根据 <code>gl.drawArrays()</code>的第一个参数信息（如：gl.TRANGLES）来决定如何装配。<br> （3）光栅化：将图形转化为片元（<strong>像素</strong>），片元数目就是这个三角形最终在屏幕上所覆盖的像素数。</p>
<h5 id="二、调用片元着色"><a href="#二、调用片元着色" class="headerlink" title="二、调用片元着色"></a>二、调用片元着色</h5><p>一旦光栅化过程结束后，程序就开始逐片调用片元着色器，有多少像素就调用多少次，每次处理一个片元。<strong>对于每个片元，片元着色器计算出该片元的颜色并写入颜色缓冲区，直到最后一个片元处理完成，浏览器会显示出最终结果。</strong></p>
<p><img src="/images/ColoredTriangle5.png" alt="5"></p>
<p>为了证明片元着色器对每个片元都执行了一次，<a href="#%E5%AE%9E%E4%BE%8B2">实例2</a>根据片元的位置来确定片元颜色。</p>
<h5 id="三、varying变量的作用和颜色内插过程"><a href="#三、varying变量的作用和颜色内插过程" class="headerlink" title="三、varying变量的作用和颜色内插过程"></a>三、varying变量的作用和颜色内插过程</h5><p>顶点着色器的varying变量v_Color在传入片元着色器之前经过了内插过程，所以，片元着色器中的v_Color与顶点着色器中的v_Color实际上并不是一回事。这也正是将这种变量称为“varying”（变化的）变量的原因。</p>
<p>例如：考虑一条两个端点的颜色不同的线段。一个端点为红色，另一个为蓝色。我们在顶点着色器变量中向varying变量v_Color赋上这两个颜色，那么<strong>WebGL就会自动地计算出线段上所有的点（片元/像素）的颜色，并赋值给片元着色器中的varying变量v_Color</strong>，如下图所示：</p>
<p><img src="/images/ColoredTriangle3.png" alt="3"></p>
<p>在这个例子中RGBA中的R值从1.0降低到0.0，B值从0.0上升到1.0，线段上所有的片元颜色值都会被恰当地计算出来——这个过程就被称为<strong>内插过程</strong>。</p>
<h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><p>对比<a href="https://freepiao.cn/2021/07/29/ColoredTriangle/">【WebGL之巅】17-颜色与纹理-绘制三个不同颜色的顶点</a>只修改了第52行gl.drawArrays的第一个参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//ColoredTriangle.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;gl_Position = a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +<span class="comment">//!!! 需要声明浮点数精度，否则报错No precision specified for (float)  </span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定清空&lt;canvas&gt;颜色</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [<span class="number">0.0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> verteColorBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!verteColorBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE*<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Color &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE*<span class="number">5</span>, FSIZE*<span class="number">2</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="/images/ColoredTriangle.png" alt="1"></p>
<h4 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h4><p>根据片元的位置来确定片元颜色。该程序在<a href="https://freepiao.cn/2021/07/25/HelloTriangle/">【WebGL之巅】07-绘制三角形</a>基础上修改。</p>
<p>修改代码1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;uniform float u_Width;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;uniform float u_Height;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="comment">// &#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;+</span></span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(gl_FragCoord.x/u_Width,0.0,gl_FragCoord.y/u_Height,1.0);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>分析：</p>
<p>​        gl_FragCoord：该内置变量的第一个分量和第二个分量表示片元在canvas坐标系统中的坐标值。</p>
<p>修改代码2：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HelloTriangle_FragCoord</span></span><br><span class="line"><span class="keyword">var</span> u_Width = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_Width&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> u_Height = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_Height&#x27;</span>);</span><br><span class="line">gl.uniform1f(u_Width, gl.drawingBufferWidth);</span><br><span class="line">gl.uniform1f(u_Height, gl.drawingBufferHeight);</span><br></pre></td></tr></table></figure>

<p>gl.drawingBufferWidth：颜色缓冲区的宽度</p>
<p>gl.drawingBufferHeight：颜色缓冲区的高度</p>
<p>完整代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HelloTriangle_FragCoord.js</span></span><br><span class="line"><span class="comment">// 顶点着色器程序</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="string">&#x27;gl_Position=a_Position;&#x27;</span>+</span><br><span class="line">        <span class="comment">// &#x27;gl_PointSize=10.0;&#x27;+   // 修改1 绘制单个点时起作用</span></span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;uniform float u_Width;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;uniform float u_Height;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;void main()&#123;&#x27;</span>+</span><br><span class="line">        <span class="comment">// &#x27;gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);&#x27;+</span></span><br><span class="line">        <span class="string">&#x27;gl_FragColor = vec4(gl_FragCoord.x/u_Width,0.0,gl_FragCoord.y/u_Height,1.0);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取canvas元素</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!canvas)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取WebGL绘图上下文</span></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span>(!gl)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化着色器</span></span><br><span class="line">    <span class="keyword">if</span>(!initShaders(gl,VSHADER_SOURCE,FSHADER_SOURCE))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定清空&lt;canvas&gt;颜色</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改2 绘制三角形 </span></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);     <span class="comment">// 三角形</span></span><br><span class="line">    <span class="comment">// gl.drawArrays(gl.LINE_LOOP, 0, n);  // 三角框</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span></span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">3</span>; <span class="comment">// 点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!vertexBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HelloTriangle_FragCoord</span></span><br><span class="line">    <span class="keyword">var</span> u_Width = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_Width&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_Height = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_Height&#x27;</span>);</span><br><span class="line">    gl.uniform1f(u_Width, gl.drawingBufferWidth);</span><br><span class="line">    gl.uniform1f(u_Height, gl.drawingBufferHeight);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h5><p>从左上方到右下方的渐变效果</p>
<p><img src="/images/ColoredTriangle6.png" alt="6"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】19-颜色与纹理-使用多幅纹理</title>
    <url>/19-%E9%A2%9C%E8%89%B2%E4%B8%8E%E7%BA%B9%E7%90%86-%E4%BD%BF%E7%94%A8%E5%A4%9A%E5%B9%85%E7%BA%B9%E7%90%86-MultiTexture/</url>
    <content><![CDATA[<p>对应《WebGL编程指南》代码：21-MultiTexture</p>
<p>要点：纹理映射、多个纹理单元使用</p>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、区别单个纹理单元"><a href="#一、区别单个纹理单元" class="headerlink" title="一、区别单个纹理单元"></a>一、区别单个纹理单元</h3><p>1、片元着色器能够访问两个纹理</p>
<p>2、最终的片元颜色由两个纹理上的纹素颜色共同决定</p>
<p>3、initTextures(gl, n)函数创建了两个纹理对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initTextures</span>(<span class="params">gl, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> texture0 = gl.createTexture(); <span class="comment">//创建纹理对象</span></span><br><span class="line">    <span class="keyword">var</span> texture1 = gl.createTexture();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取u_Sampler的存储位置</span></span><br><span class="line">    <span class="keyword">var</span> u_Sampler0 = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_Sampler0&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_Sampler1 = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_Sampler1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> image0 = <span class="keyword">new</span> Image();<span class="comment">//创建一个image对象</span></span><br><span class="line">    <span class="keyword">var</span> image1 = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册图像加载时间的响应函数</span></span><br><span class="line">    image0.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        loadTexture(gl, n, texture0, u_Sampler0, image0, <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    image1.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        loadTexture(gl, n, texture1, u_Sampler1, image1, <span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浏览器开始加载图像</span></span><br><span class="line">    image0.src = <span class="string">&#x27;../resources/sky.jpg&#x27;</span>;</span><br><span class="line">    image1.src = <span class="string">&#x27;../resources/circle.gif&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、片元着色器"><a href="#二、片元着色器" class="headerlink" title="二、片元着色器"></a>二、片元着色器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform sampler2D u_Sampler0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform sampler2D u_Sampler1;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec2 v_TexCoord;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   vec4 color0 = texture2D(u_Sampler0, v_TexCoord);\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   vec4 color1 = texture2D(u_Sampler1, v_TexCoord);\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = color0 * color1;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1、定义两个uniform变量</p>
<p>2、在<code>void main()</code>函数中，从两个纹理中取出纹素颜色，分别存储到color0和color1中</p>
<p>3、使用两个纹素计算最终的片元颜色（<code>gl_FragColor</code>）</p>
<p>​        这里使用的是颜色矢量的乘法——两个矢量中对应的分量相乘作为新矢量的分量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vec4 color0   r1   g1    b1    a1</span><br><span class="line">vec4 color1   r2   g2    b2    a2</span><br><span class="line">     X      r1*r2 g1*g2 b1*b2 a1*a2</span><br></pre></td></tr></table></figure>

<p>​        因为矩形顶点在两幅纹理图像上的纹理坐标是完全相同的，所以<code>initVertexBuffers(gl)</code>并没有改变。</p>
<h3 id="三、关于loadTexture-函数"><a href="#三、关于loadTexture-函数" class="headerlink" title="三、关于loadTexture()函数"></a>三、关于loadTexture()函数</h3><p>​        由于程序是异步进行的，我们无法预测哪一幅纹理图像先被加载完成。只有当两幅纹理图像都完成加载时，程序才会开始绘图，为此，程序定义了以下两个变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标记纹理单元是否已经就绪</span></span><br><span class="line"><span class="keyword">var</span> g_texUnit0 = <span class="literal">false</span>, g_texUnit1 = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>​        当任意一幅纹理加载完成时，就触发<code>onload</code>事件并调用响应函数<code>loadTexture()</code>。该函数首先根据纹理单元编号0或1来将<code>g_texUnit0</code>或<code>g_texUnit1</code>赋值为true（0先加载完就赋值g_texUnit0为true；1同理）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(texUnit == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    gl.activeTexture(gl.TEXTURE0);</span><br><span class="line">    g_texUnit0 = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    gl.activeTexture(gl.TEXTURE1);</span><br><span class="line">    g_texUnit1 = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        接着，纹理单元编号<code>texUnit</code>被赋给了uniform变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gl.uniform1i(u_Sampler, texUnit);</span><br></pre></td></tr></table></figure>



<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>MultiTexture<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">    Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-matrix.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;MultiTexture.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MultiTexture.js</span></span><br><span class="line"><span class="comment">//顶点着色器程序</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec2 a_TexCoord;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec2 v_TexCoord;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_TexCoord = a_TexCoord;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform sampler2D u_Sampler0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform sampler2D u_Sampler1;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec2 v_TexCoord;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   vec4 color0 = texture2D(u_Sampler0, v_TexCoord);\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   vec4 color1 = texture2D(u_Sampler1, v_TexCoord);\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = color0 * color1;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Specify the color for clearing &lt;canvas&gt;</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set texture</span></span><br><span class="line">    <span class="keyword">if</span> (!initTextures(gl, n)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to intialize the texture.&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesTexCoords = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">            -<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">4</span>;<span class="comment">//顶点数目</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexTexCoordBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexTexCoordBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesTexCoords, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesTexCoords.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE*<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将纹理坐标分配给a_TexCoord并开启它</span></span><br><span class="line">    <span class="keyword">var</span> a_TexCoord = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_TexCoord&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    gl.vertexAttribPointer(a_TexCoord, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE*<span class="number">4</span>, FSIZE*<span class="number">2</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_TexCoord);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initTextures</span>(<span class="params">gl, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> texture0 = gl.createTexture(); <span class="comment">//创建纹理对象</span></span><br><span class="line">    <span class="keyword">var</span> texture1 = gl.createTexture();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取u_Sampler的存储位置</span></span><br><span class="line">    <span class="keyword">var</span> u_Sampler0 = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_Sampler0&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_Sampler1 = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_Sampler1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> image0 = <span class="keyword">new</span> Image();<span class="comment">//创建一个image对象</span></span><br><span class="line">    <span class="keyword">var</span> image1 = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册图像加载时间的响应函数；注意最后一个参数是纹理单元编号</span></span><br><span class="line">    image0.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        loadTexture(gl, n, texture0, u_Sampler0, image0, <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    image1.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        loadTexture(gl, n, texture1, u_Sampler1, image1, <span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浏览器开始加载图像</span></span><br><span class="line">    image0.src = <span class="string">&#x27;../resources/sky.jpg&#x27;</span>;</span><br><span class="line">    image1.src = <span class="string">&#x27;../resources/circle.gif&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标记纹理单元是否已经就绪</span></span><br><span class="line"><span class="keyword">var</span> g_texUnit0 = <span class="literal">false</span>, g_texUnit1 = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadTexture</span>(<span class="params">gl, n, texture, u_Sampler, image, texUnit</span>)</span>&#123;</span><br><span class="line">    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, <span class="number">1</span>);<span class="comment">//对纹理图像进行y轴反转</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(texUnit == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        gl.activeTexture(gl.TEXTURE0);</span><br><span class="line">        g_texUnit0 = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        gl.activeTexture(gl.TEXTURE1);</span><br><span class="line">        g_texUnit1 = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向target绑定纹理对象</span></span><br><span class="line">    gl.bindTexture(gl.TEXTURE_2D, texture);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置纹理参数</span></span><br><span class="line">    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);</span><br><span class="line">    <span class="comment">// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);</span></span><br><span class="line">    <span class="comment">// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);</span></span><br><span class="line">    <span class="comment">//配置纹理图像</span></span><br><span class="line">    gl.texImage2D(gl.TEXTURE_2D, <span class="number">0</span>, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将0号纹理传递给着色器</span></span><br><span class="line">    gl.uniform1i(u_Sampler, texUnit);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(g_texUnit0 &amp;&amp; g_texUnit1)</span><br><span class="line">        gl.drawArrays(gl.TRIANGLE_STRIP, <span class="number">0</span>, n);<span class="comment">//绘制矩形</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/MultiTexture.png" alt="1"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】27-光照-运动物体的光照效果</title>
    <url>/27-%E5%85%89%E7%85%A7-%E8%BF%90%E5%8A%A8%E7%89%A9%E4%BD%93%E7%9A%84%E5%85%89%E7%85%A7%E6%95%88%E6%9E%9C-LightedTranslatedRotatedCube/</url>
    <content><![CDATA[<p>对应《WebGL编程指南》第八章 39-LightedTranslatedRotatedCube</p>
<p>要点：平行光、漫反射+环境反射、魔法矩阵（逆转置矩阵）</p>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、坐标变换引起的法向量变化"><a href="#一、坐标变换引起的法向量变化" class="headerlink" title="一、坐标变换引起的法向量变化"></a>一、坐标变换引起的法向量变化</h3><p>在程序 LightedTranslatedRotatedCube 中，立方体先绕 z 轴顺时针旋转了90度，然后沿着 y 轴平移了0.9个单位。场景中的光照情况与前一节的 LightedCube_ambient 一样，既有平行光又有环境光。结果如下图：</p>
<p><img src="/images/LightedTranslatedRotatedCube1.png" alt="LightedTranslatedRotatedCube"></p>
<p><u>立方体旋转时，每个表面的法向量也会随之变化</u>。在下图中，我们沿着 z 轴负方向观察一个立方体，最左边是立方体的初始状态，途中标出了立方体右侧面的法向量（1, 0, 0），它指向 x 轴正方向，然后对该立方体进行变换，观察右侧面法向量随之变化的情况。</p>
<p><img src="/images/LightedTranslatedRotatedCube2.png" alt="坐标变换引起的法向量变化"></p>
<p>由上图可知：</p>
<ul>
<li>平移变换不会改变法向量，因为平移不会改变物体的方向。</li>
<li>旋转变换会改变法向量，因为旋转改变了物体的方向。</li>
<li>缩放变换对法向量的影响较为复杂。最右侧的图显示了立方体先旋转了45度，再在y轴上拉伸至原来的2倍的情况。此时法向量改变了，因为表面的朝向改变了。但是，如果缩放比例在所有轴上都一致的话，那么法向量就不会变化。最后，即使物体在某些轴上的缩放比例并不一致，法向量也并不一定会变化，比如将最左侧图中的立方体在y轴方向上拉伸两倍，法向量就不会变化。</li>
</ul>
<p>显然，在对物体进行不同变化时，法向量的变化情况较为复杂。这时候，数学公式就会派上用场了。</p>
<h3 id="二、魔法矩阵：逆转置矩阵"><a href="#二、魔法矩阵：逆转置矩阵" class="headerlink" title="二、魔法矩阵：逆转置矩阵"></a>二、魔法矩阵：逆转置矩阵</h3><h4 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h4><p>在第4章中曾讨论过，对顶点进行变换的矩阵称为<a href="https://freepiao.cn/13-%E4%BD%BF%E7%94%A8Matrix4%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2%E5%A4%8D%E5%90%88%E5%8F%98%E6%8D%A2-RotatedTranslatedTriangle/#%E4%B8%80%E3%80%81%E6%A8%A1%E5%9E%8B%E5%8F%98%E6%8D%A2"><strong>模型矩阵</strong></a>。如何计算变换之后的法向量呢？只要将变换之前的法向量乘以模型矩阵的<strong>逆转置矩阵</strong>即可。<u>所谓逆转置矩阵，就是逆矩阵的转置</u>。</p>
<p>逆矩阵的含义是，如果矩阵 M 的逆矩阵是 R，那么 R * M 或 M * R 的结果都是<u>单位矩阵</u>。转置的意思是，将矩阵的<u>行列进行调换</u>。</p>
<h4 id="2-2-使用规则"><a href="#2-2-使用规则" class="headerlink" title="2.2 使用规则"></a>2.2 使用规则</h4><p>逆转置矩阵的用法总结如下：</p>
<p><strong>规则：用法向量乘以模型矩阵的逆转置矩阵，就可以求得变换后的法向量。</strong></p>
<p>求逆转置矩阵的两个步骤：</p>
<ul>
<li>求原矩阵的逆矩阵</li>
<li>将上一步求得的逆矩阵进行转置</li>
</ul>
<h4 id="2-3-setInverseOf与transpose"><a href="#2-3-setInverseOf与transpose" class="headerlink" title="2.3 setInverseOf与transpose"></a>2.3 setInverseOf与transpose</h4><p>Matrix4 对象提供了便捷的方法来完成上述任务：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Matrix4.setInverseOf(m)</td>
<td>使自身（调用该方法的Matrix4实例）成为矩阵m的逆矩阵</td>
</tr>
<tr>
<td>Matrix4.transpose()</td>
<td>对自身进行转置操作，并将自身设定为转置后的结果</td>
</tr>
</tbody></table>
<p>假设模型矩阵存储在 modelMatrix 对象中，那么下面这段代码将会计算它的 逆转置矩阵，并将其存储在 normalMatrix 对象中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> u_NormalMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_NormalMatrix&#x27;</span>);</span><br><span class="line"><span class="comment">// 用来变换法向量的矩阵</span></span><br><span class="line"><span class="keyword">var</span> normalMatrix = <span class="keyword">new</span> Matrix4(); </span><br><span class="line"><span class="comment">// 根据模型矩阵计算用来变换法向量的矩阵</span></span><br><span class="line">normalMatrix.setInverseOf(modelMatrix);</span><br><span class="line">normalMatrix.transpose();</span><br><span class="line">gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, normalMatrix.elements);</span><br></pre></td></tr></table></figure>

<h3 id="三、程序分析"><a href="#三、程序分析" class="headerlink" title="三、程序分析"></a>三、程序分析</h3><p>下面来看看示例程序 LightedTranslatedRotatedCube.js 的代码。该程序<u>使立方体绕 z 轴顺时针旋转90度，然后沿 y 轴平移0.9个单位</u>，并且处于<u>平行光和环境光</u>的照射下。立方体在变换之前，与 LightedCube_ambient 中的立方体完全相同。</p>
<p>核心代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> + <span class="comment">//表面基底色</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> + <span class="comment">//法向量</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_NormalMatrix;\n&#x27;</span> + <span class="comment">//用来变换法向量的矩阵</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightColor;\n&#x27;</span> + <span class="comment">//光线颜色</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightDirection;\n&#x27;</span> + <span class="comment">//归一化的世界坐标（入射光方向）</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_AmbientLight;\n&#x27;</span> + <span class="comment">//环境光颜色</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   vec3 normal = normalize(vec3(u_NormalMatrix * a_Normal));\n&#x27;</span> + <span class="comment">//对法向量进行归一化</span></span><br><span class="line">    <span class="string">&#x27;   float nDotL = max(dot(u_LightDirection, normal), 0.0);\n&#x27;</span> + <span class="comment">//计算光线方向和法向量的点积</span></span><br><span class="line">    <span class="string">&#x27;   vec3 diffuse = u_LightColor * vec3(a_Color) * nDotL;\n&#x27;</span> + <span class="comment">//计算漫反射光的颜色</span></span><br><span class="line">    <span class="string">&#x27;   vec3 ambient = u_AmbientLight * vec3(a_Color);\n&#x27;</span> + <span class="comment">//计算环境光产生的反射光颜色</span></span><br><span class="line">    <span class="string">&#x27;   v_Color = vec4(diffuse + ambient, a_Color.a);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun main()</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u_NormalMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_NormalMatrix&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4(); <span class="comment">//模型矩阵</span></span><br><span class="line"><span class="keyword">var</span> normalMatrix = <span class="keyword">new</span> Matrix4(); <span class="comment">// 用来变换法向量的矩阵</span></span><br><span class="line"></span><br><span class="line">modelMatrix.setTranslate(<span class="number">0</span>,<span class="number">0.9</span>,<span class="number">0</span>);<span class="comment">//y轴平移</span></span><br><span class="line">modelMatrix.rotate(<span class="number">90</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//绕z轴旋转</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据模型矩阵计算用来变换法向量的矩阵</span></span><br><span class="line">normalMatrix.setInverseOf(modelMatrix);</span><br><span class="line">normalMatrix.transpose();</span><br><span class="line"></span><br><span class="line">gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, normalMatrix.elements);</span><br></pre></td></tr></table></figure>

<p>顶点着色器的流程与 LightedCube_ambient 类似，区别在于，本例根据前述的规则先用模型矩阵的逆转置矩阵对 <code>a_Normal</code> 进行了变换，再赋值给 normal，而不是直接赋值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LightedCube_ambient</span></span><br><span class="line"><span class="string">&#x27;   vec3 normal = normalize(vec3(a_Normal));\n&#x27;</span> + <span class="comment">//对法向量进行归一化</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 本节代码</span></span><br><span class="line"><span class="string">&#x27;   vec3 normal = normalize(vec3(u_NormalMatrix * a_Normal));\n&#x27;</span> + <span class="comment">//对法向量进行归一化</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>a_Normal</code> 是 vec4 类型的，<code>a_NormalMatrix</code> 是 <code>mat4</code> 类型的，两者可以相乘，其<u>结果也是 vec4 类型</u>。我们只需要知道结果的前三个分量，所以使用 vec3(）函数取其前3个分量，转为 vec3 类型。你也可以使用 .xyz 来这样做，比如这样写：<code>(u_NomalMatrix*a_Normal).xyz</code>。</p>
</blockquote>
<p>现在你已经了解了在物体旋转和平移时，如何变换每个顶点的法向量了。下面来看在 JS 代码中如何计算传给着色器的 <code>u_NormalMatrix变量</code>的矩阵。</p>
<p><code>u_NormalMatrix</code> 是模型矩阵的逆转置矩阵。实例中立方体先绕 z 轴旋转再沿 y 轴平移，所以首先使用 <code>setTranslate()</code>和 <code>rotate()</code>计算出<u>模型矩阵</u>；接着求模型矩阵的<u>逆矩阵</u>，再对结果进行<u>转置</u>，得到逆转置矩阵 <code>normalMatrix</code>；最后，将逆转置军阵传给着色器中的 u_NormalMatrix 变量。gl.uniformMatrix4fv()函数的第2个参数指定是否对矩阵矩形转置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据模型矩阵计算用来变换法向量的矩阵</span></span><br><span class="line">normalMatrix.setInverseOf(modelMatrix);</span><br><span class="line">normalMatrix.transpose();</span><br><span class="line"><span class="comment">// 将用来变换法向量的矩阵传给u_NormalMatrix变量</span></span><br><span class="line">gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, normalMatrix.elements);</span><br></pre></td></tr></table></figure>

<p>与 LightedCube_ambient 相比，立方体各个表面的颜色没有改变，只是<u>位置上移动了一段距离</u>，这是因为：</p>
<ul>
<li>平移没有改变法向量</li>
<li>旋转虽然改变了法向量，但这里恰好旋转了90度，原来的前面现在处在右侧面的位置上，所以立方体看上去没有变化</li>
<li>场景中的光照条件不会随着立方体位置的变化而变化</li>
<li>漫反射光在个方向上是均匀的</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LightedTranslatedRotatedCube.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> + <span class="comment">//表面基底色</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> + <span class="comment">//法向量</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_NormalMatrix;\n&#x27;</span> + <span class="comment">//用来变换法向量的矩阵</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightColor;\n&#x27;</span> + <span class="comment">//光线颜色</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightDirection;\n&#x27;</span> + <span class="comment">//归一化的世界坐标（入射光方向）</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_AmbientLight;\n&#x27;</span> + <span class="comment">//环境光颜色</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   vec3 normal = normalize(vec3(u_NormalMatrix * a_Normal));\n&#x27;</span> + <span class="comment">//对法向量进行归一化</span></span><br><span class="line">    <span class="string">&#x27;   float nDotL = max(dot(u_LightDirection, normal), 0.0);\n&#x27;</span> + <span class="comment">//计算光线方向和法向量的点积</span></span><br><span class="line">    <span class="string">&#x27;   vec3 diffuse = u_LightColor * vec3(a_Color) * nDotL;\n&#x27;</span> + <span class="comment">//计算漫反射光的颜色</span></span><br><span class="line">    <span class="string">&#x27;   vec3 ambient = u_AmbientLight * vec3(a_Color);\n&#x27;</span> + <span class="comment">//计算环境光产生的反射光颜色</span></span><br><span class="line">    <span class="string">&#x27;   v_Color = vec4(diffuse + ambient, a_Color.a);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the clear color and enable the depth test</span></span><br><span class="line">    gl.clearColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_MvpMatrix&#x27;</span>);<span class="comment">//模型视图投影矩阵</span></span><br><span class="line">    <span class="keyword">var</span> u_NormalMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_NormalMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_LightColor = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_LightColor&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_LightDirection = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_LightDirection&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_AmbientLight = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_AmbientLight&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    gl.uniform3f(u_LightColor, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>); <span class="comment">//设置光线颜色为白色</span></span><br><span class="line">    gl.uniform3f(u_AmbientLight, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>); <span class="comment">//设置环境光颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lightDirection = <span class="keyword">new</span> Vector3([<span class="number">0.5</span>, <span class="number">3.0</span>, <span class="number">4.0</span>]);<span class="comment">//设置光线方向（世界坐标系下）</span></span><br><span class="line">    lightDirection.normalize();<span class="comment">//归一化</span></span><br><span class="line">    gl.uniform3fv(u_LightDirection, lightDirection.elements);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4(); <span class="comment">//模型矩阵</span></span><br><span class="line">    <span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4(); <span class="comment">//模型视图投影矩阵</span></span><br><span class="line">    <span class="keyword">var</span> normalMatrix = <span class="keyword">new</span> Matrix4(); <span class="comment">//用来变换法向量的矩阵</span></span><br><span class="line"></span><br><span class="line">    modelMatrix.setTranslate(<span class="number">0</span>,<span class="number">0.9</span>,<span class="number">0</span>);<span class="comment">//y轴平移</span></span><br><span class="line">    modelMatrix.rotate(<span class="number">90</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//绕z轴旋转</span></span><br><span class="line"></span><br><span class="line">    mvpMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span> ,<span class="number">100</span>);</span><br><span class="line">    mvpMatrix.lookAt(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    mvpMatrix.multiply(modelMatrix);</span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据模型矩阵计算用来变换法向量的矩阵</span></span><br><span class="line">    normalMatrix.setInverseOf(modelMatrix);</span><br><span class="line">    normalMatrix.transpose();</span><br><span class="line">    gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, normalMatrix.elements);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create a cube</span></span><br><span class="line">    <span class="comment">//    v6----- v5</span></span><br><span class="line">    <span class="comment">//   /|      /|</span></span><br><span class="line">    <span class="comment">//  v1------v0|</span></span><br><span class="line">    <span class="comment">//  | |     | |</span></span><br><span class="line">    <span class="comment">//  | |v7---|-|v4</span></span><br><span class="line">    <span class="comment">//  |/      |/</span></span><br><span class="line">    <span class="comment">//  v2------v3</span></span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([   <span class="comment">// Vertex coordinates</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([     <span class="comment">// Colors</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>　    <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> normals = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([    <span class="comment">// Normal</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([       <span class="comment">// Indices of the vertices</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">        <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">        <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>,   <span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,    <span class="comment">// up</span></span><br><span class="line">        <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,  <span class="number">12</span>,<span class="number">14</span>,<span class="number">15</span>,    <span class="comment">// left</span></span><br><span class="line">        <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,  <span class="number">16</span>,<span class="number">18</span>,<span class="number">19</span>,    <span class="comment">// down</span></span><br><span class="line">        <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,  <span class="number">20</span>,<span class="number">22</span>,<span class="number">23</span>     <span class="comment">// back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the vertex coordinates and color to the buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, vertices, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Position&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, colors, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Color&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, normals, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Normal&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the indices to the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initArrayBuffer</span>(<span class="params">gl, data, num, type, attribute</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = gl.createBuffer();   <span class="comment">// Create a buffer object</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Write date into the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);</span><br><span class="line">    <span class="comment">// Assign the buffer object to the attribute variable</span></span><br><span class="line">    <span class="keyword">var</span> a_attribute = gl.getAttribLocation(gl.program, attribute);</span><br><span class="line">    <span class="keyword">if</span> (a_attribute &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of &#x27;</span> + attribute);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    gl.vertexAttribPointer(a_attribute, num, type, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Enable the assignment of the buffer object to the attribute variable</span></span><br><span class="line">    gl.enableVertexAttribArray(a_attribute);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p>见顶部</p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构与算法】JavaScript数组-操作数组方法总结</title>
    <url>/Algorithm-Array/</url>
    <content><![CDATA[<p>要点：JavaScript数组、操作数组的方法</p>
<span id="more"></span>



<p>几乎所有的编程语言都原生支持数组类型，因为数组是最简单的内存数据结构。<br>数组通常情况下用于存储一系列同一种数据类型的值。<br>但在 JavaScript 里，数组中可以保存不同类型的值。但我们还是要遵守最佳实践，别这么做（大多数语言都没这个能力）。</p>
<blockquote>
<p>汇总：</p>
<p><strong>不改变原数组的方法(8个):</strong></p>
<p>ES5：</p>
<blockquote>
<p>join、toLocateString、toStrigin、slice、cancat、indexOf、lastIndexOf</p>
</blockquote>
<p>ES7：<br>includes</p>
<p><strong>改变原数组的方法(9个):</strong></p>
<p>ES5:<br>a.pop()、a.shift()、a.push()、a.unshift()、a.reverse()、a.splice()、a.sort()<br>ES6:<br>a.copyWithin() 、a.fill</p>
<p>对于这些能够改变原数组的方法，要注意避免在循环遍历中改变原数组的选项，比如: 改变数组的长度，导致遍历的长度出现问题。</p>
<p><strong>遍历方法(12个):</strong></p>
<p>js中遍历数组并不会改变原始数组的方法总共有12个:</p>
<p>ES5：<br>forEach、every 、some、 fliter、map、reduce、reduceRight、<br>ES6：<br>find、findIndex、keys、values、entries</p>
<p><strong>关于遍历：</strong></p>
<ul>
<li>遍历的效率</li>
<li>尽量不要在遍历的时候，修改后面要遍历的值</li>
<li>尽量不要在遍历的时候修改数组的长度（删除/添加）</li>
</ul>
</blockquote>
<h2 id="创建和初始化数组"><a href="#创建和初始化数组" class="headerlink" title="创建和初始化数组"></a>创建和初始化数组</h2><p><code>new Array()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> daysOfWeek = <span class="keyword">new</span> <span class="built_in">Array</span>(</span><br><span class="line">  <span class="string">&quot;Sunday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Monday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Tuesday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Wednesday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Thursday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Friday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Saturday&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><code>[]</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> daysOfWeek = [</span><br><span class="line">  <span class="string">&quot;Sunday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Monday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Tuesday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Wednesday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Thursday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Friday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Saturday&quot;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="数组常见操作"><a href="#数组常见操作" class="headerlink" title="数组常见操作"></a>数组常见操作</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><h4 id="push-item"><a href="#push-item" class="headerlink" title="push(item)"></a>push(item)</h4><p>添加一个元素到数组的最后位置（<strong>改变原数组</strong>）</p>
<h4 id="unshift-item"><a href="#unshift-item" class="headerlink" title="unshift(item)"></a>unshift(item)</h4><p>在数组首位插入一个元素</p>
<h4 id="splice-index-0-item"><a href="#splice-index-0-item" class="headerlink" title="splice(index, 0, item)"></a>splice(index, 0, item)</h4><p>在指定索引位置插入元素（<strong>改变原数组</strong>）</p>
<blockquote>
<p>splice() 第二个参数为 0 时，表示插入数据。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 在 索引 0 的位置，插入 A</span></span><br><span class="line">myArray.splice(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray); <span class="comment">//--&gt; [&#x27;A&#x27;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><h4 id="pop-item"><a href="#pop-item" class="headerlink" title="pop(item)"></a>pop(item)</h4><p>删除数组最后的元素。（<strong>改变原数组</strong>）</p>
<h4 id="shift-item"><a href="#shift-item" class="headerlink" title="shift(item)"></a>shift(item)</h4><p>删除数组首位的元素（<strong>改变原数组</strong>）</p>
<h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>在数组开始删除一个元素(删且只删除1个),并返回 被删除的元素（<strong>改变原数组</strong>）</p>
<h4 id="splice-start-number"><a href="#splice-start-number" class="headerlink" title="splice(start, number)"></a>splice(start, number)</h4><p>删除指定索引位置的元素</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 删除索引 4 位置起，2 个元素</span></span><br><span class="line">myArray2.splice(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray2); <span class="comment">//--&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><h4 id="splice-index-number-item"><a href="#splice-index-number-item" class="headerlink" title="splice(index, number, item)"></a>splice(index, number, item)</h4><p>功能：从数组中删除元素、插入元素到数组中或者同时完成这两种操作。</p>
<p>输入：第一个参数为指定插入或删除的起始位置，第二个参数为要删除的个数。之后的参数表示需要插入到数组中的元素 。如果只有一个参数，默认删除参数后边的所有元素。</p>
<p>输出：返回一个由删除元素组成的数组。</p>
<p>注意：新建了一个数组，并修改了原数组</p>
<p>例1：修改指定索引位置的number个元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 修改 索引 1 的位置的元素为 AA</span></span><br><span class="line">myArray2.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray3); <span class="comment">//--&gt; [1, &quot;AA&quot;, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<p>例2：修改指定索引位置的几个元素 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="comment">// 在 索引 2 的位置起，修改两个元素为 AA BB</span></span><br><span class="line">myArray2.splice(<span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray3); <span class="comment">//--&gt; [1, 2, &quot;AA&quot;, &quot;BB&quot;, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>

<h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>将数组中所有元素都转化为字符串并连接在一起。</p>
<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>将数组中的元素颠倒顺序。（<strong>改变原数组</strong>）</p>
<h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>数组拼接的功能 ,返回新数组，原数组不受影响。</p>
<h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><p>截取数组生成新数组，原数组不受影响。（<strong>浅拷贝数组的元素</strong>）</p>
<p>返回的数组包含第一个参数指定的位置和所有到但不含第二个参数指定位置之间的所有元素。如果为负数，表示相对于数组中最后一个元素的位置。如果只有一个参数，表示到数组末尾。</p>
<p>参数:</p>
<p><strong>begin</strong>(可选): 索引数值,接受负值，从该索引处开始提取原数组中的元素,默认值为0。</p>
<p><strong>end</strong>(可选):索引数值(不包括),接受负值，在该索引处前结束提取原数组元素，默认值为数组末尾(包括最后一个元素)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aa = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(aa.slice(<span class="number">2</span>)); <span class="comment">//[3,4,5,6]</span></span><br><span class="line"><span class="built_in">console</span>.log(aa.slice(<span class="number">2</span>,<span class="number">8</span>)); <span class="comment">//[3,4,5,6] 超过最大长度，只显示到最后结果</span></span><br><span class="line"><span class="built_in">console</span>.log(aa.slice(<span class="number">2</span>,<span class="number">5</span>)); <span class="comment">//[3,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log(aa.slice(<span class="number">2</span>,-<span class="number">1</span>)); <span class="comment">//[3,4,5] 相对于倒数第一个之前</span></span><br><span class="line"><span class="built_in">console</span>.log(aa.slice(<span class="number">2</span>,-<span class="number">2</span>)); <span class="comment">//[3,4] 相对于倒数第二个之前</span></span><br><span class="line"><span class="built_in">console</span>.log(aa.slice(<span class="number">3</span>)); <span class="comment">//[4,5,6] 一个参数从第三个到最后</span></span><br><span class="line"><span class="built_in">console</span>.log(aa.slice(-<span class="number">2</span>));<span class="comment">//[5,6] 一个参数负值从倒数第二个到最后</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如上：新数组是浅拷贝的，元素是简单数据类型，改变之后不会互相干扰。</p>
<p>如果是复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变。</p>
<p>原因在定义上面说过了的：slice()是浅拷贝，对于复杂的数据类型浅拷贝，<strong>拷贝的只是指向原数组的指针</strong>，所以无论改变原数组，还是浅拷贝的数组，都是<strong>改变原数组的数据</strong>。</p>
</blockquote>
<h4 id="toString-和toLocaleString"><a href="#toString-和toLocaleString" class="headerlink" title="toString()和toLocaleString()"></a>toString()和toLocaleString()</h4><p>将数组的每个元素转化为字符串，并且输入用逗号分隔的字符串列表。功能类似<code>join()</code>;</p>
<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>定义: 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p>
<p>语法:</p>
<p>array.indexOf(searchElement,fromIndex)<br>参数:</p>
<p>searchElement(必须):被查找的元素</p>
<p>fromIndex(可选):开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。</p>
<p>严格相等的搜索:</p>
<p>数组的indexOf搜索跟字符串的indexOf不一样,数组的indexOf使用严格相等===搜索元素，即数组元素要完全匹配才能搜索成功。</p>
<blockquote>
<p>注意：indexOf()不能识别NaN</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="string">&#x27;啦啦&#x27;</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">24</span>,<span class="literal">NaN</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">&#x27;啦&#x27;</span>)); <span class="comment">// -1 </span></span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">&#x27;NaN&#x27;</span>)); <span class="comment">// -1 </span></span><br><span class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="string">&#x27;啦啦&#x27;</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>



<h4 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h4><p>定义: 方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）</p>
<p>语法:</p>
<p>arr.lastIndexOf(searchElement,fromIndex)<br>参数:</p>
<p>searchElement(必须): 被查找的元素</p>
<p>fromIndex(可选): 逆向查找开始位置，默认值数组的长度-1，即查找整个数组。</p>
<p>关于fromIndex有三个规则:</p>
<ol>
<li>正值。如果该值大于或等于数组的长度，则整个数组会被查找。</li>
<li>负值。将其视为从数组末尾向前的偏移。(比如-2，从数组最后第二个元素开始往前查找)</li>
<li>负值。其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="string">&#x27;OB&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;Koro1&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;Koro1&#x27;</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&#x27;Koro1&#x27;</span>]; <span class="comment">// 数组长度为10</span></span><br><span class="line"><span class="comment">// let b=a.lastIndexOf(&#x27;Koro1&#x27;,4); // 从下标4开始往前找 返回下标2</span></span><br><span class="line"><span class="comment">// let b=a.lastIndexOf(&#x27;Koro1&#x27;,100); // 大于或数组的长度 查找整个数组 返回9</span></span><br><span class="line"><span class="comment">// let b=a.lastIndexOf(&#x27;Koro1&#x27;,-11); // -1 数组不会被查找</span></span><br><span class="line"><span class="keyword">let</span> b=a.lastIndexOf(<span class="string">&#x27;Koro1&#x27;</span>,-<span class="number">9</span>); <span class="comment">// 从第二个元素4往前查找，没有找到 返回-1</span></span><br></pre></td></tr></table></figure>



<h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>默认情况下sort()方法没有传比较函数的话，<strong>默认按字母升序</strong>，如果不是元素不是字符串的话，会调用toString()方法将元素转化为字符串的<strong>Unicode</strong>(万国码)位点，然后再比较字符。所以用默认方法排序数据是有问题的。（<strong>改变原数组</strong>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">20</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>];</span><br><span class="line">arr.sort();<span class="comment">// [1, 10, 2, 20, 3]</span></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a-b;    <span class="comment">//升序</span></span><br><span class="line">&#125;); <span class="comment">//[1, 2, 3, 10, 20]</span></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b-a;    <span class="comment">//降序</span></span><br><span class="line">&#125;); <span class="comment">//[20,10,3,2,1]</span></span><br></pre></td></tr></table></figure>

<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>从头至尾遍历数组，为每个元素调用指定函数</p>
<p>输入为一个待遍历函数，函数的参数依次为：数组元素、元素的索引、数组本身</p>
<blockquote>
<p>注意：</p>
<ul>
<li>无法中途退出循环，只能用return退出本次回调，进行下一次回调。</li>
<li>它总是返回 undefined值,即使你return了一个值。</li>
</ul>
</blockquote>
<h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>调用的数组的每一个元素传递给指定的函数，并返回一个新数组 ,<strong>不修改原数组</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> bb= arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(bb); <span class="comment">// [4, 9, 16, 25, 36]</span></span><br></pre></td></tr></table></figure>

<h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>过滤功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。<br>可以巧妙的用来去重</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>];</span><br><span class="line">a.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v,i,self</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> self.indexOf(v) == i;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<h4 id="every-和some"><a href="#every-和some" class="headerlink" title="every()和some()"></a>every()和some()</h4><p>every() 判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。</p>
<p>some() 判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr.every(<span class="function"><span class="params">x</span>=&gt;</span>x&gt;<span class="number">0</span>);<span class="comment">//return true;</span></span><br><span class="line">arr.every(<span class="function"><span class="params">x</span>=&gt;</span>x&gt;<span class="number">5</span>);<span class="comment">//return false;</span></span><br><span class="line">arr.some(<span class="function"><span class="params">x</span>=&gt;</span>x&gt;<span class="number">5</span>);<span class="comment">//return true;</span></span><br></pre></td></tr></table></figure>

<h4 id="reduce-和reduceRight"><a href="#reduce-和reduceRight" class="headerlink" title="reduce()和reduceRight()"></a>reduce()和reduceRight()</h4><p>reduce() 两个参数：函数和递归的初始值。从数组的第一项开始，逐个遍历到最后</p>
<p>reduceRight() 从数组的最后一项开始，向前遍历到第一项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以用reduce快速求数组之和</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h4 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h4><p>定义： 返回一个布尔值，表示某个数组是否包含给定的值</p>
<p>语法：</p>
<p>array.includes(searchElement,fromIndex=0)<br>参数：</p>
<p>searchElement(必须):被查找的元素</p>
<p>fromIndex(可选):默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。</p>
<p>includes方法是为了弥补indexOf方法的缺陷而出现的:</p>
<ol>
<li>indexOf方法不能识别NaN</li>
<li>indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于-1，表达不够直观</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=[<span class="string">&#x27;OB&#x27;</span>,<span class="string">&#x27;Koro1&#x27;</span>,<span class="number">1</span>,<span class="literal">NaN</span>];</span><br><span class="line"><span class="comment">// let b=a.includes(NaN); // true 识别NaN</span></span><br><span class="line"><span class="comment">// let b=a.includes(&#x27;Koro1&#x27;,100); // false 超过数组长度 不搜索</span></span><br><span class="line"><span class="comment">// let b=a.includes(&#x27;Koro1&#x27;,-3); // true 从倒数第三个元素开始搜索 </span></span><br><span class="line"><span class="comment">// let b=a.includes(&#x27;Koro1&#x27;,-100); // true 负值绝对值超过数组长度，搜索整个数组</span></span><br></pre></td></tr></table></figure>



<h3 id="ES6新增"><a href="#ES6新增" class="headerlink" title="ES6新增"></a>ES6新增</h3><h4 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h4><p>定义：返回由所有参数值组成的数组，如果没有参数，就返回一个空数组。</p>
<p>目的：Array.of() 出现的目的是为了解决上述构造器因参数个数不同，导致的行为有差异的问题。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>); <span class="comment">// [3,11,8]</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Array</span>.of(<span class="number">3</span>); <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure>

<h4 id="Arrar-from"><a href="#Arrar-from" class="headerlink" title="Arrar.from()"></a>Arrar.from()</h4><p>定义：用于将两类对象转为真正的数组（不改变原对象，返回新的数组）。</p>
<p>参数：</p>
<p>第一个参数(必需):要转化为真正数组的对象。</p>
<p>第二个参数(可选): 类似数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组。</p>
<p>第三个参数(可选): 用来绑定this。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 对象拥有length属性</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>:<span class="string">&#x27;c&#x27;</span>, <span class="attr">length</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(obj); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;];</span></span><br><span class="line"><span class="comment">// 2. 部署了 Iterator接口的数据结构 比如:字符串、Set、NodeList对象</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">// [&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure>

<h4 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h4><p>定义: 在当前数组内部，将指定位置的成员复制到其他位置,并返回这个数组。</p>
<p>语法:</p>
<p>array.copyWithin(target, start = 0, end = this.length)<br>参数:</p>
<p>三个参数都是数值，如果不是，会自动转为数值.</p>
<ol>
<li>target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</li>
<li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</li>
<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。使用负数可从数组结尾处规定位置。</li>
</ol>
<p>浏览器兼容(MDN): chrome 45,Edge 12,Firefox32,Opera 32,Safari 9, IE 不支持</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// -2相当于3号位，-1相当于4号位</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, -<span class="number">2</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"><span class="keyword">var</span> a=[<span class="string">&#x27;OB1&#x27;</span>,<span class="string">&#x27;Koro1&#x27;</span>,<span class="string">&#x27;OB2&#x27;</span>,<span class="string">&#x27;Koro2&#x27;</span>,<span class="string">&#x27;OB3&#x27;</span>,<span class="string">&#x27;Koro3&#x27;</span>,<span class="string">&#x27;OB4&#x27;</span>,<span class="string">&#x27;Koro4&#x27;</span>,<span class="string">&#x27;OB5&#x27;</span>,<span class="string">&#x27;Koro5&#x27;</span>]</span><br><span class="line"><span class="comment">// 2位置开始被替换,3位置开始读取要替换的 5位置前面停止替换</span></span><br><span class="line">a.copyWithin(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">// [&quot;OB1&quot;,&quot;Koro1&quot;,&quot;Koro2&quot;,&quot;OB3&quot;,&quot;OB3&quot;,&quot;Koro3&quot;,&quot;OB4&quot;,&quot;Koro4&quot;,&quot;OB5&quot;,&quot;Koro5&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h4><p>定义: 使用给定值，填充一个数组。</p>
<p>参数:</p>
<p>第一个元素(必须): 要填充数组的值</p>
<p>第二个元素(可选): 填充的开始位置,默认值为0</p>
<p>第三个元素(可选)：填充的结束位置，默认是为this.length</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<h4 id="keys-amp-values-amp-entries"><a href="#keys-amp-values-amp-entries" class="headerlink" title="keys()&amp;values()&amp;entries()"></a>keys()&amp;values()&amp;entries()</h4><p>遍历键名、遍历键值、遍历键名+键值，三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">array.keys()</span><br><span class="line">array.values()</span><br><span class="line">array.entries()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构与算法】栈（JavaScript版详解）</title>
    <url>/Algorithm-Stack/</url>
    <content><![CDATA[<p>要点：栈（顺序栈、链栈）概念、栈结构的5大应用</p>
<p>先知：数组是一个线性结构，并且可以在数组的任意位置插入和删除元素。但是有时候，我们为了实现某些功能，必须对这种任意性加以<u>限制</u>。栈和队列就是比较常见的受限的线性结构。</p>
<span id="more"></span>

<h2 id="一、什么是栈"><a href="#一、什么是栈" class="headerlink" title="一、什么是栈"></a>一、什么是栈</h2><h3 id="1-1-栈"><a href="#1-1-栈" class="headerlink" title="1.1 栈"></a>1.1 栈</h3><p>栈（stack）是一种<strong>运算受限</strong>的<strong>线性表</strong>：</p>
<p>1、<code>LIFO（last in first out）</code><u>表示就是后进入的元素，第一个弹出栈空间</u>。类似于自动餐托盘，最后放上的托盘，往往先把拿出去使用。</p>
<p>2、其限制是<u>仅允许在表的一端进行<strong>插入</strong>和<strong>删除</strong>运算</u>。这一端被称为<strong>栈顶</strong>，相对地，把另一端称为<strong>栈底</strong>。</p>
<p>3、向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；</p>
<p>4、从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p>
<p>如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.71xt32okr3k0.png" alt="image"></p>
<p>栈的特点：<strong>先进后出，后进先出</strong>。</p>
<p>常见问题：数制转换 表达式求值 括号匹配的检验 八皇后问题 行编辑程序 函数调用 迷宫求解 递归调用的实现</p>
<h3 id="1-2-顺序栈-amp-链栈"><a href="#1-2-顺序栈-amp-链栈" class="headerlink" title="1.2 顺序栈&amp;链栈"></a>1.2 顺序栈&amp;链栈</h3><p><strong>栈</strong> 是<strong>线性表的特例</strong>，其具备先进后出 FILO <strong>特性</strong></p>
<h4 id="1-2-1-顺序栈"><a href="#1-2-1-顺序栈" class="headerlink" title="1.2.1 顺序栈"></a>1.2.1 顺序栈</h4><p>可以使用线性表<strong>的顺序存储结构（即数组）实现栈，将之称之为 顺序栈</strong></p>
<h4 id="1-2-2-链栈"><a href="#1-2-2-链栈" class="headerlink" title="1.2.2 链栈"></a>1.2.2 链栈</h4><p>可以使用<strong>单链表结构实现栈，将之称之为 链栈</strong></p>
<h4 id="1-2-3-顺序栈-amp-链栈的异同"><a href="#1-2-3-顺序栈-amp-链栈的异同" class="headerlink" title="1.2.3 顺序栈&amp;链栈的异同"></a>1.2.3 顺序栈&amp;链栈的异同</h4><h5 id="同【时间复杂度】"><a href="#同【时间复杂度】" class="headerlink" title="同【时间复杂度】"></a>同【时间复杂度】</h5><p>顺序栈和链栈的时间复杂度<strong>均为</strong> $O(1)$</p>
<h5 id="异【空间性能】"><a href="#异【空间性能】" class="headerlink" title="异【空间性能】"></a>异【空间性能】</h5><h6 id="a顺序栈"><a href="#a顺序栈" class="headerlink" title="a顺序栈"></a>a顺序栈</h6><p>顺序栈需要事<strong>先确定一个固定的长度</strong>（数组长度）</p>
<p>可能存在<em>内存空间浪费问题</em>，但它的<em>优势</em>是<em>存取时定位很方便</em></p>
<h6 id="b链栈"><a href="#b链栈" class="headerlink" title="b链栈"></a>b链栈</h6><p>要求<strong>每个元素</strong>都要配套一个<strong>指向下个结点的指针域</strong></p>
<p><em>增大</em>了内存开销，但<em>好处</em>是栈的长度无限</p>
<blockquote>
<p>因此，<em>如果</em>栈的使用过程中元素变化不可预料，有时很小，有时很大，那么最好<em>使用链栈</em>;</p>
<p><em>反之</em>，如果它的变化在可控范围内，则建议使用顺序栈</p>
</blockquote>
<h3 id="1-3-栈的内部实现原理"><a href="#1-3-栈的内部实现原理" class="headerlink" title="1.3 栈的内部实现原理"></a>1.3 栈的内部实现原理</h3><p>栈的内部实现<strong>原理</strong>其实就是<strong>数组或链表的操作</strong></p>
<p>而之所以引入 <strong>栈</strong> 这个概念，<strong>是为了</strong>将程序设计问题模型化</p>
<p>用高层的模块指导特定行为（栈的先进后出特性），划分了不同关注层次，使得思考范围缩小</p>
<p>更加聚焦于我们致力解决的问题核心，简化了程序设计的问题</p>
<h2 id="二、程序中的栈结构"><a href="#二、程序中的栈结构" class="headerlink" title="二、程序中的栈结构"></a>二、程序中的栈结构</h2><p><strong>函数调用栈</strong>：A(B(C(D())))：<br>即 A 函数中调用 B，B 调用 C，C 调用 D；在 A 执行的过程中会将 A 压入栈，随后 B 执行时 B 也被压入栈，函数 C 和 D 执行时也会被压入栈。所以当前栈的顺序为：A-&gt;B-&gt;C-&gt;D（栈顶）；函数 D 执行完之后，会弹出栈被释放，弹出栈的顺序为 D-&gt;C-&gt;B-&gt;A;</p>
<p><strong>递归</strong>：<br>为什么没有停止条件的递归会造成栈溢出？比如函数 A 为递归函数，不断地调用自己（因为函数还没有执行完，不会把函数弹出栈），不停地把相同的函数 A 压入栈，最后造成栈溢出（Queue Overfloat）。</p>
<h2 id="三、练习"><a href="#三、练习" class="headerlink" title="三、练习"></a>三、练习</h2><h4 id="题目1："><a href="#题目1：" class="headerlink" title="题目1："></a>题目1：</h4><p>有 6 个元素 6，5，4，3，2，1 按顺序进栈，问下列哪一个<u>不是合法的出栈顺序</u>？</p>
<p>A：5 4 3 6 1 2 （√）</p>
<p>B：4 5 3 2 1 6 （√）</p>
<p>C：3 4 6 5 2 1 （×）</p>
<p>D：2 3 4 1 5 6 （√）</p>
<p>题目所说的按顺序进栈指的不是一次性全部进栈，而是有进有出，进栈顺序为 6 -&gt; 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1。</p>
<blockquote>
<p>解析：</p>
<p>A 答案：65 进栈，5 出栈，4 进栈出栈，3 进栈出栈，6 出栈，21 进栈，1 出栈，2 出栈（整体入栈顺序符合 654321）。</p>
<p>B 答案：654 进栈，4 出栈，5 出栈，3 进栈出栈，2 进栈出栈，1 进栈出栈，6 出栈（整体的入栈顺序符合 654321）。</p>
<p>C 答案：6543 进栈，3 出栈，4 出栈，之后应该 5 出栈而不是 6，所以错误。</p>
<p>D 答案：65432 进栈，2 出栈，3 出栈，4 出栈，1 进栈出栈，5 出栈，6 出栈。符合入栈顺序。</p>
</blockquote>
<h4 id="题目2："><a href="#题目2：" class="headerlink" title="题目2："></a>题目2：</h4><p><img src="/images/algorithm15.png" alt="1"></p>
<h4 id="题目3："><a href="#题目3：" class="headerlink" title="题目3："></a>题目3：</h4><p><img src="/images/algorithm16.png" alt="2"></p>
<h2 id="四、栈结构实现"><a href="#四、栈结构实现" class="headerlink" title="四、栈结构实现"></a>四、栈结构实现</h2><h3 id="4-1-栈常见的操作"><a href="#4-1-栈常见的操作" class="headerlink" title="4.1 栈常见的操作"></a>4.1 栈常见的操作</h3><p><code>push()</code> 添加一个新元素到栈顶位置。</p>
<p><code>pop()</code> 移除栈顶的元素，同时返回被移除的元素。</p>
<p><code>peek()</code> 返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）。</p>
<p><code>isEmpty()</code> 如果栈里没有任何元素就返回 <code>true</code>，否则返回 <code>false</code>。</p>
<p><code>size()</code> 返回栈里的元素个数。这个方法和数组的 <code>length</code> 属性类似。</p>
<p><code>toString()</code> 将栈结构的内容以字符串的形式返回。</p>
<h3 id="4-2-JavaScript-代码实现栈结构"><a href="#4-2-JavaScript-代码实现栈结构" class="headerlink" title="4.2 JavaScript 代码实现栈结构"></a>4.2 JavaScript 代码实现栈结构</h3><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><p>用js内置对象Array实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 栈结构的封装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Map</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// push(item) 压栈操作，往栈里面添加元素</span></span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items.push(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// pop() 出栈操作，从栈中取出元素，并返回取出的那个元素</span></span><br><span class="line">  <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// peek() 查看栈顶元素</span></span><br><span class="line">  <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.items.length - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 判断栈是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取栈中元素个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 返回以字符串形式的栈内元素数据</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      result += item + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedStack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.ele = ele;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>,</span><br><span class="line">        top; <span class="comment">//栈顶指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//压栈操作</span></span><br><span class="line">    <span class="built_in">this</span>.push = <span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(ele);</span><br><span class="line">        top ? node.next = top : top = node;</span><br><span class="line">        top = node;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//退栈操作</span></span><br><span class="line">    <span class="built_in">this</span>.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> current = top;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (top) &#123;</span><br><span class="line">            top = current.next;</span><br><span class="line">            current.next = <span class="literal">null</span>;</span><br><span class="line">            length--;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;null stack&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.top = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//toString 从栈顶到栈底</span></span><br><span class="line">    <span class="built_in">this</span>.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> string = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        current = top;</span><br><span class="line">        <span class="keyword">while</span> (current) &#123;</span><br><span class="line">            string += current.ele + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.clear = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        top = <span class="literal">null</span>;</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">let</span> myStack = <span class="keyword">new</span> LinkedStack();</span><br><span class="line">myStack.push(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">myStack.push(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">myStack.push(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">myStack.push(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(myStack.toString()) <span class="comment">// 4 3 2 1</span></span><br><span class="line">myStack.pop()</span><br><span class="line"><span class="built_in">console</span>.log(myStack.toString()) <span class="comment">// 3 2 1</span></span><br><span class="line">myStack.pop()</span><br><span class="line">myStack.pop()</span><br><span class="line"><span class="built_in">console</span>.log(myStack.pop()) <span class="comment">// Node &#123; ele: &#x27;1&#x27;, next: null &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(myStack.pop()) <span class="comment">// null stack</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-测试封装的栈结构"><a href="#4-3-测试封装的栈结构" class="headerlink" title="4.3 测试封装的栈结构"></a>4.3 测试封装的栈结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// push() 测试</span></span><br><span class="line">stack.push(<span class="number">1</span>);</span><br><span class="line">stack.push(<span class="number">2</span>);</span><br><span class="line">stack.push(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stack.items); <span class="comment">//--&gt; [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pop() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.pop()); <span class="comment">//--&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// peek() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.peek()); <span class="comment">//--&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isEmpty() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.isEmpty()); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.size()); <span class="comment">//--&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.toString()); <span class="comment">//--&gt; 1 2</span></span><br></pre></td></tr></table></figure>

<h2 id="五、栈结构的简单应用"><a href="#五、栈结构的简单应用" class="headerlink" title="五、栈结构的简单应用"></a>五、栈结构的简单应用</h2><h3 id="5-1-进制转换"><a href="#5-1-进制转换" class="headerlink" title="5.1 进制转换"></a>5.1 进制转换</h3><p>利用栈结构的特点封装实现<strong>十进制转换为二进制</strong>的方法。</p>
<p>原理：</p>
<p><img src="/images/algorithm17.png" alt="3"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec2bin</span>(<span class="params">dec</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// new 一个 Map，保存余数</span></span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当不确定循环次数时，使用 while 循环</span></span><br><span class="line">  <span class="keyword">while</span> (dec &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 除二取余法</span></span><br><span class="line">    stack.push(dec % <span class="number">2</span>); <span class="comment">// 获取余数，放入栈中</span></span><br><span class="line">    dec = <span class="built_in">Math</span>.floor(dec / <span class="number">2</span>); <span class="comment">// 除数除以二，向下取整</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> binaryString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// 不断地从栈中取出元素（0 或 1），并拼接到一起。</span></span><br><span class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    binaryString += stack.pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> binaryString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dec2bin() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(dec2bin(<span class="number">100</span>)); <span class="comment">//--&gt; 1100100</span></span><br><span class="line"><span class="built_in">console</span>.log(dec2bin(<span class="number">88</span>)); <span class="comment">//--&gt; 1011000</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-进制转换进阶"><a href="#5-2-进制转换进阶" class="headerlink" title="5.2 进制转换进阶"></a>5.2 进制转换进阶</h3><p>把<strong>十进制转化为任何进制</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseConverter</span>(<span class="params">decNum, base</span>) </span>&#123;	<span class="comment">//十进制转换为任意进制		</span></span><br><span class="line">	<span class="keyword">var</span> base = (base &gt;= <span class="number">2</span> &amp;&amp; base &lt;= <span class="number">16</span>) ? base : <span class="number">10</span>,</span><br><span class="line">		remStack = <span class="keyword">new</span> Stack(),</span><br><span class="line">		rem,</span><br><span class="line">		baseStr = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">		digits = <span class="string">&#x27;0123456789ABCDEF&#x27;</span>;</span><br><span class="line">	<span class="keyword">while</span>(decNum) &#123;</span><br><span class="line">		rem = <span class="built_in">Math</span>.floor(decNum % base);</span><br><span class="line">		decNum = <span class="built_in">Math</span>.floor(decNum / base);</span><br><span class="line">		remStack.push(rem);		<span class="comment">//余数放到栈中</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(!remStack.isEmpty()) &#123;</span><br><span class="line">		baseStr += digits[remStack.pop()];	<span class="comment">//利用pop把栈内元素逐一弹出，将余数拼接成为一个字符串</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> baseStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-3-用栈判断回文"><a href="#5-3-用栈判断回文" class="headerlink" title="5.3 用栈判断回文"></a>5.3 用栈判断回文</h3><p>回文是这样一种现象：一个单词，短语或者数字，<strong>从前往后和从后往前写都是一样的</strong>。比如单词“dad”，“racecar”就是回文；如果忽略空格和标点符号，下面这个句子也是回文，“A man, a plan, a canal: Panama”，数字1001也是回文。</p>
<p>使用栈可以轻松的判断一个字符是否是回文。我们将拿到的字符串的每个字符<strong>按照从左至右的顺序入栈</strong>，当所有字符都入栈之后站内就保存了一个反转后的字符串，最后的字符在栈顶，第一个在栈尾。字符串完全压入站内后，通过持续弹出栈中的每个字母就可以的大一个新的字符串，该字符串刚好与原来的字符串顺序相反。我们只要比较这两个字符串即可，如果他们相等就说明这个是一个回文。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">word</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;word.length; ++i) &#123;</span><br><span class="line">        s.push(word[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> reword = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(s.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        reword += s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(word == reword)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> word = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(isPalindrome(word))&#123;</span><br><span class="line">    <span class="built_in">document</span>.writeln(word + <span class="string">&quot; is a palindrome.&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.writeln(word + <span class="string">&quot; is not a palindrome&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">word = <span class="string">&quot;racecar&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(isPalindrome(word))&#123;</span><br><span class="line">    <span class="built_in">document</span>.writeln(word + <span class="string">&quot; is a palindrome.&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.writeln(word + <span class="string">&quot; is not a palindrome&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出结果如下：</p>
<p>hello is not a palindrome<br>racecar is a palindrome. </p>
</blockquote>
<h3 id="5-4-用栈实现递归"><a href="#5-4-用栈实现递归" class="headerlink" title="5.4 用栈实现递归"></a>5.4 用栈实现递归</h3><p>计算阶乘可以使用递归算法，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用栈来模拟阶乘过程，例如：首先将5到1压入栈内，然后使用给一个循环，将数字一次弹出连乘就得到正确的答案，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fact</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">while</span> (n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        s.push(n--);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> product = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (s.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        product *= s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.writeln(fact(<span class="number">5</span>)); <span class="comment">// 120</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5-使用栈判断表达式中的括号是否完整"><a href="#5-5-使用栈判断表达式中的括号是否完整" class="headerlink" title="5.5 使用栈判断表达式中的括号是否完整"></a>5.5 使用栈判断表达式中的括号是否完整</h3><p>表达式中的{和}，(和)，[和]必须是匹配的，不然的话表达式就会出现语法错误，使用栈可以判断表达式中的括号是否左右匹配。思路是遇到左括号就入栈，遇到右括号就和当前栈顶元素匹配，如果匹配成功就将栈顶元素出栈，最后判断栈中元素个数，如果是0就代表是完整的，否则就是不完整的。代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMatch</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="string">&quot;(&#123;[&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> right = <span class="string">&quot;)&#125;]&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (str[i])&#123;</span><br><span class="line">        <span class="comment">//左符号入栈</span></span><br><span class="line">        <span class="keyword">if</span>(left.indexOf(str[i])&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">            s.push(str[i])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遇到右括号</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( right.indexOf(str[i])&gt;-<span class="number">1</span> &amp;&amp; right.indexOf( str[i] ) == left.indexOf( s.peek()) )&#123;</span><br><span class="line">            s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    document.writeln( s.peek() );</span></span><br><span class="line">    <span class="keyword">if</span>(s.length() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.writeln(str + <span class="string">&quot; is match success&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.writeln(str + <span class="string">&quot; is not match&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isMatch(<span class="string">&quot;2.3 + &#123;23 / 12 + (3.14159×0.24)&quot;</span>);</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>code</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构与算法】线性表</title>
    <url>/Algorithm-linearList/</url>
    <content><![CDATA[<p>要点：线性表知识点汇总</p>
<span id="more"></span>

<p><img src="/images/algorithm7.png" alt="1"></p>
<h3 id="一、线性表的定义"><a href="#一、线性表的定义" class="headerlink" title="一、线性表的定义"></a>一、线性表的定义</h3><p>由n(n≥O)个数据特性相同的元素构成的有限序列称为线性表。</p>
<p><img src="/images/algorithm8.png" alt="2"></p>
<h3 id="二、线性表的特点"><a href="#二、线性表的特点" class="headerlink" title="二、线性表的特点"></a>二、线性表的特点</h3><p>1、线性表中元素的个数<code>n(n≥O)</code>定义为线性表的长度，<code>n=O</code>时称为空表。</p>
<p>2、将非空的线性表(n&gt;O)记作(a1，a2，a3，…，an)；</p>
<p>3、这里的数据元素$a_i (1≤i≤n)$​​​只是个抽象的符号，其具体含义在不同情况下可以不同；</p>
<p>4、在非空的线性表，有且仅有一个开始结点$a_1$​,它没有直接前趋，而仅有一个直接后继；</p>
<p>5、有且仅有一个终端结点$a_n$,它没有直接后继，而仅有一个直接前趋$a_n-1$​；</p>
<p>6、其余的内部结点$a_i$​,(2&lt;i&lt;n-1)都有且仅有一个直接前趋$a_i-1$​和一个直接后继$a_i+1$​​ 。</p>
<blockquote>
<p>线性表的例子: </p>
<p>26个英文字母的字母表：(A, B, C, …，Z)；学生信息表；12星座。</p>
<p>同一线性表中的元素必定具有相同的特性，数据元素之间关系是线性的。</p>
</blockquote>
<h3 id="三、线性表的顺序存储结构"><a href="#三、线性表的顺序存储结构" class="headerlink" title="三、线性表的顺序存储结构"></a>三、线性表的顺序存储结构</h3><h4 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h4><p>是用一段<strong>地址连续的存储单元依次存储</strong>线性表的<strong>数据元</strong></p>
<h4 id="3-2-顺序存储示意图如下所示"><a href="#3-2-顺序存储示意图如下所示" class="headerlink" title="3.2 顺序存储示意图如下所示"></a>3.2 顺序存储示意图如下所示</h4><p><img src="/images/algorithm5.png" alt="3"></p>
<h4 id="3-3-编号地址"><a href="#3-3-编号地址" class="headerlink" title="3.3 编号地址"></a>3.3 编号地址</h4><p><strong>存储器中的每个存储单元都有自己的编号，这个编号称为地址</strong></p>
<h4 id="3-4-存储位置公式"><a href="#3-4-存储位置公式" class="headerlink" title="3.4 存储位置公式"></a>3.4 存储位置公式</h4><p>每个数据元素，不管它是整型，实型还是字符型，它<strong>都是需要</strong>占用一定的存储单元空间的。</p>
<p>假设占用的是 <strong>c 个存储单元</strong>，那么对于线性表的<strong>第 i 个数据元素</strong> $a_i$​ 的<strong>存储位置</strong>都可以由 $a_1$​ 推导算出：</p>
<p>$LOC(a_i) = LOC(a_1) + (i - 1) * c$</p>
<h4 id="3-5-存取操作时间性能"><a href="#3-5-存取操作时间性能" class="headerlink" title="3.5 存取操作时间性能"></a>3.5 存取操作时间性能</h4><p>上述推导公式具体内容如下图所示: </p>
<p><img src="/images/algorithm9.png" alt="4"></p>
<p>通过该公式，就可以<strong>随时算出</strong>线性表中<strong>任意位置的地址</strong>；</p>
<p>不管是第一个还是最后一个，都是相同的时间，<strong>也即</strong>对于线性表<strong>每个位置</strong>的<strong>存入或者取出数据</strong>，对于计算机来说<strong>都是相等的时间</strong>，也就是一个<strong>常数时间</strong>。</p>
<p>因此，线性表的<strong>存取操作时间性能</strong>为 $O(1)$</p>
<h4 id="3-6-随机存储结构"><a href="#3-6-随机存储结构" class="headerlink" title="3.6 随机存储结构"></a>3.6 随机存储结构</h4><p>我们通常将<strong>存取操作</strong>具备<strong>常数性能</strong>（$O(1)$）的<strong>存储结构</strong>称为随机存储结构</p>
<h4 id="3-7-时间复杂度"><a href="#3-7-时间复杂度" class="headerlink" title="3.7 时间复杂度"></a>3.7 时间复杂度</h4><h5 id="对于存取操作"><a href="#对于存取操作" class="headerlink" title="对于存取操作"></a>对于存取操作</h5><p>线性表的顺序存储结构，对于<strong>存取操作</strong>，其<strong>时间复杂度</strong>为 $O(1)$​，因为<strong>元素位置</strong>可以<strong>直接计算得到</strong></p>
<h5 id="对于插入和删除操作"><a href="#对于插入和删除操作" class="headerlink" title="对于插入和删除操作"></a>对于<strong>插入和删除</strong>操作</h5><p>对于<strong>插入和删除</strong>操作，其<strong>时间复杂度</strong>为 $O(n)$，因为插入或删除后，需要<strong>移动其余元素</strong></p>
<h4 id="3-8-使用场景"><a href="#3-8-使用场景" class="headerlink" title="3.8 使用场景"></a>3.8 使用场景</h4><p>线性表顺序存储结构<strong>比较适用于</strong>元素<strong>存取操作</strong>较多，<strong>增删操作较少</strong>的场景</p>
<h3 id="四、线性表的链式存储结构"><a href="#四、线性表的链式存储结构" class="headerlink" title="四、线性表的链式存储结构"></a>四、线性表的链式存储结构</h3><blockquote>
<p>参考：<a href="https://freepiao.cn/Algorithm-SingleLinkedList/">单链表详解</a>、<a href="https://freepiao.cn/Algorithm-DoubleLinkedList/">双向链表详解</a></p>
</blockquote>
<h4 id="4-1-什么是链表"><a href="#4-1-什么是链表" class="headerlink" title="4.1 什么是链表"></a>4.1 什么是链表</h4><p><strong>一个或多个结点</strong>组合而成的数据结构称为链表</p>
<h4 id="4-2-结点"><a href="#4-2-结点" class="headerlink" title="4.2 结点"></a>4.2 结点</h4><p><strong>结点</strong> 一般由<strong>两部分</strong>内容构成：</p>
<ul>
<li><p>数据域：存储<strong>真实数据元素</strong></p>
</li>
<li><p>指针域：存储<strong>下一个</strong>结点的<strong>地址（指针）</strong></p>
</li>
</ul>
<p><img src="/images/algorithm10.png" alt="5"></p>
<h4 id="4-3-头指针-amp-头结点"><a href="#4-3-头指针-amp-头结点" class="headerlink" title="4.3 头指针&amp;头结点"></a>4.3 头指针&amp;头结点</h4><p><strong>头结点的数据</strong>域<strong>可以不存储任何信息</strong>，其指针域存储<strong>指向</strong>第一个结点的指针（<strong>即指向头指针</strong>）</p>
<h5 id="头指针"><a href="#头指针" class="headerlink" title="头指针"></a>头指针</h5><p>一般把<strong>链表</strong>中的<strong>第一个结</strong>点称为 <strong>头指针</strong>，其<strong>存储</strong>链表的<strong>第一个数据元素</strong></p>
<h5 id="头结点"><a href="#头结点" class="headerlink" title="头结点"></a>头结点</h5><p>为了能更加方便地对链表进行操作，会在<strong>单链表的第一个结点（即头指针）前</strong>附<strong>设一个结点</strong>，称为 <strong>头结点</strong></p>
<p><img src="/images/algorithm11.png" alt="6"></p>
<h4 id="4-4-单链表"><a href="#4-4-单链表" class="headerlink" title="4.4 单链表"></a>4.4 单链表</h4><p>在<strong>线性表的顺序存储结构</strong>（即数组）中，其任意一个元素的存储位置可以通过计算得到，因此其数据读取的<strong>时间复杂度为</strong> $O(1)$</p>
<h5 id="单链表的时间复杂度"><a href="#单链表的时间复杂度" class="headerlink" title="单链表的时间复杂度"></a>单链表的时间复杂度</h5><h6 id="对于存取操作-1"><a href="#对于存取操作-1" class="headerlink" title="对于存取操作"></a>对于存取操作</h6><p>对于单链表结构，假设需要获取第 i 个元素，则必须从第一个结点开始依次进行遍历，直到达到第 i 个结点。因此，对于单链表结构而言，其数据元素读取的<strong>时间复杂度</strong>为 $O(n)$</p>
<h6 id="对于插入和删除操作-1"><a href="#对于插入和删除操作-1" class="headerlink" title="对于插入和删除操作"></a>对于<strong>插入和删除</strong>操作</h6><p>对单链表结构来说，对其任意一个位置进行增删操作，其<strong>时间复杂度</strong>为 $O(n)$</p>
<p><strong>因为</strong>需要先进行<strong>遍历找到目标元素</strong>，对头指针的增删操作其<strong>时间复杂度</strong>为 $O(1)$</p>
<h4 id="4-5-线性表和单链表比较"><a href="#4-5-线性表和单链表比较" class="headerlink" title="4.5 线性表和单链表比较"></a>4.5 线性表和单链表比较</h4><p>如果只对一个元素进行增删操作，两种结构并不存在优劣之分，但如果针对多个数据进行增删，由于线性表每一次增删都需要移动 n-i 个元素，即<strong>每个元素</strong>的操作都为 $O(n)$</p>
<p>而单链表只在<strong>第一次</strong>遍历定位目标元素时为$O(n)$，<strong>对后续元素</strong>的增删只需简单地赋值移动指针即可，其时间复杂度为 $O(1)$</p>
<blockquote>
<p>总结：对于<strong>插入或删除数据越频繁</strong>的操作，<strong>单链表</strong>的效率就越明显</p>
</blockquote>
<h4 id="4-6-循环链表"><a href="#4-6-循环链表" class="headerlink" title="4.6 循环链表"></a>4.6 循环链表</h4><p>将单链表中的<strong>终端结点</strong>的<strong>指针端</strong>由空指针<strong>改为指向头结点</strong>，就使整个单链表形成一个环；</p>
<p>这种头尾相接的单链表称为单循环链表，简称 <strong>循环链表</strong>（circular linked list）</p>
<blockquote>
<p>循环链表<strong>不一定需要头结点</strong></p>
</blockquote>
<h4 id="4-7-单链表和循环链表的区别"><a href="#4-7-单链表和循环链表的区别" class="headerlink" title="4.7 单链表和循环链表的区别"></a>4.7 单链表和循环链表的区别</h4><p>为了使空链表与非空链表<strong>处理一致，我们通常设一个头结点（</strong>循环链表不一定需要头结点）</p>
<p>主要差异<strong>就在于循环的判断条件上</strong></p>
<h5 id="单链表判断条件"><a href="#单链表判断条件" class="headerlink" title="单链表判断条件"></a>单链表判断条件</h5><p>尾结点是否<strong>指向空</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p-&gt;next = NULL</span><br></pre></td></tr></table></figure>

<h5 id="循环链表判断条件"><a href="#循环链表判断条件" class="headerlink" title="循环链表判断条件"></a>循环链表判断条件</h5><p>当前结点是否指<strong>向头结点</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p-&gt;next = head</span><br></pre></td></tr></table></figure>

<p>是则当前结点为尾结点</p>
<h4 id="4-8-双向链表"><a href="#4-8-双向链表" class="headerlink" title="4.8 双向链表"></a>4.8 双向链表</h4><p>双向链表（double linked list）：在单链表的每个结点中，再设置一个<strong>指向其前驱结点的指针域</strong></p>
]]></content>
      <categories>
        <category>code</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript 随笔】DOM事件之——拖拽的实现与简单优化</title>
    <url>/JavaScript%20-DOM%E4%BA%8B%E4%BB%B6%E4%B9%8B%E6%8B%96%E6%8B%BD%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><span id="more"></span>

<p><code>鼠标点击文档中任意元素拖拽至任意位置。</code></p>
<h5 id="思路与流程"><a href="#思路与流程" class="headerlink" title="思路与流程"></a><em>思路与流程</em></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">鼠标按下时，开始拖拽：onmousedown</span><br><span class="line">鼠标移动，元素被拖动：onmousemove</span><br><span class="line">鼠标松开，被拖拽元素固定：onmouseup</span><br></pre></td></tr></table></figure>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a><em>代码</em></h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">184</span>, <span class="number">127</span>, <span class="number">59</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#img1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//拖拽box1元素</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">/*流程</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             *  1.当鼠标按下时，开始拖拽：onmousedown</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             *  2.鼠标移动，元素被拖动：onmousemove</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             *  3.鼠标松开，被拖拽元素固定：onmouseup</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;img1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//开启box1</span></span></span><br><span class="line"><span class="javascript">            drag(box1);</span></span><br><span class="line"><span class="javascript">            drag(box2);</span></span><br><span class="line"><span class="javascript">            drag(img);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//优化：3提前一个专门用来设置拖拽的函数</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//参数：obj</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">obj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//第一步</span></span></span><br><span class="line"><span class="javascript">                obj.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//设置box1捕获所有鼠标按下的事件</span></span></span><br><span class="line"><span class="javascript">                obj.setPointerCapture;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//优化 1</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//div的偏移量 鼠标.clientX - 元素.offsetLeft</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//div的偏移量 鼠标.clientY - 元素.offsetTop</span></span></span><br><span class="line"><span class="javascript">                event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ol = event.clientX - obj.offsetLeft;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ot = event.clientY - obj.offsetTop;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">//第二部</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    event = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//第三部</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//获取鼠标坐标</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> left = event.clientX - ol;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> top = event.clientY - ot;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//修改box1的位置</span></span></span><br><span class="line"><span class="javascript">                    obj.style.left = left+<span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    obj.style.top = top+<span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    obj.innerHTML = <span class="string">&#x27;x=&#x27;</span>+left+<span class="string">&#x27; y=&#x27;</span>+top;</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//鼠标松开时，固定在当前位置</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//取消onmousemove</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//取消onmouseup(一次性事件)</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//事件松开时，取消对事件的捕获</span></span></span><br><span class="line"><span class="javascript">                    obj.releasePointerCapture;</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//优化 2</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/1.jpg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a><em>优化</em></h5><ol>
<li><p>鼠标的偏移量</p>
<blockquote>
<p>初始代码的拖拽效果，会出现明显的偏移，即鼠标在移动时，偏离最初点击的位置，用户体验差。</p>
</blockquote>
<p><strong>解决方法</strong></p>
<blockquote>
<p>元素的偏移量 鼠标.clientX - 元素.offsetLeft<br>元素的偏移量 鼠标.clientY - 元素.offsetTop</p>
</blockquote>
</li>
<li><p>拖拽内容时，浏览器会默认去搜索引擎中搜索内容</p>
<p> <strong>解决方法1</strong></p>
<blockquote>
<p>return false (不兼容ie8及以下)</p>
</blockquote>
<p> <strong>解决方法2</strong></p>
<blockquote>
<p>setCapture()方法 (不支持Chrome)</p>
</blockquote>
<blockquote>
<p>setPointerCapture属性：鼠标单击时，捕获所有鼠标按下的事件。<br> releasePointerCapture属性：事件松开时，取消对事件的捕获</p>
</blockquote>
</li>
<li><p>提取该拖拽函数</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//优化：3提前一个专门用来设置拖拽的函数</span></span><br><span class="line"><span class="comment">//参数：obj</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//第一步</span></span><br><span class="line">    obj.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//设置box1捕获所有鼠标按下的事件</span></span><br><span class="line">    obj.setPointerCapture;</span><br><span class="line">    <span class="comment">//优化 1</span></span><br><span class="line">    <span class="comment">//div的偏移量 鼠标.clientX - 元素.offsetLeft</span></span><br><span class="line">    <span class="comment">//div的偏移量 鼠标.clientY - 元素.offsetTop</span></span><br><span class="line">    event = event || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> ol = event.clientX - obj.offsetLeft;</span><br><span class="line">    <span class="keyword">var</span> ot = event.clientY - obj.offsetTop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二部</span></span><br><span class="line">    <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        event = event || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="comment">//第三部</span></span><br><span class="line">        <span class="comment">//获取鼠标坐标</span></span><br><span class="line">        <span class="keyword">var</span> left = event.clientX - ol;</span><br><span class="line">        <span class="keyword">var</span> top = event.clientY - ot;</span><br><span class="line">        <span class="comment">//修改box1的位置</span></span><br><span class="line">        obj.style.left = left+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        obj.style.top = top+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        obj.innerHTML = <span class="string">&#x27;x=&#x27;</span>+left+<span class="string">&#x27; y=&#x27;</span>+top;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//鼠标松开时，固定在当前位置</span></span><br><span class="line">        <span class="comment">//取消onmousemove</span></span><br><span class="line">        <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//取消onmouseup(一次性事件)</span></span><br><span class="line">        <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//事件松开时，取消对事件的捕获</span></span><br><span class="line">        obj.releasePointerCapture;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//优化 2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript动态显示时间</title>
    <url>/JavaScript-%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BA%E6%97%B6%E9%97%B4%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p><strong>知识点</strong></p>
<span id="more"></span>

<blockquote>
<p>Timing事件之 setInterval()方法：<img src="https://img-blog.csdnimg.cn/20200809150657625.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjU0MDEw,size_16,color_FFFFFF,t_70"></p>
</blockquote>
<p><strong>效果</strong><br><img src="https://img-blog.csdnimg.cn/20200809150619988.jpg"></p>
<p><strong>上代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开始&quot;</span> <span class="attr">id</span>=<span class="string">&quot;start&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;结束&quot;</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> start = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;start&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> end = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;end&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> time1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;time&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        start.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">// clearInterval(timer);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                </span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//  年月日</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> year = d.getFullYear();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> month = d.getMonth()+<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> day = d.getDate();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//  时分秒</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> h = d.getHours();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> m = d.getMinutes();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> s = d.getSeconds();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(s&lt;<span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    s = <span class="string">&quot;0&quot;</span>+s;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// time1.innerHTML = s;</span></span></span><br><span class="line"><span class="javascript">                time1.innerHTML = <span class="string">&quot;当前时间：&quot;</span>+year+<span class="string">&quot;-&quot;</span>+month+<span class="string">&quot;-&quot;</span>+day+<span class="string">&quot; &quot;</span>+h+<span class="string">&quot;:&quot;</span>+m+<span class="string">&quot;:&quot;</span>+s;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;,<span class="number">100</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            end.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// alert(&#x27;stop&#x27;);</span></span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>UA伪装爬取网页【★】</title>
    <url>/UA%E4%BC%AA%E8%A3%85%E7%88%AC%E5%8F%96%E7%BD%91%E9%A1%B5/</url>
    <content><![CDATA[<p>复习：<strong>UA检测</strong></p>
<blockquote>
<p>UA：User-Agent（请求载体的身份标识）.</p>
<p>门户网站的服务器会检测对应请求的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，说明该请求是一个正常的请求。但是，如果检测到请求的载体身份标识不是基于某一款浏览器的，则表示该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝该次请求。</p>
</blockquote>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UA伪装：让爬虫对应的请求载体身份标识伪装成某一款浏览器</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># UA伪装：将对应的User-Agent封装到一个字典中</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="comment"># &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://www.sogou.com/web&#x27;</span></span><br><span class="line">    <span class="comment"># 处理url携带的参数：封装到字典中</span></span><br><span class="line">    kw = <span class="built_in">input</span>(<span class="string">&#x27;enter a word:&#x27;</span>)</span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;query&#x27;</span>: kw</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 对指定的url发起的请求对应的url是携带参数的，并且请求过程中处理了参数</span></span><br><span class="line">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class="line"></span><br><span class="line">    page_text = response.text</span><br><span class="line">    fileName = kw + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(fileName, <span class="string">&#x27;保存成功！！！&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>【Web安全扫盲】02-靶场：漏洞练习环境搭建</title>
    <url>/WebSecurity02-environment/</url>
    <content><![CDATA[<p>要点：docker、漏洞练习环境搭建、用于学习 Web 漏洞的常见靶</p>
<span id="more"></span>



<h3 id="一、安装与使用-Docker-容器"><a href="#一、安装与使用-Docker-容器" class="headerlink" title="一、安装与使用 Docker 容器"></a>一、安装与使用 Docker 容器</h3><p>以前我们搭建网站，需要在服务器依次安装 Apache、PHP、MySQL 等应用，比较烦琐，而且不同的源还有不同的应用版本，跟系统环境又可能存在兼容性的问题，这就需要手动添加源地址，甚至是自己编译安装。</p>
<p>后来出现了 XAMPP、PHPStudy 等优秀的 PHP 集成环境，可以非常便捷地安装。但是安装好之后，如果要使用某些 PHP 网站代码，我们仍然需要查找下载，再部署上去。PHP 网站代码有可能与 PHP 版本、系统环境存在兼容问题，或者需要额外安装其他依赖库。若需要迁移服务器，那上述安装过程又得重来一遍。</p>
<p>到底有没有高效的安装方式呢？有，答案就是 Docker。</p>
<h4 id="1-1-Docker-安装"><a href="#1-1-Docker-安装" class="headerlink" title="1.1 Docker 安装"></a>1.1 Docker 安装</h4><p>本节主要在 Ubuntu 系统下进行演示，在 Ubuntu 下可通过以下命令安装 Docker：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install \</span></span><br><span class="line"><span class="bash">    apt-transport-https \</span></span><br><span class="line"><span class="bash">    ca-certificates \</span></span><br><span class="line"><span class="bash">    curl \</span></span><br><span class="line"><span class="bash">    gnupg-agent \</span></span><br><span class="line"><span class="bash">    software-properties-common</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo add-apt-repository \</span></span><br><span class="line"><span class="bash">   <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span></span><br><span class="line"><span class="string"><span class="bash">   <span class="subst">$(lsb_release -cs)</span> \</span></span></span><br><span class="line"><span class="string"><span class="bash">   stable&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure>

<p>如果是 Windows 或 macOS 系统，可以直接从<a href="https://www.docker.com/products/docker-desktop" data-nodeid="17971">官网</a>下载安装包安装，它会自动识别你当前的操作系统，并提供相应平台的下载地址。</p>
<p>安装完成后，可运行以下命令，若输出“Hello from Docker！”则代表安装成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">0e03bdcc26d7: Pull complete </span><br><span class="line">Digest: sha256:4cf9c47f86df71d48364001ede3a4fcd85ae80ce02ebad74156906caff5378bc</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span><span class="bash"> docker run -it ubuntu bash</span></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>

<h4 id="1-2-Docker-常用命令"><a href="#1-2-Docker-常用命令" class="headerlink" title="1.2 Docker 常用命令"></a>1.2 Docker 常用命令</h4><img src="https://s0.lgstatic.com/i/image2/M01/02/AC/Cip5yF_ayluADYpRAAE2DM3MpC8011.png" alt="Lark20201217-105445.png" data-nodeid="17978">



<h3 id="二、安装-sqli-labs-靶场"><a href="#二、安装-sqli-labs-靶场" class="headerlink" title="二、安装 sqli-labs 靶场"></a>二、安装 sqli-labs 靶场</h3><p>sqli-labs 是一款用于学习 SQL 注入的靶场平台，覆盖了各种类型的 SQL 注入，题目共 75 道，按难度划分为 4 页。sqli-labs 靶场的难度循序渐进，对于提高 SQL 注入实战能力有很好的帮助。sqli-labs 靶场的项目开源地址为<a href="https://github.com/Audi-1/sqli-labs" data-nodeid="17983">https://github.com/Audi-1/sqli-labs</a>。</p>
<p>那如何使用 Docker 快速安装 sqli-labs 呢？首先，搜索 sqli-labs 镜像，挑战 STARS 星标最多的镜像，这里选择“acgpiano/sqli-labs”镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker search sqli-labs</span></span><br><span class="line">NAME                       DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">acgpiano/sqli-labs         sql injection labs                              12</span><br><span class="line">c0ny1/sqli-labs            sqli-labs 是一个 sql 注入的练习靶机，项目地址为…                   2</span><br><span class="line">sari3l/sqli-labs-safedog   Base: sqli-labs &amp; safedog(version Linux64_2.…   1</span><br><span class="line">promiseit/sqli-labs                                                        1</span><br><span class="line">0bajie0/sqli-labs                                                          1</span><br><span class="line">tinmin/sqli-labs                                                           0</span><br><span class="line">area39/sqli-labs           sql inject                                      0</span><br><span class="line">hl0rey/sqli-labs                                                           0</span><br><span class="line">sari3l/sqli-labs           Base: Debian-Wheey + MySQL 5.5 + PHP 5          0</span><br><span class="line">sari3l/sqli-labs-yunsuo    Base: sqli-labs &amp; yunsuo(version Linux_3.0.6…   0</span><br><span class="line">aqyoung/sqli-labs                                                          0</span><br><span class="line">xuanxuan3000/sqli-labs                                                     0</span><br><span class="line">fengbj/sqli-labs           lamp+sqli-labs please down 2.0                  0</span><br><span class="line">jylsec/sqli-labs                                                           0</span><br><span class="line">baohs/sqli-labs-cenos                                                      0</span><br><span class="line">mendickxiao/sqli-labs      sqli-labs based on ubuntu                       0</span><br><span class="line">r0ulier/sqli-labs          sqlInjection                                    0</span><br></pre></td></tr></table></figure>

<p>然后拉取镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker pull acgpiano/sqli-labs</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from acgpiano/sqli-labs</span><br><span class="line">10e38e0bc63a: Pull complete </span><br><span class="line">0ae7230b55bc: Pull complete </span><br><span class="line">fd1884d29eba: Pull complete </span><br><span class="line">4f4fb700ef54: Pull complete </span><br><span class="line">2a1b74a434c3: Pull complete </span><br><span class="line">fb846398c5b7: Pull complete </span><br><span class="line">9b56a3aae7bc: Pull complete </span><br><span class="line">1dca99172123: Pull complete </span><br><span class="line">1a57c2088e59: Pull complete </span><br><span class="line">b3f593c73141: Pull complete </span><br><span class="line">d6ab91bda113: Pull complete </span><br><span class="line">d18c99b32885: Pull complete </span><br><span class="line">b2e4d0e62d16: Pull complete </span><br><span class="line">91b5c99fef87: Pull complete </span><br><span class="line">bf0fd25b73be: Pull complete </span><br><span class="line">b2824e2cd9b8: Pull complete </span><br><span class="line">97179df0aa33: Pull complete </span><br><span class="line">Digest: sha256:d3cd6c1824886bab4de6c5cb0b64024888eeb601fe18c7284639db2ebe9f8791</span><br><span class="line">Status: Downloaded newer image for acgpiano/sqli-labs:latest</span><br><span class="line">docker.io/acgpiano/sqli-labs:latest</span><br></pre></td></tr></table></figure>

<p>接着再在容器中运行 sqli-labs：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run -dt --name sqli-labs -p 80:80 --rm acgpiano/sqli-labs                   [13:36:58]</span></span><br><span class="line">2c40ccae95775f7dca6064c95e5eed9c58e66c93e92775a04f22f407b665d331</span><br></pre></td></tr></table></figure>

<p>各参数含义如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-d：代表后台运行</span><br><span class="line">-t：为容器分配伪终端</span><br><span class="line">--name：命名容器</span><br><span class="line">-p：指定映射端口，此处将 acgpiano/sqli-labs 的 80 端口映射到本地的 80 端口</span><br><span class="line">--rm：退出时自动移除容器</span><br></pre></td></tr></table></figure>

<p>现在我们直接访问<a href="http://localhost,可以看到/">http://localhost，可以看到</a> sqli-labs 已经成功运行了。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/12/Cip5yF_ZuAGATUgkAAGVntvgIOM781.png" alt="sqli-labs 成功运行" data-nodeid="17996">

<p>最后点击“Setup/reset Database for labs”链接完成数据库的安装：</p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/33/Ciqc1F_ZuAmAJIaRAAERioET74I030.png" alt="完成数据库安装" data-nodeid="18000">

<p>到此，sqli-labs 安装结束！</p>
<h3 id="三、安装-DVWA-靶场"><a href="#三、安装-DVWA-靶场" class="headerlink" title="三、安装 DVWA 靶场"></a>三、安装 DVWA 靶场</h3><p>DVWA（Damn Vulnerable Web Application）是一款比较著名的漏洞靶场，很多 Web 安全的初学者都会拿它来练习，一些高校以及相关书籍里面也会介绍它。DVWA 的项目开源地址为<a href="https://github.com/digininja/DVWA%E3%80%82">https://github.com/digininja/DVWA。</a></p>
<p>DVWA 靶场可以直接通过 Docker 安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker pull citizenstig/dvwa</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d --name dvwa --rm -p80:80 citizenstig/dvwa</span></span><br></pre></td></tr></table></figure>

<p>安装成功后，打开<a href="http://localhost：">http://localhost：</a></p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/33/Ciqc1F_ZuBWAJBW5AAFVUYKVo8w698.png" alt="Drawing 2.png" data-nodeid="18016">

<p>然后点击“Create/Reset Database”创建数据库，使用默认密码 admin/password 登录，即可正常使用。做题时它能直接提供阅读源码的功能，不过题目相对少一些。</p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/33/Ciqc1F_ZuByAHaCUAAHUf-R43-Q924.png" alt="Drawing 3.png" data-nodeid="18020">

<p>上面的 XSS 漏洞默认是安全的，在实际练习时，可以在“DVWA Security“中设置安全等级，即题目的难度等级，共有 4 等，其中 Impossible 代表的是已修复漏洞的情况，可以用来熟悉如何修复漏洞。</p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/3F/CgqCHl_ZuCOADWKnAAKUKNFpXFI694.png" alt="DVWA 安全等级设置" data-nodeid="18024">

<h3 id="四、安装-Pikachu-靶场"><a href="#四、安装-Pikachu-靶场" class="headerlink" title="四、安装 Pikachu 靶场"></a>四、安装 Pikachu 靶场</h3><p>Pikachu 也是一款 Web 漏洞靶场，涵盖各种 Web 漏洞类型的练习，也是基于 PHP+MySQL 搭建的平台，是由国人开发的。平台采用中文描述和基本的页面设计，相比 sqli-labs 这种单调的界面还是好看很多的。Pikachu 的项目开源地址为<a href="https://github.com/zhuifengshaonianhanlu/pikachu%E3%80%82">https://github.com/zhuifengshaonianhanlu/pikachu。</a></p>
<p>安装 Pikachu 也很简单，通过 Docker 即可快速安装。我们先搜索下镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker search pikachu</span></span><br><span class="line">NAME                                  DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">area39/pikachu                        https://github.com/zhuifengshaonianhanlu/pik…   3</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>然后取第一个镜像安装&amp;运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker pull area39/pikachu</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d --name pikachu --rm -p80:80 area39/pikachu</span></span><br></pre></td></tr></table></figure>

<p>安装成功后，打开<a href="http://localhost即可/">http://localhost即可</a>:</p>
<h3 id="五、CTF-赛题练习"><a href="#五、CTF-赛题练习" class="headerlink" title="五、CTF 赛题练习"></a>五、CTF 赛题练习</h3><p>CTF（Capture The Flag）夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。CTF 起源于 1996 年 DEFCON 全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。发展至今，CTF 已经成为全球范围网络安全圈流行的竞赛形式。</p>
<p>一些 CTF 出题方经常会直接搭建现成的漏洞测试环境供参赛者使用，有些赛后会取消，有些会一直保留。所以你也可以直接利用现成的 CTF 赛题环境来练习，连搭建环境这一步都省去了。对于一些未保留在线赛题环境的 CTF 题目，就只能自己搭建了。</p>
<p>前面的漏洞靶场更新频率不高，CTF 赛题会更与时俱进一些，每年都有新比赛和新赛题，特别是新的漏洞场景和利用技术，这在 CTF 上很容易看到。</p>
<p>各种国内外的赛事、题目与解答（write-up）都可通过该链接获取到，我在这里顺便也介绍几个现成的 Web 漏洞 CTF 在线练习环境：</p>
<ol>
<li><p>XCTF 攻防世界：<a href="https://adworld.xctf.org.cn/">https://adworld.xctf.org.cn</a></p>
</li>
<li><p>SQL 注入挑战平台：<a href="http://redtiger.labs.overthewire.org/">http://redtiger.labs.overthewire.org</a></p>
</li>
<li><p>韩国 Web 安全挑战平台：<a href="https://webhacking.kr/">https://webhacking.kr/</a></p>
</li>
<li><p>Websec CTF 练习平台：<a href="http://www.websec.fr/">http://www.websec.fr/</a></p>
</li>
<li><p>网络信息安全攻防学习平台：<a href="http://hackinglab.cn/index.php">http://hackinglab.cn/index.php</a></p>
</li>
<li><p>国外的 XSS 挑战平台：<a href="http://prompt.ml/">http://prompt.ml/</a></p>
</li>
</ol>
<h3 id="六、安装-VulHub-真实漏洞靶场"><a href="#六、安装-VulHub-真实漏洞靶场" class="headerlink" title="六、安装 VulHub 真实漏洞靶场"></a>六、安装 VulHub 真实漏洞靶场</h3><p>Vulhub 是一款基于 Docker 和 docker-compose 的漏洞测试靶场，进入对应目录并执行一条语句即可启动一个全新的漏洞环境，让漏洞复现变得更加简单，让安全研究者更加专注于漏洞原理本身。Vulhub 的项目开源地址为<a href="https://github.com/vulhub/vulhub%E3%80%82">https://github.com/vulhub/vulhub。</a></p>
<p>前面的靶场都是精心构造的漏洞场景，与真实的漏洞场景还是有一些差异的。为了提高实战水平，熟悉更多的真实漏洞场景，建议你安装 VulHub 来重现各种历史漏洞进行实战练习。</p>
<p>对于每个漏洞，VulHub 都有相应的文档描述其漏洞原理以及测试利用方法，你在重现漏洞后，可以进一步研究相关漏洞类型的利用技术，并对漏洞代码进行阅读，以提高代码审计能力。</p>
<p>我们需要先从 GitHub 上下载 VulHub，然后进行相应目录去创建和运行容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/vulhub/vulhub</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> vulhub/flask/ssti</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker-compose up -d</span></span><br></pre></td></tr></table></figure>

<p>安装使用都很方便。该项目几乎每个月都在更新，非常适合用于检测、利用和防御漏洞时的测试环境搭建。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【Web安全扫盲】03-XSS</title>
    <url>/WebSecurity03-XSS/</url>
    <content><![CDATA[<p>要点：XSS</p>
<span id="more"></span>

<p>在这些常见的Web 漏洞中，<strong>XSS</strong>（Cross-site Script，跨站脚本）漏洞无疑是最多见的。根据 HackerOne 漏洞奖励平台发布的 The 2020 Hacker Report，XSS 漏洞类型占所有报告漏洞中的 23％，排名第一。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/03/7A/Cip5yF_cObWAcn2DAAEyh5k671U380.png" alt="HackerOne 平台上报告的漏洞类型占比" data-nodeid="53288">

<h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>最早的 XSS 漏洞可追溯到 1999 年末，微软安全工程师发现一些网站遭到攻击，网站被插入了一些恶意脚本和图像标签。随后，微软对此类漏洞进行研究分析，并在 2000 年 1 月，正式使用“cross-site scripting”这个名称，然后逐渐被业界采用，留传至今。</p>
<p>跨站脚本（Cross-site Script），按理应该简称为 CSS，但为了与层叠样式表（CSS）区分开，特意改为 XSS。</p>
<p>XSS 漏洞，通常指的是<strong>网站对用户输入数据未做有效过滤，攻击者可以将恶意脚本注入网站页面中，达到执行恶意代码的目的</strong>。攻击者只需要诱使受害者打开特定的网址，就可以在受害者的浏览器中执行被注入的恶意代码，从而窃取用户身份，执行一些敏感操作，或是进行其他的危害行为。</p>
<h3 id="危害：绝不仅仅只是弹框"><a href="#危害：绝不仅仅只是弹框" class="headerlink" title="危害：绝不仅仅只是弹框"></a>危害：绝不仅仅只是弹框</h3><p>一些听过 XSS的同学，可能仅停留在弹框的印象里；我曾在修复此类漏洞时，只是简单地针对alert 函数做了下过滤。这都是对 XSS 攻防原理理解不够造成的误解。其实，只要你想象力够丰富，它的危害是可以造成很大的。</p>
<p>比如 2005 年 10 月 4 日诞生的世界上第一个 XSS 蠕虫：Samy（作者的名字）。Samy 利用网络社交媒体 MySpace的XSS 漏洞传播，受害者会自动将 Samy 本人添加为关注者，并在受害者的用户页面显示一行字串“but most of all，samy is my hero”，并再次插入恶意代码，谁访问受害者的网页谁就会被感染。</p>
<p>Samy 感染的用户呈指数倍增长，最终，超过 100 万用户被感染，作者也因事态发展失控而入狱，并被禁止 3 年内接触计算机，外加 90 小时的社区服务。</p>
<p>图 3：受 Samy 蠕虫攻击后，作者粉丝暴涨</p>
<p>图 4：受 Samy 蠕虫攻击后，受害者的用户页面被篡改</p>
<p>Samy 蠕虫是现实世界中 XSS 攻击的经典案例，除了蠕虫攻击外还有很多其他危害：盗号、钓鱼欺诈、篡改页面、刷广告流量、内网扫描、网页挂马、挖矿、键盘监听、窃取用户隐私等等。</p>
<p>如果能充分利用好业务场景下的功能，再结合一定技术和想象力，XSS 所造成的危害绝不仅仅只是弹框。如果你是开发，在修复 XSS 漏洞过程中，也别单纯想着怎么防止弹框。更为全面的防御方案，我会在下一讲《05｜XSS：漏洞的检测与防御》中介绍。</p>
<p>XSS 漏洞的分类<br>通常 XSS 分为存储型和反射型，但还有一种比较特殊的 DOM 型 XSS，它本身属于反射型 XSS，不过介绍的时候需要单独来讲。因此，我就按 3 种类型划分：反射型、存储型、DOM 型。</p>
<p>反射型 XSS</p>
<p>我们首先来看反射型 XSS。反射型 XSS 又被称为非持久型跨站脚本，它是将攻击代码放在 URL 参数中，而不是存储到服务器，因此需要诱使用户点击才能触发攻击。</p>
<p>以 DVWA 中的反射型 XSS 题目为例，通过向 name 参数输入以下代码即可触发漏洞：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>图5：利用 XSS 漏洞执行注入的JS代码</p>
<p>在 Chrome 浏览器中，用“检查”功能看下网页源码，可以发现我们输入的代码被解析并执行了：</p>
<p>图6：被解析执行的注入的代码</p>
<p>其漏洞代码也非常简单。从 GET 参数 name 获取用户输入后，未经过滤就直接调用 echo 函数输出到页面，最终导致 XSS 的产生。漏洞代码如下：<br><?php
// Is there any input?
if( array_key_exists( "name", $_GET ) && $_GET[ 'name' ] != NULL ) {
    // Feedback for end user
    echo '<pre>Hello ' . $_GET[ 'name' ] . '</pre>';
}
?></p>
<p>有人认为反射型 XSS 的危害不如存储型 XSS，但我认为没有什么区别。这里的挑战主要是URL是否包含攻击代码。</p>
<p>存储型 XSS</p>
<p>第二种 XSS 漏洞是存储型 XSS，它又被称为持久型跨站脚本。攻击者将恶意代码存储到服务器上，只要诱使受害者访问被插入恶意代码的页面即可触发。存储型 XSS 经常出现在一些可以发表评论的地方，如帖子、博客。</p>
<p>在 DVWA 靶场中就有一个存储型 XSS 案例，它是个留言本的功能，支持用户发表评论，然后将用户输入的数据直接存储到数据库，并输出到页面上。这个过程中因为未做任何的过滤，导致了 XSS 漏洞的产生。</p>
<p>图 7：DVWA 靶场中的存储型 XSS</p>
<p>存储型 XSS 的特点就是不需要在诱使用户访问的URL中包含攻击代码，因为它已经存储到了服务器中，只需要让用户访问包含输出攻击代码的页面即可，漏洞代码如下：<br><?php
if( isset( $_POST[ 'btnSign' ] ) ) {
    // Get input
    $message = trim( $_POST[ 'mtxMessage' ] );
    $name    = trim( $_POST[ 'txtName' ] );
    // Sanitize message input
    $message = stripslashes( $message );
    $message = mysql_real_escape_string( $message );
    // Sanitize name input
    $name = mysql_real_escape_string( $name );
    // Update database
    $query  = "INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );";
    $result = mysql_query( $query ) or die( '<pre>' . mysql_error() . '</pre>' );
    //mysql_close();
}
?></p>
<p>从 POST 参数中获取 mtxMessage 和 txtName 参数后，虽然经过一定过滤才插入到数据库中，但是中括号不会被过滤，在其他地方将其输出到页面后就会被解析（如图 5）。我们在 Message 中输入“<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>”，点击“Sign Guestbook”提交，即可触发漏洞。</p>
<p>图 8：触发漏洞弹框</p>
<p>利用 Chrome 浏览器的“检查”功能查看网页源码，可以发现刚才输入消息中的<code>&lt;script&gt;</code>标签被解析了：</p>
<p>图 9：script 标签被解析</p>
<p>正是它导致弹框的出现。</p>
<p>DOM 型 XSS</p>
<p>最后是 DOM 型 XSS 漏洞，它是基于文档对象模型（Document Object Model，DOM，用于将 Web 页面与脚本语言链接起来的标准编程接口）的一种漏洞，它不经过服务端，而是通过 URL 传入参数去触发，因此也属于反射型 XSS。</p>
<blockquote>
<p>过段时间更新</p>
</blockquote>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket介绍与实战开发</title>
    <url>/Websocket/</url>
    <content><![CDATA[<p>思考：这种网页版的聊天功能应该如何去实现？？</p>
<span id="more"></span>

<h1 id="websocket介绍"><a href="#websocket介绍" class="headerlink" title="websocket介绍"></a>websocket介绍</h1><blockquote>
<p>WebSocket协议是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。</p>
<p>websocket是一种持久协议，http是非持久协议</p>
</blockquote>
<p><strong>现在很多网站都有实时推送的需求，比如聊天，客服咨询等</strong></p>
<p>早期没有websocket时，通过ajax轮询，由于http请求，服务器无法给浏览器主动发送数据，因此需要浏览器定时的给服务器发送请求（比如1s一次）,服务器把最新的数据响应给浏览器。这种模式的缺点就是浪费性能和资源。</p>
<p><img src="imgs/websocket.png"></p>
<p>websocket是一种网络协议，允许客户端和服务端全双工的进行网络通讯，服务器可以给客户端发消息，客户端也可以给服务器发消息。</p>
<h1 id="websocket基本使用"><a href="#websocket基本使用" class="headerlink" title="websocket基本使用"></a>websocket基本使用</h1><p>在HTML5中，浏览器已经实现了websocket的API，直接使用即可。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket">WebSocket-MDN</a></p>
<h2 id="创建websocket对象"><a href="#创建websocket对象" class="headerlink" title="创建websocket对象"></a>创建websocket对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数1： url：连接的websocket属性</span></span><br><span class="line"><span class="comment">// 参数2： protocol，可选的，指定连接的协议</span></span><br><span class="line"><span class="comment">// var socket = new WebSocket(&#x27;ws://echo.websocket.org&#x27;)</span></span><br><span class="line"><span class="keyword">var</span> Socket = <span class="keyword">new</span> WebSocket(url, [protocol] );</span><br></pre></td></tr></table></figure>

<h2 id="websocket事件"><a href="#websocket事件" class="headerlink" title="websocket事件"></a>websocket事件</h2><table>
<thead>
<tr>
<th align="left">事件</th>
<th align="left">事件处理程序</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">open</td>
<td align="left">Socket.onopen</td>
<td align="left">连接建立时触发</td>
</tr>
<tr>
<td align="left">message</td>
<td align="left">Socket.onmessage</td>
<td align="left">客户端接收服务端数据时触发</td>
</tr>
<tr>
<td align="left">error</td>
<td align="left">Socket.onerror</td>
<td align="left">通信发生错误时触发</td>
</tr>
<tr>
<td align="left">close</td>
<td align="left">Socket.onclose</td>
<td align="left">连接关闭时触发</td>
</tr>
</tbody></table>
<h2 id="websocket方法"><a href="#websocket方法" class="headerlink" title="websocket方法"></a>websocket方法</h2><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Socket.send()</td>
<td align="left">使用连接发送数据</td>
</tr>
<tr>
<td align="left">Socket.close()</td>
<td align="left">关闭连接</td>
</tr>
</tbody></table>
<h1 id="使用nodejs开发websocket服务"><a href="#使用nodejs开发websocket服务" class="headerlink" title="使用nodejs开发websocket服务"></a>使用nodejs开发websocket服务</h1><blockquote>
<p>我们刚刚使用了官网提供的echo服务，接下来我们自己通过nodejs实现一个简单的websocket服务。</p>
</blockquote>
<p>使用nodejs开发websocket需要依赖一个第三方包。<a href="https://github.com/sitegui/nodejs-websocket#readme">Nodejs Websocket</a></p>
<h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p>新建一个websocket server端的项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir server-demo</span><br><span class="line"><span class="built_in">cd</span> server-demo</span><br><span class="line">yarn init -y</span><br><span class="line">yarn add nodejs-websocket</span><br><span class="line">touch app.js</span><br></pre></td></tr></table></figure>

<h2 id="开发服务程序"><a href="#开发服务程序" class="headerlink" title="开发服务程序"></a>开发服务程序</h2><p>在app.js中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入第三方模块</span></span><br><span class="line"><span class="keyword">const</span> ws = <span class="built_in">require</span>(<span class="string">&#x27;nodejs-websocket&#x27;</span>)</span><br><span class="line"><span class="comment">// websocket占用的端口号</span></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = ws.createServer(<span class="function"><span class="params">connect</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;新的连接&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接收到客户端的文本内容时触发</span></span><br><span class="line">  connect.on(<span class="string">&#x27;text&#x27;</span>, <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;接收:&#x27;</span> + str)</span><br><span class="line">    <span class="comment">// 把接收到的字符串转换成大写，并且给客户端响应</span></span><br><span class="line">    connect.sendText(str.toUpperCase() + <span class="string">&#x27;!!!!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听关闭事件</span></span><br><span class="line">  connect.on(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;连接关闭了&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听错误事件， 比如浏览器关闭了连接，或者发送的数据格式不对等</span></span><br><span class="line">  connect.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;连接异常&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动websocket服务</span></span><br><span class="line">server.listen(PORT, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`websocket server listening on <span class="subst">$&#123;PORT&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>
<p>在终端中看到<code>websocket server listening on 3000</code>就说明webserver服务启动成功了</p>
<h2 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h2><p>修改客户端中<code>index.js</code>文件中的连接地址,重新进行测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建websocket对象，地址已经修改称为了自己编写的地址</span></span><br><span class="line"><span class="keyword">const</span> URL = <span class="string">&#x27;ws://localhost:3000&#x27;</span></span><br><span class="line"><span class="keyword">const</span> websocket = <span class="keyword">new</span> WebSocket(URL)</span><br></pre></td></tr></table></figure>



<h1 id="websocket开发聊天室程序"><a href="#websocket开发聊天室程序" class="headerlink" title="websocket开发聊天室程序"></a>websocket开发聊天室程序</h1><p>app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="built_in">require</span>(<span class="string">&#x27;nodejs-websocket&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">3000</span></span><br><span class="line"><span class="keyword">const</span> TYPE_MSG = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> TYPE_ENTER = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> TYPE_LEAVE = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userCount = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> server = ws.createServer(<span class="function"><span class="params">connect</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;有新用户连接了&#x27;</span>)</span><br><span class="line">  <span class="comment">// 每次有新用户连接，需要给所有用户发送一条新增用户的消息</span></span><br><span class="line">  userCount++</span><br><span class="line">  connect.userName = <span class="string">&#x27;user&#x27;</span> + userCount</span><br><span class="line">  <span class="comment">// 给所有的用户进行广播</span></span><br><span class="line">  broadcast(&#123;</span><br><span class="line">    <span class="attr">type</span>: TYPE_ENTER,</span><br><span class="line">    <span class="attr">msg</span>: connect.userName + <span class="string">&#x27;进入了聊天室&#x27;</span>,</span><br><span class="line">    <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  connect.on(<span class="string">&#x27;text&#x27;</span>, <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果接收到用户的数据， 需要发送给所有的用户</span></span><br><span class="line">    broadcast(&#123;</span><br><span class="line">      <span class="attr">type</span>: TYPE_MSG,</span><br><span class="line">      <span class="attr">msg</span>: msg,</span><br><span class="line">      <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  connect.on(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;用户断开连接&#x27;</span>)</span><br><span class="line">    userCount--</span><br><span class="line">    <span class="comment">// 给所有的用户发送一条用户离开的消息</span></span><br><span class="line">    broadcast(&#123;</span><br><span class="line">      <span class="attr">type</span>: TYPE_LEAVE,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">`<span class="subst">$&#123;connect.userName&#125;</span>离开了聊天室`</span>,</span><br><span class="line">      <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  connect.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;连接失败&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">broadcast</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  server.connections.forEach(<span class="function"><span class="params">conn</span> =&gt;</span> &#123;</span><br><span class="line">    conn.sendText(<span class="built_in">JSON</span>.stringify(msg))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功了&#x27;</span>, PORT)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/* div &#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">        width: 200px;</span></span></span><br><span class="line"><span class="comment"><span class="css">        height: 200px;</span></span></span><br><span class="line"><span class="comment"><span class="css">        border: 1px solid #000;</span></span></span><br><span class="line"><span class="comment"><span class="css">      &#125; */</span></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于收集输入内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入需要发送的内容&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于发送websocket请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>websocket测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于显示websock服务器的响应 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1. 创建websocket对象, 这个地址是官方提供的地址</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// var socket = new WebSocket(&#x27;ws://echo.websocket.org&#x27;)</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://localhost:3000&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2. 给websocket注册事件</span></span></span><br><span class="line"><span class="javascript">      socket.addEventListener(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 与服务端建立连接的时候触发</span></span></span><br><span class="line"><span class="javascript">        div.innerText = <span class="string">&#x27;恭喜你，与服务端建立连接了&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 如何给服务器发送消息</span></span></span><br><span class="line"><span class="javascript">      button.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        socket.send(input.value)</span></span><br><span class="line"><span class="javascript">        input.value = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 如果接收服务器的数据</span></span></span><br><span class="line"><span class="javascript">      socket.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(e.data)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> dv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        dv.innerHTML = data.msg + <span class="string">&#x27;----&#x27;</span> + data.date</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (data.type === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">          dv.style.color = <span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (data.type === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">          dv.style.color = <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (data.type === <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">          dv.style.color = <span class="string">&#x27;gray&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        div.appendChild(dv)</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      socket.addEventListener(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        div.innerHTML = <span class="string">&#x27;与服务器断开连接&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果使用原生的websocket进行开发，会比较麻烦，比如支持的事件太少，发送的数据只能是字符串格式的，提供的api也很少，类似于广播这种方法都没有，需要自己封装。</p>
<h1 id="socket-io基本使用"><a href="#socket-io基本使用" class="headerlink" title="socket.io基本使用"></a>socket.io基本使用</h1><p><a href="https://socket.io/docs/">socketio</a></p>
<h1 id="基于socket-io开发完整的聊天室"><a href="#基于socket-io开发完整的聊天室" class="headerlink" title="基于socket.io开发完整的聊天室"></a>基于socket.io开发完整的聊天室</h1>]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>bs4解析爬取三国演义所有章节及内容【★★★】</title>
    <url>/bs4%E8%A7%A3%E6%9E%90%E7%88%AC%E5%8F%96%E4%B8%89%E5%9B%BD%E6%BC%94%E4%B9%89%E6%89%80%E6%9C%89%E7%AB%A0%E8%8A%82%E5%8F%8A%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<p>复习：<a href="https://www.runoob.com/w3cnote/python-spider-intro.html">Python爬虫介绍</a></p>
<p>需求：爬取三国演义小说所有的章节标题和章节内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://www.shicimingju.com/book/sanguoyanyi.html</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 对首页的页面数据进行爬取</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;http://www.shicimingju.com/book/sanguoyanyi.html&#x27;</span></span><br><span class="line">    page_text = requests.get(url=url, headers=headers)</span><br><span class="line">    page_text.encoding = <span class="string">&#x27;utf-8&#x27;</span>    <span class="comment"># 解决乱码问题</span></span><br><span class="line">    page_text = page_text.text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在首页中解析出章节的标题和详情页的url</span></span><br><span class="line">    <span class="comment"># 1.实例化BeautifulSoup对象，需要将页面源码数据加载到该对象中</span></span><br><span class="line">    soup = BeautifulSoup(page_text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment"># 解析章节标题和详情页的url</span></span><br><span class="line">    li_list = soup.select(<span class="string">&#x27;.book-mulu &gt; ul &gt; li&#x27;</span>)</span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;./sanguo.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        title = li.a.string</span><br><span class="line">        detail_url = <span class="string">&#x27;http://www.shicimingju.com&#x27;</span>+li.a[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对详情页发起请求，解析出章节内容</span></span><br><span class="line">        detail_page_text = requests.get(url=detail_url, headers=headers)</span><br><span class="line">        detail_page_text.encoding = <span class="string">&#x27;utf-8&#x27;</span>  <span class="comment"># 解决乱码问题</span></span><br><span class="line">        detail_page_text = detail_page_text.text</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解析出详情页中相关的章节内容</span></span><br><span class="line">        detail_soup = BeautifulSoup(detail_page_text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        div_tag = detail_soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;chapter_content&#x27;</span>)</span><br><span class="line">        <span class="comment"># 解析到了章节的内容</span></span><br><span class="line">        content = div_tag.text</span><br><span class="line">        fp.write(<span class="string">&#x27;《&#x27;</span>+title+<span class="string">&#x27;》\n&#x27;</span>+content+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(title, <span class="string">&#x27;爬取成功！！！&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax跨域解决方案</title>
    <url>/ajax-%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%87%BA%E7%8E%B0%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h5 id="本地-Ajax-跨域报错-Cross-origin-requests-are-only-supported-for-protocol-schemes-http-data-chrome-chrome-extension-chrome-untrusted-https"><a href="#本地-Ajax-跨域报错-Cross-origin-requests-are-only-supported-for-protocol-schemes-http-data-chrome-chrome-extension-chrome-untrusted-https" class="headerlink" title="本地 Ajax 跨域报错 Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, chrome-untrusted, https."></a>本地 Ajax 跨域报错 Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, chrome-untrusted, https.</h5><span id="more"></span>

<hr>
<p>当我们在做练习或者写 Demo 的时候，有访问本地文件的需求，当我们在加载的时候发现不能加载，会报如下错误： </p>
<p><img src="https://images.cnblogs.com/cnblogs_com/xzsj/1888303/o_210325085243filecross.png"></p>
<p>根据错误信息大概知道原因在于使用了 File 协议，应该使用它提示的 http, data, chrome, chrome-extension, chrome-untrusted, https 这些协议，可是只是做个练习，写些小 Demo，不至于自己去创建一个服务器，开个端口。那么应该如何解决这个问题呢？各位看官，往下看。</p>
<h2 id="1-换编辑器"><a href="#1-换编辑器" class="headerlink" title="1.换编辑器"></a>1.换编辑器</h2><hr>
<p>使用 webstorm 或是 visual studio 这种重量级 IDE 的同学，应该不会遇到这种问题，这类 IDE 都内置了 HTTP 服务器。<br>但是对于一些喜欢使用 VSCode，Sublime Text 这类轻量级编辑器的同学，我们继续往下看。</p>
<h2 id="2-安装Server插件"><a href="#2-安装Server插件" class="headerlink" title="2.安装Server插件"></a>2.安装Server插件</h2><hr>
<p>这里针对 VSCode 和 Sublime 分别安利一款插件。</p>
<h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><hr>
<p>Live Server 插件，这个插件功能十分强大，不止可以解决 ajax 不支持 file 协议的问题，还可以实现在编辑器里保存修改后，页面自动刷新的功能。具体使用方法在插件安装的地方有说明，用起来也十分简单。<br>安装完成之后，打开 html 文件后，点击右下角的 GoLive 即可。</p>
<h3 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h3><hr>
<p>SublimeServer 插件，安装完成之后，点击 Tools-&gt;SublimeServer-&gt;Start SublimeServer，启动服务器，然后在 html 文件中，注意是文件中点击右键，选择 View in SublimeServer 即可。<br>（注意一定要以文件夹的方式打开 html 文件所在目录，否则可能失效。）</p>
<h2 id="3-换浏览器"><a href="#3-换浏览器" class="headerlink" title="3.换浏览器"></a>3.换浏览器</h2><hr>
<p>火狐支持 file 协议，对 Chorme 没有什么执念的童鞋，可以换成火狐。</p>
<h2 id="4-配置Chrome浏览器支持file协议"><a href="#4-配置Chrome浏览器支持file协议" class="headerlink" title="4.配置Chrome浏览器支持file协议"></a>4.配置Chrome浏览器支持file协议</h2><hr>
<p>如果你是那种非常喜欢 Chrome 开发者工具的人，也可以尝试如下方式。</p>
<p>Windows：<br>设置 Chrome 的快捷方式属性，在“目标”后面加上–allow-file-access-from-files，注意前面有个空格，重新打开 Chrome 即可。</p>
<p>Mac：<br>打开终端，输入下面命令：open -a “Google Chrome” –args –disable-web-security 然后就可以屏蔽安全访问了[ –args：此参数可有可无]</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><hr>
<p>只是更改浏览器配置使之支持 file 协议，还是有很大的局限性的，建议最好采用前两种方式，配置 http 服务器才是长久之计。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 零成本搭建web服务器【外网可访问】</title>
    <url>/centosweb/</url>
    <content><![CDATA[<blockquote>
<p>更新：【Windows+Nginx+Natapp零成本搭建web服务器】教程即将上线 。</p>
</blockquote>
<span id="more"></span>

<p> 一、 <strong>技术栈</strong></p>
<blockquote>
<ul>
<li><em>虚拟机</em>：当然是选择 Linux 系统，本人使用的是 ==centos7== 版本。</li>
<li><em>服务器</em>：轻量级服务器nginx，10分钟搭建静态网站。</li>
<li><em>内网穿透</em>：使用Natapp，访问内网。</li>
</ul>
</blockquote>
<hr>
<p>二、<strong>步骤</strong></p>
<ol>
<li><p><strong>Linux系统安装与配置</strong></p>
<blockquote>
<p><em>安装linux虚拟机就跳过吧，网上一大把，当然最好是Centos系统哦。</em></p>
</blockquote>
</li>
</ol>
<ul>
<li><p>配置<br>由于是自己创建的虚拟机，需要手动打开80端口，重新配置防火墙，以及切换源。下面开始吧。</p>
<p>  <strong>==a.切换阿里源==</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">备份：mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">清理缓存：yum clean all</span><br><span class="line">生成缓存：yum makecache</span><br></pre></td></tr></table></figure>
<p>  <strong>==b.防火墙配置==</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service <span class="comment">#停止firewall</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service <span class="comment">#禁止firewall开机启动</span></span><br><span class="line">yum install iptables-services <span class="comment">#安装iptables防火墙</span></span><br><span class="line">yum install iptables-services <span class="comment">#安装iptables防火墙</span></span><br></pre></td></tr></table></figure>
<p>  <strong>==c.开启80端口==</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/iptables <span class="comment">#编辑防火墙配置文件</span></span><br><span class="line">按i进入文本编辑模式</span><br><span class="line">找到：</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span><br><span class="line">在该行下面添加：</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span><br><span class="line">保存退出：先按ESC，再输入【:wq!】输入括号里的内容。</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart iptables.service <span class="comment">#重启防火墙使配置生效</span></span><br><span class="line">systemctl <span class="built_in">enable</span> iptables.service <span class="comment">#设置防火墙开机启动</span></span><br><span class="line">firewall-cmd --query-port=80/tcp <span class="comment">#查询端口是否开启</span></span><br></pre></td></tr></table></figure>
<hr>
<p>   <strong>2. 配置Nginx服务器</strong></p>
<blockquote>
<p><em>简介</em>：Nginx是一个http服务器。是一个使用c语言开发的高性能的http服务器及反向代理服务器。Nginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发，官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。</p>
</blockquote>
<p>  <strong>==a.安装环境==</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc依赖：yum install gcc-c++</span><br><span class="line">Perl库：yum install -y pcre pcre-devel</span><br><span class="line">zlib库：yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line">nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。</span><br></pre></td></tr></table></figure>
<p>  <strong>==b.安装==</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">mkdir nginx</span><br><span class="line"><span class="built_in">cd</span> nginx	<span class="comment">#进入nginx文件夹</span></span><br><span class="line"></span><br><span class="line">wget http://nginx.org/download/nginx-1.9.7.tar.gz</span><br><span class="line">tar -zxvf nginx-1.9.7.tar.gz	<span class="comment">#解压</span></span><br><span class="line"></span><br><span class="line">./configure		<span class="comment">#安装nginx</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> sbin</span><br><span class="line">sudo ./nginx	<span class="comment">#启动</span></span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -t	<span class="comment">#查询nginx.conf是否正确</span></span><br></pre></td></tr></table></figure>
<p>  <strong>==c.配置网站文件==</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">准备好自己写的网页，以目录形式上传到 /usr/<span class="built_in">local</span>/nginx/xxx/ 路径（xxx为网站跟目录名）</span><br><span class="line"><span class="built_in">cd</span> nginx</span><br><span class="line">vim conf/nginx.conf		<span class="comment">#使用vim编辑器</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  _;</span><br><span class="line">    <span class="comment">#root /usr/local/nginx/xxx/;      # 修改1：xxx为静态页面根目录，index.html文件放在xxx下面</span></span><br><span class="line">    <span class="comment">#index index.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/local/nginx/xxx/;	<span class="comment"># 修改2</span></span><br><span class="line">        index  index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">    location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nginx -s reload 	<span class="comment">#重启</span></span><br><span class="line"></span><br><span class="line">ps aux|grep nginx	<span class="comment">#查询nginx进程</span></span><br><span class="line"></span><br><span class="line">./nginx -s stop		<span class="comment">#停止</span></span><br></pre></td></tr></table></figure></li>
</ul>
<pre><code>&gt;   到这里，就可以实现内网之间的访问了，通过ifconfig查询桥接模式下的内网地址，在本机搜索即可进入网站。但是，做好网站只有自己能看还挺不爽的，接下来就是让别人可以访问的操作辽~

---
**3.Natapp实现内网穿透**
&gt; *简介*：内网穿透简单来说就是将内网外网通过natapp隧道打通,让内网的数据让外网可以获取。比如常用的办公室软件等，一般在办公室或家里，通过拨号上网，这样办公软件只有在本地的局域网之内才能访问，那么问题来了，如果是手机上，或者公司外地的办公人员，如何访问到办公软件呢？这就需要natapp内网穿透工具了。运行natapp隧道之后，natapp会分配一个专属域名/端口,办公软件就已经在公网上了,在外地的办公人员可以在任何地方愉快的访问办公软件了~

&gt; emmm一句话：别人可以访问你的192.168.xxx.xxx
Natapp网址：[点这里](https://natapp.cn/)

**==a.购买隧道==**

- 注册账号
![在这里插入图片描述](https://img-blog.csdnimg.cn/20201207104539729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjU0MDEw,size_16,color_FFFFFF,t_70)
- 登录，购买隧道（免费版）
- 选择web隧道协议![在这里插入图片描述](https://img-blog.csdnimg.cn/20201207104746667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjU0MDEw,size_16,color_FFFFFF,t_70)
- 获取authtoken，启动时需要用
![在这里插入图片描述](https://img-blog.csdnimg.cn/2020120710531049.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjU0MDEw,size_16,color_FFFFFF,t_70)

**==b.下载客户端==**
&gt; Linux可直接wget
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20201207105027387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjU0MDEw,size_14,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<pre><code>**==c.运行Natapp==**
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chmod a+x natapp	<span class="comment">#给执行权限</span></span><br><span class="line">./natapp			<span class="comment">#运行</span></span><br><span class="line"></span><br><span class="line">./natapp <span class="literal">-authtoken</span>=<span class="number">9</span>ab6b9040a624f40	<span class="comment">#参数方式运行，authtoken购买隧道后即可在控制台查看</span></span><br><span class="line">注意参数输入正确性,不要有多余的空格等!</span><br></pre></td></tr></table></figure>


&gt; 运行成功结果：![在这里插入图片描述](https://img-blog.csdnimg.cn/2020120711005848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NjU0MDEw,size_16,color_FFFFFF,t_70)
</code></pre>
<p>红框内的网址就是你的内网地址了，接下来就可以访问了，可以发给您的小伙伴试试~</p>
<pre><code>&gt;更多内容，欢迎访问 [宋木头](http://aoau.top/) ~
</code></pre>
<hr>
<p>原创不易，转载请注明出处：)</p>
]]></content>
      <categories>
        <category>essay</category>
        <category>建站指南</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>建站随笔</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>


<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page ‘title’</span><br></pre></td></tr></table></figure>

<h3 id="提交Git"><a href="#提交Git" class="headerlink" title="提交Git"></a>提交Git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s --debug</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>essay</category>
        <category>建站指南</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫</title>
    <url>/spider/</url>
    <content><![CDATA[<h2 id="一、爬虫基础简介"><a href="#一、爬虫基础简介" class="headerlink" title="一、爬虫基础简介"></a>一、爬虫基础简介</h2><span id="more"></span>

<h3 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a><strong>前戏</strong></h3><p>​    1.你是否在夜深人静的时候，想看一些会让你更睡不着的图片却苦于没有资源…<br>​    2.你是否在节假日出行高峰的时候，想快速抢购火车票成功…<br>​    3.你是否在网上购物的时候，想快速且精准的定位到口碑质量最好的商品…</p>
<p><strong>什么是爬虫</strong>：</p>
<pre><code>- 通过编写程序，模拟浏览器上网，然后让其去互联网上抓取数据的过程。
</code></pre>
<p><strong>爬虫的价值</strong>：<br>    - 实际应用<br>        - 就业</p>
<p><strong>爬虫究竟是合法还是违法的</strong>？</p>
<ul>
<li>在法律中是不被禁止</li>
<li>具有违法风险</li>
<li>善意爬虫  恶意爬虫</li>
</ul>
<p><strong>爬虫带来的风险可以体现在如下</strong>2方面：<br>    - 爬虫干扰了被访问网站的正常运营<br>        - 爬虫抓取了收到法律保护的特定类型的数据或信息</p>
<p><strong>如何在使用编写爬虫的过程中避免进入局子的厄运呢</strong>？<br>    - 时常的优化自己的程序，避免干扰被访问网站的正常运行<br>        - 在使用，传播爬取到的数据时，审查抓取到的内容，如果发现了涉及到用户隐私<br>        商业机密等敏感内容需要及时停止爬取或传播</p>
<p><strong>爬虫在使用场景中的分类</strong></p>
<ul>
<li><p>通用爬虫：<br>抓取系统重要组成部分。抓取的是一整张页面数据。</p>
</li>
<li><p> 聚焦爬虫：</p>
</li>
</ul>
<p>  是建立在通用爬虫的基础之上。抓取的是页面中特定的局部内容。</p>
<ul>
<li>增量式爬虫：<br>检测网站中数据更新的情况。只会抓取网站中最新更新出来的数据。</li>
</ul>
<p><strong>爬虫的矛与盾</strong></p>
<p><strong>反爬机制</strong><br>    门户网站，可以通过制定相应的策略或者技术手段，防止爬虫程序进行网站数据的爬取。</p>
<p><strong>反反爬策略</strong><br>    爬虫程序可以通过制定相关的策略或者技术手段，破解门户网站中具备的反爬机制，从而可以获取门户网站中相关的数据。</p>
<p><strong>robots.txt</strong>协议：<br>    君子协议。规定了网站中哪些数据可以被爬虫爬取哪些数据不可以被爬取。</p>
<h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a><strong>http</strong>协议</h3><ul>
<li><p>概念：就是<code>服务器</code>和<code>客户端</code>进行数据交互的一种形式。</p>
</li>
<li><p><strong>常用请求头信息</strong></p>
<ul>
<li>User-Agent：请求载体的身份标识</li>
<li>Connection：请求完毕后，是断开连接还是保持连接</li>
</ul>
</li>
<li><p><strong>常用响应头信息</strong></p>
<ul>
<li>Content-Type：服务器响应回客户端的数据类型</li>
</ul>
</li>
</ul>
<p><strong>https</strong>协议：</p>
<pre><code>- 安全的超文本传输协议
</code></pre>
<p><strong>加密方式</strong></p>
<ul>
<li>对称秘钥加密<pre><code>  - 可能被第三方拦截
</code></pre>
</li>
<li>非对称秘钥加密<pre><code>  - 速度慢
  - 公钥可能被篡改
</code></pre>
</li>
<li>证书秘钥加密<pre><code>  - 给公钥数字签名
</code></pre>
</li>
</ul>
<h2 id="二、requests模块"><a href="#二、requests模块" class="headerlink" title="二、requests模块"></a>二、requests模块</h2><ul>
<li>网络请求模块<ul>
<li>urllib模块</li>
<li><strong>requests模块</strong></li>
</ul>
</li>
</ul>
<blockquote>
<p>requests模块：python中原生的一款基于网络请求的模块，功能非常强大，简单便捷，效率极高。</p>
<p>作用：<strong>模拟浏览器发请求</strong>。</p>
</blockquote>
<h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><blockquote>
<p>requests模块的编码流程</p>
</blockquote>
<ul>
<li>指定url<ul>
<li>UA伪装</li>
<li>请求参数的处理</li>
</ul>
</li>
<li>发起请求<ul>
<li>获取响应数据</li>
</ul>
</li>
<li>持久化存储</li>
</ul>
<h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><p> <code>pip install requests</code></p>
<h4 id="实战编码"><a href="#实战编码" class="headerlink" title="实战编码"></a>实战编码</h4><ul>
<li>需求：爬取搜狗首页的页面数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># - 需求：爬取搜狗首页的页面数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># step_1:指定url</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.sogou.com/&#x27;</span></span><br><span class="line">    <span class="comment"># step_2:发起请求</span></span><br><span class="line">    <span class="comment"># get方法会返回一个响应对象</span></span><br><span class="line">    response = requests.get(url=url)</span><br><span class="line">    <span class="comment"># step_3:获取响应数据.text返回的是字符串形式的响应数据</span></span><br><span class="line">    page_text = response.text</span><br><span class="line">    <span class="built_in">print</span>(page_text)</span><br><span class="line">    <span class="comment"># step_4:持久化存储</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./sogou.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬取数据结束！！！&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="实战巩固"><a href="#实战巩固" class="headerlink" title="实战巩固"></a>实战巩固</h4><ul>
<li><p>需求：爬取搜狗指定词条对应的搜索结果页面（简易网页采集器）</p>
<ul>
<li><p><strong>UA检测</strong></p>
<blockquote>
<p>UA：User-Agent（请求载体的身份标识）.</p>
<p>门户网站的服务器会检测对应请求的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，说明该请求是一个正常的请求。但是，如果检测到请求的载体身份标识不是基于某一款浏览器的，则表示该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝该次请求。</p>
</blockquote>
</li>
<li><p><strong>UA伪装</strong>: 将对应的User-Agent封装到一个字典中</p>
<blockquote>
<p>让爬虫对应的请求载体身份标识伪装成某一款浏览器</p>
</blockquote>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>需求：破解百度翻译(获取翻译结果)</p>
<ul>
<li>post请求（携带了参数）</li>
<li>响应数据是一组json数据</li>
</ul>
</li>
<li><p>需求：爬取豆瓣电影分类排行榜 <a href="https://movie.douban.com/%E4%B8%AD%E7%9A%84%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85%E6%95%B0%E6%8D%AE">https://movie.douban.com/中的电影详情数据</a></p>
</li>
<li><p>作业：爬取肯德基餐厅查询<a href="http://www.kfc.com.cn/kfccda/index.aspx%E4%B8%AD%E6%8C%87%E5%AE%9A%E5%9C%B0%E7%82%B9%E7%9A%84%E9%A4%90%E5%8E%85%E6%95%B0%E6%8D%AE">http://www.kfc.com.cn/kfccda/index.aspx中指定地点的餐厅数据</a></p>
</li>
<li><p>需求：爬取国家药品监督管理总局中基于中华人民共和国化妆品生产许可证相关数据</p>
<pre><code>      http://scxk.nmpa.gov.cn:81/xk/
  
</code></pre>
<ul>
<li>动态加载数据</li>
</ul>
</li>
<li><p>首页中对应的企业信息数据是通过ajax动态请求到的。</p>
<pre><code>http://125.35.6.84:81/xk/itownet/portal/dzpz.jsp?id=e6c1aa332b274282b04659a6ea30430a
http://125.35.6.84:81/xk/itownet/portal/dzpz.jsp?id=f63f61fe04684c46a016a45eac8754fe
</code></pre>
<ul>
<li>通过对详情页url的观察发现：<ul>
<li>url的域名都是一样的，只有携带的参数（id）不一样</li>
<li>id值可以从首页对应的ajax请求到的json串中获取</li>
<li>域名和id值拼接处一个完整的企业对应的详情页的url</li>
</ul>
</li>
<li>详情页的企业详情数据也是动态加载出来的<ul>
<li><a href="http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById">http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById</a></li>
<li><a href="http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById">http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById</a></li>
<li>观察后发现：<ul>
<li>所有的post请求的url都是一样的，只有参数id值是不同。</li>
<li>如果我们可以批量获取多家企业的id后，就可以将id和url形成一个完整的详情页对应详情数据的ajax请求的url</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="三、数据解析"><a href="#三、数据解析" class="headerlink" title="三、数据解析"></a>三、数据解析</h2><blockquote>
<p>聚焦爬虫、正则、bs4、xpath</p>
</blockquote>
<h4 id="聚焦爬虫"><a href="#聚焦爬虫" class="headerlink" title="聚焦爬虫"></a>聚焦爬虫</h4><p>定义：爬取页面中指定的页面内容。</p>
<p>编码流程：</p>
<ul>
<li>指定url</li>
<li>发起请求</li>
<li>获取响应数据</li>
<li>数据解析</li>
<li>持久化存储</li>
</ul>
<h4 id="数据解析分类"><a href="#数据解析分类" class="headerlink" title="数据解析分类"></a>数据解析分类</h4><ul>
<li>正则</li>
<li>bs4</li>
<li>xpath（***）</li>
</ul>
<p><strong>数据解析原理概述</strong></p>
<ul>
<li>解析的局部的文本内容都会在<strong>标签之间或者标签对应的属性中进行存储</strong></li>
<li>1.<strong>进行指定标签的定位</strong></li>
<li>2.标签或者标签对应的<strong>属性</strong>中存储的<strong>数据</strong>值进行<strong>提取（解析）</strong></li>
</ul>
<h5 id="正则解析"><a href="#正则解析" class="headerlink" title="正则解析"></a><strong>正则解析</strong></h5><p>回顾</p>
<p><img src="C:\Users\86136\Pictures\学习\rep.png" alt="正则表达式"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#提取出python</span></span><br><span class="line">key=<span class="string">&quot;javapythonc++php&quot;</span></span><br><span class="line">re.findall(<span class="string">&#x27;python&#x27;</span>,key)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#提取出hello world</span></span><br><span class="line">key=<span class="string">&quot;</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line">re.findall(<span class="string">&#x27;</span></span><br><span class="line"><span class="string">(.*)</span></span><br><span class="line"><span class="string">&#x27;</span>,key)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#提取170</span></span><br><span class="line">string = <span class="string">&#x27;我喜欢身高为170的女孩&#x27;</span></span><br><span class="line">re.findall(<span class="string">&#x27;\d+&#x27;</span>,string)</span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#提取出http://和https://</span></span><br><span class="line">key=<span class="string">&#x27;http://www.baidu.com and https://boob.com&#x27;</span></span><br><span class="line">re.findall(<span class="string">&#x27;https?://&#x27;</span>,key)</span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#提取出hello</span></span><br><span class="line">key=<span class="string">&#x27;lalalahellohahah&#x27;</span> <span class="comment">#输出hello</span></span><br><span class="line">re.findall(<span class="string">&#x27;&lt;[Hh][Tt][mM][lL]&gt;(.*)&#x27;</span>,key)</span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#提取出hit. </span></span><br><span class="line">key=<span class="string">&#x27;bobo@hit.edu.com&#x27;</span><span class="comment">#想要匹配到hit.</span></span><br><span class="line">re.findall(<span class="string">&#x27;h.*?\.&#x27;</span>,key)</span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment">#匹配sas和saas</span></span><br><span class="line">key=<span class="string">&#x27;saas and sas and saaas&#x27;</span></span><br><span class="line">re.findall(<span class="string">&#x27;sa&#123;1,2&#125;s&#x27;</span>,key)</span><br></pre></td></tr></table></figure>



<h5 id="bs4进行数据解析"><a href="#bs4进行数据解析" class="headerlink" title="bs4进行数据解析"></a><strong>bs4进行数据解析</strong></h5><pre><code>- 数据解析的原理：
    - 1.标签定位
    - 2.提取标签、标签属性中存储的数据值
</code></pre>
<ul>
<li>bs4数据解析的原理：<ul>
<li>1.实例化一个BeautifulSoup对象，并且将页面源码数据加载到该对象中</li>
<li>2.通过调用BeautifulSoup对象中相关的属性或者方法进行标签定位和数据提取</li>
</ul>
</li>
<li>环境安装：<ul>
<li><code>pip install bs4</code></li>
<li><code>pip install lxml</code></li>
</ul>
</li>
<li>如何实例化BeautifulSoup对象：<ul>
<li><code>from bs4 import BeautifulSoup</code></li>
<li>对象的实例化：<ul>
<li>1.将本地的html文档中的数据加载到该对象中<pre><code>  `fp = open(&#39;./test.html&#39;,&#39;r&#39;,encoding=&#39;utf-8&#39;)`
 ` soup = BeautifulSoup(fp,&#39;lxml&#39;)`
</code></pre>
</li>
<li>2.将互联网上获取的页面源码加载到该对象中<pre><code>  `page_text = response.text`
</code></pre>
  <code> soup = BeatifulSoup(page_text,&#39;lxml&#39;)</code></li>
</ul>
</li>
<li>提供的用于数据解析的方法和属性：<ul>
<li><code>soup.tagName</code>:返回的是文档中第一次出现的tagName对应的标签</li>
<li><code>soup.find()</code>:<ul>
<li><code>find(&#39;tagName&#39;)</code>:等同于<code>soup.div</code></li>
<li>属性定位：<br>  <code>soup.find(&#39;div&#39;,class_/id/attr=&#39;song&#39;)</code></li>
</ul>
</li>
<li><code>soup.find_all(&#39;tagName&#39;)</code>:返回符合要求的所有标签（列表）</li>
</ul>
</li>
<li><code>select</code>：<ul>
<li>select(‘某种选择器（id，class，标签…选择器）’),返回的是一个列表。</li>
<li>层级选择器：<ul>
<li><code>soup.select(&#39;.tang &gt; ul &gt; li &gt; a&#39;)</code>：&gt;表示的是一个层级</li>
<li><code>oup.select(&#39;.tang &gt; ul a&#39;)</code>：空格表示的多个层级</li>
</ul>
</li>
</ul>
</li>
<li>获取标签之间的文本数据：<ul>
<li>soup.a.text/string/get_text()</li>
<li>text/get_text():可以获取某一个标签中所有的文本内容</li>
<li>string：只可以获取该标签下面直系的文本内容</li>
</ul>
</li>
<li>获取标签中属性值：<ul>
<li>soup.a[‘href’]</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="xpath解析"><a href="#xpath解析" class="headerlink" title="xpath解析"></a>xpath解析</h5><blockquote>
<p>最常用且最便捷高效的一种解析方式。通用性。</p>
</blockquote>
<ul>
<li>xpath解析原理：<ul>
<li>1.实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中。</li>
<li>2.调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获。</li>
</ul>
</li>
<li>环境的安装：<ul>
<li>pip install lxml</li>
</ul>
</li>
<li>如何实例化一个etree对象:from lxml import etree<ul>
<li>1.将<strong>本地</strong>的html文档中的源码数据加载到etree对象中：<br>  etree.parse(filePath)</li>
<li>2.可以将从<strong>互联网</strong>上获取的源码数据加载到该对象中<br>  etree.HTML(‘page_text’)</li>
<li>xpath(‘xpath表达式’)</li>
</ul>
</li>
<li>xpath表达式:<ul>
<li><strong>/</strong>: 表示的是从根节点开始定位。表示的是一个层级。</li>
<li><strong>//</strong>: 表示的是多个层级。可以表示从任意位置开始定位。</li>
<li><strong>属性定位</strong>：//div[@class=’song’] tag[@attrName=”attrValue”]</li>
<li><strong>索引定位</strong>：//div[@class=”song”]/p[3] 索引是从1开始的。</li>
<li><strong>取文本</strong>：<ul>
<li>/text() 获取的是标签中直系的文本内容</li>
<li>//text() 标签中非直系的文本内容（所有的文本内容）</li>
</ul>
</li>
<li><strong>取属性</strong>：<br>  /@attrName     ==&gt;img/src</li>
</ul>
</li>
</ul>
<p>作业：<br>    爬取站长素材中免费简历模板</p>
<h2 id="四、验证码识别"><a href="#四、验证码识别" class="headerlink" title="四、验证码识别"></a>四、验证码识别</h2><h5 id="验证码和爬虫之间的关系"><a href="#验证码和爬虫之间的关系" class="headerlink" title="验证码和爬虫之间的关系"></a>验证码和爬虫之间的关系</h5><ul>
<li>反爬机制：验证码.识别验证码图片中的数据，用于模拟登陆操作。</li>
</ul>
<h5 id="识别验证码的操作"><a href="#识别验证码的操作" class="headerlink" title="识别验证码的操作"></a>识别验证码的操作</h5><pre><code>- 人工肉眼识别。（不推荐）
    - 第三方自动识别（推荐）
    - 云打码：http://www.yundama.com/demo.html
</code></pre>
<ul>
<li>云打码的使用流程：<ul>
<li>注册：普通和开发者用户</li>
<li>登录：<ul>
<li>普通用户的登录：查询该用户是否还有剩余的题分</li>
<li>开发者用户的登录：<ul>
<li>创建一个软件：我的软件-》添加新软件-》录入软件名称-》提交（软件id和秘钥）</li>
<li>下载示例代码：开发文档-》点此下载：云打码接口DLL-》PythonHTTP示例下载</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="实战：识别古诗文网登录页面中的验证码"><a href="#实战：识别古诗文网登录页面中的验证码" class="headerlink" title="实战：识别古诗文网登录页面中的验证码"></a>实战：识别古诗文网登录页面中的验证码</h5><p>使用打码平台识别验证码的编码流程：</p>
<ul>
<li>将验证码图片进行本地下载</li>
<li>调用平台提供的示例代码进行图片数据识别</li>
</ul>
<h2 id="五、request高级"><a href="#五、request高级" class="headerlink" title="五、request高级"></a>五、request高级</h2><h4 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h4><ul>
<li>爬取基于某些用户的用户信息。</li>
</ul>
<h4 id="需求1"><a href="#需求1" class="headerlink" title="需求1"></a>需求1</h4><blockquote>
<p>对人人网进行模拟登录。</p>
</blockquote>
<ul>
<li>点击登录按钮之后会发起一个post请求</li>
<li>post请求中会携带登录之前录入的相关的登录信息（用户名，密码，验证码……）</li>
<li>验证码：每次请求都会变化</li>
</ul>
<h4 id="需求2"><a href="#需求2" class="headerlink" title="需求2"></a>需求2</h4><blockquote>
<p>爬取当前用户的相关的用户信息（个人主页中显示的用户信息）</p>
</blockquote>
<h4 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h4><p>http/https协议特性：无状态。<br>没有请求到对应页面数据的原因：<br>    发起的第二次基于个人主页页面请求的时候，服务器端并不知道该此请求是基于登录状态下的请求。<br>cookie：用来让服务器端记录客户端的相关状态。</p>
<ul>
<li>手动处理：通过抓包工具获取cookie值，将该值封装到headers中。（不建议）</li>
<li>自动处理：<ul>
<li>cookie值的来源是哪里？<ul>
<li>模拟登录post请求后，由服务器端创建。</li>
</ul>
</li>
<li><strong>session会话对象</strong>：<ul>
<li>作用：<br>  1.可以进行请求的发送。<br>  2.如果请求过程中产生了cookie，则该cookie会被自动存储/携带在该session对象中。</li>
</ul>
</li>
<li>创建一个session对象：session = requests.Session()</li>
<li>使用session对象进行模拟登录post请求的发送（cookie就会被存储在session中）</li>
<li>session对象对个人主页对应的get请求进行发送（携带了cookie）</li>
</ul>
</li>
</ul>
<h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><blockquote>
<p>破解封IP这种反爬机制。</p>
</blockquote>
<p>什么是代理：</p>
<ul>
<li>代理服务器。</li>
</ul>
<p>代理的作用：</p>
<ul>
<li>突破自身IP访问的限制。</li>
<li>隐藏自身真实IP</li>
</ul>
<p>代理相关的网站：</p>
<ul>
<li>快代理</li>
<li>西祠代理</li>
<li><a href="http://www.goubanjia.com/">www.goubanjia.com</a></li>
</ul>
<p>代理ip的类型：</p>
<ul>
<li>http：应用到http协议对应的url中</li>
<li>https：应用到https协议对应的url中</li>
</ul>
<p>代理ip的匿名度：</p>
<ul>
<li>透明：服务器知道该次请求使用了代理，也知道请求对应的真实ip</li>
<li>匿名：知道使用了代理，不知道真实ip</li>
<li>高匿：不知道使用了代理，更不知道真实的ip</li>
</ul>
<h2 id="六、异步爬虫"><a href="#六、异步爬虫" class="headerlink" title="六、异步爬虫"></a>六、异步爬虫</h2><p>目的：在爬虫中使用异步实现高性能的数据爬取操作。</p>
<p>异步爬虫的方式：<br>    - 1.多线程，多进程（不建议）：<br>            好处：可以为相关阻塞的操作单独开启线程或者进程，阻塞操作就可以异步执行。<br>            弊端：无法无限制的开启多线程或者多进程。<br>    - 2.线程池、进程池（适当的使用）：<br>    好处：我们可以降低系统对进程或者线程创建和销毁的一个频率，从而很好的降低系统的开销。<br>    弊端：池中线程或进程的数量是有上限。</p>
<ul>
<li><p>3.单线程+异步协程（推荐）：<br>  <strong>event_loop</strong>：事件循环，相当于一个无限循环，我们可以把一些函数注册到这个事件循环上，<br>  当满足某些条件的时候，函数就会被循环执行。</p>
<p>  <strong>coroutine</strong>：协程对象，我们可以将协程对象注册到事件循环中，它会被事件循环调用。<br>  我们可以使用 async 关键字来定义一个方法，这个方法在调用时不会立即被执行，而是返回<br>  一个协程对象。</p>
<p>  <strong>task</strong>：任务，它是对协程对象的进一步封装，包含了任务的各个状态。</p>
<p>  <strong>future</strong>：代表将来执行或还没有执行的任务，实际上和 task 没有本质区别。</p>
<p>  <strong>async</strong> 定义一个协程.</p>
<p>  await 用来挂起阻塞方法的执行。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>xpath解析58二手房的房源信息【★★】</title>
    <url>/xpath%E8%A7%A3%E6%9E%9058%E4%BA%8C%E6%89%8B%E6%88%BF%E7%9A%84%E6%88%BF%E6%BA%90%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>复习：<a href="https://www.runoob.com/xpath/xpath-syntax.html">XPath语法</a></p>
<p>需求：爬取58二手房中的房源信息</p>
<span id="more"></span>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="comment"># 需求：爬取58二手房中的房源信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 爬取到页面源码数据</span></span><br><span class="line">    url = <span class="string">&#x27;https://bj.58.com/ershoufang/&#x27;</span></span><br><span class="line">    page_text = requests.get(url=url, headers=headers).text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据解析</span></span><br><span class="line">    tree = etree.HTML(page_text)</span><br><span class="line">    <span class="comment"># 存储的就是li标签对象</span></span><br><span class="line">    div_list = tree.xpath(<span class="string">&#x27;//section[@class=&quot;list&quot;]//h3/text()&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(div_list)</span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;58.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> div_list:</span><br><span class="line">        fp.write(item + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>小舍免费图片Api</title>
    <url>/xiaoshesapi/</url>
    <content><![CDATA[<blockquote>
<p>项目名称：小舍图片Api接口</p>
</blockquote>
<!--<div style="display:flex;overflow:hidden;">
    <img width="100px" src="http://api.aoau.top:9999/photos/3/%20%2834%29.png"/>
    <img width="100px" src="http://api.aoau.top:9999/photos/3/%20%2855%29.png"/>
    <img width="100px" src="http://api.aoau.top:9999/photos/6/%20%2855%29.jpg"/>
    <img width="100px" src="http://api.aoau.top:9999/photos/6/%20%2859%29.jpg"/>
    <img width="100px" src="http://api.aoau.top:9999/photos/6/%20%2865%29.jpg"/>
    <img width="100px" src="http://api.aoau.top:9999/photos/3/%20%2812%29.png"/>
    <img width="100px" src="http://api.aoau.top:9999/photos/1/%20%2845%29.png"/>
</div>-->








<span id="more"></span>

<blockquote>
<p>开发人员：熙子黒</p>
<p>开源协议：MIT</p>
<p>感谢你的使用，如果喜欢请给仓库点个star：<a href="https://github.com/bai-23/photosapi">https://github.com/bai-23/photosapi</a></p>
<p>此接口已接入本人项目(小舍社交app)，请放心食用：<a href="https://github.com/bai-23/italk-uniapp">https://github.com/bai-23/italk-uniapp</a></p>
<p>注意：<strong>个人接口，请勿商用。图片收集不易，请珍惜食用。部分图片较大加载缓慢，请耐心等待。</strong></p>
</blockquote>
<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p>地址：<code>http://api.aoau.top</code></p>
<p>方法：<code>GET</code></p>
<table>
<thead>
<tr>
<th>url</th>
<th>参数</th>
<th>值</th>
<th>必须</th>
</tr>
</thead>
<tbody><tr>
<td>/photos/api</td>
<td>page</td>
<td>number</td>
<td>是</td>
</tr>
</tbody></table>
<h3 id="ajax请求示例"><a href="#ajax请求示例" class="headerlink" title="ajax请求示例"></a>ajax请求示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">fetchPhotos</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.$http.get(<span class="string">&#x27;http://api.aoau.top/photos/api?page=9&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>示例url：<code>http://api.aoau.top/photos/api?page=9</code></p>
<p>返回值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res:&#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;photoNum&quot;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">&quot;category&quot;</span>: <span class="string">&quot;写真4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;author&quot;</span>: <span class="string">&quot;收集不易，请珍惜接口，更多资源请访问Github:https://github.com/bai-23/photosapi&quot;</span>,</span><br><span class="line">        <span class="string">&quot;photoList&quot;</span>: [</span><br><span class="line">            xxx.jpg</span><br><span class="line">            ...</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;tips&quot;</span>: <span class="string">&quot;部分图片较大，加载速度较慢，请谅解。图片来源于互联网，仅供个人使用，请勿商用！&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：参数page范围为：1~14，请填写正确。</p>
<p>（建议线路5~14，每条线路有100张图片）</p>
</blockquote>
<hr>
<p>下面是测试，其他线路请自行尝试<br><a href="http://api.aoau.top:9999/photos/1/%20%2816%29.png">线路1</a><br><a href="http://api.aoau.top:9999/photos/2/%20%2819%29.png">线路2</a><br><a href="http://api.aoau.top:9999/photos/3/%20%2834%29.png">线路3</a><br><a href="http://api.aoau.top:9999/photos/4/%20%2883%29.png">线路4</a><br><a href="http://api.aoau.top:9999/photos/8/%20%2830%29.jpg">线路8</a><br><a href="http://api.aoau.top:9999/photos/14/%20%2860%29.jpg">线路14</a></p>
<p>成品：<a href="http://aoau.top:3004/courses/ps">http://aoau.top:3004/courses/ps</a></p>
]]></content>
      <categories>
        <category>apis</category>
        <category>图片api</category>
      </categories>
      <tags>
        <tag>图片Api</tag>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>xpath解析爬取美女图片【★★】</title>
    <url>/xpath%E8%A7%A3%E6%9E%90%E7%88%AC%E5%8F%96%E7%BE%8E%E5%A5%B3%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>复习：<a href="https://www.runoob.com/xpath/xpath-syntax.html">XPath语法</a></p>
<p>需求：解析下载图片数据</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 需求：解析下载图片数据 http://pic.netbian.com/4kmeinv/</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&#x27;http://pic.netbian.com/4kmeinv/&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="comment"># 手动设定响应数据的编码格式</span></span><br><span class="line">    <span class="comment"># response.encoding = &#x27;utf-8&#x27;</span></span><br><span class="line">    page_text = response.text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据解析：src的属性值  alt属性</span></span><br><span class="line">    tree = etree.HTML(page_text)</span><br><span class="line">    li_list = tree.xpath(<span class="string">&#x27;//div[@class=&quot;slist&quot;]/ul/li&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个文件夹</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./picLibs&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;./picLibs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        img_src = <span class="string">&#x27;http://pic.netbian.com&#x27;</span>+li.xpath(<span class="string">&#x27;./a/img/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        img_name = li.xpath(<span class="string">&#x27;./a/img/@alt&#x27;</span>)[<span class="number">0</span>]+<span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        <span class="comment"># 通用处理中文乱码的解决方案</span></span><br><span class="line">        img_name = img_name.encode(<span class="string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(img_name,img_src)</span></span><br><span class="line">        <span class="comment"># 请求图片进行持久化存储</span></span><br><span class="line">        img_data = requests.get(url=img_src, headers=headers).content</span><br><span class="line">        img_path = <span class="string">&#x27;picLibs/&#x27;</span>+img_name</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(img_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(img_data)</span><br><span class="line">            <span class="built_in">print</span>(img_name, <span class="string">&#x27;下载成功！！！&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>xpath解析爬取全国城市名称【★★】</title>
    <url>/xpath%E8%A7%A3%E6%9E%90%E7%88%AC%E5%8F%96%E5%85%A8%E5%9B%BD%E5%9F%8E%E5%B8%82%E5%90%8D%E7%A7%B0/</url>
    <content><![CDATA[<p>复习：<a href="https://www.runoob.com/xpath/xpath-syntax.html">XPath语法</a></p>
<p>需求：解析出所有城市名称</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目需求：解析出所有城市名称https://www.aqistudy.cn/historydata/</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&#x27;https://www.aqistudy.cn/historydata/&#x27;</span></span><br><span class="line">    page_text = requests.get(url=url, headers=headers).text</span><br><span class="line"></span><br><span class="line">    tree = etree.HTML(page_text)</span><br><span class="line">    <span class="comment"># 解析到热门城市和所有城市对应的a标签</span></span><br><span class="line">    <span class="comment"># //div[@class=&quot;bottom&quot;]/ul/li/          热门城市a标签的层级关系</span></span><br><span class="line">    <span class="comment"># //div[@class=&quot;bottom&quot;]/ul/div[2]/li/a  全部城市a标签的层级关系</span></span><br><span class="line">    a_list = tree.xpath(<span class="string">&#x27;//div[@class=&quot;bottom&quot;]/ul/li/a | //div[@class=&quot;bottom&quot;]/ul/div[2]/li/a&#x27;</span>)</span><br><span class="line">    all_city_names = []</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> a_list:</span><br><span class="line">        city_name = a.xpath(<span class="string">&#x27;./text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        all_city_names.append(city_name)</span><br><span class="line">    <span class="built_in">print</span>(all_city_names, <span class="built_in">len</span>(all_city_names))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>世界坐标系和本地坐标系</title>
    <url>/%E4%B8%96%E7%95%8C%E5%9D%90%E6%A0%87%E7%B3%BB%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%9D%90%E6%A0%87%E7%B3%BB/</url>
    <content><![CDATA[<p>对应《WebGL编程指南》附录G</p>
<span id="more"></span>

<h3 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h3><p>在第7章“进人三维世界”中，我们创建并显示了第一个三维物体（一个立方体），示例程序开始变得像一个“真正”的三维程序了。我们亲手设置了立方体的顶点坐标和索引信息，这很耗时间。虽然整本书我们都是这样做的，但是在构建你自己的，真正的WebGL程序时往往不会这样做。我们通常使用专用的三维建模工具，因为建模工具允许我们通过对各种基本的三维图形（立方体、圆柱体、球体等）进行各种操作（组合、形变、顶点数量调整、顶点间隔优化等）来创建精美复杂的三维模型。三维建模工具Blender(<a href="http://www.blender.org/)%E7%9A%84%E7%95%8C%E9%9D%A2%E5%A6%82%E5%9B%BEG.1%E6%89%80%E7%A4%BA%E3%80%82">www.blender.org/)的界面如图G.1所示。</a></p>
<p><img src="/images/webgl-G1.png"></p>
<h3 id="二、本地坐标系"><a href="#二、本地坐标系" class="headerlink" title="二、本地坐标系"></a>二、本地坐标系</h3><p>当我们创建三维模型时， 需要知道原点（0.0,0.0,0.0)在何处。 你可以自由选择原点的位置， 所以三维模型的建立就比较容易， 或者说很容易确定三维模型在场景中的位置。之前我们创建的立方体， 原点就在立方体的中心。 球状物体如太阳和月亮等， 通常也将原点设置在球心。  </p>
<p>另一方面， 大部分如图 G.1 所示的游戏角色模型， 其原点大部分都是位于脚部， Y轴垂直向上穿过身体的中线。 这样， 如果我们将角色放置在 y 坐标为 0 的位置 （ 也就是地面） ， 角色看上去就像站立在地面上一样—既没有悬浮在空中， 也没有沉入地面以下。这时， 如果我们沿 Z 轴或 X 轴移动角色， 看上去就好像角色在地面上跑动或滑动。 或者，你也可以对令角色沿 Y 轴的旋转， 看上去就好像在转向一样。  </p>
<p>此时， 组成场景中的模型或角色的顶点， 其坐标是相对于角色本身的原点的， 这样的坐标系被称为本地坐标系 (local coordinate system)。 使用建模工具如 Blender 创建的模型 （ 包括顶点坐标、 颜色、 索引等） 可以被导出为文件， 而我们可以将文件中的顶点数据导入到缓冲区中， 并使用 gl.drawElementsO 方法将这个建模工具创建的模型绘制出来。  </p>
<h3 id="三、世界坐标系"><a href="#三、世界坐标系" class="headerlink" title="三、世界坐标系"></a>三、世界坐标系</h3><p>下面来考虑在某个三维游戏中， 同一个空间内出现多个角色的情况。 比如， 我们需要将下图(右） 中的 3 个角色放置在下图 (左）中的游戏场景中。 每个角色都有自己的原点， 场景也有原点。  </p>
<p><img src="/images/webgl-G2.png"></p>
<p>当我们想要在场景中显示角色时， 就会遇到一个问题。 因为所有角色模型都是基于自身的原点 （ 位于脚部） 制作的， 它们会重叠出现在场景的同一个位置上， 那就是场景自身的原点， 如图 G.3 所示、 这可不是通常会发生的情况， 你也一定不希望这样。  </p>
<p><img src="/images/webgl-G3.png"></p>
<p>为了解决这个问题， 你需要调整每个角色的位置使之不再互相重叠。 为此， 我们需要使用第 3 章 “绘制和变换三角形” 和第 4 章 “高级变换与动画基础” 中的知识。 为了避免角色互相重叠， 可以把企鹅移动到（100,0,0)， 把猴子移动到（200,10,20)， 把狗狗移动到（10,0,200)。</p>
<p>根据上述， 我们用来移动和放置角色的坐标系就称为世界坐标系 (world coordinate system), 或称全局坐标系（global coordinate system)。 角色本身仍然是基于本地坐标系的，而上述这种从本地坐标系到世界坐标系的转换， 就称为世界变换 (world transformation)。<br>当然， 为了避免企鹅、 猴子和狗狗角色的相互重叠， 在创建它们的时候就应该为其指定世界坐标。 比如， 在 Blender 等工具里为企鹅建模的时候， 可以将企鹅的模型建立在（ 100,0,0)， 这样当你将企鹅的模型加入到场景里面时， 企鹅就会自动出现在（100,0,0)的位置， 而不用你去进行坐标变换以避免重叠。 但是， 这种方法也有自身的缺陷。 比如，你可能会想让企鹅像在跳芭蕾舞一样自旋， 你会使企鹅沿 Y 轴旋转， 但这样就对导致企鹅沿着场景的原点作半径为 100 的圆周运动。 所以， 你需要先把企鹅移到场景原点， 旋转，再移回来， 真够麻烦的。  </p>
<p>事实上， 这时的情形与第 7 章中的 PerspectiveViev^rwp 示例程序很像。 我们使用一组三角形的顶点（ 其坐标是相对于场景的原点定义的） 绘制了两组三角形， 如图所示。  </p>
<p><img src="/images/webgl-G4.png"></p>
<p>这里， 本地坐标系描述了图中虚线所画三角形的顶点坐标， 而世界坐标系描述了沿着 X 轴平移后的两组三角形。  </p>
<h3 id="四、变换与坐标系"><a href="#四、变换与坐标系" class="headerlink" title="四、变换与坐标系"></a>四、变换与坐标系</h3><p>目前， 我们还是没有讨论过本地坐标系和世界坐标系之间的变换， 这样你就可以专注于上面每个例子中的内容。 作为参考， 图 G.5 给出了 WebGL 中的多种坐标系及其之间的变换关系， 希望这张图能够加深你对三维图形学的认识， 并帮助你在建模工具中进行实验。  </p>
<p><img src="/images/webgl-G5.png"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>单张图片爬取【★】</title>
    <url>/%E5%8D%95%E5%BC%A0%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<blockquote>
<p>request请求返回类型区别：</p>
<ul>
<li>content返回的是二进制形式的图片数据</li>
<li>text（字符串） content（二进制）json() (对象)</li>
</ul>
</blockquote>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 爬取图片数据</span></span><br><span class="line">    url = <span class="string">&#x27;http://api.aoau.top:9999/photos/3/%20%2834%29.png&#x27;</span></span><br><span class="line">    <span class="comment"># content返回的是二进制形式的图片数据</span></span><br><span class="line">    <span class="comment"># text（字符串） content（二进制）json() (对象)</span></span><br><span class="line">    img_data = requests.get(url=url).content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./tp.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(img_data)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>使用爬虫破解百度翻译【★★】</title>
    <url>/%E4%BD%BF%E7%94%A8%E7%88%AC%E8%99%AB%E7%A0%B4%E8%A7%A3%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91/</url>
    <content><![CDATA[<blockquote>
<p>携带post参数的爬虫</p>
</blockquote>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 1.指定url</span></span><br><span class="line">    post_url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line">    <span class="comment"># 2.进行UA伪装</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 3.post请求参数处理（同get请求一致）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;******************************************************&#x27;</span>)</span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">&#x27;请输入您要翻译的文本: &#x27;</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;kw&#x27;</span>: word  <span class="comment"># 待翻译数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 4.请求发送</span></span><br><span class="line">    response = requests.post(url=post_url, data=data, headers=headers)</span><br><span class="line">    <span class="comment"># 5.获取响应数据:json()方法返回的是obj（如果确认响应数据是json类型的，才可以使用json（））</span></span><br><span class="line">    dic_obj = response.json()</span><br><span class="line">    <span class="built_in">print</span>(dic_obj)</span><br><span class="line">    <span class="comment"># 持久化存储</span></span><br><span class="line">    fileName = word + <span class="string">&#x27;.json&#x27;</span></span><br><span class="line">    fp = <span class="built_in">open</span>(fileName, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    json.dump(dic_obj, fp=fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;******************************************************&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>正则解析爬取分页多张图片【★★★】</title>
    <url>/%E6%AD%A3%E5%88%99%E8%A7%A3%E6%9E%90%E7%88%AC%E5%8F%96%E5%88%86%E9%A1%B5%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>复习：<a href="https://www.runoob.com/python/python-reg-expressions.html">Python正则解析语法</a></p>
<p>需求：分页爬取糗事百科中糗图板块下所有的糗图图片</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 需求：爬取糗事百科中糗图板块下所有的糗图图片</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 创建一个文件夹，保存所有的图片</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./img&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;./img&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置一个通用的url模板</span></span><br><span class="line">    base_url = <span class="string">&#x27;https://www.qiushibaike.com/imgrank/page/%d/&#x27;</span></span><br><span class="line">    <span class="comment"># pageNum = 2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pageNum <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        <span class="comment"># 对应页码的url</span></span><br><span class="line">        new_url = <span class="built_in">format</span>(base_url % pageNum)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用通用爬虫对url对应的一整张页面进行爬取</span></span><br><span class="line">        page_text = requests.get(url=new_url, headers=headers).text</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用聚焦爬虫将页面中所有的糗图进行解析/提取</span></span><br><span class="line">        ex = <span class="string">&#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&lt;/div&gt;&#x27;</span></span><br><span class="line">        img_src_list = re.findall(ex, page_text, re.S)</span><br><span class="line">        <span class="comment"># print(img_src_list)</span></span><br><span class="line">        <span class="keyword">for</span> src <span class="keyword">in</span> img_src_list:</span><br><span class="line">            <span class="comment"># 拼接出一个完整的图片url</span></span><br><span class="line">            src = <span class="string">&#x27;https:&#x27;</span>+src</span><br><span class="line">            <span class="comment"># 请求到了图片的二进制数据</span></span><br><span class="line">            img_data = requests.get(url=src, headers=headers).content</span><br><span class="line">            <span class="comment"># 生成图片名称</span></span><br><span class="line">            img_name = src.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 图片存储的路径</span></span><br><span class="line">            imgPath = <span class="string">&#x27;./img/&#x27;</span>+img_name</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(imgPath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">                fp.write(img_data)</span><br><span class="line">                <span class="built_in">print</span>(img_name, <span class="string">&#x27;下载成功！！！&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取搜狗页面【★】</title>
    <url>/%E7%88%AC%E5%8F%96%E6%90%9C%E7%8B%97%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p>复习：<a href="https://freepiao.cn/2021/07/21/spider/#%E4%BA%8C%E3%80%81requests%E6%A8%A1%E5%9D%97">request模块讲解</a></p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># - 需求：爬取搜狗首页的页面数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># step_1:指定url</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.sogou.com/&#x27;</span></span><br><span class="line">    <span class="comment"># step_2:发起请求</span></span><br><span class="line">    <span class="comment"># get方法会返回一个响应对象</span></span><br><span class="line">    response = requests.get(url=url)</span><br><span class="line">    <span class="comment"># step_3:获取响应数据.text返回的是字符串形式的响应数据</span></span><br><span class="line">    page_text = response.text</span><br><span class="line">    <span class="built_in">print</span>(page_text)</span><br><span class="line">    <span class="comment"># step_4:持久化存储</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./sogou.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;#########CRAWLING END#########&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>正则解析爬取单页多张图片【★★】</title>
    <url>/%E6%AD%A3%E5%88%99%E8%A7%A3%E6%9E%90%E7%88%AC%E5%8F%96%E5%8D%95%E9%A1%B5%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>复习：<a href="https://www.runoob.com/python/python-reg-expressions.html">Python正则解析语法</a></p>
<p>需求：爬取糗事百科中糗图板块下所有的糗图图片</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re   <span class="comment"># 正则表达式模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：爬取糗事百科中糗图板块下所有的糗图图片</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 创建一个文件夹，保存所有的图片</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./img&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;./img&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># url = &#x27;https://www.qiushibaike.com/imgrank/&#x27;</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.sitapix.com/search/%E5%B1%B1&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 使用通用爬虫对url对应的一整张页面进行爬取</span></span><br><span class="line">    page_text = requests.get(url=url, headers=headers).text</span><br><span class="line">    <span class="comment"># print(page_text)</span></span><br><span class="line">    <span class="comment"># 使用聚焦爬虫将页面中所有的糗图进行解析/提取</span></span><br><span class="line">    ex = <span class="string">&#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&lt;/div&gt;&#x27;</span></span><br><span class="line">    <span class="comment"># ex = &#x27;&lt;img src=&quot;(.*?)&quot; class.*?&gt;&#x27;</span></span><br><span class="line">    img_src_list = re.findall(ex, page_text, re.S)</span><br><span class="line">    <span class="comment"># print(img_src_list)</span></span><br><span class="line">    <span class="keyword">for</span> src <span class="keyword">in</span> img_src_list:</span><br><span class="line">        <span class="comment"># 拼接出一个完整的图片url</span></span><br><span class="line">        src = <span class="string">&#x27;https:&#x27;</span> + src</span><br><span class="line">        <span class="comment"># 请求到了图片的二进制数据</span></span><br><span class="line">        img_data = requests.get(url=src, headers=headers).content</span><br><span class="line">        <span class="comment"># 生成图片名称</span></span><br><span class="line">        img_name = src.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 图片存储的路径</span></span><br><span class="line">        imgPath = <span class="string">&#x27;./img/&#x27;</span> + img_name</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(imgPath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(img_data)</span><br><span class="line">            <span class="built_in">print</span>(img_name, <span class="string">&#x27;下载成功！！！&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取药监局相关数据【★★】</title>
    <url>/%E7%88%AC%E5%8F%96%E8%8D%AF%E7%9B%91%E5%B1%80%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>携带post参数的爬虫</li>
<li>子链爬取</li>
</ul>
</blockquote>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    id_list = []  <span class="comment"># 存储企业的id</span></span><br><span class="line">    all_data_list = []  <span class="comment"># 存储所有的企业详情数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.批量获取不同企业的id值</span></span><br><span class="line">    url = <span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class="line">    <span class="comment"># 参数的封装</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="comment"># 获取前5页所有企业数据</span></span><br><span class="line">        page = <span class="built_in">str</span>(page)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;on&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;page&#x27;</span>: page,</span><br><span class="line">            <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;15&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;productName&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;conditionType&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;applyname&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;applysn&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        json_ids = requests.post(url=url, headers=headers, data=data).json()</span><br><span class="line">        <span class="keyword">for</span> dic <span class="keyword">in</span> json_ids[<span class="string">&#x27;list&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 批量获取id保存到数组</span></span><br><span class="line">            id_list.append(dic[<span class="string">&#x27;ID&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.获取企业详情数据</span></span><br><span class="line">    post_url = <span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> id_list:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: <span class="built_in">id</span></span><br><span class="line">        &#125;</span><br><span class="line">        detail_json = requests.post(url=post_url, headers=headers, data=data).json()</span><br><span class="line">        <span class="built_in">print</span>(detail_json, <span class="string">&#x27;\n-------------ending-----------&#x27;</span>)</span><br><span class="line">        all_data_list.append(detail_json)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.持久化存储all_data_list</span></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;./allData.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    json.dump(all_data_list, fp=fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n\n****************************完毕***************************&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取豆瓣电影详情【★★】</title>
    <url>/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85/</url>
    <content><![CDATA[<blockquote>
<p>携带post参数的爬虫</p>
</blockquote>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span></span><br><span class="line">    <span class="comment"># 参数：参考网页XHR请求中的Request URL字符串</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;24&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;interval_id&#x27;</span>: <span class="string">&#x27;100:90&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,  <span class="comment"># 从库中的第几部电影去取</span></span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span>: <span class="string">&#x27;20&#x27;</span>,  <span class="comment"># 一次取出的个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class="line"></span><br><span class="line">    list_data = response.json()</span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;./douban.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    json.dump(list_data, fp=fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;********************************************************************&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器渲染原理及浏览器存储</title>
    <url>/10-Browser/</url>
    <content><![CDATA[<blockquote>
<p>要点：浏览器渲染原理（简介、渲染机制）、浏览器存储（cookie、LocalStorage、sessionStorage、IndexedDB）</p>
</blockquote>
<span id="more"></span>

<h1 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><ul>
<li><p>输入网址进入网页的三个阶段</p>
<ul>
<li>http请求阶段</li>
<li>http响应阶段</li>
<li>浏览器渲染阶段</li>
</ul>
</li>
</ul>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul>
<li><p>进程Process</p>
<ul>
<li>一个运行的程序/浏览器页面</li>
</ul>
</li>
<li><p>线程Thread</p>
<ul>
<li><p>进程内的子任务</p>
<ul>
<li>可多个线程同时进行，实际是轮流执行</li>
</ul>
</li>
<li><p>程序做的不同的事</p>
</li>
</ul>
</li>
<li><p>栈内存Stack</p>
<ul>
<li>提供一个环境执行代码</li>
</ul>
</li>
<li><p>堆内存Heap</p>
</li>
<li><p>cpu</p>
<ul>
<li><p>单核cpu执行多任务</p>
<ul>
<li>操作系统轮流让各个任务交替执行</li>
</ul>
</li>
<li><p>多核cpu执行多任务</p>
</li>
</ul>
</li>
</ul>
<h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><h2 id="浏览器渲染机制"><a href="#浏览器渲染机制" class="headerlink" title="浏览器渲染机制"></a>浏览器渲染机制</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul>
<li><p>DOM树渲染</p>
<ul>
<li>①输入网址→②发送请求Request→③服务器返回index源代码→④Response响应阶段→⑤浏览器拿到代码→⑥在内存条开辟一块栈内存，提供执行环境；同时分配一个主线程，从上到下执行代码（进栈执行，执行完毕出栈）→⑦浏览器开辟等待队列</li>
<li>第一次自上而下执行完，只生成DOM树</li>
</ul>
</li>
<li><p>解析CSS，生成CSSOM树</p>
</li>
<li><p>结合DOM树与CSSOM树，生成 Render Tree渲染树</p>
</li>
<li><p>Layout回流</p>
<ul>
<li>根据生成的渲染数，计算它们在设备视口内的确切位置和大小</li>
</ul>
</li>
<li><p>Painting重绘</p>
<ul>
<li>根据渲染树以及回流得到的几何信息，得到节点的绝对像素</li>
</ul>
</li>
<li><p>Display</p>
<ul>
<li>将像素发送给GPU，展示在页面上</li>
</ul>
</li>
</ul>
<h3 id="分解剖析"><a href="#分解剖析" class="headerlink" title="分解剖析"></a>分解剖析</h3><ul>
<li><p>②Request请求阶段</p>
<ul>
<li>DNS解析、TCP协议三次握手，四次挥手，Https与http区别</li>
</ul>
</li>
<li><p>④Response响应阶段</p>
<ul>
<li>HTTP状态码，304缓存，HTTP报名</li>
</ul>
</li>
<li><p>⑥</p>
<ul>
<li><p>link、img、script等情况</p>
<ul>
<li>需要额外加载外部资源请求时</li>
<li>都会单独开辟新的子线程去加载资源文件，主线程继续向下执行</li>
</ul>
</li>
</ul>
</li>
<li><p>⑦TASK QUEUE任务队列</p>
<ul>
<li><p>存放子线程</p>
</li>
<li><p>事件循环  event loop</p>
<ul>
<li>主任务执行完后，到任务队列中找子线程，执行，执行完毕后，又到任务队列找下一个子线程，直到全部完成</li>
<li>微任务</li>
<li>宏任务</li>
</ul>
</li>
</ul>
</li>
<li><p>回流</p>
<ul>
<li><p>定义</p>
<ul>
<li>根据生成的渲染数，计算它们在设备视口内的确切位置和大小</li>
</ul>
</li>
<li><p>触发</p>
<ul>
<li>元素的大小或位置发生了变化（当页面布局和几何信息发生变化的时候），触发了重新布局，导致渲染树重新计算布局和渲染</li>
</ul>
</li>
</ul>
</li>
<li><p>重绘</p>
<ul>
<li><p>定义</p>
<ul>
<li>根据渲染树以及回流得到的几何信息，得到节点的绝对像素</li>
</ul>
</li>
<li><p>触发</p>
<ul>
<li>如outline、visbility、color、bg-color</li>
<li>元素样式的改变，但宽高、大小、位置都不变</li>
</ul>
</li>
</ul>
</li>
<li><p>l问题</p>
<ul>
<li>link与@import的区别</li>
<li>事件循环机制下的js同步异步编程（宏任务与微任务）</li>
</ul>
</li>
</ul>
<h3 id="性能优化浅谈"><a href="#性能优化浅谈" class="headerlink" title="性能优化浅谈"></a>性能优化浅谈</h3><ul>
<li><p>一、减少http请求次数和大小</p>
<ul>
<li>如：link（css）</li>
<li>资源合并压缩</li>
<li>图片懒加载</li>
<li>所有音视频走流文件</li>
</ul>
</li>
<li><p>二、DNS缓存</p>
</li>
<li><p>三、避免回流和重绘</p>
<ul>
<li><p>样式集中改变</p>
<ul>
<li><p>box.style.cssText = ..</p>
</li>
<li><p>创建一个类</p>
<ul>
<li>box.className = ‘newclass’</li>
</ul>
</li>
</ul>
</li>
<li><p>分离读写操作</p>
<ul>
<li><p>原理</p>
<ul>
<li>将 操作 与 获取 节点分离，减少破坏渲染等待队列</li>
</ul>
</li>
<li><p>现代的浏览器都有渲染队列的机制</p>
</li>
<li><p>offsetTop、clientTop、scrollTop、</p>
</li>
</ul>
</li>
<li><p>避免操作DOM</p>
<ul>
<li><p>vue、react</p>
<ul>
<li>数据影响视图</li>
<li>mvvm、mvc、virtual dom、dom diff</li>
</ul>
</li>
</ul>
</li>
<li><p>缓存布局信息</p>
<ul>
<li>本质：分离读写</li>
</ul>
</li>
<li><p>批量处理</p>
<ul>
<li><p>文档碎片</p>
<ul>
<li>frg = document.createDocumentFragment（）</li>
<li>容器</li>
</ul>
</li>
<li><p>实例</p>
<ul>
<li><p>用js添加li节点</p>
<ul>
<li><p>原方法</p>
<ul>
<li>多次循环遍历创建，循环一次触发一次回流</li>
</ul>
</li>
<li><p>新方法</p>
<ul>
<li><p>将创建的li放到文档碎片中</p>
</li>
<li><p>循环结束后通过文档碎片一次性将节点添加到文档中</p>
</li>
<li><p>最后销毁容器</p>
<ul>
<li>frg = null</li>
</ul>
</li>
</ul>
</li>
<li><p>新新方法</p>
<ul>
<li><p>摸板字符串</p>
<ul>
<li>拼串</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>动画效果应用到position属性为absolute或fixed的元素上（脱离文档流）</p>
<ul>
<li><p>本质</p>
<ul>
<li>并未脱离回流，只是在另一层进行小回流</li>
</ul>
</li>
</ul>
</li>
<li><p>CSS3硬件加速（GPU加速）</p>
<ul>
<li>transform、opacity、filters这些属性会触发硬件加速，不引发回流和重绘</li>
</ul>
</li>
<li><p>⑧   牺牲平滑度换取</p>
</li>
<li><p>⑨  避免table布局和使用css的JavaScript表达式</p>
</li>
</ul>
</li>
</ul>
<h1 id="浏览器存储"><a href="#浏览器存储" class="headerlink" title="浏览器存储"></a>浏览器存储</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着移动网络的发展与演化，我们手机上现在除了有原生 App，还能跑“WebApp”——它即开即用，用完即走。一个优秀的 WebApp 甚至可以拥有和原生 App 媲美的功能和体验。WebApp 优异的性能表现，有一部分原因要归功于浏览器存储技术的提升。cookie存储数据的功能已经很难满足开发所需，逐渐被WebStorage、IndexedDB所取代，本文将介绍这几种存储方式的差异和优缺点。</p>
<h2 id="一、Cookie"><a href="#一、Cookie" class="headerlink" title="一、Cookie"></a>一、Cookie</h2><h3 id="1-Cookie的来源"><a href="#1-Cookie的来源" class="headerlink" title="1.Cookie的来源"></a>1.Cookie的来源</h3><p><strong>Cookie 的本职工作并非本地存储，而是“维持状态”</strong>。<br>因为<strong>HTTP协议是无状态的，HTTP协议自身不对请求和响应之间的通信状态进行保存</strong>，通俗来说，服务器不知道用户上一次做了什么，这严重阻碍了交互式Web应用程序的实现。在典型的网上购物场景中，用户浏览了几个页面，买了一盒饼干和两瓶饮料。最后结帐时，由于HTTP的无状态性，不通过额外的手段，服务器并不知道用户到底买了什么，于是就诞生了Cookie。它就是用来绕开HTTP的无状态性的“额外手段”之一。服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。</p>
<p>我们可以把Cookie 理解为一个存储在浏览器里的一个小小的文本文件，它附着在 HTTP 请求上，在浏览器和服务器之间“飞来飞去”。它可以携带用户信息，当服务器检查 Cookie 的时候，便可以获取到客户端的状态。</p>
<p>在刚才的购物场景中，当用户选购了第一项商品，服务器在向用户发送网页的同时，还发送了一段Cookie，记录着那项商品的信息。当用户访问另一个页面，浏览器会把Cookie发送给服务器，于是服务器知道他之前选购了什么。用户继续选购饮料，服务器就在原来那段Cookie里追加新的商品信息。结帐时，服务器读取发送来的Cookie就行了。</p>
<h3 id="2-什么是Cookie及应用场景"><a href="#2-什么是Cookie及应用场景" class="headerlink" title="2.什么是Cookie及应用场景"></a>2.什么是Cookie及应用场景</h3><p><strong>Cookie指某些网站为了辨别用户身份而储存在用户本地终端上的数据(通常经过加密)。 cookie是服务端生成，客户端进行维护和存储</strong>。通过cookie,可以让服务器知道请求是来源哪个客户端，就可以进行客户端状态的维护，比如登陆后刷新，请求头就会携带登陆时response header中的set-cookie,Web服务器接到请求时也能读出cookie的值，根据cookie值的内容就可以判断和恢复一些用户的信息状态。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/88a1801d209eabf4b1db25fed4ab204c.png"></p>
<p>如上图所示，<strong>Cookie 以键值对的形式存在</strong>。</p>
<p>典型的应用场景有：</p>
<ul>
<li><p>  记住密码，下次自动登录。</p>
</li>
<li><p>  购物车功能。</p>
</li>
<li><p>  记录用户浏览数据，进行商品（广告）推荐。</p>
</li>
</ul>
<h3 id="3-Cookie的原理及生成方式"><a href="#3-Cookie的原理及生成方式" class="headerlink" title="3.Cookie的原理及生成方式"></a>3.Cookie的原理及生成方式</h3><p>Cookie的原理<br><img src="https://img-blog.csdnimg.cn/img_convert/c897430d72b08689ed182f9f18f89654.png"></p>
<p>第一次访问网站的时候，浏览器发出请求，服务器响应请求后，会在响应头里面添加一个Set-Cookie选项，将cookie放入到响应请求中，在浏览器第二次发请求的时候，会通过Cookie请求头部将Cookie信息发送给服务器，服务端会辨别用户身份，另外，Cookie的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。</p>
<p>Cookie的生成方式主要有两种：</p>
<ul>
<li>  生成方式一：http response header中的set-cookie</li>
</ul>
<p>我们可以通过响应头里的 Set-Cookie 指定要存储的 Cookie 值。默认情况下，domain 被设置为设置 Cookie 页面的主机名，我们也可以手动设置 domain 的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set</span>-Cookie: id=a3fWa; Expires=Wed, <span class="number">21</span> Oct <span class="number">2018</span> <span class="number">07</span>:<span class="number">28</span>:<span class="number">00</span> GMT;<span class="comment">//可以指定一个特定的过期时间（Expires）或有效期（Max-Age）</span></span><br></pre></td></tr></table></figure>

<p>当Cookie的过期时间被设定时，设定的日期和时间只与客户端相关，而不是服务端。</p>
<ul>
<li>  生成方式二：js中可以通过document.cookie可以读写cookie，以键值对的形式展示</li>
</ul>
<p>例如我们在掘金社区控制台输入以下三句代码，便可以在Chrome 的 Application 面板查看生成的cookie:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.cookie=&quot;userName=hello&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.cookie=&quot;gender=male&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.cookie=&#x27;age=20;domain=.baidu.com&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/367a3e55cd823fa8c6490a8bbe3d47f8.png"></p>
<p>从上图中我们可以得出：</p>
<p><strong>Domain 标识指定了哪些域名可以接受Cookie</strong>。如果没有设置domain，就会自动绑定到执行语句的当前域。<br>如果设置为”.baidu.com”,则所有以”baidu.com”结尾的域名都可以访问该Cookie，所以在掘金社区上读取不到第三条代码存储Cookie值。</p>
<h3 id="4-Cookie的缺陷"><a href="#4-Cookie的缺陷" class="headerlink" title="4.Cookie的缺陷"></a>4.Cookie的缺陷</h3><ul>
<li>  Cookie 不够大</li>
</ul>
<p>Cookie的大小限制在4KB左右，对于复杂的存储需求来说是不够用的。当 Cookie 超过 4KB 时，它将面临被裁切的命运。这样看来，Cookie 只能用来存取少量的信息。此外很多浏览器对一个站点的cookie个数也是有限制的。</p>
<p>这里需注意：各浏览器的cookie每一个<code>name=value</code>的value值大概在4k，所以4k并不是一个域名下所有的cookie共享的,而是一个name的大小。</p>
<ul>
<li>  过多的 Cookie 会带来巨大的性能浪费</li>
</ul>
<p>Cookie 是紧跟域名的。同一个域名下的所有请求，都会携带 Cookie。大家试想，如果我们此刻仅仅是请求一张图片或者一个 CSS 文件，我们也要携带一个 Cookie 跑来跑去（关键是 Cookie 里存储的信息并不需要），这是一件多么劳民伤财的事情。Cookie 虽然小，请求却可以有很多，随着请求的叠加，这样的不必要的 Cookie 带来的开销将是无法想象的。</p>
<p>cookie是用来维护用户信息的，而域名(domain)下所有请求都会携带cookie，但对于静态文件的请求，携带cookie信息根本没有用，此时可以通过cdn（存储静态文件的）的域名和主站的域名分开来解决。</p>
<ul>
<li>  由于在HTTP请求中的Cookie是明文传递的，所以安全性成问题，除非用HTTPS。</li>
</ul>
<h3 id="5-Cookie与安全"><a href="#5-Cookie与安全" class="headerlink" title="5.Cookie与安全"></a>5.Cookie与安全</h3><p>对于 cookie 来说，我们还需要注意安全性。<br><img src="https://img-blog.csdnimg.cn/img_convert/c2b2ddaa96d796e5305a99a1d826ef0a.png"></p>
<p>HttpOnly 不支持读写，浏览器不允许脚本操作document.cookie去更改cookie，<br>所以为避免跨域脚本 (XSS) 攻击，通过JavaScript的 Document.cookie API无法访问带有 HttpOnly 标记的Cookie，它们只应该发送给服务端。如果包含服务端 Session 信息的 Cookie 不想被客户端 JavaScript 脚本调用，那么就应该为其设置 HttpOnly 标记。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</span><br></pre></td></tr></table></figure>

<p>标记为 Secure 的Cookie只应通过被HTTPS协议加密过的请求发送给服务端。但即便设置了 Secure 标记，敏感信息也不应该通过Cookie传输，因为Cookie有其固有的不安全性，Secure 标记也无法提供确实的安全保障。</p>
<p>为了弥补 Cookie 的局限性，让“专业的人做专业的事情”，Web Storage 出现了。</p>
<p><strong>HTML5中新增了本地存储的解决方案—-Web Storage，它分成两类：sessionStorage和localStorage</strong>。这样有了WebStorage后，cookie能只做它应该做的事情了——作为客户端与服务器交互的通道，保持客户端状态。</p>
<h2 id="二、LocalStorage"><a href="#二、LocalStorage" class="headerlink" title="二、LocalStorage"></a>二、LocalStorage</h2><h3 id="1-LocalStorage的特点"><a href="#1-LocalStorage的特点" class="headerlink" title="1.LocalStorage的特点"></a>1.LocalStorage的特点</h3><ul>
<li>  保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据。</li>
<li>  大小为5M左右</li>
<li>  仅在客户端使用，不和服务端进行通信</li>
<li>  接口封装较好</li>
</ul>
<p>基于上面的特点，LocalStorage可以作为浏览器本地缓存方案，用来提升网页首屏渲染速度(根据第一请求返回时，将一些不变信息直接存储在本地)。</p>
<h3 id="2-存入-读取数据"><a href="#2-存入-读取数据" class="headerlink" title="2.存入/读取数据"></a>2.存入/读取数据</h3><p>localStorage保存的数据，以“键值对”的形式存在。也就是说，每一项数据都有一个键名和对应的值。所有的数据都是以文本格式保存。<br>存入数据使用setItem方法。它接受两个参数，第一个是键名，第二个是保存的数据。<br><code>localStorage.setItem(&quot;key&quot;,&quot;value&quot;);</code><br>读取数据使用getItem方法。它只有一个参数，就是键名。<br><code>var valueLocal = localStorage.getItem(&quot;key&quot;);</code></p>
<p>具体步骤，请看下面的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">if(window.localStorage)&#123;</span><br><span class="line">  localStorage.setItem（&#x27;name&#x27;,&#x27;world&#x27;）</span><br><span class="line">  localStorage.setItem（“gender&#x27;,&#x27;female&#x27;）</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> name=<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;name&#x27;</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> gender=<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;gender&#x27;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;name&#x27;</span>).innerHTML=name</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;gender&#x27;</span>).innerHTML=gender</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3.使用场景"></a>3.使用场景</h3><p>LocalStorage在存储方面没有什么特别的限制，理论上 Cookie 无法胜任的、可以用简单的键值对来存取的数据存储任务，都可以交给 LocalStorage 来做。</p>
<p>这里给大家举个例子，考虑到 LocalStorage 的特点之一是持久，有时我们更倾向于用它来存储一些内容稳定的资源。比如图片内容丰富的电商网站会用它来存储 Base64 格式的图片字符串：<br><img src="https://img-blog.csdnimg.cn/img_convert/d08269c01185f35b26be3750c8be86f2.png"></p>
<h2 id="三、sessionStorage"><a href="#三、sessionStorage" class="headerlink" title="三、sessionStorage"></a>三、sessionStorage</h2><p>sessionStorage保存的数据用于浏览器的一次会话，当会话结束（通常是该窗口关闭），数据被清空；sessionStorage 特别的一点在于，<strong>即便是相同域名下的两个页面，只要它们不在同一个浏览器窗口中打开，那么它们的 sessionStorage 内容便无法共享</strong>；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。除了保存期限的长短不同，SessionStorage的属性和方法与LocalStorage完全一样。</p>
<h3 id="1-sessionStorage的特点"><a href="#1-sessionStorage的特点" class="headerlink" title="1.sessionStorage的特点"></a>1.sessionStorage的特点</h3><ul>
<li>  会话级别的浏览器存储</li>
<li>  大小为5M左右</li>
<li>  仅在客户端使用，不和服务端进行通信</li>
<li>  接口封装较好</li>
</ul>
<p>基于上面的特点，sessionStorage 可以有效对表单信息进行维护，比如刷新时，表单信息不丢失。</p>
<h3 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2.使用场景"></a>2.使用场景</h3><p>sessionStorage 更适合用来存储生命周期和它同步的会话级别的信息。这些信息只适用于当前会话，当你开启新的会话时，它也需要相应的更新或释放。比如微博的 sessionStorage就主要是存储你本次会话的浏览足迹：<br><img src="https://img-blog.csdnimg.cn/img_convert/766e8aa98048064132011e2f3683bcd1.png"></p>
<p>lasturl 对应的就是你上一次访问的 URL 地址，这个地址是即时的。当你切换 URL 时，它随之更新，当你关闭页面时，留着它也确实没有什么意义了，干脆释放吧。这样的数据用 sessionStorage 来处理再合适不过。</p>
<h3 id="3-sessionStorage-、localStorage-和-cookie-之间的区别"><a href="#3-sessionStorage-、localStorage-和-cookie-之间的区别" class="headerlink" title="3.sessionStorage 、localStorage 和 cookie 之间的区别"></a>3.sessionStorage 、localStorage 和 cookie 之间的区别</h3><ul>
<li>  共同点：都是保存在浏览器端，且都遵循同源策略。</li>
<li>  不同点：在于生命周期与作用域的不同</li>
</ul>
<p>作用域：localStorage只要在相同的协议、相同的主机名、相同的端口下，就能读取/修改到同一份localStorage数据。sessionStorage比localStorage更严苛一点，除了协议、主机名、端口外，还要求在同一窗口（也就是浏览器的标签页）下<br><img src="https://img-blog.csdnimg.cn/img_convert/30482461b261171ee843eb9f98c6b30d.png"></p>
<p>生命周期：localStorage 是持久化的本地存储，存储在其中的数据是永远不会过期的，使其消失的唯一办法是手动删除；而 sessionStorage 是临时性的本地存储，它是会话级别的存储，当会话结束（页面被关闭）时，存储内容也随之被释放。</p>
<p>Web Storage 是一个从定义到使用都非常简单的东西。它使用键值对的形式进行存储，这种模式有点类似于对象，却甚至连对象都不是——<strong>它只能存储字符串</strong>，要想得到对象，我们还需要先对字符串进行一轮解析。</p>
<p>说到底，Web Storage 是对 Cookie 的拓展，它只能用于存储少量的简单数据。当遇到大规模的、结构复杂的数据时，Web Storage 也爱莫能助了。这时候我们就要清楚我们的终极大 boss——IndexedDB！</p>
<h2 id="四、IndexedDB"><a href="#四、IndexedDB" class="headerlink" title="四、IndexedDB"></a>四、IndexedDB</h2><p>IndexedDB 是一种低级API，**用于客户端存储大量结构化数据(包括文件和blobs)**。该API使用索引来实现对该数据的高性能搜索。IndexedDB 是一个运行在浏览器上的非关系型数据库。既然是数据库了，那就不是 5M、10M 这样小打小闹级别了。理论上来说，IndexedDB 是没有存储上限的（一般来说不会小于 250M）。它不仅可以存储字符串，还可以存储二进制数据。</p>
<h3 id="1-IndexedDB的特点"><a href="#1-IndexedDB的特点" class="headerlink" title="1.IndexedDB的特点"></a>1.IndexedDB的特点</h3><ul>
<li>  键值对储存。</li>
</ul>
<p>IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以”键值对”的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。</p>
<ul>
<li>  异步</li>
</ul>
<p>IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现。</p>
<ul>
<li>  支持事务。</li>
</ul>
<p>IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。</p>
<ul>
<li>  同源限制</li>
</ul>
<p>IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库。</p>
<ul>
<li>  储存空间大</li>
</ul>
<p>IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限。</p>
<ul>
<li>  支持二进制储存。</li>
</ul>
<p>IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）。</p>
<h3 id="2-IndexedDB的常见操作"><a href="#2-IndexedDB的常见操作" class="headerlink" title="2.IndexedDB的常见操作"></a>2.IndexedDB的常见操作</h3><p>在IndexedDB大部分操作并不是我们常用的调用方法，返回结果的模式，而是请求——响应的模式。</p>
<ul>
<li>  建立打开IndexedDB —-<code>window.indexedDB.open(&quot;testDB&quot;)</code></li>
</ul>
<p>这条指令并不会返回一个DB对象的句柄，我们得到的是一个<code>IDBOpenDBRequest</code>对象，而我们希望得到的DB对象在其result属性中<br><img src="https://img-blog.csdnimg.cn/img_convert/a442775ca09c62b34a95977420a6a14d.png"></p>
<p>除了result，IDBOpenDBRequest接口定义了几个重要属性:</p>
<p>onerror: 请求失败的回调函数句柄</p>
<p>onsuccess:请求成功的回调函数句柄</p>
<p>onupgradeneeded:请求数据库版本变化句柄</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">openDB</span>(<span class="params">name</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> request=<span class="built_in">window</span>.indexedDB.open(name)<span class="comment">//建立打开IndexedDB</span></span></span><br><span class="line"><span class="javascript">request.onerror=<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;open indexdb error&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">request.onsuccess=<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">myDB.db=e.target.result<span class="comment">//这是一个 IDBDatabase对象，这就是IndexedDB对象</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(myDB.db)<span class="comment">//此处就可以获取到db实例</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> myDB=&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;testDB&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">version</span>:<span class="string">&#x27;1&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">db</span>:<span class="literal">null</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">openDB(myDB.name)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>控制台得到一个 IDBDatabase对象，这就是IndexedDB对象<br><img src="https://img-blog.csdnimg.cn/img_convert/07eb89f08b4feb1b018735dc77e3f75a.png"></p>
<ul>
<li>  关闭IndexedDB—-<code>indexdb.close()</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function closeDB(db)&#123;</span><br><span class="line">    db.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>  删除IndexedDB—-<code>window.indexedDB.deleteDatabase(indexdb)</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteDB</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  indexedDB.deleteDatabase(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-WebStorage、cookie-和-IndexedDB之间的区别"><a href="#3-WebStorage、cookie-和-IndexedDB之间的区别" class="headerlink" title="3.WebStorage、cookie 和 IndexedDB之间的区别"></a>3.WebStorage、cookie 和 IndexedDB之间的区别</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/3af7807f9d0222b50d94a1afa72070b9.png"></p>
<p>从上表可以看到，cookie 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 localStorage 和 sessionStorage 。对于不怎么改变的数据尽量使用 localStorage 存储，否则可以用 sessionStorage 存储。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>正是浏览器存储、缓存技术的出现和发展，为我们的前端应用带来了无限的转机。近年来基于存储、缓存技术的第三方库层出不绝，此外还衍生出了 PWA 这样优秀的 Web 应用模型。总结下本文几个核心观点：</p>
<ul>
<li>  Cookie 的本职工作并非本地存储，而是“维持状态”</li>
<li>  Web Storage 是 HTML5 专门为浏览器存储而提供的数据存储机制，不与服务端发生通信</li>
<li>  IndexedDB 用于客户端存储大量结构化数据</li>
</ul>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li>  <a href="https://juejin.im/post/59d1f59bf265da06700b0934">把cookie聊清楚</a></li>
<li>  <a href="http://www.cnblogs.com/dolphinX/p/3415761.html">HTML5本地存储——IndexedDB（一：基本使用）</a></li>
<li>  <a href="http://jerryzou.com/posts/cookie-and-web-storage/">详说 Cookie, LocalStorage 与 SessionStorage</a></li>
<li>  <a href="https://juejin.im/book/5b936540f265da0a9624b04b/section/5ba5bb16f265da0ae92a6cfc">前端性能优化原理与实践</a></li>
<li>  <a href="https://juejin.im/post/5a9fcc5e51882555602074e3">localstorage 必知必会</a></li>
<li>  <a href="http://www.ruanyifeng.com/blog/2018/07/indexeddb.html">浏览器数据库 IndexedDB 入门教程</a></li>
</ul>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>browser</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>Browser</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】18-颜色与纹理-在矩形表面帖上图像</title>
    <url>/18-%E9%A2%9C%E8%89%B2%E4%B8%8E%E7%BA%B9%E7%90%86-%E5%9C%A8%E7%9F%A9%E5%BD%A2%E8%A1%A8%E9%9D%A2%E5%B8%96%E4%B8%8A%E5%9B%BE%E5%83%8F-TexturedQuad/</url>
    <content><![CDATA[<blockquote>
<p>对应《WebGL编程指南》代码：20-TexturedQuad</p>
<p>要点：纹理映射、纹理坐标</p>
</blockquote>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、纹理映射"><a href="#一、纹理映射" class="headerlink" title="一、纹理映射"></a>一、纹理映射</h3><p>​        概念：将一张图像（像帖纸）映射（帖）到一个几何图形的表面上去。此时这张图片又可以称为<strong>纹理图像</strong>或<strong>纹理</strong>(texture)。</p>
<p>​        作用：根据纹理图像，为之前光栅化后的每个元素涂上合适的颜色。组成纹理图像的像素又被称为<strong>纹素</strong>，每一个纹素都使用RGB或RGBA格式编码。</p>
<h3 id="二、纹理映射的步骤"><a href="#二、纹理映射的步骤" class="headerlink" title="二、纹理映射的步骤"></a>二、纹理映射的步骤</h3><p>​    1、准备好映射到几何图形上的纹理图像</p>
<p>​    2、为几何图形配置纹理映射方式</p>
<p>​    3、加载纹理图像，对其进行一些配置，以在WebGL中使用它</p>
<p>​    4、在片元着色器中将相应的纹素从纹理中抽取出来，并将纹素的颜色赋值给片元</p>
<h3 id="三、纹理坐标"><a href="#三、纹理坐标" class="headerlink" title="三、纹理坐标"></a>三、纹理坐标</h3><p>​        第2步指定映射方式，就是确定“几何图形的某个片元”的颜色如何取决于“纹理图像中那个（或哪几个）像素”的问题（即前者到后者的映射）。我们利用图形顶点坐标来确定屏幕上那部分被纹理图像覆盖，使用<strong>纹理坐标</strong>来确定纹理图像的哪部分将覆盖到几何图形上。</p>
<p>​        <code>纹理坐标</code>是纹理图像上的坐标，通过纹理坐标可以在纹理图像上获取纹素颜色。<br>​        WebGL系统中的纹理坐标系统是<strong>二维</strong>的。<br>​        WebGL中使用<code>s</code>和<code>t</code>命名纹理坐标。（st坐标系统或uv坐标系统）</p>
<p><img src="/images/TexturedQuad.png" alt="1"></p>
<p>​        纹理坐标很通用，因为坐标值与图像自身尺寸无关。</p>
<h3 id="四、将纹理图像粘贴到几何图形上"><a href="#四、将纹理图像粘贴到几何图形上" class="headerlink" title="四、将纹理图像粘贴到几何图形上"></a>四、将纹理图像粘贴到几何图形上</h3><p>​        在WebGL中，我们通过纹理图像的纹理坐标与几何图形顶点坐标间的映射关系，来确定怎样将纹理图像贴上去。</p>
<p><img src="/images/TexturedQuad1.png" alt="2"></p>
<p>​        这里的映射关系为：</p>
<table>
<thead>
<tr>
<th>纹理坐标</th>
<th>顶点坐标</th>
</tr>
</thead>
<tbody><tr>
<td>(0.0, 1.0)</td>
<td>(-0.5, 0.5, 0.0)</td>
</tr>
<tr>
<td>(0.0, 0.0)</td>
<td>(-0.5, -0.5, 0.0)</td>
</tr>
<tr>
<td>(1.0, 0.0)</td>
<td>(0.5, -0.5, 0.0)</td>
</tr>
<tr>
<td>(1.0, 1.0)</td>
<td>(0.5, 0.5, 0.0)</td>
</tr>
</tbody></table>
<h3 id="五、程序讲解"><a href="#五、程序讲解" class="headerlink" title="五、程序讲解"></a>五、程序讲解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initTextures</span>(<span class="params">gl, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> texture = gl.createTexture(); <span class="comment">//创建纹理对象</span></span><br><span class="line">    <span class="keyword">if</span>(!texture)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the texture object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取u_Sampler的存储位置</span></span><br><span class="line">    <span class="keyword">var</span> u_Sampler = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_Sampler&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!u_Sampler) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of u_Sampler&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> Image();<span class="comment">//创建一个image对象</span></span><br><span class="line">    <span class="keyword">if</span> (!image) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the image object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册图像加载时间的响应函数</span></span><br><span class="line">    image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        loadTexture(gl, n, texture, u_Sampler, image);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浏览器开始加载图像</span></span><br><span class="line">    image.src = <span class="string">&#x27;../resources/sky.jpg&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadTexture</span>(<span class="params">gl, n, texture, u_Sampler, image</span>)</span>&#123;</span><br><span class="line">    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, <span class="number">1</span>);<span class="comment">//对纹理图像进行y轴反转</span></span><br><span class="line">    <span class="comment">//开启0号纹理单元</span></span><br><span class="line">    gl.activeTexture(gl.TEXTURE0);</span><br><span class="line">    <span class="comment">//向target绑定纹理对象</span></span><br><span class="line">    gl.bindTexture(gl.TEXTURE_2D, texture);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置纹理参数</span></span><br><span class="line">    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);</span><br><span class="line">    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);</span><br><span class="line">    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);</span><br><span class="line">    <span class="comment">//配置纹理图像</span></span><br><span class="line">    gl.texImage2D(gl.TEXTURE_2D, <span class="number">0</span>, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将0号纹理传递给着色器</span></span><br><span class="line">    gl.uniform1i(u_Sampler, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLE_STRIP, <span class="number">0</span>, n);<span class="comment">//绘制矩形</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段程序主要分五个部分：</p>
<h4 id="1、顶点着色器中接收顶点的纹理坐标，光栅化后传递给片元着色器"><a href="#1、顶点着色器中接收顶点的纹理坐标，光栅化后传递给片元着色器" class="headerlink" title="1、顶点着色器中接收顶点的纹理坐标，光栅化后传递给片元着色器"></a>1、顶点着色器中接收顶点的纹理坐标，光栅化后传递给片元着色器</h4><h4 id="2、片元着色器根据片元的纹理坐标，从纹理图像中抽取出纹素颜色，赋给当前片元。"><a href="#2、片元着色器根据片元的纹理坐标，从纹理图像中抽取出纹素颜色，赋给当前片元。" class="headerlink" title="2、片元着色器根据片元的纹理坐标，从纹理图像中抽取出纹素颜色，赋给当前片元。"></a>2、片元着色器根据片元的纹理坐标，从纹理图像中抽取出纹素颜色，赋给当前片元。</h4><h4 id="3、设置顶点的纹理坐标（initVertexBuffers-）"><a href="#3、设置顶点的纹理坐标（initVertexBuffers-）" class="headerlink" title="3、设置顶点的纹理坐标（initVertexBuffers()）"></a>3、设置顶点的纹理坐标（<code>initVertexBuffers()</code>）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> verticesTexCoords = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">    [</span><br><span class="line">        -<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="comment">// 左上 顶点(-0.5, 0.5)对应纹理(0.0, 1.0)</span></span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,<span class="comment">// 左下</span></span><br><span class="line">        <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,	 <span class="comment">//	右上 </span></span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="comment">// 右下</span></span><br><span class="line">    ]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>​        将顶点坐标和纹理坐标写入缓冲区对象，将其中的顶点坐标分配给a_Position变量并开启之。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">gl.enableVertexAttribArray(a_Position);</span><br></pre></td></tr></table></figure>

<p>​        获取<code>a_TexCoord</code>变量的存储位置，将缓冲区中的纹理坐标分配给该变量更开启。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a_TexCoord = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_TexCoord&#x27;</span>);</span><br><span class="line">gl.vertexAttribPointer(a_TexCoord, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">4</span>, FSIZE * <span class="number">2</span>);</span><br><span class="line">gl.enableVertexAttribArray(a_TexCoord);</span><br></pre></td></tr></table></figure>

<h4 id="4、配置和加载纹理，准备待加载的纹理图像，令浏览器读取它（initTextures-）"><a href="#4、配置和加载纹理，准备待加载的纹理图像，令浏览器读取它（initTextures-）" class="headerlink" title="4、配置和加载纹理，准备待加载的纹理图像，令浏览器读取它（initTextures()）"></a>4、配置和加载纹理，准备待加载的纹理图像，令浏览器读取它（<code>initTextures()</code>）</h4><h5 id="①取样器"><a href="#①取样器" class="headerlink" title="①取样器"></a>①取样器</h5><p>​        u_Sampler。“Sampler”意为取样器，因为从纹理图像中获取纹素颜色的过程，相当于从纹理图像中“取样”，即输入纹理坐标，返回颜色值。实际上，由于纹理像素也是有大小的，取样处的纹理坐标很可能并不在某个像素中心，所以<strong>取样通常并不是直接取纹理图像某个像素的颜色，而是通过附近的若干个像素共同计算而得。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> u_Sampler = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_Sampler&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="②加载图像（异步加载）"><a href="#②加载图像（异步加载）" class="headerlink" title="②加载图像（异步加载）"></a>②加载图像（异步加载）</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();<span class="comment">//创建一个image对象</span></span><br><span class="line"><span class="comment">// 注册图像加载时间的响应函数</span></span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 异步调用</span></span><br><span class="line">    loadTexture(gl, n, texture, u_Sampler, image);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器开始异步加载图像，程序本身执行return true语句</span></span><br><span class="line"><span class="comment">// 然后，浏览器在某个时刻完成了对图像的加载，就会调用事件响应函数loadTexture()将加载得到的图像交给WebGL系统处理</span></span><br><span class="line">image.src = <span class="string">&#x27;../resources/sky.jpg&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：出于安全性考虑，WebGL不允许使用跨域纹理图像。</p>
</blockquote>
<p>异步加载图片过程：</p>
<p>​        [1]告诉浏览器在图像加载完成后调用loadTexture()</p>
<p>​        [2]浏览器开始加载图像</p>
<p>​        [3]向web服务器请求纹理图像</p>
<p>​        [4]服务器从数据库文件系统中获取图像</p>
<p>​        [5]服务器返回图像</p>
<p>​        [6]浏览器收到加载完成的图像</p>
<p>​        [7]调用loadTexture()函数</p>
<p>解析：上述步骤中，[1]和[2]是顺序执行的，而第[2]步到第[7]步不是。</p>
<h4 id="5、监听纹理图像的加载事件，一旦加载完成，就在WebGL系统中使用纹理（loadTexture-）"><a href="#5、监听纹理图像的加载事件，一旦加载完成，就在WebGL系统中使用纹理（loadTexture-）" class="headerlink" title="5、监听纹理图像的加载事件，一旦加载完成，就在WebGL系统中使用纹理（loadTexture()）"></a>5、监听纹理图像的加载事件，一旦加载完成，就在WebGL系统中使用纹理（<code>loadTexture()</code>）</h4><p>​        为WebGL配置纹理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadTexture</span>(<span class="params">gl, n, texture, u_Sampler, image</span>)</span>&#123;</span><br><span class="line">    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, <span class="number">1</span>);<span class="comment">//对纹理图像进行y轴反转</span></span><br><span class="line">    <span class="comment">//开启0号纹理单元</span></span><br><span class="line">    gl.activeTexture(gl.TEXTURE0);</span><br><span class="line">    <span class="comment">//向target绑定纹理对象</span></span><br><span class="line">    gl.bindTexture(gl.TEXTURE_2D, texture);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置纹理参数</span></span><br><span class="line">    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);</span><br><span class="line">    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);</span><br><span class="line">    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);</span><br><span class="line">    <span class="comment">//配置纹理图像</span></span><br><span class="line">    gl.texImage2D(gl.TEXTURE_2D, <span class="number">0</span>, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将0号纹理传递给着色器</span></span><br><span class="line">    gl.uniform1i(u_Sampler, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLE_STRIP, <span class="number">0</span>, n);<span class="comment">//绘制矩形</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="①图像Y轴反转"><a href="#①图像Y轴反转" class="headerlink" title="①图像Y轴反转"></a>①图像Y轴反转</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>​        在使用图像前，必须对它进行Y轴反转。（<a href="#%E4%B8%89%E3%80%81%E7%BA%B9%E7%90%86%E5%9D%90%E6%A0%87">WebGL纹理坐标</a>中的t轴的方向和PNG、BMP、JPG等格式图片的坐标系统的Y轴方向是相反的。）</p>
<p><img src="/images/TexturedQuad2.png" alt="3"></p>
<table>
<thead>
<tr>
<th>gl.pixelStorei()参数</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>pname</td>
<td>以下二者之一</td>
</tr>
<tr>
<td>gl.UNPACK_FLIP_Y_WEBGL</td>
<td>对图像进行Y轴反转，默认值为false</td>
</tr>
<tr>
<td>gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL</td>
<td>将图像RGB颜色值的每一个分量乘以A。默认false</td>
</tr>
<tr>
<td>param</td>
<td>指定非0或0。必须为整数</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h5 id="②激活纹理单元"><a href="#②激活纹理单元" class="headerlink" title="②激活纹理单元"></a>②激活纹理单元</h5><p>​        WebGL通过纹理单元的机制来同时使用多个纹理。每个纹理单元有一个单元编号来管理一张纹理图像。<br>​        系统支持的纹理单元格数取决于硬件和浏览器的WebGL实现，但是在默认情况下，WebGL<strong>至少支持8个</strong>纹理单元，内置变量gl.TEXTURE0、gl.TEXTURE1…gl.TEXTURE7各表示一个纹理单元<br>​        在使用纹理单元之前，还需要调用<code>gl.aactiveTexture()</code>来激活它。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gl.activeTexture(gl.TEXTURE0);</span><br></pre></td></tr></table></figure>

<h5 id="③绑定纹理对象（设置纹理的类型）"><a href="#③绑定纹理对象（设置纹理的类型）" class="headerlink" title="③绑定纹理对象（设置纹理的类型）"></a>③绑定纹理对象（设置纹理的类型）</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：该方法完成了两个任务：开启纹理对象，以及将纹理对象绑定到纹理单元上。</span></span><br><span class="line">gl.bindTexture(gl.TEXTURE_2D, texture);</span><br></pre></td></tr></table></figure>

<p>​        解析：告诉WebGL系统纹理对象使用的是哪种类型的纹理。在对纹理对象进行操作之前，需要绑定纹理对象，这一点与缓冲区很像：在对缓冲区对象进行操作（写入数据）之前，也需要绑定缓冲区对象。如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将缓冲区对象保存到目标上</span></span><br><span class="line">gl.bindBuffer(gl.ARRAY_BUFFER, vertexTexCoordBuffer);</span><br><span class="line"><span class="comment">// 向缓存对象写入数据</span></span><br><span class="line">gl.bufferData(gl.ARRAY_BUFFER, verticesTexCoords, gl.STATIC_DRAW);</span><br></pre></td></tr></table></figure>

<p>WebGL支持两种类型的纹理：</p>
<p>​        gl.TEXTURE_2D：二维纹理</p>
<p>​        gl.TEXTURE_CUBE_MAP：立方体纹理</p>
<blockquote>
<p>补充：在WebGL中，你没法直接操作纹理对象，必须<strong>通过将纹理对象绑定到纹理单元上，然后通过操作纹理单元来操作纹理对象。</strong></p>
</blockquote>
<h5 id="④配置纹理对象的参数"><a href="#④配置纹理对象的参数" class="headerlink" title="④配置纹理对象的参数"></a>④配置纹理对象的参数</h5><p>​        即设置纹理图像映射到图形上的具体方式：如何根据纹理坐标获取纹素颜色、按哪种方式重复填充纹理。</p>
<table>
<thead>
<tr>
<th>gl.texParameteri()</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>参数1：target</td>
<td>gl.TEXTURE_2D或gl.TEXTURE_CUBE_MAP</td>
</tr>
<tr>
<td>参数 2：pname</td>
<td>纹理参数(<a href="">参见</a>)</td>
</tr>
<tr>
<td>参数3：param</td>
<td>纹理参数的值</td>
</tr>
</tbody></table>
<p>纹理参数：</p>
<p><img src="/images/TexturedQuad3.png" alt="4"></p>
<table>
<thead>
<tr>
<th>纹理参数</th>
<th>描述</th>
<th>默认值</th>
<th>其他值</th>
</tr>
</thead>
<tbody><tr>
<td>gl.TEXTURE_MAX_FILTER</td>
<td><strong>纹理放大</strong>。当纹理的绘制范围比较纹理本身更大时，如何获取纹素颜色。（图像比空间小）</td>
<td>gl.LINEAR：</td>
<td>见下图</td>
</tr>
<tr>
<td>gl.TEXTURE_MIN_FILTER</td>
<td><strong>纹理缩小</strong>。当纹理的绘制范围比较纹理本身更小时，如何获取纹素颜色。（图像比空间大）</td>
<td>gl.NEAREST_MIPMAP_LINEAR</td>
<td></td>
</tr>
<tr>
<td>gl.TEXTURE_WRAP_S</td>
<td><strong>纹理水平填充</strong></td>
<td>gl.REPEAT</td>
<td></td>
</tr>
<tr>
<td>gl.TEXTURE_WRAP_T</td>
<td><strong>纹理垂直填充</strong></td>
<td>gl.REPAET</td>
<td></td>
</tr>
</tbody></table>
<p><img src="/images/TexturedQuad4.png" alt="5"></p>
<p>​        每个纹理参数都有一个默认值，不调用<code>gl.texParameteri</code>就使用默认值。本例修改了<code>gl.TEXTURE_MIN_FILTER</code>参数，它的默认值是一种特殊的、被称为MIPMAP（也称金字塔）的纹理类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：曼哈顿距离，即直角距离，棋盘距离。如（x1，y1）和（x2，y2）的曼哈顿距离为|x1-x2|+|y1-y2|。</p>
</blockquote>
<h5 id="⑤将纹理图像分配给纹理对象（gl-texImage2D），同时允许你告诉WebGL系统关于该图像的一些特性。"><a href="#⑤将纹理图像分配给纹理对象（gl-texImage2D），同时允许你告诉WebGL系统关于该图像的一些特性。" class="headerlink" title="⑤将纹理图像分配给纹理对象（gl.texImage2D），同时允许你告诉WebGL系统关于该图像的一些特性。"></a>⑤将纹理图像分配给纹理对象（gl.texImage2D），同时允许你告诉WebGL系统关于该图像的一些特性。</h5><p><img src="/images/TexturedQuad5.png" alt="6"></p>
<p>​        这时，Image对象中的图像就从JavaScript传入WebGL系统中，并存储在纹理对象中。</p>
<p>​        纹理数据的格式：</p>
<p><img src="/images/TexturedQuad6.png" alt="7"></p>
<blockquote>
<p>format标示纹理数据的格式，必须根据纹理图像的格式来选择这个参数：<br>        JPG =&gt; gl.RGB<br>         PNG =&gt; gl.RGBA<br>         BMP =&gt; gl.RGB</p>
</blockquote>
<p>补充：</p>
<p>​        1.在webgl中，<code>internalformat</code>必须和<code>format</code>一样。</p>
<p>​        2.<code>gl.LUMUNANCE</code> 和 <code>gl.LUMINANCE_ALPHA</code> 通常用在灰度图像上等等</p>
<p>​        3.<code>流明</code>（luminance）标示我们感知到的物体表面的<strong>亮度</strong>。通常使用物体表面红、蓝        颜色分量指的加权平均来计算流明。</p>
<p>​        </p>
<p>​        纹理数据的数据格式：    </p>
<p>​            <code>type</code>参数制定了纹理数据类型。通常使用<code>gl.UNSIGNED_BYTE</code>数据类型。</p>
<p><img src="/images/TexturedQuad7.png" alt="8"></p>
<h5 id="⑥将纹理单元传递给片元着色器"><a href="#⑥将纹理单元传递给片元着色器" class="headerlink" title="⑥将纹理单元传递给片元着色器"></a>⑥将纹理单元传递给片元着色器</h5><p>一旦将纹理图像传入了WebGL系统，就必须将其传入片元着色器并映射到图形的表面上去。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE =</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;uniform sampler2D u_Sampler;\n&#x27;</span> +</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>用于纹理对象的数据类型：</p>
<ul>
<li>sampler2D：绑定到gl.TEXTURE_2D上的纹理数据类型</li>
<li>samplerCube：gl.TEXTURE_CUBE_MAP</li>
</ul>
<p>通过<strong>纹理单元编号</strong>（gl.TEXTUREn中的n）将纹理对象传给u_Sampler</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将0号纹理传递给着色器</span></span><br><span class="line">gl.uniform1i(u_Sampler, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>执行完后，片元着色器就能够访问纹理图像了。</p>
<h5 id="⑦从顶点着色器向片元着色器传输纹理坐标"><a href="#⑦从顶点着色器向片元着色器传输纹理坐标" class="headerlink" title="⑦从顶点着色器向片元着色器传输纹理坐标"></a>⑦从顶点着色器向片元着色器传输纹理坐标</h5><p>通过同名的<code>varying变量</code>传输数据：</p>
<p>​        通过attribute变量<code>a_TexCoord</code>接收顶点的纹理坐标，将数据赋值给varying变量<code>v_TexCoord</code>并将纹理坐标传入片元着色器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">  <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;attribute vec2 a_TexCoord;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;varying vec2 v_TexCoord;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  gl_Position = a_Position;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  v_TexCoord = a_TexCoord;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="⑧在片元着色器中获取纹理像素颜色（texture2D-）"><a href="#⑧在片元着色器中获取纹理像素颜色（texture2D-）" class="headerlink" title="⑧在片元着色器中获取纹理像素颜色（texture2D()）"></a>⑧在片元着色器中获取纹理像素颜色（texture2D()）</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gl_FragColor = texture2D(u_Sampler, v_TexCoord);</span><br></pre></td></tr></table></figure>

<p><img src="/images/TexturedQuad8.png" alt="9"></p>
<p>​        纹理放大和缩小方法的参数将决定WebGL系统将以何种方式内插出片元。我们将texture2D函数返回值赋给了gl_FragColor变量，然后片元着色器就将当前片元染成这个颜色。</p>
<h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TexturedQuad.js</span></span><br><span class="line"><span class="comment">//顶点着色器程序</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec2 a_TexCoord;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec2 v_TexCoord;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_TexCoord = a_TexCoord;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform sampler2D u_Sampler;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec2 v_TexCoord;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = texture2D(u_Sampler, v_TexCoord);\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Specify the color for clearing &lt;canvas&gt;</span></span><br><span class="line">    gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置纹理</span></span><br><span class="line">    <span class="keyword">if</span> (!initTextures(gl, n)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to intialize the texture.&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesTexCoords = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">           -<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,</span><br><span class="line">           -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">           <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">           <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,</span><br><span class="line">            <span class="comment">// -0.5, 0.5, -0.3, 1.7,</span></span><br><span class="line">            <span class="comment">// -0.5, -0.5, -0.3, -0.2,</span></span><br><span class="line">            <span class="comment">// 0.5, 0.5, 1.7, 1.7,</span></span><br><span class="line">            <span class="comment">// 0.5, -0.5, 1.7, -0.2</span></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">4</span>;<span class="comment">// 顶点数目</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> vertexTexCoordBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span>(!vertexTexCoordBuffer)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to create thie buffer object&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将顶点坐标和纹理坐标写入缓冲区对象</span></span><br><span class="line">    <span class="comment">// 将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexTexCoordBuffer);</span><br><span class="line">    <span class="comment">// 向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesTexCoords, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesTexCoords.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_Position &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_Position&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE*<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将纹理坐标分配给a_TexCoord并开启它</span></span><br><span class="line">    <span class="keyword">var</span> a_TexCoord = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_TexCoord&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(a_TexCoord &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the storage location of a_TexCoord&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gl.vertexAttribPointer(a_TexCoord, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE*<span class="number">4</span>, FSIZE*<span class="number">2</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_TexCoord);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置和加载纹理，准备待加载的纹理图像，令浏览器读取它</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initTextures</span>(<span class="params">gl, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> texture = gl.createTexture(); <span class="comment">//创建纹理对象</span></span><br><span class="line">    <span class="keyword">if</span>(!texture)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the texture object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从片元着色器中获取uniform变量u_Sampler（取样器）的存储位置</span></span><br><span class="line">    <span class="keyword">var</span> u_Sampler = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_Sampler&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!u_Sampler) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of u_Sampler&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> Image();<span class="comment">//创建一个image对象</span></span><br><span class="line">    <span class="comment">//注册图像加载时间的响应函数</span></span><br><span class="line">    image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        loadTexture(gl, n, texture, u_Sampler, image);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浏览器开始加载图像</span></span><br><span class="line">    image.src = <span class="string">&#x27;../resources/sky.jpg&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadTexture</span>(<span class="params">gl, n, texture, u_Sampler, image</span>)</span>&#123;</span><br><span class="line">    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, <span class="number">1</span>);<span class="comment">//对纹理图像进行y轴反转</span></span><br><span class="line">    <span class="comment">//开启0号纹理单元</span></span><br><span class="line">    gl.activeTexture(gl.TEXTURE0);</span><br><span class="line">    <span class="comment">//向target绑定纹理对象</span></span><br><span class="line">    gl.bindTexture(gl.TEXTURE_2D, texture);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置纹理参数</span></span><br><span class="line">    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);</span><br><span class="line">    <span class="comment">// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);</span></span><br><span class="line">    <span class="comment">// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);</span></span><br><span class="line">    <span class="comment">//配置纹理图像</span></span><br><span class="line">    gl.texImage2D(gl.TEXTURE_2D, <span class="number">0</span>, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将0号纹理传递给着色器</span></span><br><span class="line">    gl.uniform1i(u_Sampler, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLE_STRIP, <span class="number">0</span>, n);<span class="comment">//绘制矩形</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/images/TexturedQuad9.png" alt="10"></p>
<h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><em>TexturedQuad_Repeat</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">仅修改此处：</span><br><span class="line"><span class="keyword">var</span> verticesTexCoords = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">    [</span><br><span class="line">        <span class="comment">//    -0.5, 0.5, 0.0, 1.0,</span></span><br><span class="line">        <span class="comment">//    -0.5, -0.5, 0.0, 0.0,</span></span><br><span class="line">        <span class="comment">//    0.5, 0.5, 1.0, 1.0,</span></span><br><span class="line">        <span class="comment">//    0.5, -0.5, 1.0, 0.0,</span></span><br><span class="line">        -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.3</span>, <span class="number">1.7</span>,</span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.3</span>, -<span class="number">0.2</span>,</span><br><span class="line">        <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.7</span>, <span class="number">1.7</span>,</span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">1.7</span>, -<span class="number">0.2</span></span><br><span class="line">    ]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p>​        由于纹理图像不足以覆盖整个矩形，所以可以看到在本该空白的区域，纹理重复出现了，因为<code>gl.TEXTURE_WRAP_S</code>和<code>gl.TEXTURE_WRAP_T</code>都默认值为<code>gl.REPEAT</code>。</p>
<p><img src="/images/TexturedQuad10.png" alt="11"></p>
<h2 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p><em>TexturedQuad_Clamp_Mirror</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">修改<span class="number">1</span>：</span><br><span class="line"><span class="keyword">var</span> verticesTexCoords = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">    [</span><br><span class="line">        <span class="comment">//    -0.5, 0.5, 0.0, 1.0,</span></span><br><span class="line">        <span class="comment">//    -0.5, -0.5, 0.0, 0.0,</span></span><br><span class="line">        <span class="comment">//    0.5, 0.5, 1.0, 1.0,</span></span><br><span class="line">        <span class="comment">//    0.5, -0.5, 1.0, 0.0,</span></span><br><span class="line">        -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.3</span>, <span class="number">1.7</span>,</span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.3</span>, -<span class="number">0.2</span>,</span><br><span class="line">        <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.7</span>, <span class="number">1.7</span>,</span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">1.7</span>, -<span class="number">0.2</span></span><br><span class="line">    ]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">修改<span class="number">2</span>：</span><br><span class="line"><span class="comment">//配置纹理参数</span></span><br><span class="line">gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);</span><br><span class="line">gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);</span><br><span class="line">gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);</span><br></pre></td></tr></table></figure>

<h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><p>​        修改纹理参数，可见s轴（水平轴）上，纹理外填充了最边缘纹素的颜色，而t轴（垂直轴）上镜像的重复填充纹理。</p>
<p><img src="/images/TexturedQuad11.png" alt="12"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】22-三维世界-可视范围</title>
    <url>/22-%E4%B8%89%E7%BB%B4%E4%B8%96%E7%95%8C-%E5%8F%AF%E8%A7%86%E8%8C%83%E5%9B%B4-OrthoView/</url>
    <content><![CDATA[<p>对应《WebGL编程指南》第七章 26-OrthoView、27-LookAtTrianglesWithKeys_ViewVolume</p>
<p>要点：可视空间（正射类型、透视投影）、可视范围（正射类型）、盒状可视空间</p>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、可视范围（正射类型）"><a href="#一、可视范围（正射类型）" class="headerlink" title="一、可视范围（正射类型）"></a>一、可视范围（正射类型）</h3><p>​        回顾：在上一节的最后一个示例程序中，当视点在极左或极右的位置时，三角形会缺少一部分。</p>
<p>​        三角形缺了一角的原因是，我们没有指定<strong>可视范围</strong>，即实际观察得到的区域边界。如前一章所属，WebGL 只显示可视范围内的区域。例中当我们改变视点位置时，三角形的一部分到了可视范围外，所以图中的三角形就缺了一个角。</p>
<h4 id="1-1-WebGL绘制可视范围内三维对象的方式"><a href="#1-1-WebGL绘制可视范围内三维对象的方式" class="headerlink" title="1.1 WebGL绘制可视范围内三维对象的方式"></a>1.1 WebGL绘制可视范围内三维对象的方式</h4><p>​        虽然你可以将三维物体放在三维空间中的任何地方，但是<u>只有当它在可视范围内时，WebGL 才会绘制它</u>。事实上，不绘制可视范围外的而对象，是基本的降低程序开销的手段。绘制可视范围外的对象没有意义，即使把它们绘制出来也不会在屏幕上显示。从某种程序上来说，这样也模拟了人类观察物体的方式，如下图所示。我们人类也只能看到眼前的东西，水平视角大约200度左右。总之，WebGL 就是以类似的方式，只绘制可视范围内的三维对象。<br><img src="/images/OrthoView1.png" alt="人类的可视范围"></p>
<p>​        除了水平和垂直范围内的限制，WebGL 还限制观察者的<u>可视深度，即”能够看多远“</u>。所有这些限制，包括<u>水平视角</u>、<u>垂直视角</u>和<u>可视深度</u>，定义了<strong>可视空间</strong>。由于我们没有显式地指定可视空间，默认的可视深度又不够远，所以三角形的一个角看上去就消失了。</p>
<h4 id="1-2-可视空间"><a href="#1-2-可视空间" class="headerlink" title="1.2 可视空间"></a>1.2 可视空间</h4><p>有两类常用的可视空间：</p>
<ul>
<li>长方体可视空间，也称盒状空间，由<strong>正射投影</strong>产生。</li>
<li>四棱锥/金字塔可视空间，由<strong>透视投影</strong>产生。</li>
</ul>
<p>​        在透视投影下，产生的三维场景看上去更是有<u>深度感</u>，更加自然，<u>因为我们平时观察真实世界用的也是透视投影</u>。在大多数情况下，比如三维射击类游戏中，我们都应当采用透视投影。相比之下，<u>正射投影的好处是用户可以方便比较场景中物体的大小</u>，这是因为<u>物体看上去的大小与其所在的位置没有关系</u>。在建筑平面图等技术绘图的相关场合，应当使用这种投影。</p>
<h4 id="1-3-基于正射投影的盒状可视空间的工作原理"><a href="#1-3-基于正射投影的盒状可视空间的工作原理" class="headerlink" title="1.3 基于正射投影的盒状可视空间的工作原理"></a>1.3 基于正射投影的<u>盒状可视空间</u>的工作原理</h4><p>​        盒状可视空间的形状如下图所示。可视空间由前后两个矩形表面确定，分别称<strong>近裁剪面</strong>和<strong>远裁剪面</strong>。</p>
<ul>
<li><p>前者的四个顶点为<code>（right, top,-near）</code>，<code>（-left,top,-near）</code>，<code>（-left,-bottom,-near）</code>，<code>（right,-bottom,-near）</code></p>
</li>
<li><p>后者的四个顶点为<code>（right, top,-far）</code>，<code>（-left,top,-far）</code>，<code>（-left,-bottom,-far）</code>，<code>（right,-bottom,-far）</code>。<br><img src="/images/OrthoView2.png" alt="盒状可视空间"></p>
</li>
</ul>
<p>​        <code>&lt;canvas&gt;</code> 上显示的就是可视空间中物体在<strong>近裁剪面</strong>上的投影。如果剪裁面的宽高比和 <code>&lt;canvas&gt;</code> 不一样，那么画面就会被按照 <code>&lt;canvas&gt;</code>的宽高比进行压缩，物体会被扭曲。<u>近裁剪面与远裁剪面之间的盒装空间就是可视空间</u>，只有在此空间内的物体会被显示出来。如果某个物体一部分在可视空间内，一部分在其外，那就只显示空间内的部分。</p>
<h4 id="1-4-定义盒状可视空间"><a href="#1-4-定义盒状可视空间" class="headerlink" title="1.4 定义盒状可视空间"></a>1.4 定义盒状可视空间</h4><p>cuon-matrix.js 提供的 <code>Matrix4.setOrtho()</code>方法可用来设置投影矩阵，定义盒状可视空间。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>Matrix4.setOrtho(left, right, bottom, top, near, far)</th>
</tr>
</thead>
<tbody><tr>
<td>left, right</td>
<td>指定近裁剪面（也是可视空间的，下同）的左边界和又边界</td>
</tr>
<tr>
<td>bottom,top</td>
<td>指定近裁剪面的上边界和下边界</td>
</tr>
<tr>
<td>near, far</td>
<td>指定近裁剪面和远裁剪面的位置，即可视空间的近边界和远边界</td>
</tr>
</tbody></table>
<p>​        我们在这里又用到了<strong>矩阵</strong>。这个矩阵被称为<u>正射投影矩阵</u>。示例程序 OrthoView 将使用这种矩阵定义盒装可视空间，并绘制3个与 LookAtRotatedTriangles 中一样的三角形，由此测试盒装可视空间的效果。LookAtRotatedTriangles 程序将视点放在一个指定的非原点位置上，但本例为方便，直接把视点置于<u>原点处</u>，视线为<u>Z轴负方向</u>。</p>
<p>​        可视空间如下图所示，<code>near = 0.0，far = 0.5，left = -1.0，right = 1.0，bottom = -1.0，top = 1.0</code>，三角形处于Z轴 <code>0.0 到 -0.4</code> 区间上。<br><img src="/images/OrthoView3.png" alt="正射投影和盒状可视空间"></p>
<p>​        此外，<a href="#%E4%BB%A3%E7%A0%811">示例程序</a>还允许通过键盘按键修改可视空间的 near 和 far 值。这样我们就能直观地看到这两个值具体对可视空间由什么影响。下面列出了各按键的作用。</p>
<table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>右方向键</td>
<td>near提高0.01</td>
</tr>
<tr>
<td>左方向键</td>
<td>near降低0.01</td>
</tr>
<tr>
<td>上方向键</td>
<td>far提高0.01</td>
</tr>
<tr>
<td>下方向键</td>
<td>far降低0.01</td>
</tr>
</tbody></table>
<h4 id="1-5-代码分析"><a href="#1-5-代码分析" class="headerlink" title="1.5 代码分析"></a>1.5 代码分析</h4><h5 id="1-5-1-实现步骤"><a href="#1-5-1-实现步骤" class="headerlink" title="1.5.1 实现步骤"></a>1.5.1 实现步骤</h5><p>​        与 LookAtTrainglesWithKeys 类似，本例也定义了 <code>keydown()函数</code>，每当按下按键时，匿名的事件响应函数就会调用 <code>keydown()函数</code>。<code>keydown()函数</code>首先更新 near 和 far 的值，然后调用 <code>draw()函数</code>进行绘制。<code>draw()函数</code>将设置可视空间，更新页面上文本显示的 near 和 far 的值，并绘制3个三角形。最关键的事情是设置可视空间，就发生在 draw()函数中。但是在深入研究前，先来看一下JS如何修改页面上的文本。</p>
<h5 id="1-5-2-JS-修改-HTML-元素"><a href="#1-5-2-JS-修改-HTML-元素" class="headerlink" title="1.5.2 JS 修改 HTML 元素"></a>1.5.2 JS 修改 HTML 元素</h5><p>​        JS 修改 HTML 元素中内容的方法很简单。首先调用 <code>getElementById()</code>并传入元素的 id，获取待修改的HTML 元素。</p>
<p>​        在示例程序中，我们把下面这个 <code>&lt;p&gt;</code> 元素中的文本改成了“near:0.0, far:0.5”：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;p id = <span class="string">&quot;nearFar&quot;</span>&gt;The near and far values are displayed here.&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>​        在 OrthoView.js 中，我们调用 getElementById()并传入元素的 id 值 “nearfar” 以获取该元素。如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nf = <span class="built_in">document</span>.getElementById(<span class="string">&quot;nearFar&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>​        一旦 nf 变量获取了 <code>&lt;p&gt;</code> 元素，就可以直接通过其 innerHTML 属性来进行修改，比如，如果你写下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nf.innerHTML = <span class="string">&#x27;Good Morning,Marusyje-san!&#x27;</span></span><br></pre></td></tr></table></figure>


<p>​        在执行之后，”Good Morning,Marusyje-san!” 这段文本就显示了在页面上。你也可以在文本中加入 HTML 标签，比如<code>‘Good Morning &lt;b&gt;Marisuke&lt;b&gt;-san!’</code>，就会以突出显示“Marisuke”。</p>
<p>在OrthoView.js 中，可视空间的 near 和 far 的值会存储在全局变量 g_near 和 g_far 中。</p>
<h5 id="1-5-3-顶点着色器的执行流程"><a href="#1-5-3-顶点着色器的执行流程" class="headerlink" title="1.5.3 顶点着色器的执行流程"></a>1.5.3 顶点着色器的执行流程</h5><p>​        本例中的顶点着色器与 LookAtTraingles.js 中的几乎一样，只是 uniform 变量变成了 <code>u_ProjMatrix</code>。该变量存储了<strong>可观空间的投影矩阵</strong>，我们将投影矩阵与顶点坐标相乘，再赋值给 gl_Position。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ProjMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ProjMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>​        当键盘的上方向键被按下时，事件响应函数就会执行并调用 keydown()。注意我们将 nf 作为最后一个参数传入，这样 keydown()函数就能够访问并修改 <code>&lt;p&gt;</code> 元素了。keydown()函数最后调用了 draw()函数绘制三角形，这样<u>每次按键后都会重绘整个图形。</u></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册键盘事件响应函数</span></span><br><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    keydown(ev, gl, n, u_ProjMatrix,projMatrix, nf);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​        keydown()函数首先检查哪个键被按下，然后根据按下的键，修改 g_near 和 g_far 的值，最后调用 draw()函数。注意，这里 <u>g_near 和 g_far 是全局变量，不管是 keydown()还是 draw()函数都可以访问它</u>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 视点与近、远裁剪面的距离</span></span><br><span class="line"><span class="keyword">var</span> g_near = <span class="number">0.0</span>, g_far = <span class="number">0.5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keydown</span>(<span class="params">ev, gl, n, u_ProjMatrix, projMatrix, nf</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ev.keyCode)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">39</span>: g_near += <span class="number">0.01</span>; <span class="keyword">break</span>; <span class="comment">//right</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">37</span>: g_near -= <span class="number">0.01</span>; <span class="keyword">break</span>; <span class="comment">//left</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">38</span>: g_far += <span class="number">0.01</span>; <span class="keyword">break</span>; <span class="comment">//up</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">40</span>: g_far -=<span class="number">0.01</span>; <span class="keyword">break</span>; <span class="comment">//down</span></span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    draw(gl, n, u_ProjMatrix, projMatrix, nf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        再看一下 draw()函数，它与 LookAtTriangle.js 中的几乎一样，唯一的区别是它修改了网页上的文本信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">gl, n, u_ProjMatrix, projMatrix, nf</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用矩阵设置可视空间</span></span><br><span class="line">    projMatrix.setOrtho(-<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, g_near, g_far);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将投影矩阵传递给u_ProjMatrix变量</span></span><br><span class="line">    gl.uniformMatrix4fv(u_ProjMatrix, <span class="literal">false</span>, projMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COlOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// innerHTML在JS是双向功能：获取对象的内容 或 向对象插入内容；</span></span><br><span class="line">    nf.innerHTML = <span class="string">&#x27;near: &#x27;</span> + <span class="built_in">Math</span>.round(g_near * <span class="number">100</span>)/<span class="number">100</span> + <span class="string">&#x27;, far: &#x27;</span> + <span class="built_in">Math</span>.round(g_far * <span class="number">100</span>)/<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        draw()函数计算出可视空间对应的投影矩阵 projMatrix，将其传递给着色器中的 u_ProjMatrix 变量，接着在页面上更新 near 和 far 的值，最后绘制出三角形。</p>
<h5 id="1-5-4-修改-near-和-far-值"><a href="#1-5-4-修改-near-和-far-值" class="headerlink" title="1.5.4 修改 near 和 far 值"></a>1.5.4 修改 near 和 far 值</h5><p>​        运行程序，按下右方向键逐渐增加near 值，你会看到三角形逐个消失了。</p>
<div style="display: flex;">
    <img src="/images/OrthoView4.png"/>
    <img src="/images/OrthoView5.png"/>
    <img src="/images/OrthoView6.png"/>
</div>
​        默认情况下，near 值为 0.0，此时3个三角形都出现了。当我们首次按下右方向键时，将 near 值增加至 0.01 时，处在最前面的蓝色三角形消失了。这是因为，蓝色三角形就在 XY 平面上，近裁剪面越过了蓝色三角形，使其处在了可视空间外。

<p><img src="/images/OrthoView7.png" alt="蓝色三角形处于可视空间外"></p>
<p>​        我们接着继续增大 near 值，当 near 值大于 <code>0.2</code> 时，近裁剪面越过了黄色三角形，使其处在可视空间外。黄色三角形也消失了，视野中只剩下绿色三角形。此时，如果你逐渐减小 near 值使其小于 0.2，黄色的三角形就会重新出现，而如果继续增大 near 值使其大于 0.4，绿色的三角形就会小时，视野中将空无一物，只剩下黑色的背景。</p>
<p>​        同样，如果你改变 far 的值，也会产生类似的效果。随着 far 值的逐渐减小，当值小于 0.4 时，绿色三角形会首先消失，小于 0.2 时，黄色三角形小时，最终只剩下蓝色三角形。</p>
<h3 id="二、补上缺掉的角"><a href="#二、补上缺掉的角" class="headerlink" title="二、补上缺掉的角"></a>二、补上缺掉的角</h3><p>​        在 LookAtTrianglesWithKeys 中，当你多次按左或右方向键，处于极左处或极右处观察三角形时，会发现三角形看上去缺了一个角。通过前一节的讨论，我们已经很明确地知道这时因为三角形的一部分处于可视区域之外，被裁剪掉了。这一节，我们就来修改程序，适当地设置可视空间，确保三角形不被裁剪。</p>
<p>​        从上节中可以看出，三角形中<u>距离视点最远的角被裁剪了</u>。显然，这是由远裁剪面过于接近视点导致，我们<u>只需要将远裁剪面移到距离视点更远的地方</u>。为此，我们可以按照以下的配置来修改可视空间：left = -1.0，right = 1.0，bottom = -1.0，top = 1.0，near = 0.0，far = 2.0。</p>
<p>​        程序涉及两个矩阵：<u>关于可视空间的正射投影矩阵</u>，以及<u>关于视点与视线的视图矩阵</u>。在顶点着色器中，我们需要用视图矩阵乘以顶点坐标，得到顶点在视图坐标系下的坐标，再左乘正射投影矩阵并赋值给 gl_Position。如下表达式：</p>
<p><code>&lt;正射投影矩阵&gt;x&lt;视图矩阵&gt;x&lt;顶点坐标&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ViewMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ProjMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ProjMatrix * u_ViewMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>​        在计算正射投影矩阵 projMatrix 时，我们将 far 的值从 1.0 改成 2.0，将结果传给了顶点着色器中的 u_ProjMatrix。投影矩阵与顶点无关，所以它是 uniform 变量。运行<a href="#%E6%95%88%E6%9E%9C2">示例程序</a>，然后像之前那样移动视点，你会发现三角形再也不会被裁剪了。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LookAtTrianglesWithKeys.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ProjMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ProjMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +<span class="comment">//!!! 需要声明浮点数精度，否则报错No precision specified for (float)</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> nf = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;nearFar&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_ProjMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ProjMatrix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置视点、视线、上方向</span></span><br><span class="line">    <span class="keyword">var</span> projMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册键盘事件响应函数</span></span><br><span class="line">    <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        keydown(ev, gl, n, u_ProjMatrix,projMatrix, nf);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">   draw(gl, n, u_ProjMatrix, projMatrix, nf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视点与近、远裁剪面的距离</span></span><br><span class="line"><span class="keyword">var</span> g_near = <span class="number">0.0</span>, g_far = <span class="number">0.5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keydown</span>(<span class="params">ev, gl, n, u_ProjMatrix, projMatrix, nf</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ev.keyCode)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">39</span>: g_near += <span class="number">0.01</span>; <span class="keyword">break</span>; <span class="comment">//right</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">37</span>: g_near -= <span class="number">0.01</span>; <span class="keyword">break</span>; <span class="comment">//left</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">38</span>: g_far += <span class="number">0.01</span>; <span class="keyword">break</span>; <span class="comment">//up</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">40</span>: g_far -=<span class="number">0.01</span>; <span class="keyword">break</span>; <span class="comment">//down</span></span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    draw(gl, n, u_ProjMatrix, projMatrix, nf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">gl, n, u_ProjMatrix, projMatrix, nf</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用矩阵设置可视空间</span></span><br><span class="line">    projMatrix.setOrtho(-<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, g_near, g_far);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将投影矩阵传递给u_ProjMatrix变量</span></span><br><span class="line">    gl.uniformMatrix4fv(u_ProjMatrix, <span class="literal">false</span>, projMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COlOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// innerHTML在JS是双向功能：获取对象的内容 或 向对象插入内容；</span></span><br><span class="line">    nf.innerHTML = <span class="string">&#x27;near: &#x27;</span> + <span class="built_in">Math</span>.round(g_near * <span class="number">100</span>)/<span class="number">100</span> + <span class="string">&#x27;, far: &#x27;</span> + <span class="built_in">Math</span>.round(g_far * <span class="number">100</span>)/<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The back green one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.5</span>,  <span class="number">0.4</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="comment">// The middle yellow one</span></span><br><span class="line">            -<span class="number">0.5</span>,  <span class="number">0.4</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">0.0</span>, -<span class="number">0.6</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="comment">// The front blue one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.8</span>,  <span class="number">1.0</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">9</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> verteColorBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="comment">// 将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE *<span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);<span class="comment">// 取消绑定的缓冲区对象</span></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="效果1"><a href="#效果1" class="headerlink" title="效果1"></a>效果1</h5><div style="display: flex;">
    <img src="/images/OrthoView4.png"/>
    <img src="/images/OrthoView5.png"/>
    <img src="/images/OrthoView6.png"/>
</div>



<h4 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LookAtTrianglesWithKeys_ViewVolume.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ViewMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ProjMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ProjMatrix * u_ViewMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +<span class="comment">//!!! 需要声明浮点数精度，否则报错No precision specified for (float)</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_ViewMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ViewMatrix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置视点、视线、上方向</span></span><br><span class="line">    <span class="keyword">var</span> viewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册键盘事件响应函数</span></span><br><span class="line">    <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        keydown(ev, gl, n, u_ViewMatrix,viewMatrix);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 创建指定可视空间的矩阵并传给u_ProjMatrix变量</span></span><br><span class="line">    <span class="keyword">var</span> u_ProjMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ProjMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> projMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    projMatrix.setOrtho(-<span class="number">1.0</span>, <span class="number">1.0</span>, -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">2.0</span>);</span><br><span class="line">    <span class="comment">//projMatrix.setOrtho(-0.5, 0.5, -0.5, 0.5, 0.0, 2.0);</span></span><br><span class="line">    <span class="comment">//projMatrix.setOrtho(-0.3, 0.3, -1.0, 1.0, 0.0, 2.0);</span></span><br><span class="line">    gl.uniformMatrix4fv(u_ProjMatrix, <span class="literal">false</span>, projMatrix.elements);</span><br><span class="line"></span><br><span class="line">   draw(gl, n, u_ViewMatrix, viewMatrix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_eyeX = <span class="number">0.20</span>, g_eyeY = <span class="number">0.25</span>, g_eyeZ = <span class="number">0.25</span>; <span class="comment">//视点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keydown</span>(<span class="params">ev, gl, n, u_ViewMatrix, viewMatrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev.keyCode == <span class="number">39</span>)&#123;   <span class="comment">//按下右键</span></span><br><span class="line">        g_eyeX += <span class="number">0.01</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ev.keyCode == <span class="number">37</span>)&#123; <span class="comment">//按下左键</span></span><br><span class="line">        g_eyeX -= <span class="number">0.01</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    draw(gl, n, u_ViewMatrix, viewMatrix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">gl, n, u_ViewMatrix, viewMatrix</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//设置视点和视线</span></span><br><span class="line">    viewMatrix.setLookAt(g_eyeX, g_eyeY, g_eyeZ, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将视图矩阵传递给u_ViewMatrix变量</span></span><br><span class="line">    gl.uniformMatrix4fv(u_ViewMatrix, <span class="literal">false</span>, viewMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COlOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The back green one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.5</span>,  <span class="number">0.4</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="comment">// The middle yellow one</span></span><br><span class="line">            -<span class="number">0.5</span>,  <span class="number">0.4</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">0.0</span>, -<span class="number">0.6</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="comment">// The front blue one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">9</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> verteColorBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE *<span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);<span class="comment">//取消绑定的缓冲区对象</span></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="效果2"><a href="#效果2" class="headerlink" title="效果2"></a>效果2</h5><script src="\lib\webgl-utils.js"></script>
<script src="\lib\webgl-debug.js"></script>
<script src="\lib\cuon-utils.js"></script>
<script src="\lib\cuon-matrix.js"></script>



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
  <title>LookAtTriangles</title>
</head>
<body onload="main()">
<div>
    <button id="left">←</button>
    <button id="right">→</button>
</div>
<canvas id="webgl" width="300" height="300">
  Please use the browser supporting "canvas".
</canvas>
<script type='text/javascript'>
//LookAtTrianglesWithKeys.js
var VSHADER_SOURCE =
    'attribute vec4 a_Position;\n' +
    'attribute vec4 a_Color;\n' +
    'uniform mat4 u_ViewMatrix;\n' +
    'uniform mat4 u_ProjMatrix;\n' +
    'varying vec4 v_Color;\n' +
    'void main() {\n' +
    '   gl_Position = u_ProjMatrix * u_ViewMatrix * a_Position;\n' +
    '   gl_PointSize = 10.0;\n' +
    '   v_Color = a_Color;\n' +
    '}\n';
var FSHADER_SOURCE=
    'precision mediump float;\n' +
    'varying vec4 v_Color;\n' +
    'void main(){\n'+
    '   gl_FragColor = v_Color;\n'+
    '}\n';
function main() {
    var canvas = document.getElementById("webgl");
    var gl = getWebGLContext(canvas);
    if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
        console.log("Failed to initialize shaders.");
        return;
    }
    //设置顶点位置
    var n = initVertexBuffers(gl);
    var u_ViewMatrix = gl.getUniformLocation(gl.program, 'u_ViewMatrix');
    //设置视点、视线、上方向
    var viewMatrix = new Matrix4();
    //注册键盘事件响应函数
    document.onkeydown = function (ev) {
        keydown(ev, gl, n, u_ViewMatrix,viewMatrix);
    };
    document.onclick = function (ev) {
        myClick(ev, gl, n, u_ViewMatrix,viewMatrix)
    }
    var u_ProjMatrix = gl.getUniformLocation(gl.program, 'u_ProjMatrix');
    var projMatrix = new Matrix4();
    projMatrix.setOrtho(-1.0, 1.0, -1.0, 1.0, 0.0, 2.0);
    gl.uniformMatrix4fv(u_ProjMatrix, false, projMatrix.elements);
    draw(gl, n, u_ViewMatrix, viewMatrix);
}
var g_eyeX = 0.20, g_eyeY = 0.25, g_eyeZ = 0.25; // 视点
function keydown(ev, gl, n, u_ViewMatrix, viewMatrix) {
    if(ev.keyCode == 39){   //按下右键
        g_eyeX += 0.02;
    }else if(ev.keyCode == 37){ //按下左键
        g_eyeX -= 0.02;
    }else {
        return ;
    }
    draw(gl, n, u_ViewMatrix, viewMatrix);
}
function myClick(ev, gl, n, u_ViewMatrix,viewMatrix){
    if(ev.target.id == 'left') {
        g_eyeX -= 0.02;
    } else {
        g_eyeX += 0.02;
    }
    draw(gl, n, u_ViewMatrix, viewMatrix);
}
function draw(gl, n, u_ViewMatrix, viewMatrix) {
    //设置视点和视线
    viewMatrix.setLookAt(g_eyeX, g_eyeY, g_eyeZ, 0, 0, 0, 0, 1, 0);
    //将视图矩阵传递给u_ViewMatrix变量
    gl.uniformMatrix4fv(u_ViewMatrix, false, viewMatrix.elements);
    gl.clear(gl.COlOR_BUFFER_BIT);
    gl.drawArrays(gl.TRIANGLES, 0, n);
}
function initVertexBuffers(gl) {
    var verticesColors = new Float32Array(
        [
            0.0,  0.5,  -0.4,  0.4,  1.0,  0.4, // The back green one
            -0.5, -0.5,  -0.4,  0.4,  1.0,  0.4,
            0.5, -0.5,  -0.4,  1.0,  0.4,  0.4,
            0.5,  0.4,  -0.2,  1.0,  0.4,  0.4, // The middle yellow one
            -0.5,  0.4,  -0.2,  1.0,  1.0,  0.4,
            0.0, -0.6,  -0.2,  1.0,  1.0,  0.4,
            0.0,  0.5,   0.0,  0.4,  0.4,  1.0,  // The front blue one
            -0.5, -0.5,   0.0,  0.4,  0.4,  1.0,
            0.5, -0.5,   0.0,  1.0,  0.4,  0.4
        ]
    );
    var n = 9; //点的个数
    //创建缓冲区对象
    var verteColorBuffer = gl.createBuffer();
    //将缓冲区对象保存到目标上
    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);
    //向缓存对象写入数据
    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);
    var FSIZE = verticesColors.BYTES_PER_ELEMENT;
    var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
    //将缓冲区对象分配给a_Postion变量
    gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE *6, 0);
    //连接a_Postion变量与分配给它的缓冲区对象
    gl.enableVertexAttribArray(a_Position);
    var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
    gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 6, FSIZE * 3);
    gl.enableVertexAttribArray(a_Color);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);//取消绑定的缓冲区对象
    return n;}
    </script>
    </body>
    </html>

 

]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】23-三维世界-可视空间（透视投影）</title>
    <url>/23-%E4%B8%89%E7%BB%B4%E4%B8%96%E7%95%8C-%E5%8F%AF%E8%A7%86%E7%A9%BA%E9%97%B4%EF%BC%88%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1%EF%BC%89-perspectiveview/</url>
    <content><![CDATA[<p>对应《WebGL编程指南》第七章 28-perspectiveview，29-perspectiveview_mvp，30-perspectiveview_mvpMatrix</p>
<p>要点：可视空间（透视投影）、模型视图投影矩阵</p>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、可视空间（投影透视）"><a href="#一、可视空间（投影透视）" class="headerlink" title="一、可视空间（投影透视）"></a>一、可视空间（投影透视）</h3><p>在正射投影的可视空间中，不管三角形与视点的距离是远是近，它由多大，那么画出来就有多大。为了打破这条限制，我们可以使用透视投影可视空间，它将使场景具有上图那样的深度感。</p>
<p><a href="#%E4%BB%A3%E7%A0%811">示例程序PerspectiveView</a> 就使用了一个透视投影可视空间，视点在（0, 0, 5），视线沿着Z轴负方向。</p>
<div style="display: flex">
    <img src="/images/perspectiveview1.png" alt="PerspectiveView"/>
    <img src="/images/PerspectiveView2.png" alt="场景中三角形的位置示意图"/>
</div> 



<p>从上图所示，沿着Z轴负半轴，在轴的左右两侧各一次排列着个相同大小的三角形。在使用透视投影矩阵后，WebGL 就能够自动将距离远的物体缩小显示，从而产生深度感。</p>
<h4 id="1-1-定义透视投影可视空间——透视投影矩阵"><a href="#1-1-定义透视投影可视空间——透视投影矩阵" class="headerlink" title="1.1 定义透视投影可视空间——透视投影矩阵"></a>1.1 定义透视投影可视空间——透视投影矩阵</h4><p>投影透视可视空间如下图所示。就像盒状可视空间那样，<u>透视投影可视空间也有视点、视线、近裁剪面和远裁剪面</u>，这样可视空间内的物体才会被显示，可视空间外的物体则不会显示。那些跨越可视空间边界的物体则只会显示其在可是空间内的部分。</p>
<p><img src="/images/PerspectiveView3.png" alt="透视投影可视空间"></p>
<p>​        不论是透视投影可视空间还是盒状可视空间，我们都用投影矩阵来表示它，但是定义矩阵的参数不同。Matrix4 对象的<code>setPerspective()</code>方法可用来定义透视投影可视空间。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>Matrix4.setPerspective()</th>
</tr>
</thead>
<tbody><tr>
<td>fov</td>
<td>指定垂直视角，即可视空间顶面和底面间的夹角，<strong>必须大于0</strong></td>
</tr>
<tr>
<td>aspect</td>
<td>指定近裁剪面的宽高比（宽度/高度）</td>
</tr>
<tr>
<td>near，far</td>
<td>指定近裁剪面和远裁剪面的位置，即可视空间的近边界和远边界，<strong>必须大于0</strong></td>
</tr>
</tbody></table>
<p>定义了透视投影可视空间的矩阵别成为<strong>透视投影矩阵</strong>。</p>
<p>注意，第2个参数 <code>aspect</code> 是近裁剪面的宽高比，而不是水平视角。比如说，如果近裁剪面的高度是100而宽度是200，那么宽高比就是2。</p>
<p>在本例中，各个三角形与可视空间的相对位置如下图所示。我们指定了 <code>near = 1.0</code>，<code>far = 100</code>，<code>aspect = 1.0</code>，以及 <code>fov = 30.0</code>。</p>
<p><img src="/images/PerspectiveView4.png" alt="三角形与可视空间相对位置"></p>
<h4 id="1-2-代码分析"><a href="#1-2-代码分析" class="headerlink" title="1.2 代码分析"></a>1.2 代码分析</h4><blockquote>
<p>本案例核心代码</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 投影矩阵</span></span><br><span class="line"><span class="keyword">var</span> projMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">projMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">gl.uniformMatrix4fv(u_ProjMatrix, <span class="literal">false</span>, projMatrix.elements);</span><br></pre></td></tr></table></figure>

<p>代码中的顶点着色器和片元着色器，与 <code>LookAtTrianglesWithKeys_ViewVolume.js</code> 中的变量的命名都完全一致。</p>
<p>main()函数的执行流程也差不多：首先调用 <code>initVertexBuffers()</code>函数，向缓冲区对象中写入这6个三角形的顶点坐标和颜色数据。</p>
<p>接着我们获取了着色器中视图矩阵和透视投影矩阵 <code>uniform 变量</code>的存储地址，并创建了两个对应的矩阵对象。</p>
<p>然后，我们计算了视图矩阵，<u>视点设置在（0, 0, 5）</u>，<u>视线为Z轴负方向</u>，<u>上方向为Y轴正方向</u>，最后我们按照金字塔状的可视空间建立了透视投影矩阵。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">projMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>其中，第2个参数 <code>aspect 宽高比</code>（近裁剪面的宽度与高度的比值）应当与 canvas 保持一致，我们根据 canvas 的 width 和 height 属性来计算出该参数，这样如果 canvas 的大小发生变化，也不会导致显示出来的图形变形。</p>
<p>接下来，将准备好的视图矩阵和透视投影矩阵传给着色器中对应的 <code>uniform变量</code>。最后将三角形绘制出来。</p>
<p>到目前为止，还有一个很重要的问题没有完全解释，那就是矩阵为什么可以用来定义可视空间。</p>
<h4 id="1-3-投影矩阵的作用——规范立方体"><a href="#1-3-投影矩阵的作用——规范立方体" class="headerlink" title="1.3 投影矩阵的作用——规范立方体"></a>1.3 投影矩阵的作用——规范立方体</h4><p>首先来看透视投影矩阵。可以看到，运用透视投影矩阵后，场景中的三角形有了两个变化。</p>
<p>首先，距离较远的三角形看上去变小了；其次，三角形被不同程度地平移以贴近中心线，使得它们看上去在视线的左右排成了两列。实际上，如下图左所示，这些三角形的大小是完全相同的，透视投影矩阵对三角形进行了两次变换：</p>
<ul>
<li>根据三角形与视点的距离，按比例对三角形进行了<u>缩小变换</u>；</li>
<li>对三角形进行<u>平移变换</u>，使其贴近视线，如下图右所示。经过了这两次变换之后，就产生了深度效果。</li>
</ul>
<p><img src="/images/PerspectiveView5.png" alt="透视投影变换示意图及规范立方体"></p>
<p>这表明，可视空间的规范可以用一系列基本变换（如缩放、平移）来定义。Matrix4 对象的 <code>setPerspective()</code>方法自动地根据上述可视空间的参数计算出对应的变换矩阵。</p>
<p>换一个角度来看，透视投影矩阵实际上将金字塔状的可视空间变换为了盒状的可视空间，这个盒装的可视空间又称<strong>规范立方体</strong>，如上图右所示。</p>
<p>注意，<u>正射投影矩阵不能产生深度感</u>。正射投影矩阵的工作仅仅是将顶点从盒状的可视空间映射到规范立方体中。顶点着色器输出的顶点都必须在规范立方体中，这样才会显示在屏幕上。</p>
<p>有了投影矩阵、模型矩阵和视图矩阵，我们就能够处理顶点需要经过的所有集合变换，最终达到具有深度感的视觉效果。在下面几小节中，我们就把这三个矩阵结合起来，建立一个简单的示例程序。</p>
<h3 id="二、模型矩阵、视图矩阵和投影矩阵综合案例"><a href="#二、模型矩阵、视图矩阵和投影矩阵综合案例" class="headerlink" title="二、模型矩阵、视图矩阵和投影矩阵综合案例"></a>二、模型矩阵、视图矩阵和投影矩阵综合案例</h3><h4 id="2-1-综合表达式"><a href="#2-1-综合表达式" class="headerlink" title="2.1 综合表达式"></a>2.1 综合表达式</h4><p>PerspectiveView.js 的一个问题是，我们用了一大段枯燥的代码来定义所有顶点和数据。示例中只有6个三角形，我们还可以手动管理这些数据，但是如果三角形的数量进一步增加的话，那可真就是一团糟了。幸运的是，对于这个问题，确实还有跟高效的方法。</p>
<p>仔细观察下图，你会发现左右两组三角形的大小、位置、颜色都是对应的。如果在虚线标识处也有这样3个三角形，那么将它们向X轴正方向平移0.75单位就可以得到右侧的三角形，向X轴负方向平移0.75单位就可以得到左侧三角形。</p>
<p><img src="/images/PerspectiveView6.png" alt="平移然后绘制三角形"></p>
<p>利用这一点，我们只需按照下面的步骤，就能获得 PerspectiveView 的效果了：</p>
<ul>
<li>在虚线处，即沿着Z轴准备3个三角形的顶点数据；</li>
<li>将其沿X轴正方向平移0.75单位，绘制这些三角形；</li>
<li>将其沿X轴负方向平移0.75单位，绘制这些三角形。</li>
</ul>
<p>示例程序 <a href="#%E4%BB%A3%E7%A0%812">代码2-PerspectiveView_mvp</a> 就尝试这样做。</p>
<p>PerspectiveView 程序使用投影矩阵定义可视空间，使用视图矩阵定义观察者，而 PerspectiveView_mvp 程序又加入了模型矩阵，用来对三角形进行变换。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顶点着色器</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ModelMatrix;\n&#x27;</span> +   <span class="comment">// 模型矩阵</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ViewMatrix;\n&#x27;</span> +    <span class="comment">// 视图矩阵</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ProjMatrix;\n&#x27;</span> +    <span class="comment">// 投影矩阵</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ProjMatrix * u_ViewMatrix * u_ModelMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>复习矩阵变换：<a href="https://freepiao.cn/2021/08/01/21-%E4%B8%89%E7%BB%B4%E4%B8%96%E7%95%8C-%E7%BB%98%E5%88%B6%E4%B8%89%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2-LookAtTriangles/#3-3-%E4%BB%8E%E6%8C%87%E5%AE%9A%E8%A7%86%E7%82%B9%E8%A7%82%E5%AF%9F%E6%97%8B%E8%BD%AC%E5%90%8E%E7%9A%84%E4%B8%89%E8%A7%92%E5%BD%A2">LookAtTriangles</a>，该程序允许观察者从自定义的位置观察旋转后的三角形。下式描述了三角形顶点的变换过程：</p>
<p><code>&lt;视图矩阵&gt; x &lt;模型矩阵&gt; x &lt;顶点坐标&gt;</code></p>
<p>后来的 <a href="https://freepiao.cn/2021/08/01/22-%E4%B8%89%E7%BB%B4%E4%B8%96%E7%95%8C-%E5%8F%AF%E8%A7%86%E8%8C%83%E5%9B%B4-OrthoView/#%E4%BA%8C%E3%80%81%E8%A1%A5%E4%B8%8A%E7%BC%BA%E6%8E%89%E7%9A%84%E8%A7%92">LookAtTriangles_ViewVolume</a> 程序（该程序修复了三角形的一个角被切掉的错误）使用下式来计算最终的额顶点坐标，其中投影矩阵有可能是正射投影矩阵或透视投影矩阵:</p>
<p><code>&lt;投影矩阵&gt; x &lt;视图矩阵&gt; x &lt;顶点坐标&gt;</code></p>
</blockquote>
<p>可以从上述两式推断出：</p>
<p><code>&lt;投影矩阵&gt; x &lt;视图矩阵&gt; x &lt;模型矩阵&gt; x &lt;顶点坐标&gt;</code></p>
<p>上式表示，在 WebGL 中，你可以使用投影矩阵、视图矩阵、模型矩阵这3种矩阵计算出最终的顶点坐标（即顶点在规范立方体中的坐标）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模型矩阵------------------------------</span></span><br><span class="line"><span class="keyword">var</span> u_ModelMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ModelMatrix&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">modelMatrix.setTranslate(<span class="number">0.75</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//平移0.75单位</span></span><br><span class="line">gl.uniformMatrix4fv(u_ModelMatrix, <span class="literal">false</span>, modelMatrix.elements);</span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图矩阵------------------------------</span></span><br><span class="line"><span class="keyword">var</span> u_ViewMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ViewMatrix&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置视点、视线、上方向</span></span><br><span class="line"><span class="keyword">var</span> viewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">viewMatrix.setLookAt(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">100</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">gl.uniformMatrix4fv(u_ViewMatrix, <span class="literal">false</span>, viewMatrix.elements);</span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 投影矩阵--------------------------</span></span><br><span class="line"><span class="keyword">var</span> u_ProjMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ProjMatrix&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> projMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">projMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">gl.uniformMatrix4fv(u_ProjMatrix, <span class="literal">false</span>, projMatrix.elements);</span><br><span class="line"></span><br><span class="line">gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);<span class="comment">// 绘制右侧一组三角形</span></span><br><span class="line"></span><br><span class="line">modelMatrix.setTranslate(-<span class="number">0.75</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">gl.uniformMatrix4fv(u_ModelMatrix, <span class="literal">false</span>, modelMatrix.elements);</span><br><span class="line">gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);<span class="comment">// 绘制左侧一组三角形</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-分析"><a href="#2-2-分析" class="headerlink" title="2.2 分析"></a>2.2 分析</h4><p>顶点着色器中新增加的 u_ModelMatrix 变量参与了 gl_Position 的计算：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;   gl_Position = u_ProjMatrix * u_ViewMatrix * u_ModelMatrix * a_Position;\n&#x27;</span> +</span><br></pre></td></tr></table></figure>

<p>main()函数调用 <code>initVertexBuffers()</code>函数，定义将要传给缓冲区对象的三角形定点数据。我们只定义了3个三角形，其中心都在Z轴上。而在 PerpspectiveView.js 中，我们在Z轴两侧共定义了6个三角形。前面说过，这时因为这3个三角形将与平移变换结合使用。</p>
<p>接着，我们获取了顶点着色器 <code>u_ModelMatrix变量</code>的存储地址，然后新建了<code>模型矩阵 modelMatrix 对象</code>，并根据参数将其计算出来。此时，该模型矩阵会将三角形向X轴正方向平移0.75个单位。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> u_ModelMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ModelMatrix&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">modelMatrix.setTranslate(<span class="number">0.75</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//平移0.75单位</span></span><br><span class="line">gl.uniformMatrix4fv(u_ModelMatrix, <span class="literal">false</span>, modelMatrix.elements);</span><br></pre></td></tr></table></figure>

<p>除了计算模型矩阵，计算视图矩阵和投影矩阵的过程与 PerspectiveView.js 中一样。模型矩阵被传给 <code>u_ModelMatrix</code> 并进行绘制，绘制了Z轴右侧的3个三角形。</p>
<p>下面以相似的方式来绘制左侧的三角形：首先重新计算模型矩阵，使之将初始的三角形沿X轴负方向平移0.75单位。算出新的模型矩阵后，传给着色器，再调用 gl.drawArrays(）进行绘制，就画出了左侧的三角形。视图矩阵和投影矩阵不需要变化，不需要管它们。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为另一侧的三角形重新计算模型矩阵</span></span><br><span class="line">modelMatrix.setTranslate(-<span class="number">0.75</span>, <span class="number">0</span>, <span class="number">0</span>);  <span class="comment">// 平移-0.75单位</span></span><br><span class="line">gl.uniformMatrix4fv(u_ModelMatrix, <span class="literal">false</span>, modelMatrix.elements);</span><br><span class="line">gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);<span class="comment">// 绘制左侧一组三角形</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-改进——模型视图投影矩阵"><a href="#2-3-改进——模型视图投影矩阵" class="headerlink" title="2.3 改进——模型视图投影矩阵"></a>2.3 改进——模型视图投影矩阵</h4><p><a href="#%E4%BB%A3%E7%A0%812">代码2-PerspectiveView_mvp</a>直接在着色器中计算<code>&lt;投影矩阵&gt; x &lt;视图矩阵&gt; x &lt;模型矩阵&gt; x &lt;顶点坐标&gt;</code>。这个式子其实和顶点没有关系，没必要在每个顶点处理时都计算一遍。我们可以在js中计算出三个矩阵相乘得到的单个矩阵的结果，传给顶点着色器，就像在<a href="https://freepiao.cn/2021/08/01/21-%E4%B8%89%E7%BB%B4%E4%B8%96%E7%95%8C-%E7%BB%98%E5%88%B6%E4%B8%89%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2-LookAtTriangles/#3-4-%E6%A8%A1%E5%9E%8B%E8%A7%86%E5%9B%BE%E7%9F%A9%E9%98%B5">LookAtRotatedTriangles_mvMatrix</a>一样。</p>
<p>传入的这个矩阵被称为<strong>模型视图投影矩阵</strong>，代码中将其命名为<code>u_MvpMatrix</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>设置好各个矩阵后，相乘：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算模型视图投影矩阵</span></span><br><span class="line">mvpMatrix.set(projMatrix).multiply(viewMatrix).multiply(modelMatrix);</span><br></pre></td></tr></table></figure>

<h4 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h4><p>目前为止，已经掌握编写代码移动视点，设置可视空间，从不同的角度观察三维对象，处理三角形缺一角的情况。但是，仍然还存在一个问题：在移动视点的过程中，有时候前面的三角形会“躲”到后面的三角形之后，下一节将会研究这一问题。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//perspectiveview.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ViewMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ProjMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ProjMatrix * u_ViewMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_ViewMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ViewMatrix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 视图矩阵，设置视点、视线、上方向</span></span><br><span class="line">    <span class="keyword">var</span> viewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    viewMatrix.setLookAt(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">100</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    gl.uniformMatrix4fv(u_ViewMatrix, <span class="literal">false</span>, viewMatrix.elements);</span><br><span class="line">    <span class="keyword">var</span> u_ProjMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ProjMatrix&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 投影矩阵</span></span><br><span class="line">    <span class="keyword">var</span> projMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    projMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    gl.uniformMatrix4fv(u_ProjMatrix, <span class="literal">false</span>, projMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">            <span class="comment">// Three triangles on the right side</span></span><br><span class="line">            <span class="number">0.75</span>,  <span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The back green one</span></span><br><span class="line">            <span class="number">0.25</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">1.25</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.75</span>,  <span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The middle yellow one</span></span><br><span class="line">            <span class="number">0.25</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">1.25</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.75</span>,  <span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="comment">// The front blue one</span></span><br><span class="line">            <span class="number">0.25</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,</span><br><span class="line">            <span class="number">1.25</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Three triangles on the left side</span></span><br><span class="line">            -<span class="number">0.75</span>,  <span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The back green one</span></span><br><span class="line">            -<span class="number">1.25</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            -<span class="number">0.25</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            -<span class="number">0.75</span>,  <span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The middle yellow one</span></span><br><span class="line">            -<span class="number">1.25</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            -<span class="number">0.25</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            -<span class="number">0.75</span>,  <span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="comment">// The front blue one</span></span><br><span class="line">            -<span class="number">1.25</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,</span><br><span class="line">            -<span class="number">0.25</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line">        ]);</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">18</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> verteColorBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE *<span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);<span class="comment">//取消绑定的缓冲区对象</span></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//perspectiveview-mvp.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ModelMatrix;\n&#x27;</span> +   <span class="comment">// 模型矩阵</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ViewMatrix;\n&#x27;</span> +    <span class="comment">// 视图矩阵</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ProjMatrix;\n&#x27;</span> +    <span class="comment">// 投影矩阵</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ProjMatrix * u_ViewMatrix * u_ModelMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +<span class="comment">//!!! 需要声明浮点数精度，否则报错No precision specified for (float)</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//gl.clearColor(0, 0, 0, 1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模型矩阵------------------------------</span></span><br><span class="line">    <span class="keyword">var</span> u_ModelMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ModelMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    modelMatrix.setTranslate(<span class="number">0.75</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//平移0.75单位</span></span><br><span class="line">    gl.uniformMatrix4fv(u_ModelMatrix, <span class="literal">false</span>, modelMatrix.elements);</span><br><span class="line">    <span class="comment">//---------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 视图矩阵------------------------------</span></span><br><span class="line">    <span class="keyword">var</span> u_ViewMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ViewMatrix&#x27;</span>);</span><br><span class="line">    <span class="comment">// 设置视点、视线、上方向</span></span><br><span class="line">    <span class="keyword">var</span> viewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    viewMatrix.setLookAt(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">100</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    gl.uniformMatrix4fv(u_ViewMatrix, <span class="literal">false</span>, viewMatrix.elements);</span><br><span class="line">    <span class="comment">//---------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 投影矩阵--------------------------</span></span><br><span class="line">    <span class="keyword">var</span> u_ProjMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ProjMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> projMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    projMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    gl.uniformMatrix4fv(u_ProjMatrix, <span class="literal">false</span>, projMatrix.elements);</span><br><span class="line">    <span class="comment">//----------------------------------</span></span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);<span class="comment">// 绘制右侧一组三角形</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为另一侧的三角形重新计算模型矩阵</span></span><br><span class="line">    modelMatrix.setTranslate(-<span class="number">0.75</span>, <span class="number">0</span>, <span class="number">0</span>);  <span class="comment">// 平移-0.75单位</span></span><br><span class="line">    gl.uniformMatrix4fv(u_ModelMatrix, <span class="literal">false</span>, modelMatrix.elements);</span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);<span class="comment">// 绘制左侧一组三角形</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">            <span class="comment">// Three triangles on the right side</span></span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The back green one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The middle yellow one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="comment">// The front blue one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line">        ]);</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">9</span>; <span class="comment">// 点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> verteColorBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="comment">// 将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE *<span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);<span class="comment">// 取消绑定的缓冲区对象</span></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="代码3"><a href="#代码3" class="headerlink" title="代码3"></a>代码3</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//perspectiveview_mvpMatrix.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +<span class="comment">//!!! 需要声明浮点数精度，否则报错No precision specified for (float)</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//gl.clearColor(0, 0, 0, 1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模型视图投影矩阵</span></span><br><span class="line">    <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_MvpMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模型矩阵------------------------------</span></span><br><span class="line">    <span class="comment">// var u_ModelMatrix = gl.getUniformLocation(gl.program, &#x27;u_ModelMatrix&#x27;);</span></span><br><span class="line">    <span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    modelMatrix.setTranslate(<span class="number">0.75</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//平移0.75单位</span></span><br><span class="line">    <span class="comment">//gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);</span></span><br><span class="line">    <span class="comment">//---------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//视图矩阵------------------------------</span></span><br><span class="line">    <span class="comment">// var u_ViewMatrix = gl.getUniformLocation(gl.program, &#x27;u_ViewMatrix&#x27;);</span></span><br><span class="line">    <span class="comment">//设置视点、视线、上方向</span></span><br><span class="line">    <span class="keyword">var</span> viewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    viewMatrix.setLookAt(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">100</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">   <span class="comment">// gl.uniformMatrix4fv(u_ViewMatrix, false, viewMatrix.elements);</span></span><br><span class="line">    <span class="comment">//---------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//投影矩阵--------------------------</span></span><br><span class="line">    <span class="comment">// var u_ProjMatrix = gl.getUniformLocation(gl.program, &#x27;u_ProjMatrix&#x27;);</span></span><br><span class="line">    <span class="keyword">var</span> projMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    projMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">//gl.uniformMatrix4fv(u_ProjMatrix, false, projMatrix.elements);</span></span><br><span class="line">    <span class="comment">//----------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算模型视图投影矩阵</span></span><br><span class="line">    mvpMatrix.set(projMatrix).multiply(viewMatrix).multiply(modelMatrix);</span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);<span class="comment">//绘制右侧一组三角形</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算模型视图投影矩阵</span></span><br><span class="line">    modelMatrix.setTranslate(-<span class="number">0.75</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    mvpMatrix.set(projMatrix).multiply(viewMatrix).multiply(modelMatrix);</span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);<span class="comment">//绘制左侧一组三角形</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">            <span class="comment">// Three triangles on the right side</span></span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The back green one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The middle yellow one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="comment">// The front blue one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line">        ]);</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">9</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> verteColorBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE *<span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);<span class="comment">//取消绑定的缓冲区对象</span></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/perspectiveview1.png" alt="效果"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】25-三维世界-立方体</title>
    <url>/25-%E4%B8%89%E7%BB%B4%E4%B8%96%E7%95%8C-%E7%AB%8B%E6%96%B9%E4%BD%93-HelloCubes/</url>
    <content><![CDATA[<p>对应《WebGL编程指南》第七章 33-HelloCubes、34-ColoredCube</p>
<p>要点：立方体及其顶点坐标、gl.drawElements()</p>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、立方体"><a href="#一、立方体" class="headerlink" title="一、立方体"></a>一、立方体</h3><h4 id="1-1-目的"><a href="#1-1-目的" class="headerlink" title="1.1 目的"></a>1.1 目的</h4><p>迄今为止，本教程通过绘制一些简单的三角形，展示了 WebGL 的诸多特性。你对绘制三维对象的基础只是应该已经有了足够的了解。下面，我们就来绘制如下图所示的立方体。其8个顶点的颜色分别为<code>白色、品红色、红色、黄色、绿色、青色、蓝色、黑色</code>。在第5章层提过，为每个顶点定义颜色后，便面上的颜色会根据顶点颜色<a href="https://freepiao.cn/17-%E9%A2%9C%E8%89%B2%E4%B8%8E%E7%BA%B9%E7%90%86-%E7%BB%98%E5%88%B6%E5%BD%A9%E8%89%B2%E4%B8%8E%E6%B8%90%E5%8F%98%E4%B8%89%E8%A7%92%E5%BD%A2-ColoredTriangle/#%E4%B8%89%E3%80%81varying%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E9%A2%9C%E8%89%B2%E5%86%85%E6%8F%92%E8%BF%87%E7%A8%8B">内插</a>出来，形成一种光滑的渐变效果，新的程序名为 <a href="#%E4%BB%A3%E7%A0%811">HelloCube</a>。<br><img src="/images/HelloCubes3.png" alt="示例"></p>
<p><img src="/images/HelloCubes1.png" alt="顶点坐标"></p>
<h4 id="1-2-思考与尝试"><a href="#1-2-思考与尝试" class="headerlink" title="1.2 思考与尝试"></a>1.2 思考与尝试</h4><p>目前，我们都是调用 <code>gl.drawArrays()</code>方法来进行绘制操作的。考虑以下，如何用该函数绘制出一个立方体呢。我们只能使用 gl.TRIANGLES、gl.TRIANGLE_STRIP 或者 gl.TRIANGLE_FAN 模型来绘制三角形，那么最简单也就最直接的方法就是，通过绘制两个三角形来拼成立方体的一个矩形表面。换句话说，为了绘制四个顶点（v0, v1, v2, v3）组成的矩形表面，你可以分别绘制三角形（v0, v1, v2）和三角形（v0, v2, v3）。对立方体的所有表面都这样做就绘制出了整个立方体。在这种情况下，缓冲区内的顶点坐标应该是这样的：<br><img src="/images/HelloCubes4.png" alt="3"></p>
<p>立方体的<u>每一面由2个三角形组成，每个三角形有3个顶点</u>，所以每个面需要用6个顶点。立方体共有6个面，<u>一共需要36个顶点</u>。将36个顶点的数据写入缓冲区，再调用 <code>gl.drawArrays(gl.TRIANGLES, 0, 36)</code> 就可以绘制处立方体。问题是，立方体实际只有8个顶点，而我们却定义了36个之多，这是因为<u>每个顶点会被多个三角形公用。</u></p>
<p>或者，你也可以使用 <code>gl.TRIANGLE_FAN</code> 模式来绘制立方体。在 gl.TRIANGLE_FAN 模式下，<u>用4个顶点（v0, v1, v2, v3）就可以绘制出一个四方形，所以你只需要4x6=24个顶点</u>。但是，如果这样做你就<u>必须为立方体的每个面调用一次 gl.drawArrays()，一共需要6次调用</u>。所以，两种绘制模式各有优缺点，没有一种是完美的。</p>
<h4 id="1-3-解决方案——立方体的拆分"><a href="#1-3-解决方案——立方体的拆分" class="headerlink" title="1.3 解决方案——立方体的拆分"></a>1.3 解决方案——立方体的拆分</h4><p>如你所愿，WebGL 确实提供了一种完美的方案：<code>gl.drawElements()</code>。使用该函数替代 <code>gl.drawArryas()</code>函数进行绘制，<u>能够避免重复定义顶点</u>，保持顶点数量最小。为此，你需要知道模型的每一个顶点的坐标，这些顶点坐标描述了整个模型。</p>
<p>我们<u>将立方体拆成<strong>顶点</strong>和<strong>三角形</strong></u>。拆分规则：</p>
<ul>
<li>立方体被拆成6个面：<u>前、后、左、右、上、下</u></li>
<li><u>每个面都由两个三角形组成，与<strong>三角形列表</strong>中的两个三角形相关联</u>。</li>
<li><u>每个三角形都有3个顶点，与<strong>顶点列表</strong>的3个顶点相关联</u>。如下右图所示</li>
<li>三角形列表中的数字表示该三角形的3个顶点在<strong>顶点列表</strong>中的<strong>索引值</strong>。<u>顶点列表共有8个顶点，索引值从0到7。</u></li>
</ul>
<p><img src="/images/HelloCubes2.png" alt="组成立方体的面、三角形、顶点坐标和顶点颜色"></p>
<p>这样用一个数据结构就可以描述处立方体是怎样由顶点坐标和颜色构成的了。</p>
<h4 id="1-4-通过顶点索引绘制物体——gl-drawElements"><a href="#1-4-通过顶点索引绘制物体——gl-drawElements" class="headerlink" title="1.4 通过顶点索引绘制物体——gl.drawElements()"></a>1.4 通过顶点索引绘制物体——gl.drawElements()</h4><p>到目前为止，我们都是使用 <code>gl.drawArryas()</code>进行绘制，现在我们要使用另一方法 <code>gl.drawElements()</code>。</p>
<p>两个方法看上去差不多，但后者有一些优势，我们稍后再解释。</p>
<p>首先，我们来看一下如何使用 gl.drawElements()。我们需要在 <code>gl.ELEMENT_ARRAY_BUFFER</code>（而不是之前一直使用的 <code>gl.ARRAY_BUFFER</code>）中<u>指定顶点的索引值</u>。所以两种方法最重要的区别就在于 <code>gl.ELEMENT_ARRAY_BUFFER</code>，<u>它管理着具有索引结构的三维模型数据</u>。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th></th>
<th>gl.drawElements(mode, count, type, offset)</th>
</tr>
</thead>
<tbody><tr>
<td>参数</td>
<td>mode</td>
<td>指定绘制的方式，可接受以下常量符号[1]</td>
</tr>
<tr>
<td></td>
<td>count</td>
<td>指定绘制顶点个数</td>
</tr>
<tr>
<td></td>
<td>type</td>
<td>指定索引值数据类型（gl_UNSIGNED_BYTE或gl.UNSIGNED_SHORT）</td>
</tr>
<tr>
<td></td>
<td>offset</td>
<td>指定索引数组中开始绘制的位置，以<strong>字节</strong>为单位</td>
</tr>
<tr>
<td>错误</td>
<td>INVALID_ENUM</td>
<td>传入的mode参数不是前述参数之一</td>
</tr>
<tr>
<td></td>
<td>INVALID_VALUE</td>
<td>参数count或offset是负数</td>
</tr>
</tbody></table>
<blockquote>
<p>[1] mode参数：gl.POINTS/gl.LINES/gl.LINE_STRIP/gl.LINE_LOOP/</p>
<p>gl.TRIANGLES/gl.TRIANGLE_STRIP/gl.TRIANGLE_FAN</p>
</blockquote>
<blockquote>
<p>这里可以对比<code>gl.drawArray()</code>：<br>作用：执行顶点着色器，按照mode参数指定的方式绘制图形<br>参数：<br>    mode，指定绘制的方式（同上）。<br>    first, 指定从那个顶点开始绘制（整数型），0表示从第一个顶点开始画起。<br>    count, 指定绘制需要多少个顶点（整数型），顶点着色器执行的次数，每次处理一个顶点。执行完后，片元着色器开始执行<br>返回值：无<br>错误：/</p>
</blockquote>
<p>我们需要将<u>顶点索引（三角形列表）</u>写入到缓冲区中，并绑定到   <code>gl.ELEMENT_ARRAY_BUFFER</code> 上，其过程类似于调用 <code>gl.drawArrays()</code>时将顶点坐标写入缓冲区并将其绑定到 <code>gl.ARRAY_BUFFER</code> 上的过程。也就是说，可以继续使用 <code>gl.bindBudder()</code>和 <code>gl.bufferData()</code>来进行上述操作，只不过参数 target 要改为 <code>gl.ELEMENT_ARRAY_BUFFER</code>。</p>
<blockquote>
<p>复习：<a href="https://freepiao.cn/06-%E7%BB%98%E5%88%B6%E4%B8%89%E4%B8%AA%E7%82%B9-MultiPoints/#2-%E5%B0%86%E7%BC%93%E5%86%B2%E5%8C%BA%E5%AF%B9%E8%B1%A1%E4%BF%9D%E5%AD%98%E5%88%B0%E7%9B%AE%E6%A0%87%E4%B8%8A">gl.bindBudder()</a>、<a href="https://freepiao.cn/06-%E7%BB%98%E5%88%B6%E4%B8%89%E4%B8%AA%E7%82%B9-MultiPoints/#3-%E5%90%91%E7%BC%93%E5%AD%98%E5%AF%B9%E8%B1%A1%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE">gl.bufferData()</a></p>
</blockquote>
<h4 id="1-5-实例程序"><a href="#1-5-实例程序" class="headerlink" title="1.5 实例程序"></a>1.5 实例程序</h4><p><a href="#%E4%BB%A3%E7%A0%811">代码1</a>与ProjectiveView_mvpMatrix.js一样，使用了金字塔状的可视空间和透视投影变换，着色器部分没有改变。顶点着色器对顶点坐标进行了简单的变换，片元着色器接收varying变量并赋值给gl_FragColor，以对片元进行着色。</p>
<p>main函数的流程与 ProjectiveView_mvpMatrix.js 一样，回顾一下：</p>
<ul>
<li><p>我们首先<u>调用 initVertexBuffers()函数将顶点数据写入缓冲区</u>，然后<u>开启隐藏面消除</u>，使 WebGL 能够根据立方体各表面的前后关系正确地进行绘制。</p>
</li>
<li><p>接着，<u>设置视点和可视空间</u>，把模型视图投影矩阵传给顶点着色器中的 <code>u_MvpMatrix</code> 变量。</p>
</li>
<li><p>最后，<u>清空颜色和深度缓冲区，使用 gl.drawElements()绘制立方体</u>。该函数的使用方法和效果是本例与 ProjectiveView_mvpMatrix.js 的主要区别，来看一下。</p>
</li>
</ul>
<h5 id="向缓冲区中写入顶点的坐标、颜色和索引"><a href="#向缓冲区中写入顶点的坐标、颜色和索引" class="headerlink" title="向缓冲区中写入顶点的坐标、颜色和索引"></a>向缓冲区中写入顶点的坐标、颜色和索引</h5><p>本例的 <code>initVertexBuffers()</code>函数通过缓冲区对象 <code>verticesColors</code> 向顶点着色器中的 attribute变量传顶点坐标和颜色信息，这一点与之前无异。但是，本例不再按照 verticesColors 中的顶点顺序来进行绘制，所以必须额外注意每个顶点的索引值，我们要<u>通过索引值来指定绘制的顺序</u>。比如说，第一个顶点的索引为0，第2个顶点的索引为1，等等。</p>
<p><code>initVertexBuffers(gl)</code>函数部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create a cube</span></span><br><span class="line">    <span class="comment">//    v6----- v5</span></span><br><span class="line">    <span class="comment">//   /|      /|</span></span><br><span class="line">    <span class="comment">//  v1------v0|</span></span><br><span class="line">    <span class="comment">//  | |     | |</span></span><br><span class="line">    <span class="comment">//  | |v7---|-|v4</span></span><br><span class="line">    <span class="comment">//  |/      |/</span></span><br><span class="line">    <span class="comment">//  v2------v3</span></span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">        <span class="comment">// 顶点列表 and 顶点颜色</span></span><br><span class="line">        <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,     <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="comment">// v0 White</span></span><br><span class="line">        -<span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,     <span class="number">1.0</span>,  <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="comment">// v1 Magenta</span></span><br><span class="line">        -<span class="number">1.0</span>, -<span class="number">1.0</span>,  <span class="number">1.0</span>,     <span class="number">1.0</span>,  <span class="number">0.0</span>,  <span class="number">0.0</span>,  <span class="comment">// v2 Red</span></span><br><span class="line">        <span class="number">1.0</span>, -<span class="number">1.0</span>,  <span class="number">1.0</span>,     <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.0</span>,  <span class="comment">// v3 Yellow</span></span><br><span class="line">        <span class="number">1.0</span>, -<span class="number">1.0</span>, -<span class="number">1.0</span>,     <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.0</span>,  <span class="comment">// v4 Green</span></span><br><span class="line">        <span class="number">1.0</span>,  <span class="number">1.0</span>, -<span class="number">1.0</span>,     <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="comment">// v5 Cyan</span></span><br><span class="line">        -<span class="number">1.0</span>,  <span class="number">1.0</span>, -<span class="number">1.0</span>,     <span class="number">0.0</span>,  <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="comment">// v6 Blue</span></span><br><span class="line">        -<span class="number">1.0</span>, -<span class="number">1.0</span>, -<span class="number">1.0</span>,     <span class="number">0.0</span>,  <span class="number">0.0</span>,  <span class="number">0.0</span>   <span class="comment">// v7 Black</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三角形列表（索引）</span></span><br><span class="line">    <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([  <span class="comment">//(Uint8Array)是无符号8位整型数</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front 正</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>,   <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>,    <span class="comment">// right 右</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>,    <span class="comment">// up    顶</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>,   <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>,    <span class="comment">// left  左</span></span><br><span class="line">        <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>,   <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>,    <span class="comment">// down  底</span></span><br><span class="line">        <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>     <span class="comment">// back  后</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">var</span> vertexColorBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the vertex coordinates and color to the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line">    <span class="comment">// Assign the buffer object to a_Position and enable the assignment</span></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line">    <span class="comment">// Assign the buffer object to a_Color and enable the assignment</span></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将顶点索引数据写入缓冲区对象</span></span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>也许你会注意到，缓冲区对象 indexBuffer（第34行）中的数据来自于数组 indices（第23行），该数组以索引值的形式存储了绘制顶点的顺序。索引值是整型数，所以数组的类型是 <code>Unit8Array</code>。如果有超过256个顶点，那么应该使用 <code>Uint16Array</code>。<u>indices 中的元素如下图中的三角形列表所示，每3个索引值为1组，指向3个顶点，由这3个顶点组成一个三角形</u>。通常我们不需要手动创建这点顶点和索引数据，因为<u>三维建模工具</u>在第10章会帮助我们创建它们。<br><img src="/images/HelloCubes5.png" alt="gl.ELEMENT_ARRAY_BUFFER和gl.ARRAY_BUFFER的内容"></p>
<p>绑定缓冲区，以及向缓冲区写入索引数据的过程与之前示例程序中的很类似，区别就是绑定的目标由 gl.ARRAY_BUFFER 变成了 gl.ELEMENT_ARRAY_BUFFER。<u>这个参数告诉 WebGL，该缓冲区中的内容是定点的索引值数据。</u></p>
<p>此时，WebGL 系统的内部状态如下图所示：</p>
<p><img src="/images/HelloCubes6.png" alt="gl.ELEMENT_ARRAY_BUFFER和gl.ARRAY_BUFFER"></p>
<p>最后，我们调用 gl.drawElements(），就绘制出了立方体。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>在调用<code>gl.drawElements()</code>时，WebGL 首先从绑定到 <code>gl.ELEMENT_ARRAY_BUFFER</code> 的缓冲区中获取顶点的索引值，然后根据该索引值，从绑定到 <u>gl.ARRAY_BUFFER 的缓冲区(即vertexColorBuffer)中获取顶点的坐标、颜色等信息</u>，然后传递给 attribute 变量并执行顶点着色器。对每个索引值都这样做，最后就绘制出了整个立方体，而此时你只调用了一次 gl.drawElements()。<u>这种方式通过索引来访问顶点数据，从而<strong>循环利用</strong>顶点信息，控制内存的开销，但代价是你需要通过索引来间接地访问顶点，在某种程度上使程序复杂化了</u>。所以，gl.drawElements和 gl.drawArrays各有优劣，具体用哪一个取决于具体的系统需求。</p>
<p>虽然我们已经证明了 gl.drawElements是高效的绘制三维图形的方式，但还是漏了关键的一点：我们<u>无法通过将颜色定义在索引值上</u>，<u>颜色仍然是依赖于顶点的</u>。</p>
<p>考虑这样的情况：我们希望立方体的每个表面都是不同的单一颜色（而非颜色渐变效果）或者纹理图像。我们需要把每个面的颜色或纹理信息写入三角形、索引和顶点数据中。</p>
<h3 id="二、为立方体的每个表面指定颜色"><a href="#二、为立方体的每个表面指定颜色" class="headerlink" title="二、为立方体的每个表面指定颜色"></a>二、为立方体的每个表面指定颜色</h3><h4 id="2-1-分析"><a href="#2-1-分析" class="headerlink" title="2.1 分析"></a>2.1 分析</h4><p><a href="#%E4%BB%A3%E7%A0%812">效果实例</a>：</p>
<p><img src="/images/ColoredCube1.png" alt="ColoredCube"></p>
<p><u>顶点着色器进行的是逐顶点的计算，接受的是逐顶点的信息</u>。这说明，如果你想指定表面的颜色，你也需要将颜色定义为逐顶点的信息，并传给顶点着色器。</p>
<blockquote>
<p>比如：前表面由顶点v0、v1、v2、v3组成，若要将前表面涂成蓝色，那么就需要将这4个顶点都指定为蓝色。</p>
</blockquote>
<p>但是，<u>顶点v0 不仅在前表面上，也在右表面上和上表面上</u>，如果你将 v0 指定为蓝色，那么它在另外两个表面上也会是蓝色，这不是我们想要的结果。</p>
<p>为了解决这个问题，我们需要创建多个具有相同顶点坐标的点，如下图所示。如果这样做，你就必须把那些具有相同坐标的顶点分开处理。<br><img src="/images/ColoredCube2.png" alt="组成立方体的面、三角形和顶点的关系（为每个面指定不同颜色）"></p>
<p>此时三角形列表，也就是顶点索引值序列，<u>对每个面都指向一组不同的顶点，不再有前表面和上表面共享一个顶点的情况</u>，这样一来，就可以实现前述的结果，为每个表面涂上不同的单色。我们也可以使用类似的方法为立方体的每个表面贴上不同的纹理，只需将上图的颜色值换成纹理坐标即可。</p>
<p>来看一下示例程序 <a href="#%E4%BB%A3%E7%A0%812">ColoredCube</a> 的代码，它绘制出了一个立方体，其每个表面涂上了不同的颜色。</p>
<h4 id="2-2-代码分析"><a href="#2-2-代码分析" class="headerlink" title="2.2 代码分析"></a>2.2 代码分析</h4><p>本例与 <a href="#%E4%BB%A3%E7%A0%811">HelloCube</a> 的主要区别是在于<strong>顶点数据存储在缓冲区中的形式</strong>：</p>
<ul>
<li>在 HelloCube.js 中，<u>顶点的坐标和颜色数据存储在同一个缓冲区中</u>。虽然有着种种好处，但这样做略显笨重，本例中我们<u>将顶点的坐标和颜色分别存储在不同的缓冲区</u>中。</li>
<li>顶点数组、颜色数组和索引素组按照上图的配置进行了修改。</li>
<li>为了程序结构紧凑，定义了函数 initArrayBuffer(），封装了缓冲区对象的创建、绑定、数据写入和开启等操作。</li>
</ul>
<p>核心代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create a cube</span></span><br><span class="line">    <span class="comment">//    v6----- v5</span></span><br><span class="line">    <span class="comment">//   /|      /|</span></span><br><span class="line">    <span class="comment">//  v1------v0|</span></span><br><span class="line">    <span class="comment">//  | |     | |</span></span><br><span class="line">    <span class="comment">//  | |v7---|-|v4</span></span><br><span class="line">    <span class="comment">//  |/      |/</span></span><br><span class="line">    <span class="comment">//  v2------v3</span></span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([   <span class="comment">// Vertex coordinates</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([     <span class="comment">// Colors</span></span><br><span class="line">        <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front(blue)</span></span><br><span class="line">        <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="comment">// v0-v3-v4-v5 right(green)</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">0.4</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">0.4</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">0.4</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">0.4</span>, <span class="number">0.4</span>,  <span class="comment">// v0-v5-v6-v1 up(red)</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([       <span class="comment">// Indices of the vertices</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">        <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">        <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>,   <span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,    <span class="comment">// up</span></span><br><span class="line">        <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,  <span class="number">12</span>,<span class="number">14</span>,<span class="number">15</span>,    <span class="comment">// left</span></span><br><span class="line">        <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,  <span class="number">16</span>,<span class="number">18</span>,<span class="number">19</span>,    <span class="comment">// down</span></span><br><span class="line">        <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,  <span class="number">20</span>,<span class="number">22</span>,<span class="number">23</span>     <span class="comment">// back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span> (!indexBuffer)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the vertex coordinates and color to the buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, vertices, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Position&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, colors, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Color&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the indices to the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initArrayBuffer</span>(<span class="params">gl, data, num, type, attribute</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = gl.createBuffer();   <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!buffer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Write date into the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);</span><br><span class="line">    <span class="comment">// Assign the buffer object to the attribute variable</span></span><br><span class="line">    <span class="keyword">var</span> a_attribute = gl.getAttribLocation(gl.program, attribute);</span><br><span class="line">    <span class="keyword">if</span> (a_attribute &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of &#x27;</span> + attribute);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    gl.vertexAttribPointer(a_attribute, num, type, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Enable the assignment of the buffer object to the attribute variable</span></span><br><span class="line">    gl.enableVertexAttribArray(a_attribute);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HelloCube.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +<span class="comment">//!!! 需要声明浮点数精度，否则报错No precision specified for (float)</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//gl.clearColor(0, 0, 0, 1);</span></span><br><span class="line">    gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模型视图投影矩阵</span></span><br><span class="line">    <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_MvpMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    mvpMatrix.setPerspective(<span class="number">30</span>, <span class="number">1</span>, <span class="number">1</span> ,<span class="number">100</span>);</span><br><span class="line">    mvpMatrix.lookAt(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create a cube</span></span><br><span class="line">    <span class="comment">//    v6----- v5</span></span><br><span class="line">    <span class="comment">//   /|      /|</span></span><br><span class="line">    <span class="comment">//  v1------v0|</span></span><br><span class="line">    <span class="comment">//  | |     | |</span></span><br><span class="line">    <span class="comment">//  | |v7---|-|v4</span></span><br><span class="line">    <span class="comment">//  |/      |/</span></span><br><span class="line">    <span class="comment">//  v2------v3</span></span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">        <span class="comment">// 顶点列表 and 顶点颜色</span></span><br><span class="line">        <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,     <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="comment">// v0 White</span></span><br><span class="line">        -<span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,     <span class="number">1.0</span>,  <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="comment">// v1 Magenta</span></span><br><span class="line">        -<span class="number">1.0</span>, -<span class="number">1.0</span>,  <span class="number">1.0</span>,     <span class="number">1.0</span>,  <span class="number">0.0</span>,  <span class="number">0.0</span>,  <span class="comment">// v2 Red</span></span><br><span class="line">        <span class="number">1.0</span>, -<span class="number">1.0</span>,  <span class="number">1.0</span>,     <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.0</span>,  <span class="comment">// v3 Yellow</span></span><br><span class="line">        <span class="number">1.0</span>, -<span class="number">1.0</span>, -<span class="number">1.0</span>,     <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.0</span>,  <span class="comment">// v4 Green</span></span><br><span class="line">        <span class="number">1.0</span>,  <span class="number">1.0</span>, -<span class="number">1.0</span>,     <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="comment">// v5 Cyan</span></span><br><span class="line">        -<span class="number">1.0</span>,  <span class="number">1.0</span>, -<span class="number">1.0</span>,     <span class="number">0.0</span>,  <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="comment">// v6 Blue</span></span><br><span class="line">        -<span class="number">1.0</span>, -<span class="number">1.0</span>, -<span class="number">1.0</span>,     <span class="number">0.0</span>,  <span class="number">0.0</span>,  <span class="number">0.0</span>   <span class="comment">// v7 Black</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三角形列表（索引）</span></span><br><span class="line">    <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([  <span class="comment">//(Uint8Array)是无符号8位整型数</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front 正</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>,   <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>,    <span class="comment">// right 右</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>,    <span class="comment">// up    顶</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>,   <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>,    <span class="comment">// left  左</span></span><br><span class="line">        <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>,   <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span>,    <span class="comment">// down  底</span></span><br><span class="line">        <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>     <span class="comment">// back  后</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">var</span> vertexColorBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the vertex coordinates and color to the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line">    <span class="comment">// Assign the buffer object to a_Position and enable the assignment</span></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line">    <span class="comment">// Assign the buffer object to a_Color and enable the assignment</span></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将顶点索引数据写入缓冲区对象</span></span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="/images/HelloCubes3.png" alt="代码1-HelloCubes"></p>
<h4 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ColoredCube.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//gl.clearColor(0, 0, 0, 1);</span></span><br><span class="line">    gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模型视图投影矩阵</span></span><br><span class="line">    <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_MvpMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    mvpMatrix.setPerspective(<span class="number">30</span>, <span class="number">1</span>, <span class="number">1</span> ,<span class="number">100</span>);</span><br><span class="line">    mvpMatrix.lookAt(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create a cube</span></span><br><span class="line">    <span class="comment">//    v6----- v5</span></span><br><span class="line">    <span class="comment">//   /|      /|</span></span><br><span class="line">    <span class="comment">//  v1------v0|</span></span><br><span class="line">    <span class="comment">//  | |     | |</span></span><br><span class="line">    <span class="comment">//  | |v7---|-|v4</span></span><br><span class="line">    <span class="comment">//  |/      |/</span></span><br><span class="line">    <span class="comment">//  v2------v3</span></span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([   <span class="comment">// Vertex coordinates</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([     <span class="comment">// Colors</span></span><br><span class="line">        <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front(blue)</span></span><br><span class="line">        <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="comment">// v0-v3-v4-v5 right(green)</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">0.4</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">0.4</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">0.4</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">0.4</span>, <span class="number">0.4</span>,  <span class="comment">// v0-v5-v6-v1 up(red)</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.4</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="number">1.0</span>, <span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([       <span class="comment">// Indices of the vertices</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">        <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">        <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>,   <span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,    <span class="comment">// up</span></span><br><span class="line">        <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,  <span class="number">12</span>,<span class="number">14</span>,<span class="number">15</span>,    <span class="comment">// left</span></span><br><span class="line">        <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,  <span class="number">16</span>,<span class="number">18</span>,<span class="number">19</span>,    <span class="comment">// down</span></span><br><span class="line">        <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,  <span class="number">20</span>,<span class="number">22</span>,<span class="number">23</span>     <span class="comment">// back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span> (!indexBuffer)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the vertex coordinates and color to the buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, vertices, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Position&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, colors, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Color&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the indices to the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initArrayBuffer</span>(<span class="params">gl, data, num, type, attribute</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = gl.createBuffer();   <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!buffer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Write date into the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);</span><br><span class="line">    <span class="comment">// Assign the buffer object to the attribute variable</span></span><br><span class="line">    <span class="keyword">var</span> a_attribute = gl.getAttribLocation(gl.program, attribute);</span><br><span class="line">    <span class="keyword">if</span> (a_attribute &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of &#x27;</span> + attribute);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    gl.vertexAttribPointer(a_attribute, num, type, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Enable the assignment of the buffer object to the attribute variable</span></span><br><span class="line">    gl.enableVertexAttribArray(a_attribute);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h5><p><img src="/images/ColoredCube1.png" alt="ColoredCube"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】24-三维世界-对象的前后关系</title>
    <url>/24-%E4%B8%89%E7%BB%B4%E4%B8%96%E7%95%8C-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%89%8D%E5%90%8E%E5%85%B3%E7%B3%BB-DepthBuffer/</url>
    <content><![CDATA[<p>对应《WebGL编程指南》第七章 31-DepthBuffer、32-Zfighting</p>
<p>要点：对象的前后关系、隐藏面消除、深度冲突</p>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、正确处理对象的前后关系"><a href="#一、正确处理对象的前后关系" class="headerlink" title="一、正确处理对象的前后关系"></a>一、正确处理对象的前后关系</h3><p>目前为止，已经掌握编写代码移动视点，设置可视空间，从不同的角度观察三维对象，处理三角形缺一角的情况。但是，仍然还存在一个问题：在移动视点的过程中，有时候前面的三角形会“躲”到后面的三角形之后，这一节将会研究这一问题。</p>
<h4 id="1-1-WebGL的绘图原理"><a href="#1-1-WebGL的绘图原理" class="headerlink" title="1.1 WebGL的绘图原理"></a>1.1 WebGL的绘图原理</h4><p>在真实世界中，如果你将两个盒子一前一后放在桌子上，如下图，下面的盒子会挡住部分后面的盒子。</p>
<p><img src="/images/DepthBuffer1.png" alt="前面的盒子挡住部分后面的盒子"></p>
<p>回顾一下示例程序 PerspectiveView 的效果，绿色三角形的一部分被黄色和蓝色三角形挡住了。看上去似乎是 WebGL 专为三维图形学设计，能够自动分析处三维对象的远近，并正确处理遮挡关系。</p>
<p><img src="/images/perspectiveview1.png" alt="perspectiveview"></p>
<p>遗憾的是，事实没有想象的那么美好。默认情况下，<u>WebGL 为了加速绘图操作，是按照顶点在缓冲区中的顺序来处理它们的</u>。前面所有的示例程序我们都是故意先定义远的物体，后定义近的物体，从而产生正确的效果。</p>
<p>比如在上一节 PerspectiveView_mvp.js中，我们按照如下顺序定义了三角形的顶点和颜色数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">    [</span><br><span class="line">        <span class="comment">// Three triangles on the right side</span></span><br><span class="line">        <span class="number">0.0</span>,  <span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The back green one</span></span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0.0</span>,  <span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The middle yellow one</span></span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0.0</span>,  <span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="comment">// The front blue one</span></span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,</span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure>

<p><strong>WebGL 按照顶点在缓冲区中的顺序来进行绘制</strong>。后绘制的图形将覆盖已经绘制好的图形，这样就恰好产生了近处的三角形挡住远处的三角形的效果。</p>
<p>为了验证这一点，我们将缓冲区中三角形顶点数据的顺序调整一下，把近处的蓝色三角形定义在前面，然后是中间的黄色三角形，最后是远处的绿色三角形，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">    [</span><br><span class="line">        <span class="comment">// Three triangles on the right side</span></span><br><span class="line">        <span class="number">0.0</span>,  <span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="comment">// The front blue one</span></span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,</span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0.0</span>,  <span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The middle yellow one</span></span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0.0</span>,  <span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The back green one</span></span><br><span class="line">        -<span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">        <span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure>

<p>运行程序，你就会发现本该出现在最远处的绿色三角形，不自然地挡住了近处的黄色和蓝色三角形: </p>
<p><img src="/images/DepthBuffer2.png" alt="远处的图形挡住了近处的图形"></p>
<p>WebGL 在默认情况下会按照缓冲区中的顺序绘制图形，而且后绘制的图形覆盖先绘制的图形，因为这样做很高效。如果场景中的对象不发生运动，观察者的状态也是唯一的，那么这种做法没有问题。但是如果，比如你<u>希望不断移动视点，从不同的角度看物体，那么你不可能事先决定对象出现的顺序</u>。</p>
<h4 id="1-2-隐藏面消除"><a href="#1-2-隐藏面消除" class="headerlink" title="1.2 隐藏面消除"></a>1.2 隐藏面消除</h4><p>为了解决这个问题，WebGL 提供了<strong>隐藏面消除</strong>功能。这个功能会帮助我们消除那些被遮挡的表面（隐藏面），你可以放心地绘制场景而不必顾及各物体在缓冲区中的顺序，因为那些远处的物体会自动被近处的物体挡住，不会被绘制出来。这个功能已经内嵌在 WebGL 中了，你只需要简单地开启这个功能就可以了。</p>
<p>开启隐藏面消除功能，需要遵循以下两步：</p>
<ul>
<li>开启隐藏面消除功能（<code>gl.enable(gl.DEPTH_TEST)</code>）</li>
<li>在绘制之前，清除深度缓冲区（<code>gl.clear(gl.DEPTH_BUFFER_BIT)</code>）</li>
</ul>
<p>第1步所用的 <code>gl.enable()</code>函数实际上可以开启 WebGL 中的多种功能，其规范如下：</p>
<p><img src="/images/DepthBuffer3.png" alt="gl.enable()"></p>
<p>第2步，使用 gl.clear(）方法清除<strong>深度缓冲区</strong>。深度缓冲区是一个中间对象，其<u>作用就是帮助WebGL 进行隐藏面消除</u>。WebGL 在颜色缓冲区中绘制几何图形，绘制完成后将缓冲区显示到 canvas 上。如果要将隐藏面消除，那就必须知道每个几个图形的深度信息，而<u>深度缓冲区就是用来存储深度信息的</u>。<u>由于深度方向通常是Z轴方向，所以有时候我们也称为<strong>Z缓冲区</strong></u>。<br><img src="/images/DepthBuffer4.png" alt="深度缓冲区与隐藏面消除"></p>
<p>在绘制任意一帧之前，都必须清除深度缓冲区，以消除绘制上一帧时在其中留下的痕迹。如果不这样做，就会出现错误的结果。我们调用 <code>gl.clear()</code>函数，并传入参数 gl.DEPTH_BUFFER_BIT 清除深度缓冲区。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gl.clear(gl.DEPTH_BUFFER_BIT)</span><br></pre></td></tr></table></figure>

<p>当然，还需要清除颜色缓冲区。用按位或符号 <code>|</code> 链接这两个参数，并作为参数传入函数中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)</span><br></pre></td></tr></table></figure>

<p>与 gl.enble()函数对应的还有 gl.disable()函数，其规范如下所示(略)，前者启用某个功能，后者则禁用之。</p>
<p>示例程序名为 <a href="#%E4%BB%A3%E7%A0%811">DepthBuffer.js</a>，它在 PerspectiveView_mvpMatrix.js 的基础上，加入了隐藏面消除的相关代码。注意，缓冲区中顶点的顺没有改变，程序一次按照<u>近处，中间，远处</u>的顺序绘制三角形。程序运行的结果和 PerspectiveView_mvpMatrix 完全一样。</p>
<h3 id="二、深度冲突"><a href="#二、深度冲突" class="headerlink" title="二、深度冲突"></a>二、深度冲突</h3><p>隐藏面消除是 WebGL 的一项复杂而又强大的特性，在绝大多数情况下，它都能很好地完成任务。然而，当几何图形或物体的两个表面极为接近时，就会出现新的问题，<u>使得表面看上去斑斑驳驳的</u>，如下图所示。这种现象被称为<strong>深度冲突</strong>。现在，我们来画两个Z值完全一样的三角形。</p>
<p><img src="/images/DepthBuffer5.png" alt="深度冲突的效果"></p>
<p>之所以会产生深度冲突，是因为<u>两个表面过于接近</u>，深度缓冲区有限的精度已经不能区分哪个在前，哪个在后了。严格地说，如果创建三维模型阶段就对顶点的深度值加以注意，是能够避免深度冲突的。但是，当场景中有多个运动者的物体时，实现这一点几乎是不可能的。</p>
<h4 id="2-1-多边形偏移"><a href="#2-1-多边形偏移" class="headerlink" title="2.1 多边形偏移"></a>2.1 多边形偏移</h4><p>WebGL 提供一种称为<strong>多边形偏移</strong>的的机制来解决这个问题。<u>该机制将自动在Z值加上一个偏移量，偏移量的值由物体表面相对与观察者视线的角度来确定</u>。启用该机制只需两行代码：</p>
<ul>
<li>启用多边形偏移：<code>gl.enable(gl.POLYGON_OFFSET_FILL)</code></li>
<li>在绘制之前指定用来计算偏移量的参数: <code>gl.polygonOffset(1.0, 1.0)</code></li>
</ul>
<p>第1步调用了 gl.enable()启用多边形偏移，注意启用隐藏面消除用到的也是该函数，只不过两者传入了不同的参数。第2步中的函数 <code>gl.polygonOffset()</code>的规范如下：</p>
<p><img src="/images/DepthBuffer8.png" alt="gl.polygonOffset()"></p>
<p>实例<a href="#%E4%BB%A3%E7%A0%812">代码2</a>核心部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 启用多边形偏移</span></span><br><span class="line">gl.enable(gl.POLYGON_OFFSET_FILL);</span><br><span class="line"><span class="comment">// Draw the triangles</span></span><br><span class="line">gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n/<span class="number">2</span>);   <span class="comment">// The green triangle</span></span><br><span class="line">gl.polygonOffset(<span class="number">1.0</span>, <span class="number">1.0</span>);          <span class="comment">// 设置多边形偏移参数</span></span><br><span class="line">gl.drawArrays(gl.TRIANGLES, n/<span class="number">2</span>, n/<span class="number">2</span>); <span class="comment">// The yellow triangle</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    <span class="comment">// Vertex coordinates and color</span></span><br><span class="line">    <span class="number">0.0</span>,  <span class="number">2.5</span>,  -<span class="number">5.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The green triangle</span></span><br><span class="line">    -<span class="number">2.5</span>, -<span class="number">2.5</span>,  -<span class="number">5.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">    <span class="number">2.5</span>, -<span class="number">2.5</span>,  -<span class="number">5.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>, </span><br><span class="line"></span><br><span class="line">    <span class="number">0.0</span>,  <span class="number">3.0</span>,  -<span class="number">5.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="comment">// The yellow triagle</span></span><br><span class="line">    -<span class="number">3.0</span>, -<span class="number">3.0</span>,  -<span class="number">5.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">    <span class="number">3.0</span>, -<span class="number">3.0</span>,  -<span class="number">5.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, </span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>可见，所有顶点的Z 坐标值都一样，为 -0.5，但是却没有出现深度冲突现象。</p>
<p>在代码的其余部分，我们开启了多边形偏移机制，然后绘制了一个绿色的三角形和一个黄色的三角形。两个三角形的数据存储在同一个缓冲区中，所以需要格外注意 <code>gl.drawArryas()</code>的第2个和第3个参数。<u>第2个参数表示开始绘制的顶点的编号</u>，而<u>第3个参数表示该次操作绘制的顶点个数</u>。所以，我们先画了一个绿色三角形，然后通过 <code>gl.polygonOffset()</code>设置了多边形偏移参数，使之后的绘制受到多边形偏移机制影响，再画了一个黄色三角形。运行程序，你将看到两个三角形没有发生深度冲突。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DepthBuffer.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +<span class="comment">//!!! 需要声明浮点数精度，否则报错No precision specified for (float)</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//gl.clearColor(0, 0, 0, 1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启隐藏面消除</span></span><br><span class="line">    gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//模型视图投影矩阵</span></span><br><span class="line">    <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_MvpMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模型矩阵------------------------------</span></span><br><span class="line">    <span class="comment">// var u_ModelMatrix = gl.getUniformLocation(gl.program, &#x27;u_ModelMatrix&#x27;);</span></span><br><span class="line">    <span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    modelMatrix.setTranslate(<span class="number">0.75</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//平移0.75单位</span></span><br><span class="line">    <span class="comment">//gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);</span></span><br><span class="line">    <span class="comment">//---------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//视图矩阵------------------------------</span></span><br><span class="line">    <span class="comment">// var u_ViewMatrix = gl.getUniformLocation(gl.program, &#x27;u_ViewMatrix&#x27;);</span></span><br><span class="line">    <span class="comment">//设置视点、视线、上方向</span></span><br><span class="line">    <span class="keyword">var</span> viewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    viewMatrix.setLookAt(<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">100</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">   <span class="comment">// gl.uniformMatrix4fv(u_ViewMatrix, false, viewMatrix.elements);</span></span><br><span class="line">    <span class="comment">//---------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//投影矩阵--------------------------</span></span><br><span class="line">    <span class="comment">// var u_ProjMatrix = gl.getUniformLocation(gl.program, &#x27;u_ProjMatrix&#x27;);</span></span><br><span class="line">    <span class="keyword">var</span> projMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    projMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">//gl.uniformMatrix4fv(u_ProjMatrix, false, projMatrix.elements);</span></span><br><span class="line">    <span class="comment">//----------------------------------</span></span><br><span class="line"></span><br><span class="line">    mvpMatrix.set(projMatrix).multiply(viewMatrix).multiply(modelMatrix);</span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空颜色和深度缓冲区</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);<span class="comment">//绘制右侧一组三角形</span></span><br><span class="line"></span><br><span class="line">    modelMatrix.setTranslate(-<span class="number">0.75</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    mvpMatrix.set(projMatrix).multiply(viewMatrix).multiply(modelMatrix);</span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);<span class="comment">//绘制左侧一组三角形</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">            <span class="comment">// Three triangles on the right side</span></span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="comment">// The front blue one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">1.0</span>,   <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The middle yellow one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">2.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The back green one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">1.0</span>,  -<span class="number">4.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line">        ]);</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">9</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> verteColorBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE *<span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);<span class="comment">//取消绑定的缓冲区对象</span></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="/images/perspectiveview1.png" alt="DepthBuffer"></p>
<h4 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vertex shader program</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">  <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;uniform mat4 u_ViewProjMatrix;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  gl_Position = u_ViewProjMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment shader program</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE =</span><br><span class="line">  <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  gl_FragColor = v_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Retrieve &lt;canvas&gt; element</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;webgl&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the rendering context for WebGL</span></span><br><span class="line">  <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize shaders</span></span><br><span class="line">  <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to intialize shaders.&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the vertex coordinates and color (the blue triangle is in the front)</span></span><br><span class="line">  <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Set clear color and enable the hidden surface removal function</span></span><br><span class="line">  gl.clearColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the storage locations of u_ViewProjMatrix</span></span><br><span class="line">  <span class="keyword">var</span> u_ViewProjMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ViewProjMatrix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> viewProjMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">  <span class="comment">// Set the eye point, look-at point, and up vector.</span></span><br><span class="line">  viewProjMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">  viewProjMatrix.lookAt(<span class="number">3.06</span>, <span class="number">2.5</span>, <span class="number">10.0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Pass the view projection matrix to u_ViewProjMatrix</span></span><br><span class="line">  gl.uniformMatrix4fv(u_ViewProjMatrix, <span class="literal">false</span>, viewProjMatrix.elements);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Clear color and depth buffer</span></span><br><span class="line">  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启用多边形偏移</span></span><br><span class="line">  gl.enable(gl.POLYGON_OFFSET_FILL);</span><br><span class="line">  <span class="comment">// Draw the triangles</span></span><br><span class="line">  gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n/<span class="number">2</span>);   <span class="comment">// The green triangle</span></span><br><span class="line">  gl.polygonOffset(<span class="number">1.0</span>, <span class="number">1.0</span>);          <span class="comment">// 设置多边形偏移参数</span></span><br><span class="line">  gl.drawArrays(gl.TRIANGLES, n/<span class="number">2</span>, n/<span class="number">2</span>); <span class="comment">// The yellow triangle</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    <span class="comment">// Vertex coordinates and color</span></span><br><span class="line">     <span class="number">0.0</span>,  <span class="number">2.5</span>,  -<span class="number">5.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The green triangle</span></span><br><span class="line">    -<span class="number">2.5</span>, -<span class="number">2.5</span>,  -<span class="number">5.0</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">     <span class="number">2.5</span>, -<span class="number">2.5</span>,  -<span class="number">5.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>, </span><br><span class="line"></span><br><span class="line">     <span class="number">0.0</span>,  <span class="number">3.0</span>,  -<span class="number">5.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="comment">// The yellow triagle</span></span><br><span class="line">    -<span class="number">3.0</span>, -<span class="number">3.0</span>,  -<span class="number">5.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">     <span class="number">3.0</span>, -<span class="number">3.0</span>,  -<span class="number">5.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, </span><br><span class="line">  ]);</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a buffer object</span></span><br><span class="line">  <span class="keyword">var</span> vertexColorbuffer = gl.createBuffer();  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// Write the vertex coordinates and color to the buffer object</span></span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorbuffer);</span><br><span class="line">  gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Assign the buffer object to a_Position and enable the assignment</span></span><br><span class="line">  <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">  gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">  gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Assign the buffer object to a_Color and enable the assignment</span></span><br><span class="line">  <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line">  gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">  gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h5><p><img src="/images/DepthBuffer6.png" alt="Zfighting"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】29-层次模型-单关节模型</title>
    <url>/29-%E5%B1%82%E6%AC%A1%E6%A8%A1%E5%9E%8B-%E5%8D%95%E5%85%B3%E8%8A%82%E6%A8%A1%E5%9E%8B-jointModel/</url>
    <content><![CDATA[<p>对应《WebGL编程指南》第九章 43-jointModel</p>
<p>要点：多个简单模型组成的复杂模型、层次结构模型、单关节模型</p>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、多个简单模型组成的复杂模型"><a href="#一、多个简单模型组成的复杂模型" class="headerlink" title="一、多个简单模型组成的复杂模型"></a>一、多个简单模型组成的复杂模型</h3><h4 id="1-1-引入"><a href="#1-1-引入" class="headerlink" title="1.1 引入"></a>1.1 引入</h4><p>我们已经知道如何平移、旋转简单的模型，比如二维的三角形或三维的立方体。但是，实际用到的很多三维模型，如3D游戏中的人物角色模型等，都是由多个小的立方体模型组成的。</p>
<p>绘制由多个小部件组成的复杂模型，最关键的问题是<u>如何处理模型的整体移动</u>，以及各个小部件间的相对移动。这一节就来研究这个问题。首先，考虑一下人类的手臂：从肩部到之间，包括上臂、前臂、手掌和手指，如下图所示：<br><img src="/images/jointModel1.png" alt="手臂的结构和可能的运动"></p>
<p>手臂的每个部分可以围绕关节运动，如上图所示：</p>
<ul>
<li>上臂可以绕肩关节旋转运动，并带动前臂、手掌和手指一起运动。</li>
<li>前臂可以绕肘关节运动，并带动手掌和手指一起运动，但不影响上臂。</li>
<li>手掌绕腕关节运动，并带到手指一起运动，但不影响上臂和前臂</li>
<li>手指运动不影响手臂、前臂和手掌</li>
</ul>
<p>总之，当手臂的某个部位运动时，位于该部位以下的其他部位会随之一起运动，且位于该部位以上的其他部位不受影响。此外，这里的所有运动，都是围绕某个关节的转动。</p>
<h4 id="1-2-层次结构模型"><a href="#1-2-层次结构模型" class="headerlink" title="1.2 层次结构模型"></a>1.2 层次结构模型</h4><p>绘制机器人手臂这样一个复杂的模型，最常用的方法就是按照模型中各个部件的<strong>层次关系</strong>，<strong>从高到低逐一绘制</strong>，并在每个关节上应用<strong>模型矩阵</strong>。</p>
<blockquote>
<p>注意，三维模型和现实中的人类或机器人不一样，它的部件并<u>没有真正连接在一起</u>。如果直接转动上臂，那么肘部以下的部分，包括前臂、手掌和手指，只会留在原地，这样手臂就断开了。所以，当上臂绕肩关节转动时，你需要在实现”<u>肘部以下部分跟随上臂转动的逻辑</u>“。具体地，上臂绕肩关节转动了多少度，肘部以下部分也应该绕肩关节转动多少度。</p>
<p>当情况较为简单时，实现”部件A转动带动部件B转动“可以很直接，只要对部件B也施以部件A的旋转矩阵即可。比如，使用模型矩阵使上臂绕肩关节转动30度，然后在绘制肘关节以下的各部位时，为它们施加同一个模型矩阵，也令其绕肩关节转动30度，如下图所示。这样，肘关节以下的部分就能自动跟随上臂转动了。</p>
</blockquote>
<p><img src="/images/jointModel2.png" alt="肘部以下部分跟随上臂转动"></p>
<p>如果情况更复杂一些，比如先使上臂绕肩关节转动30度，然后使前臂绕肘关节转动10度，那么对肘关节以下的部分，你就得先施加上臂绕肩关节转动30度的矩阵，然后再施加前臂绕肘关节转动10度的矩阵。将这两个矩阵相乘，其结果可称为”肘关节模型矩阵“，那么在绘制肘关节以下部分的时候，直接应用这个所谓的”肘关节模型矩阵“作为模型矩阵就可以了。</p>
<p>按照上述方式编程，三维场景中的肩关节就能影响肘关节，使得上臂的运动带动前臂的运动；反过来，不管前臂如何运动都不会影响上臂。这就与现实中的情况相符合了。</p>
<h3 id="二、单关节模型"><a href="#二、单关节模型" class="headerlink" title="二、单关节模型"></a>二、单关节模型</h3><h4 id="2-1-层次模型分析"><a href="#2-1-层次模型分析" class="headerlink" title="2.1 层次模型分析"></a>2.1 层次模型分析</h4><p>先来看一个单关节模型的例子。示例程序 <a href="#%E4%BB%A3%E7%A0%81">JoinModel</a> 绘制了一个仅由两个立方体部件组成的机器人手臂，其运行结果如下图左所示；手臂的两个部件为 arm1 与 arm2，arm1 接在 arm2 的上面，如图右所示。你可以把 arm1 想象成上臂，而把 arm2 想象成前臂，而肩关节在最下面。<br><img src="/images/jointModel3.png" alt="jointModel模型中的层次结构"></p>
<p>运行<a href="#%E6%95%88%E6%9E%9C">程序</a>，用户可以使用左右方向键控制 arm1 水平转动，使用上下方方向键控制 arm2 绕 joint1 关节垂直转动。比如，先按下方向键，arm2 逐渐向前倾斜，然后按右方向键，arm1 向右旋转。</p>
<p><img src="/images/jointModel4.png" alt="通过方向键控制操作jointModel中的模型"></p>
<p>arm2 绕 joint1 的转动并不影响 arm1，而 arm1 的转动会带动 arm2 一起转动。</p>
<h4 id="2-2-程序分析"><a href="#2-2-程序分析" class="headerlink" title="2.2 程序分析"></a>2.2 程序分析</h4><p>和以前的程序相比，<code>main()</code>函数基本没有变化，主要的变化发生在 <code>initVertexBuffers()</code>函数中，它将 arm1 和 arm2 的数据写入了相应的缓冲区。以前程序中的立方体都是以原点为中心，且边长为2.0；本例为了更好地模拟机器人手臂，使用如下图所示的立方体，原点位于<u>底面中心</u>，底面是边长为3.0的正方向，高度为10.0。<u>将原点置于立方体的底面中心，是为了便于时立方体绕关节转动</u>。arm1 和 arm2 都是用这个立方体。<br><img src="/images/jointModel5.png" alt="用来绘制机器人前臂和上臂的立方体"></p>
<p>main()函数首先根据<u>可视空间、视点和视线方向</u>计算出了<code>视图投影矩阵 viewProjMatrix</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算视图投影矩阵</span></span><br><span class="line"><span class="keyword">var</span> viewProjMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">viewProjMatrix.setPerspective(<span class="number">50.0</span>, canvas.width / canvas.height, <span class="number">1.0</span>, <span class="number">100.0</span>);</span><br><span class="line">viewProjMatrix.lookAt(<span class="number">20.0</span>, <span class="number">10.0</span>, <span class="number">30.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);</span><br></pre></td></tr></table></figure>

<p>然后在键盘事件响应函数中调用 keydown(）函数，通过方向键控制机器人的手臂运动。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册键盘事件响应函数</span></span><br><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123; </span><br><span class="line">    keydown(ev, gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>接着定义 <code>keydown()</code>函数本身，以及若干该函数需要用到的全局变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ANGLE_STEP = <span class="number">3.0</span>;    <span class="comment">// 每次按键转动的角度</span></span><br><span class="line"><span class="keyword">var</span> g_arm1Angle = -<span class="number">90.0</span>; <span class="comment">// arm1的当前角度</span></span><br><span class="line"><span class="keyword">var</span> g_joint1Angle = <span class="number">0.0</span>; <span class="comment">// joint1的当前角度(即arm2的角度)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keydown</span>(<span class="params">ev, gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (ev.keyCode) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">38</span>: <span class="comment">// 上方向键 - joint1绕z轴正向转动</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint1Angle &lt; <span class="number">135.0</span>) g_joint1Angle += ANGLE_STEP;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">40</span>: <span class="comment">// 下方向键 - joint1绕z轴负向转动</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint1Angle &gt; -<span class="number">135.0</span>) g_joint1Angle -= ANGLE_STEP;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">39</span>: <span class="comment">// 右方向键 - arm1绕y轴正向转动</span></span><br><span class="line">      g_arm1Angle = (g_arm1Angle + ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">37</span>: <span class="comment">// 左方向键 - arm1绕y轴负向转动</span></span><br><span class="line">      g_arm1Angle = (g_arm1Angle - ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span>; <span class="comment">// Skip drawing at no effective action</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Draw the robot arm</span></span><br><span class="line">  draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ANGLE_STEP 常量表示每一次按下按键，arm1 或 joint1 转动的角度，它的值是3.0。g_arm1Angle 变量表示 arm1 的当前角度，g_joint1Angle 变量表示 joint1 的当前角度，如图所示：</p>
<p><img src="/images/jointModel6.png" alt="g_joint1Angle和g_arm1Angle"></p>
<p>keydown()函数的任务是，根据按下的是哪个按键，对 g_joint1Angle 或 g_arm1Angle 变量加上或减去常量 ANGLE_STEP 的值。注意，joint1 的转动角度只能在 <code>-135</code>度到 <code>135</code>度之间，这是<u>为了不与 arm1 冲突</u>。最后，draw()函数将整个机器人手臂绘制出来。</p>
<h4 id="2-3-绘制层次模型（draw-）"><a href="#2-3-绘制层次模型（draw-）" class="headerlink" title="2.3 绘制层次模型（draw()）"></a>2.3 绘制层次模型（draw()）</h4><p><code>draw()</code>函数的任务是绘制机器人手臂。注意，<code>draw()</code>函数和 <code>drawBox()</code>函数用到了全局变量 <code>g_modelMatrix</code> 和 <code>g_mvpMatrix</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 坐标变换矩阵</span></span><br><span class="line"><span class="keyword">var</span> g_modelMatrix = <span class="keyword">new</span> Matrix4(), g_mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Clear color and depth buffer</span></span><br><span class="line">  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Arm1</span></span><br><span class="line">  <span class="keyword">var</span> arm1Length = <span class="number">10.0</span>; <span class="comment">// Length of arm1</span></span><br><span class="line">  g_modelMatrix.setTranslate(<span class="number">0.0</span>, -<span class="number">12.0</span>, <span class="number">0.0</span>);</span><br><span class="line">  g_modelMatrix.rotate(g_arm1Angle, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);    <span class="comment">// 绕y轴转</span></span><br><span class="line">  drawBox(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Arm2</span></span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, arm1Length, <span class="number">0.0</span>); 　　　<span class="comment">// 移至joint1处， 这里用到translate，是在之前的基础上向上平移一个arm1的高度</span></span><br><span class="line">  g_modelMatrix.rotate(g_joint1Angle, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);  <span class="comment">// 绕z轴转</span></span><br><span class="line">  g_modelMatrix.scale(<span class="number">1.3</span>, <span class="number">1.0</span>, <span class="number">1.3</span>); <span class="comment">// 让立方体粗一点</span></span><br><span class="line">  drawBox(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>draw()</code>函数内部调用了 <code>drawBox()</code>函数，每调用一次绘制一个部件，先绘制下方较细 arm1，再绘制上方较粗 arm2。</p>
<p>绘制单个部件的步骤是：</p>
<ul>
<li>调用 <code>setTranslate()</code>或 <code>translate()</code>进行平移；</li>
<li>调用 <code>rotate()</code>进行旋转；</li>
<li>调用 <code>drawBox()</code>进行绘制。</li>
</ul>
<blockquote>
<p>绘制整个模型时，需要按照各部件的层次顺序，先 arm1 后 arm2，再执行第一步平移，第二步旋转，第三步绘制。</p>
</blockquote>
<p>绘制 arm1 的步骤如下：</p>
<ul>
<li>首先在模型矩阵<code>g_modelMatrix</code>上调用<code>setTranslate()</code>函数，使之<u>平移（0.0, -12.0, 0.0）到稍下方位置</u>；</li>
<li>然后调用 rotate(）函数，绕 y 轴旋转 g_arm1Angle 角度；最后调用 drawBox(）函数绘制 arm1。</li>
</ul>
<p>接着来绘制 arm2：</p>
<ul>
<li>与 arm1 在 joint1 处链接，该处上开始绘制 arm2。</li>
<li><u>但是此时，模型矩阵还是处于绘制 arm1 的状态，所以得先调用<code>translate()</code>函数沿 y 轴向上平移 arm1 的高度 arm1Length。</u>注意这里调用的是<code>translate()</code>而不是 <code>setTranslate()</code>，因为<u>这次平移是在之前的基础上进行的</u>。</li>
<li>然后，使用 <code>g_joint1Angle</code> 进行肘关节处的转动，并在 x 和 z 轴稍作拉伸，使前臂看上去粗一些，以便于上臂区分开。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Arm2</span></span><br><span class="line">g_modelMatrix.translate(<span class="number">0.0</span>, arm1Length, <span class="number">0.0</span>); 　　　<span class="comment">// 移至joint1处， 这里用到translate，是在之前的基础上向上平移一个arm1的高度</span></span><br><span class="line">g_modelMatrix.rotate(g_joint1Angle, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);  <span class="comment">// 绕z轴转</span></span><br><span class="line">g_modelMatrix.scale(<span class="number">1.3</span>, <span class="number">1.0</span>, <span class="number">1.3</span>); <span class="comment">// 让立方体粗一点</span></span><br><span class="line">drawBox(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw</span></span><br></pre></td></tr></table></figure>

<p>这样一来，每当 <code>keydown()</code>函数更新了 <code>g_joint1Angle</code> 变量和 <code>g_arm1Angle</code> 变量的值，然后调用 <code>draw()</code>函数进行绘制时，就能绘制处最新状态的机器人手臂，arm1 的位置取决于 <code>g_arm1Angle</code> 变量，而 arm2 的位置取决于 <code>g_joint1Angle</code> 变量。<br><code>drawBox()</code>函数的任务是<u>绘制机器人手臂的某个立方体部件</u>，如上臂或前臂。它首先计算模型视图投影矩阵，传递给 u_MvpMatrix 变量。然后根据模型矩阵计算法向量变换矩阵，传递给 u_NormalMatrix 变量，最后绘制立方体。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绘制立方体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBox</span>(<span class="params">gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 计算视图矩阵并传给u_MvpMatrix</span></span><br><span class="line">  g_mvpMatrix.set(viewProjMatrix);</span><br><span class="line">  g_mvpMatrix.multiply(g_modelMatrix);</span><br><span class="line">  gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, g_mvpMatrix.elements);</span><br><span class="line">  <span class="comment">// 计算法线变换矩阵并传给u_NormalMatrix</span></span><br><span class="line">  g_normalMatrix.setInverseOf(g_modelMatrix);</span><br><span class="line">  g_normalMatrix.transpose();</span><br><span class="line">  gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, g_normalMatrix.elements);</span><br><span class="line">  <span class="comment">// Draw</span></span><br><span class="line">  gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>绘制层次模型的基本流程就是这样了。虽然本例只有两个立方体和一个链接关节，但是绘制更加复杂的模型，其原理与本节是一致的，要做的只是重复上述步骤而已。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vertex shader program</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">  <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;uniform mat4 u_NormalMatrix;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">  <span class="comment">// Shading calculation to make the arm look three-dimensional</span></span><br><span class="line">  <span class="comment">// 光照计算，使场景更逼真</span></span><br><span class="line">  <span class="string">&#x27;  vec3 lightDirection = normalize(vec3(0.0, 0.5, 0.7));\n&#x27;</span> + <span class="comment">// Light direction</span></span><br><span class="line">  <span class="string">&#x27;  vec4 color = vec4(1.0, 0.4, 0.0, 1.0);\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  vec3 ambientLight = vec3(0.2, 0.2, 0.2);&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;  vec3 normal = normalize((u_NormalMatrix * a_Normal).xyz);\n&#x27;</span> +<span class="comment">//对法向量进行归一化</span></span><br><span class="line">  <span class="string">&#x27;  float nDotL = max(dot(normal, lightDirection), 0.0);\n&#x27;</span> +<span class="comment">//计算法向量和光线方向的点积</span></span><br><span class="line">  <span class="comment">//计算漫反射光的颜色</span></span><br><span class="line">  <span class="string">&#x27;  vec3 diffuse = vec3(color) * nDotL;&#x27;</span>+</span><br><span class="line">  <span class="comment">//计算环境光产生的反射颜色</span></span><br><span class="line">  <span class="string">&#x27;vec3 ambient = ambientLight * color.rgb;&#x27;</span>+</span><br><span class="line">  <span class="string">&#x27;v_Color = vec4(diffuse + ambient, color.a);&#x27;</span>+</span><br><span class="line">  <span class="comment">// &#x27;  v_Color = vec4(color.rgb * nDotL + vec3(0.1), color.a);\n&#x27; +//计算环境光产生的反射颜色</span></span><br><span class="line">  <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment shader program</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE =</span><br><span class="line">  <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  gl_FragColor = v_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Retrieve &lt;canvas&gt; element</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;webgl&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the rendering context for WebGL</span></span><br><span class="line">  <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize shaders</span></span><br><span class="line">  <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to intialize shaders.&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置顶点信息</span></span><br><span class="line">  <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the clear color and enable the depth test</span></span><br><span class="line">  <span class="comment">//gl.clearColor(0.0, 0.0, 0.0, 1.0);</span></span><br><span class="line">  gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取 u_MvpMatrix 、u_LightColor u_LightDirection u_AmbientLight 变量的存储位置</span></span><br><span class="line">  <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_MvpMatrix&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> u_NormalMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_NormalMatrix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算视图投影矩阵</span></span><br><span class="line">  <span class="keyword">var</span> viewProjMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">  viewProjMatrix.setPerspective(<span class="number">50.0</span>, canvas.width / canvas.height, <span class="number">1.0</span>, <span class="number">100.0</span>);</span><br><span class="line">  viewProjMatrix.lookAt(<span class="number">20.0</span>, <span class="number">10.0</span>, <span class="number">30.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册键盘事件响应函数</span></span><br><span class="line">  <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123; </span><br><span class="line">    keydown(ev, gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); </span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);  <span class="comment">// Draw the robot arm</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ANGLE_STEP = <span class="number">3.0</span>;    <span class="comment">// 每次按键转动的角度</span></span><br><span class="line"><span class="keyword">var</span> g_arm1Angle = -<span class="number">90.0</span>; <span class="comment">// arm1的当前角度</span></span><br><span class="line"><span class="keyword">var</span> g_joint1Angle = <span class="number">0.0</span>; <span class="comment">// joint1d的当前角度(即arm2的角度)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keydown</span>(<span class="params">ev, gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (ev.keyCode) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">38</span>: <span class="comment">// 上方向键 - joint1绕z轴正向转动</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint1Angle &lt; <span class="number">135.0</span>) g_joint1Angle += ANGLE_STEP;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">40</span>: <span class="comment">// 下方向键 - joint1绕z轴负向转动</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint1Angle &gt; -<span class="number">135.0</span>) g_joint1Angle -= ANGLE_STEP;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">39</span>: <span class="comment">// 右方向键 - arm1绕y轴正向转动</span></span><br><span class="line">      g_arm1Angle = (g_arm1Angle + ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">37</span>: <span class="comment">// 左方向键 - arm1绕y轴负向转动</span></span><br><span class="line">      g_arm1Angle = (g_arm1Angle - ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span>; <span class="comment">// Skip drawing at no effective action</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Draw the robot arm</span></span><br><span class="line">  draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Vertex coordinates（a cuboid 3.0 in width, 10.0 in height, and 3.0 in length with its origin at the center of its bottom)</span></span><br><span class="line">  <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    <span class="number">1.5</span>, <span class="number">10.0</span>, <span class="number">1.5</span>, -<span class="number">1.5</span>, <span class="number">10.0</span>, <span class="number">1.5</span>, -<span class="number">1.5</span>,  <span class="number">0.0</span>, <span class="number">1.5</span>,  <span class="number">1.5</span>,  <span class="number">0.0</span>, <span class="number">1.5</span>, <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">    <span class="number">1.5</span>, <span class="number">10.0</span>, <span class="number">1.5</span>,  <span class="number">1.5</span>,  <span class="number">0.0</span>, <span class="number">1.5</span>,  <span class="number">1.5</span>,  <span class="number">0.0</span>,-<span class="number">1.5</span>,  <span class="number">1.5</span>, <span class="number">10.0</span>,-<span class="number">1.5</span>, <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">    <span class="number">1.5</span>, <span class="number">10.0</span>, <span class="number">1.5</span>,  <span class="number">1.5</span>, <span class="number">10.0</span>,-<span class="number">1.5</span>, -<span class="number">1.5</span>, <span class="number">10.0</span>,-<span class="number">1.5</span>, -<span class="number">1.5</span>, <span class="number">10.0</span>, <span class="number">1.5</span>, <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">   -<span class="number">1.5</span>, <span class="number">10.0</span>, <span class="number">1.5</span>, -<span class="number">1.5</span>, <span class="number">10.0</span>,-<span class="number">1.5</span>, -<span class="number">1.5</span>,  <span class="number">0.0</span>,-<span class="number">1.5</span>, -<span class="number">1.5</span>,  <span class="number">0.0</span>, <span class="number">1.5</span>, <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">   -<span class="number">1.5</span>,  <span class="number">0.0</span>,-<span class="number">1.5</span>,  <span class="number">1.5</span>,  <span class="number">0.0</span>,-<span class="number">1.5</span>,  <span class="number">1.5</span>,  <span class="number">0.0</span>, <span class="number">1.5</span>, -<span class="number">1.5</span>,  <span class="number">0.0</span>, <span class="number">1.5</span>, <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">    <span class="number">1.5</span>,  <span class="number">0.0</span>,-<span class="number">1.5</span>, -<span class="number">1.5</span>,  <span class="number">0.0</span>,-<span class="number">1.5</span>, -<span class="number">1.5</span>, <span class="number">10.0</span>,-<span class="number">1.5</span>,  <span class="number">1.5</span>, <span class="number">10.0</span>,-<span class="number">1.5</span>  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Normal</span></span><br><span class="line">  <span class="keyword">var</span> normals = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">    <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">    <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">   -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">    <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">    <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Indices of the vertices</span></span><br><span class="line">  <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([</span><br><span class="line">     <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">     <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">     <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>,   <span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,    <span class="comment">// up</span></span><br><span class="line">    <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,  <span class="number">12</span>,<span class="number">14</span>,<span class="number">15</span>,    <span class="comment">// left</span></span><br><span class="line">    <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,  <span class="number">16</span>,<span class="number">18</span>,<span class="number">19</span>,    <span class="comment">// down</span></span><br><span class="line">    <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,  <span class="number">20</span>,<span class="number">22</span>,<span class="number">23</span>     <span class="comment">// back</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Write the vertex property to buffers (coordinates and normals)</span></span><br><span class="line">  <span class="keyword">if</span> (!initArrayBuffer(gl, <span class="string">&#x27;a_Position&#x27;</span>, vertices, gl.FLOAT, <span class="number">3</span>)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (!initArrayBuffer(gl, <span class="string">&#x27;a_Normal&#x27;</span>, normals, gl.FLOAT, <span class="number">3</span>)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Unbind the buffer object</span></span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Write the indices to the buffer object</span></span><br><span class="line">  <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line">  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initArrayBuffer</span>(<span class="params">gl, attribute, data, type, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create a buffer object</span></span><br><span class="line">  <span class="keyword">var</span> buffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Write date into the buffer object</span></span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Assign the buffer object to the attribute variable</span></span><br><span class="line">  <span class="keyword">var</span> a_attribute = gl.getAttribLocation(gl.program, attribute);</span><br><span class="line"></span><br><span class="line">  gl.vertexAttribPointer(a_attribute, num, type, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// Enable the assignment of the buffer object to the attribute variable</span></span><br><span class="line">  gl.enableVertexAttribArray(a_attribute);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 坐标变换矩阵</span></span><br><span class="line"><span class="keyword">var</span> g_modelMatrix = <span class="keyword">new</span> Matrix4(), g_mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Clear color and depth buffer</span></span><br><span class="line">  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Arm1</span></span><br><span class="line">  <span class="keyword">var</span> arm1Length = <span class="number">10.0</span>; <span class="comment">// Length of arm1</span></span><br><span class="line">  g_modelMatrix.setTranslate(<span class="number">0.0</span>, -<span class="number">12.0</span>, <span class="number">0.0</span>);</span><br><span class="line">  g_modelMatrix.rotate(g_arm1Angle, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);    <span class="comment">// 绕y轴转</span></span><br><span class="line">  drawBox(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Arm2</span></span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, arm1Length, <span class="number">0.0</span>); 　　　<span class="comment">// 移至joint1处， 这里用到translate，是在之前的基础上向上平移一个arm1的高度</span></span><br><span class="line">  g_modelMatrix.rotate(g_joint1Angle, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);  <span class="comment">// 绕z轴转</span></span><br><span class="line">  g_modelMatrix.scale(<span class="number">1.3</span>, <span class="number">1.0</span>, <span class="number">1.3</span>); <span class="comment">// 拉伸，让立方体粗一点</span></span><br><span class="line">  drawBox(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_normalMatrix = <span class="keyword">new</span> Matrix4(); <span class="comment">// 法线的旋转矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制立方体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBox</span>(<span class="params">gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 计算视图矩阵并传给u_MvpMatrix</span></span><br><span class="line">  g_mvpMatrix.set(viewProjMatrix);</span><br><span class="line">  g_mvpMatrix.multiply(g_modelMatrix);</span><br><span class="line">  gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, g_mvpMatrix.elements);</span><br><span class="line">  <span class="comment">// 计算法线变换矩阵并传给u_NormalMatrix</span></span><br><span class="line">  g_normalMatrix.setInverseOf(g_modelMatrix);</span><br><span class="line">  g_normalMatrix.transpose();</span><br><span class="line">  gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, g_normalMatrix.elements);</span><br><span class="line">  <span class="comment">// Draw</span></span><br><span class="line">  gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Single joint model<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">    Please use a browser that supports &quot;canvas&quot;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="symbol">&amp;larr;</span><span class="symbol">&amp;rarr;</span>: arm1 rotation(y-axis), <span class="symbol">&amp;uarr;</span><span class="symbol">&amp;darr;</span>: joint1 rotation(z-axis)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-matrix.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;JointModel.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><blockquote>
<p>使用左右方向键控制 arm1（下半部分）水平转动，使用上下方方向键控制 arm2（上半部分） 绕 joint1 关节垂直转动</p>
</blockquote>
<script src="\lib\webgl-utils.js"></script>
<script src="\lib\webgl-debug.js"></script>
<script src="\lib\cuon-utils.js"></script>
<script src="\lib\cuon-matrix.js"></script>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
  <title>LookAtTriangles</title>
</head>
<body onload="main()">
<div style="margin:0 auto">
    <canvas id="webgl" width="300" height="300" >
      Please use the browser supporting "canvas".
    </canvas>
</div>
<script type='text/javascript'>
// Vertex shader program
var VSHADER_SOURCE =
  'attribute vec4 a_Position;\n' +
  'attribute vec4 a_Normal;\n' +
  'uniform mat4 u_MvpMatrix;\n' +
  'uniform mat4 u_NormalMatrix;\n' +
  'varying vec4 v_Color;\n' +
  'void main() {\n' +
  '  gl_Position = u_MvpMatrix * a_Position;\n' +
  // Shading calculation to make the arm look three-dimensional
  '  vec3 lightDirection = normalize(vec3(0.0, 0.5, 0.7));\n' + // Light direction
  '  vec4 color = vec4(1.0, 0.4, 0.0, 1.0);\n' +
  '  vec3 normal = normalize((u_NormalMatrix * a_Normal).xyz);\n' +
  '  float nDotL = max(dot(normal, lightDirection), 0.0);\n' +
  '  v_Color = vec4(color.rgb * nDotL + vec3(0.1), color.a);\n' +
  '}\n';
// Fragment shader program
var FSHADER_SOURCE =
  '#ifdef GL_ES\n' +
  'precision mediump float;\n' +
  '#endif\n' +
  'varying vec4 v_Color;\n' +
  'void main() {\n' +
  '  gl_FragColor = v_Color;\n' +
  '}\n';
function main() {
  // Retrieve <canvas> element
  var canvas = document.getElementById('webgl');
  // Get the rendering context for WebGL
  var gl = getWebGLContext(canvas);
  if (!gl) {
    console.log('Failed to get the rendering context for WebGL');
    return;
  }
  // Initialize shaders
  if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
    console.log('Failed to intialize shaders.');
    return;
  }
  // 设置顶点信息
  var n = initVertexBuffers(gl);
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }
  // Set the clear color and enable the depth test
  //gl.clearColor(0.0, 0.0, 0.0, 1.0);
  gl.enable(gl.DEPTH_TEST);
  // Get the storage locations of uniform variables
  var u_MvpMatrix = gl.getUniformLocation(gl.program, 'u_MvpMatrix');
  var u_NormalMatrix = gl.getUniformLocation(gl.program, 'u_NormalMatrix');
  if (!u_MvpMatrix || !u_NormalMatrix) {
    console.log('Failed to get the storage location');
    return;
  }
  // 计算视图投影矩阵
  var viewProjMatrix = new Matrix4();
  viewProjMatrix.setPerspective(50.0, canvas.width / canvas.height, 1.0, 100.0);
  viewProjMatrix.lookAt(20.0, 10.0, 30.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
  // 注册键盘事件响应函数
  document.onkeydown = function(ev){ keydown(ev, gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); };
  draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);  // Draw the robot arm
}
var ANGLE_STEP = 3.0;    // 每次按键转动的角度
var g_arm1Angle = -90.0; // arm1的当前角度
var g_joint1Angle = 0.0; // joint1d的当前角度(即arm2的角度)
function keydown(ev, gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix) {
  switch (ev.keyCode) {
    case 38: // Up arrow key -> the positive rotation of joint1 around the z-axis
      if (g_joint1Angle < 135.0) g_joint1Angle += ANGLE_STEP;
      break;
    case 40: // Down arrow key -> the negative rotation of joint1 around the z-axis
      if (g_joint1Angle > -135.0) g_joint1Angle -= ANGLE_STEP;
      break;
    case 39: // Right arrow key -> the positive rotation of arm1 around the y-axis
      g_arm1Angle = (g_arm1Angle + ANGLE_STEP) % 360;
      break;
    case 37: // Left arrow key -> the negative rotation of arm1 around the y-axis
      g_arm1Angle = (g_arm1Angle - ANGLE_STEP) % 360;
      break;
    default: return; // Skip drawing at no effective action
  }
  // Draw the robot arm
  draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);
}
function initVertexBuffers(gl) {
  // Vertex coordinates（a cuboid 3.0 in width, 10.0 in height, and 3.0 in length with its origin at the center of its bottom)
  var vertices = new Float32Array([
    1.5, 10.0, 1.5, -1.5, 10.0, 1.5, -1.5,  0.0, 1.5,  1.5,  0.0, 1.5, // v0-v1-v2-v3 front
    1.5, 10.0, 1.5,  1.5,  0.0, 1.5,  1.5,  0.0,-1.5,  1.5, 10.0,-1.5, // v0-v3-v4-v5 right
    1.5, 10.0, 1.5,  1.5, 10.0,-1.5, -1.5, 10.0,-1.5, -1.5, 10.0, 1.5, // v0-v5-v6-v1 up
   -1.5, 10.0, 1.5, -1.5, 10.0,-1.5, -1.5,  0.0,-1.5, -1.5,  0.0, 1.5, // v1-v6-v7-v2 left
   -1.5,  0.0,-1.5,  1.5,  0.0,-1.5,  1.5,  0.0, 1.5, -1.5,  0.0, 1.5, // v7-v4-v3-v2 down
    1.5,  0.0,-1.5, -1.5,  0.0,-1.5, -1.5, 10.0,-1.5,  1.5, 10.0,-1.5  // v4-v7-v6-v5 back
  ]);
  // Normal
  var normals = new Float32Array([
    0.0, 0.0, 1.0,  0.0, 0.0, 1.0,  0.0, 0.0, 1.0,  0.0, 0.0, 1.0, // v0-v1-v2-v3 front
    1.0, 0.0, 0.0,  1.0, 0.0, 0.0,  1.0, 0.0, 0.0,  1.0, 0.0, 0.0, // v0-v3-v4-v5 right
    0.0, 1.0, 0.0,  0.0, 1.0, 0.0,  0.0, 1.0, 0.0,  0.0, 1.0, 0.0, // v0-v5-v6-v1 up
   -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, // v1-v6-v7-v2 left
    0.0,-1.0, 0.0,  0.0,-1.0, 0.0,  0.0,-1.0, 0.0,  0.0,-1.0, 0.0, // v7-v4-v3-v2 down
    0.0, 0.0,-1.0,  0.0, 0.0,-1.0,  0.0, 0.0,-1.0,  0.0, 0.0,-1.0  // v4-v7-v6-v5 back
  ]);
  // Indices of the vertices
  var indices = new Uint8Array([
     0, 1, 2,   0, 2, 3,    // front
     4, 5, 6,   4, 6, 7,    // right
     8, 9,10,   8,10,11,    // up
    12,13,14,  12,14,15,    // left
    16,17,18,  16,18,19,    // down
    20,21,22,  20,22,23     // back
  ]);
  // Write the vertex property to buffers (coordinates and normals)
  if (!initArrayBuffer(gl, 'a_Position', vertices, gl.FLOAT, 3)) return -1;
  if (!initArrayBuffer(gl, 'a_Normal', normals, gl.FLOAT, 3)) return -1;
  // Unbind the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, null);
  // Write the indices to the buffer object
  var indexBuffer = gl.createBuffer();
  if (!indexBuffer) {
    console.log('Failed to create the buffer object');
    return -1;
  }
  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
  return indices.length;
}
function initArrayBuffer(gl, attribute, data, type, num) {
  // Create a buffer object
  var buffer = gl.createBuffer();
  if (!buffer) {
    console.log('Failed to create the buffer object');
    return false;
  }
  // Write date into the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
  // Assign the buffer object to the attribute variable
  var a_attribute = gl.getAttribLocation(gl.program, attribute);
  if (a_attribute < 0) {
    console.log('Failed to get the storage location of ' + attribute);
    return false;
  }
  gl.vertexAttribPointer(a_attribute, num, type, false, 0, 0);
  // Enable the assignment of the buffer object to the attribute variable
  gl.enableVertexAttribArray(a_attribute);
  return true;
}
// 坐标变换矩阵
var g_modelMatrix = new Matrix4(), g_mvpMatrix = new Matrix4();
function draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix) {
  // Clear color and depth buffer
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  // Arm1
  var arm1Length = 10.0; // Length of arm1
  g_modelMatrix.setTranslate(0.0, -12.0, 0.0);
  g_modelMatrix.rotate(g_arm1Angle, 0.0, 1.0, 0.0);    // Rotate around the y-axis
  drawBox(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); // Draw
  // Arm2
  g_modelMatrix.translate(0.0, arm1Length, 0.0); 　　　// Move to joint1 这里用到translate，是在之前的基础上向上平移一个arm1的高度
  g_modelMatrix.rotate(g_joint1Angle, 0.0, 0.0, 1.0);  // Rotate around the z-axis
  g_modelMatrix.scale(1.3, 1.0, 1.3); // 让立方体粗一点
  drawBox(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); // Draw
}
var g_normalMatrix = new Matrix4(); // Coordinate transformation matrix for normals
// 绘制立方体
function drawBox(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix) {
  // Calculate the model view project matrix and pass it to u_MvpMatrix
  g_mvpMatrix.set(viewProjMatrix);
  g_mvpMatrix.multiply(g_modelMatrix);
  gl.uniformMatrix4fv(u_MvpMatrix, false, g_mvpMatrix.elements);
  // Calculate the normal transformation matrix and pass it to u_NormalMatrix
  g_normalMatrix.setInverseOf(g_modelMatrix);
  g_normalMatrix.transpose();
  gl.uniformMatrix4fv(u_NormalMatrix, false, g_normalMatrix.elements);
  // Draw
  gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, 0);
}
    </script>
    </body>
    </html>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构与算法】队列（JavaScript版详解）</title>
    <url>/Algorithm-Queue/</url>
    <content><![CDATA[<p>要点：基本队列、优先队列、双端队列、循环队列、对应练习</p>
<p>先知：队列（Queue）是一种运算受限的线性表，特点：<u>先进先出</u>。(FIFO：First In First Out)</p>
<span id="more"></span>

<h2 id="一、认识队列"><a href="#一、认识队列" class="headerlink" title="一、认识队列"></a>一、认识队列</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>队列（Queue）是一种运算受限的线性表，特点：先进先出。(FIFO：First In First Out)</p>
<p><strong>受限之处：</strong></p>
<ul>
<li>只允许在表的前端（front）进行删除操作。</li>
<li>只允许在表的后端（rear）进行插入操作。</li>
</ul>
<p>生活中类似队列结构的场景：</p>
<ul>
<li>排队，比如在电影院，商场，甚至是厕所排队。</li>
<li>优先排队的人，优先处理。 (买票、结账、WC)。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.5mmiw2kdwbs0.png" alt="image"></p>
<h3 id="1-2-队列图解"><a href="#1-2-队列图解" class="headerlink" title="1.2 队列图解"></a>1.2 队列图解</h3><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.mq92bw3am0g.png" alt="image"></p>
<h3 id="1-3-队列在程序中的应用"><a href="#1-3-队列在程序中的应用" class="headerlink" title="1.3 队列在程序中的应用"></a>1.3 队列在程序中的应用</h3><p>打印队列：计算机打印多个文件的时候，需要排队打印。</p>
<p>线程队列：当开启多线程时，当新开启的线程所需的资源不足时就先放入线程队列，等待 CPU 处理。</p>
<h2 id="二、队列的实现"><a href="#二、队列的实现" class="headerlink" title="二、队列的实现"></a>二、队列的实现</h2><p>队列的实现和栈一样，有两种方案：</p>
<ul>
<li>基于数组实现。</li>
<li>基于链表实现。</li>
</ul>
<h3 id="2-1-队列常见的操作"><a href="#2-1-队列常见的操作" class="headerlink" title="2.1 队列常见的操作"></a>2.1 队列常见的操作</h3><p><code>enqueue(element)</code> 向队列尾部添加一个（或多个）新的项。</p>
<p><code>dequeue()</code> 移除队列的第一（即排在队列最前面的）项，并返回被移除的元素。</p>
<p><code>front()</code> 返回队列中的第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动（不移除元素，只返回元素信息与 Map 类的 peek 方法非常类似）。</p>
<p><code>isEmpty()</code> 如果队列中不包含任何元素，返回 true，否则返回 false。</p>
<p><code>size()</code> 返回队列包含的元素个数，与数组的 length 属性类似。</p>
<p><code>toString()</code> 将队列中的内容，转成字符串形式。</p>
<h3 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h3><h4 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue(item) 入队，将元素加入到队列中</span></span><br><span class="line">  <span class="function"><span class="title">enqueue</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items.push(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dequeue() 出队，从队列中删除队头元素，返回删除的那个元素</span></span><br><span class="line">  <span class="function"><span class="title">dequeue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.shift();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// front() 查看队列的队头元素</span></span><br><span class="line">  <span class="function"><span class="title">front</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 查看队列是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 查看队列中元素的个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 将队列中的元素以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      result += item + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Node = <span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.ele = ele;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>,</span><br><span class="line">        front, <span class="comment">//队首指针</span></span><br><span class="line">        rear; <span class="comment">//队尾指针</span></span><br><span class="line">    <span class="built_in">this</span>.push = <span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(ele),</span><br><span class="line">            temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">            front = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp = rear;</span><br><span class="line">            temp.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        rear = node;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> temp = front;</span><br><span class="line">        front = front.next</span><br><span class="line">        length--;</span><br><span class="line">        temp.next = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.getFront = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front;</span><br><span class="line">        <span class="comment">// 有没有什么思路只获取队列的头结点,而不是获取整个队列</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.getRear = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> string = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            temp = front;</span><br><span class="line">        <span class="keyword">while</span> (temp) &#123;</span><br><span class="line">            string += temp.ele + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.clear = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        front = <span class="literal">null</span>;</span><br><span class="line">        rear = <span class="literal">null</span>;</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myQueue = <span class="keyword">new</span> LinkedQueue();</span><br><span class="line"></span><br><span class="line">myQueue.push(<span class="number">1</span>)</span><br><span class="line">myQueue.push(<span class="number">2</span>)</span><br><span class="line">myQueue.push(<span class="number">3</span>)</span><br><span class="line">myQueue.push(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(myQueue.toString()) <span class="comment">// 1 2 3 4 </span></span><br><span class="line"><span class="built_in">console</span>.log(myQueue.pop()) <span class="comment">// Node &#123; ele: 1, next: null &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(myQueue.toString()) <span class="comment">// 2 3 4</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-测试代码"><a href="#2-3-测试代码" class="headerlink" title="2.3 测试代码"></a>2.3 测试代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// enqueue() 测试</span></span><br><span class="line">queue.enqueue(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">queue.enqueue(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">queue.enqueue(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">queue.enqueue(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(queue.items); <span class="comment">//--&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dequeue() 测试</span></span><br><span class="line">queue.dequeue();</span><br><span class="line">queue.dequeue();</span><br><span class="line"><span class="built_in">console</span>.log(queue.items); <span class="comment">//--&gt; [&quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// front() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.front()); <span class="comment">//--&gt; c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isEmpty() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty()); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.size()); <span class="comment">//--&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.toString()); <span class="comment">//--&gt; c d</span></span><br></pre></td></tr></table></figure>

<h2 id="三、优先队列"><a href="#三、优先队列" class="headerlink" title="三、优先队列"></a>三、优先队列</h2><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><p>生活中类似<strong>优先队列</strong>的场景：</p>
<ul>
<li>优先排队的人，优先处理。 (买票、结账、WC)。</li>
<li>排队中，有紧急情况（特殊情况）的人可优先处理。</li>
</ul>
<p>所谓优先队列，顾名思义，就是说插入到队列中的元素可以根据优先级设置先后顺序。优先级越高位置越靠前，优先级越低位置越靠后。假设优先级用数字来表示，如果数字越小表示的优先级越高，形成的队列就称之为最小优先队列，反之则称之为最大优先队列。</p>
<h3 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h3><p>优先级队列主要考虑的问题：</p>
<ul>
<li>每个元素不再只是一个数据，还包含优先级。</li>
<li>在添加元素过程中，根据优先级放入到正确位置。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 优先队列内部的元素类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueElement</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">element, priority</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.element = element;</span><br><span class="line">    <span class="built_in">this</span>.priority = priority;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先队列类（继承 Queue 类）</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue(element, priority) 入队，将元素按优先级加入到队列中</span></span><br><span class="line">  <span class="comment">// 重写 enqueue()</span></span><br><span class="line">  <span class="function"><span class="title">enqueue</span>(<span class="params">element, priority</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据传入的元素，创建 QueueElement 对象</span></span><br><span class="line">    <span class="keyword">const</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="comment">// 如果为空，不用判断优先级，直接添加</span></span><br><span class="line">      <span class="built_in">this</span>.items.push(queueElement);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 定义一个变量记录是否成功添加了新元素</span></span><br><span class="line">      <span class="keyword">let</span> added = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.items.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 让新插入的元素进行优先级比较，priority 值越小，优先级越大</span></span><br><span class="line">        <span class="keyword">if</span> (queueElement.priority &lt; <span class="built_in">this</span>.items[i].priority) &#123;</span><br><span class="line">          <span class="comment">// 在指定的位置插入元素</span></span><br><span class="line">          <span class="built_in">this</span>.items.splice(i, <span class="number">0</span>, queueElement);</span><br><span class="line">          added = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果遍历完所有元素，优先级都大于新插入的元素，就将新插入的元素插入到最后</span></span><br><span class="line">      <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">        <span class="built_in">this</span>.items.push(queueElement);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dequeue() 出队，从队列中删除前端元素，返回删除的元素</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 dequeue()</span></span><br><span class="line">  <span class="function"><span class="title">dequeue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.dequeue();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// front() 查看队列的前端元素</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 front()</span></span><br><span class="line">  <span class="function"><span class="title">front</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.front();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 查看队列是否为空</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 isEmpty()</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 查看队列中元素的个数</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 size()</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 将队列中元素以字符串形式返回</span></span><br><span class="line">  <span class="comment">// 重写 toString()</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      result += item.element + <span class="string">&quot;-&quot;</span> + item.priority + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，唯一有区别的只有<code>enqueue</code>方法。我们规定所有添加到优先队列的元素都必须满足{element, priority}这种JSON格式，以保证队列中的每一个元素都有一个priority属性来表示优先级。如果要添加的元素的优先级和队列中已有元素的优先级相同，仍然遵循队列的先进先出原则。如果队列中所有元素的优先级比要添加的元素的优先级都高，则将元素添加到队列的末尾。</p>
<h3 id="3-3-测试代码"><a href="#3-3-测试代码" class="headerlink" title="3.3 测试代码"></a>3.3 测试代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队 enqueue() 测试</span></span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;A&quot;</span>, <span class="number">10</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;B&quot;</span>, <span class="number">15</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;C&quot;</span>, <span class="number">11</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;D&quot;</span>, <span class="number">20</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;E&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.items);</span><br><span class="line"><span class="comment">//--&gt; output:</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;A&quot;, priority: 10&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;C&quot;, priority: 11&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;B&quot;, priority: 15&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;E&quot;, priority: 18&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;D&quot;, priority: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队 dequeue() 测试</span></span><br><span class="line">priorityQueue.dequeue();</span><br><span class="line">priorityQueue.dequeue();</span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.items);</span><br><span class="line"><span class="comment">//--&gt; output:</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;B&quot;, priority: 15&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;E&quot;, priority: 18&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;D&quot;, priority: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isEmpty() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.isEmpty()); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.size()); <span class="comment">//--&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.toString()); <span class="comment">//--&gt; B-15 E-18 D-20</span></span><br></pre></td></tr></table></figure>



<h2 id="四、双端队列"><a href="#四、双端队列" class="headerlink" title="四、双端队列"></a>四、双端队列</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><p>允许从前端(front)和后端(rear)添加元素, 遵循的原则先进先出或后进先出.</p>
<p>双端队列可以理解为就是栈(后进先出)和队列(先进先出)的一种结合体. 既然是结合那么相应的操作也支持队列，栈的操作。</p>
<h3 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span></span><br><span class="line">    <span class="built_in">this</span>.lowestCount = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">addFront</span>(<span class="params">ele</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="built_in">this</span>.items[<span class="built_in">this</span>.count] = ele</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.lowestCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.lowestCount -= <span class="number">1</span></span><br><span class="line">      <span class="built_in">this</span>.items[<span class="built_in">this</span>.lowestCount] = ele</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">this</span>.count; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">this</span>.items[i] = <span class="built_in">this</span>.items[i - <span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.items[<span class="number">0</span>] = ele</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="built_in">this</span>.count++</span><br><span class="line">      <span class="keyword">return</span> ele</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">removeFront</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> delEle = <span class="built_in">this</span>.items[<span class="built_in">this</span>.lowestCount]</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.lowestCount]</span><br><span class="line">    <span class="built_in">this</span>.lowestCount++</span><br><span class="line">    <span class="keyword">return</span> delEle</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">addBack</span>(<span class="params">ele</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items[<span class="built_in">this</span>.count] = ele</span><br><span class="line">    <span class="built_in">this</span>.count++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">removeBack</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> delEle = <span class="built_in">this</span>.items[<span class="built_in">this</span>.count - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.count - <span class="number">1</span>]</span><br><span class="line">    <span class="built_in">this</span>.count--</span><br><span class="line">    <span class="keyword">return</span> delEle</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">peekFront</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.lowestCount]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">peekBack</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.count - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count - <span class="built_in">this</span>.lowestCount</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.size() === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span></span><br><span class="line">    <span class="built_in">this</span>.lowestCount = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.items[<span class="built_in">this</span>.lowestCount]&#125;</span>`</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">this</span>.lowestCount + <span class="number">1</span>; i &lt; <span class="built_in">this</span>.count; i++)&#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>, <span class="subst">$&#123;<span class="built_in">this</span>.items[i]&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="五、循环队列"><a href="#五、循环队列" class="headerlink" title="五、循环队列"></a>五、循环队列</h2><h3 id="5-1-定义"><a href="#5-1-定义" class="headerlink" title="5.1 定义"></a>5.1 定义</h3><p>设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。 循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。 你的实现应该支持如下操作：</p>
<ul>
<li>MyCircularQueue(k): 构造器，设置队列长度为 k 。</li>
<li>Front: 从队首获取元素。如果队列为空，返回 -1 。</li>
<li>Rear: 获取队尾元素。如果队列为空，返回 -1 。</li>
<li>enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。</li>
<li>deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。</li>
<li>isEmpty(): 检查循环队列是否为空。</li>
<li>isFull(): 检查循环队列是否已满。</li>
</ul>
<blockquote>
<p>想要实现上面的功能，其实主要就是判断循环队列是否为空<code>isEmpty</code>，是否已满<code>isFull</code>，这里我们使用两个指针来表示队首（<code>head</code>）和队尾的指针（<code>tail</code>）。假设初始化的时候两个指针的值都是<code>-1</code>。那么显然是否为空的判断条件就是两个指针都是<code>-1</code>的时候。</p>
</blockquote>
<h3 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a>5.2 代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize your data structure here. Set the size of the queue to be k.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MyCircularQueue = <span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.size = k</span><br><span class="line">    <span class="built_in">this</span>.head = -<span class="number">1</span></span><br><span class="line">    <span class="built_in">this</span>.tail = -<span class="number">1</span></span><br><span class="line">    <span class="built_in">this</span>.data = []</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Insert an element into the circular queue. Return true if the operation is successful. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">value</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularQueue.prototype.enQueue = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isFull()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.tail = (<span class="built_in">this</span>.tail + <span class="number">1</span>)%<span class="built_in">this</span>.size</span><br><span class="line">    <span class="built_in">this</span>.data[<span class="built_in">this</span>.tail] = value</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Delete an element from the circular queue. Return true if the operation is successful.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularQueue.prototype.deQueue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.tail === <span class="built_in">this</span>.head) &#123;</span><br><span class="line">            <span class="built_in">this</span>.tail = -<span class="number">1</span></span><br><span class="line">            <span class="built_in">this</span>.head = -<span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.head = (<span class="built_in">this</span>.head + <span class="number">1</span>)%<span class="built_in">this</span>.size</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the front item from the queue.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularQueue.prototype.Front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.head === -<span class="number">1</span>? -<span class="number">1</span> : <span class="built_in">this</span>.data[<span class="built_in">this</span>.head]</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the last item from the queue.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularQueue.prototype.Rear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.tail === -<span class="number">1</span> ? -<span class="number">1</span> : <span class="built_in">this</span>.data[<span class="built_in">this</span>.tail]</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks whether the circular queue is empty or not.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularQueue.prototype.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.tail === -<span class="number">1</span> &amp;&amp; <span class="built_in">this</span>.head === -<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks whether the circular queue is full or not.</span></span><br><span class="line"><span class="comment"> * 当队列满的时候，则为指针的下一个地址应该等于头指针的位置：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyCircularQueue.prototype.isFull = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.tail + <span class="number">1</span>)%<span class="built_in">this</span>.size === <span class="built_in">this</span>.head</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">MyCircularQueue.createNew = <span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyCircularQueue(k)</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Your MyCircularQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = Object.create(MyCircularQueue).createNew(k)</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.enQueue(value)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.deQueue()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.Front()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.Rear()</span></span><br><span class="line"><span class="comment"> * var param_5 = obj.isEmpty()</span></span><br><span class="line"><span class="comment"> * var param_6 = obj.isFull()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="六、队列的应用"><a href="#六、队列的应用" class="headerlink" title="六、队列的应用"></a>六、队列的应用</h2><h3 id="6-1-击鼓传花-循环队列"><a href="#6-1-击鼓传花-循环队列" class="headerlink" title="6.1 击鼓传花-循环队列"></a>6.1 击鼓传花-循环队列</h3><p>使用队列实现小游戏：击鼓传花。</p>
<p>分析：现实例子就是击鼓传花(Hot Potato)，在游戏中，孩子们围着圆圈，把花尽快地传递给旁边的人。某一时刻传花停止，这个时候花在谁手里，谁就退出圆圈结束游戏。重复这个过程，直到只剩一个孩子(胜利)。</p>
<p>传入一组数据集合和设定的数字 number，循环遍历数组内元素，遍历到的元素为指定数字 number 时将该元素删除，直至数组剩下一个元素。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用队列结构的特点实现击鼓传花游戏求解方法的封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passGame</span>(<span class="params">nameList, number</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1、new 一个 Queue 对象</span></span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、将 nameList 里面的每一个元素入队</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">of</span> nameList) &#123;</span><br><span class="line">    queue.enqueue(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、开始数数</span></span><br><span class="line">  <span class="comment">// 队列中只剩下 1 个元素时就停止数数</span></span><br><span class="line">  <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 不是 number 时，重新加入到队尾</span></span><br><span class="line">    <span class="comment">// 是 number 时，将其删除</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; number - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// number 数字之前的人重新放入到队尾（即把队头删除的元素，重新加入到队列中）</span></span><br><span class="line">      queue.enqueue(queue.dequeue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// number 对应这个人，直接从队列中删除</span></span><br><span class="line">    <span class="comment">// 由于队列没有像数组一样的下标值不能直接取到某一元素，</span></span><br><span class="line">    <span class="comment">// 所以采用，把 number 前面的 number - 1 个元素先删除后添加到队列末尾，</span></span><br><span class="line">    <span class="comment">// 这样第 number 个元素就排到了队列的最前面，可以直接使用 dequeue 方法进行删除</span></span><br><span class="line">    queue.dequeue();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、获取最后剩下的那个人</span></span><br><span class="line">  <span class="keyword">const</span> endName = queue.front();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5、返回这个人在原数组中对应的索引</span></span><br><span class="line">  <span class="keyword">return</span> nameList.indexOf(endName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// passGame() 测试</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;lily&quot;</span>, <span class="string">&quot;lucy&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;tony&quot;</span>, <span class="string">&quot;jack&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> targetIndex = passGame(names, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;击鼓传花&quot;</span>, names[targetIndex]); <span class="comment">//--&gt; lily</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-基数排序"><a href="#6-2-基数排序" class="headerlink" title="6.2 基数排序"></a>6.2 基数排序</h3><p>使用队列实现基数排序</p>
<p>队列不仅用于执行现实生活中关于队列相关的操作，还可以用于对数据进行排序。计算机刚刚出现的时候，程序是通过穿孔输入主机的，每一张卡包含一条程序语句。这些穿孔卡装在一个盒子里面，经过一个机械装置进行排序。我们可以用一组队列来模拟这个过程。这种<u>排序技术</u>叫做<strong>基数排序</strong>。</p>
<p>对于0~99的数字，基数排序将数据集扫描两次。第一次按照个位上的数字进行排序，第二次按照十位上的数字进行排序。每个数组根据对应位上的数字被分配在不同的盒子里。</p>
<p>举例如下：假如有数字 91，46，85，15，92，35，31，22</p>
<p>经过基数排序<u>第一次扫描之后按照个位数的大小排序</u>，数字被分配大如下的盒子中：</p>
<blockquote>
<p>第0个盒子：<br>第1个盒子：91，31<br>第2个盒子：92，22<br>第3个盒子：<br>第4个盒子：<br>第5个盒子：85，15，35<br>第6个盒子：46<br>第7个盒子：<br>第8个盒子：<br>第9个盒子：</p>
</blockquote>
<p>根据盒子的顺序，对数字经行第一次排序的结果如下：</p>
<blockquote>
<p>91，31，92，22，85，15，35，46</p>
</blockquote>
<p>然后根据十位上的数值再将上次排序结果分配到不同的盒子里</p>
<blockquote>
<p>第0个盒子：<br>第1个盒子：15<br>第2个盒子：22<br>第3个盒子：31,35<br>第4个盒子：46<br>第5个盒子：<br>第6个盒子：<br>第7个盒子：<br>第8个盒子：85<br>第9个盒子：92,92</p>
</blockquote>
<p>最后将盒子里的数字取出，组成一个新的列表，该列表即为排好顺序的数字：</p>
<blockquote>
<p>15，22，31，35，46，85，91，92</p>
</blockquote>
<p>使用队列代表盒子，可以实现这个算法，我们需要9个队列，每个对应一个数字。将所有队列保存在一个数组中，使用取余和出发操作决定各位和十位。算法的剩余部分将数字加入对应的队列，根据个位数值重新排序，然后再根据十位数值经行排序，结果即为排好顺序的数字。</p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*--------------Queue类的定义和测试代码----------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.dataStore = [];</span><br><span class="line">        <span class="built_in">this</span>.enqueue = enqueue;</span><br><span class="line">        <span class="built_in">this</span>.dequeue = dequeue;</span><br><span class="line">        <span class="built_in">this</span>.front = front;</span><br><span class="line">        <span class="built_in">this</span>.back = back;</span><br><span class="line">        <span class="built_in">this</span>.toString = toString;</span><br><span class="line">        <span class="built_in">this</span>.empty = empty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队，就是在数组的末尾添加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enqueue</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.dataStore.push(element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队，就是删除数组的第一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dequeue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.dataStore.shift();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出数组的第一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">front</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.dataStore[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出数组的最后一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">back</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.dataStore[<span class="built_in">this</span>.dataStore.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> retStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="built_in">this</span>.dataStore.length; ++i) &#123;</span><br><span class="line">        retStr += <span class="built_in">this</span>.dataStore[i] + <span class="string">&quot; &quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断数组是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">empty</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.dataStore.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回数组中元素的个数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.dataStore.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------------基数排序-----------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distribute</span>(<span class="params">nums,queues,n,digit</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(digit == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//各位数字入队</span></span><br><span class="line">            queues[nums[i]%<span class="number">10</span>].enqueue(nums[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//十位数字入队</span></span><br><span class="line">            queues[<span class="built_in">Math</span>.floor(nums[i] / <span class="number">10</span>)].enqueue(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//收集队列中的数字放在数字nums中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">collect</span>(<span class="params">queues,nums</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> digit=<span class="number">0</span>; digit&lt;<span class="number">10</span>; ++digit) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!queues[digit].empty())&#123;</span><br><span class="line">            nums[i++] = queues[digit].dequeue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispArray</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; ++i) &#123;</span><br><span class="line">        <span class="built_in">document</span>.write(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化9个队列</span></span><br><span class="line"><span class="keyword">var</span> queues = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    queues[i] = <span class="keyword">new</span> Queue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化10个二位整数</span></span><br><span class="line"><span class="keyword">var</span> nums = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; ++i) &#123;</span><br><span class="line">    nums[i] = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;排序之前&#x27;</span>);<span class="built_in">document</span>.write(<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">dispArray(nums);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">//按照个位数字入相应的队列</span></span><br><span class="line">distribute(nums, queues, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//收集队列中的数字放在数组nums中</span></span><br><span class="line">collect(queues, nums);</span><br><span class="line"><span class="comment">//按照十位数字如相应的队列</span></span><br><span class="line">distribute(nums, queues, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//手机队列中的数字放在nums中</span></span><br><span class="line">collect(queues, nums);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;排序之后&quot;</span>);<span class="built_in">document</span>.write(<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">dispArray(nums);</span><br></pre></td></tr></table></figure>



<h3 id="6-3-银行排队"><a href="#6-3-银行排队" class="headerlink" title="6.3 银行排队"></a>6.3 银行排队</h3><p>实现思路：第一个客户到达的时刻为0，之后每个客户到达的时刻在前一个客户到达时设定随机值，因此在客户到达时需要产生两个随机数，一个是客户办理业务耗时durtime，一个是下一客户到达时间间隔intertime，假设当前时间为occurtime，则下一客户到达时为occurtime+intertime。</p>
<p>刚到达的客户应该插入到当前含元素最少的队列中。</p>
<p>在JavaScript的运用中，通常使用队列来进行任务的排序。而任务队列的任务是按进入队列的顺序延迟执行(解决状态一致性)的，即当前一个任务完成后，后面的任务才被执行，如果当前没有任务，则入队列的任务立即执行</p>
<h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    taskList = [];</span><br><span class="line">    <span class="keyword">var</span> isRun = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.addTask = <span class="function"><span class="keyword">function</span> (<span class="params">task</span>) </span>&#123;</span><br><span class="line">        taskList.push(task);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (taskList.length &gt; <span class="number">0</span> &amp;&amp; !isRun) &#123;</span><br><span class="line">        isRun = <span class="literal">true</span>;</span><br><span class="line">        taskList.shift();</span><br><span class="line">        isRun = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     alert(taskList);</span><br><span class="line"> &#125;</span><br><span class="line">taskQueue();</span><br><span class="line">addTask(<span class="number">1</span>);</span><br><span class="line">addTask(<span class="number">2</span>);</span><br><span class="line">addTask(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&#x27;show()&#x27;</span>,<span class="number">99</span>);<span class="comment">//1,2,3</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&#x27;show()&#x27;</span>,<span class="number">101</span>);<span class="comment">//2,3</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&#x27;show()&#x27;</span>,<span class="number">400</span>);<span class="comment">//null</span></span><br></pre></td></tr></table></figure>

<h3 id="6-4-判断回文"><a href="#6-4-判断回文" class="headerlink" title="6.4 判断回文"></a>6.4 判断回文</h3><p>上一篇<strong>栈</strong>（<a href="https://freepiao.cn/Algorithm-Stack/#5-3-%E7%94%A8%E6%A0%88%E5%88%A4%E6%96%AD%E5%9B%9E%E6%96%87">使用栈判断回文</a>）中也有涉及回文的实现, 下面我们通过<strong>双端队列</strong>来实现同样的功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindromeChecker</span>(<span class="params">aString</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!aString || <span class="keyword">typeof</span> aString !== <span class="string">&#x27;string&#x27;</span> || !aString.trim().length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> deque = <span class="keyword">new</span> Deque()</span><br><span class="line">  <span class="keyword">const</span> lowerString = aString.toLowerCase().split(<span class="string">&#x27; &#x27;</span>).join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加入队列</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lowerString.length; i++) &#123;</span><br><span class="line">    deque.addBack(lowerString[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> isEqual = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">let</span> firstChar = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> lastChar = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (deque.size() &gt; <span class="number">1</span> &amp;&amp; isEqual) &#123;</span><br><span class="line">    firstChar = deque.removeFront()</span><br><span class="line">    lastChar = deque.removeBack()</span><br><span class="line">    <span class="keyword">if</span> (firstChar != lastChar) &#123;</span><br><span class="line">      isEqual = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isEqual</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><p><img src="/images/algorithm18.png" alt="1"></p>
<h3 id="6-5-生成-1-到-n-的二进制数"><a href="#6-5-生成-1-到-n-的二进制数" class="headerlink" title="6.5 生成 1 到 n 的二进制数"></a>6.5 生成 1 到 n 的二进制数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generatePrintBinary</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> q = <span class="keyword">new</span> Queue()</span><br><span class="line">  q.enqueue(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">  <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> s1 = q.peek()</span><br><span class="line">    q.dequeue()</span><br><span class="line">    <span class="built_in">console</span>.log(s1)</span><br><span class="line">    <span class="keyword">var</span> s2 = s1</span><br><span class="line">    q.enqueue(s1 + <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    q.enqueue(s2 + <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">generatePrintBinary(<span class="number">5</span>) <span class="comment">// =&gt; 1 10 11 100 101</span></span><br></pre></td></tr></table></figure>











<p>回顾</p>
<p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.64kg5ej56vk0.png" alt="数组、栈和队列图解"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构与算法】双向链表详解</title>
    <url>/Algorithm-DoubleLinkedList/</url>
    <content><![CDATA[<p>要点：双向链表详解</p>
<span id="more"></span>

<h3 id="单向链表和双向链表"><a href="#单向链表和双向链表" class="headerlink" title="单向链表和双向链表"></a>单向链表和双向链表</h3><h4 id="一、单向链表"><a href="#一、单向链表" class="headerlink" title="一、单向链表"></a>一、单向链表</h4><p>只能从头遍历到尾或者从尾遍历到头（一般从头到尾）。</p>
<p>链表相连的过程是单向的，实现原理是上一个节点中有指向下一个节点的引用。</p>
<p>单向链表有一个比较明显的缺点：可以轻松到达下一个节点，<u>但回到前一个节点很难</u>，在实际开发中, 经常会遇到需要回到上一个节点的情况。</p>
<h4 id="二、双向链表"><a href="#二、双向链表" class="headerlink" title="二、双向链表"></a>二、双向链表</h4><h5 id="双向链表特点："><a href="#双向链表特点：" class="headerlink" title="双向链表特点："></a>双向链表特点：</h5><p><u>既可以从头遍历到尾，也可以从尾遍历到头</u>。</p>
<p>链表相连的过程是双向的。实现原理是一个节点既有向前连接的引用，也有一个向后连接的引用。</p>
<p>双向链表可以有效的解决单向链表存在的问题。</p>
<p>从表中任一结点出发均可访问全部结点</p>
<h5 id="双向链表缺点："><a href="#双向链表缺点：" class="headerlink" title="双向链表缺点："></a>双向链表缺点：</h5><p>每次在插入或删除某个节点时，都需要处理四个引用，而不是两个，实现起来会困难些。</p>
<p>相对于单向链表，所<u>占内存空间更大一些</u>。</p>
<p>但是，相对于双向链表的便利性而言，这些缺点微不足道。</p>
<h3 id="双向链表结构"><a href="#双向链表结构" class="headerlink" title="双向链表结构"></a>双向链表结构</h3><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.3xy769h90v20.png" alt="image"></p>
<p>双向链表不仅有 <code>head</code> 指针指向第一个节点，而且有 <code>tail</code> 指针指向最后一个节点。</p>
<p>每一个节点由三部分组成：<code>item</code> 储存数据、<code>prev</code> 指向前一个节点、<code>next</code> 指向后一个节点。</p>
<p>双向链表的第一个节点的 <code>prev</code> 指向 <code>null</code>。</p>
<p>双向链表的最后一个节点的 <code>next</code> 指向 <code>null</code>。</p>
<h3 id="双向链表常见的操作"><a href="#双向链表常见的操作" class="headerlink" title="双向链表常见的操作"></a>双向链表常见的操作</h3><p><code>append(element)</code> 向链表尾部追加一个新元素。</p>
<p><code>insert(position, element)</code> 向链表的指定位置插入一个新元素。</p>
<p><code>getElement(position)</code> 获取指定位置的元素。</p>
<p><code>indexOf(element)</code> 返回元素在链表中的索引。如果链表中没有该元素就返回 -1。</p>
<p><code>update(position, element)</code> 修改指定位置上的元素。</p>
<p><code>removeAt(position)</code> 从链表中的删除指定位置的元素。</p>
<p><code>remove(element)</code> 从链表删除指定的元素。</p>
<p><code>isEmpty()</code> 如果链表中不包含任何元素，返回 <code>trun</code>，如果链表长度大于 0 则返回 <code>false</code>。</p>
<p><code>size()</code> 返回链表包含的元素个数，与数组的 <code>length</code> 属性类似。</p>
<p><code>toString()</code> 由于链表项使用了 Node 类，就需要重写继承自 JavaScript 对象默认的 <code>toString</code> 方法，让其只输出元素的值。</p>
<p><code>forwardString()</code> 返回正向遍历节点字符串形式。</p>
<p><code>backwordString()</code> 返回反向遍历的节点的字符串形式。</p>
<h3 id="双向链表的封装"><a href="#双向链表的封装" class="headerlink" title="双向链表的封装"></a>双向链表的封装</h3><h4 id="创建双向链表类-DoublyLinkedList"><a href="#创建双向链表类-DoublyLinkedList" class="headerlink" title="创建双向链表类 DoublyLinkedList"></a>创建双向链表类 DoublyLinkedList</h4><p>DoublyNode 类继承单向链表的 Node 类，新添加 <code>this.prev</code> 属性，该属性用于指向上一个节点。</p>
<p>DoublyLinkedList 类继承 LinkedList 类，新添加 <code>this.tail</code> 属性，该属性指向末尾的节点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 双向链表的节点类（继承单向链表的节点类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyNode</span> <span class="keyword">extends</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(element);</span><br><span class="line">    <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表类继承单向链表类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedList</span> <span class="keyword">extends</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="append-element"><a href="#append-element" class="headerlink" title="append(element)"></a>append(element)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// append(element) 往双向链表尾部追加一个新的元素</span></span><br><span class="line"><span class="comment">// 重写 append()</span></span><br><span class="line"><span class="function"><span class="title">append</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、创建双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加元素</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// ！！跟单向链表不同，不用通过循环找到最后一个节点</span></span><br><span class="line">      <span class="comment">// 巧妙之处</span></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="insert-position-element"><a href="#insert-position-element" class="headerlink" title="insert(position, element)"></a>insert(position, element)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// insert(position, data) 插入元素</span></span><br><span class="line"><span class="comment">// 重写 insert()</span></span><br><span class="line"><span class="function"><span class="title">insert</span>(<span class="params">position, element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新的双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、判断多种插入情况</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// 在第 0 个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//== 巧妙之处：相处腾出 this.head 空间，留个 newNode 来赋值 ==//</span></span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head.perv = newNode;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length) &#123; <span class="comment">// 在最后一个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 在 0 ~ this.length 位置中间插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 找到要插入位置的节点</span></span><br><span class="line">      <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 交换节点信息</span></span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">      newNode.prev = previousNode;</span><br><span class="line"></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      currentNode.prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="insert-position-element-1"><a href="#insert-position-element-1" class="headerlink" title="insert(position, element)"></a>insert(position, element)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// insert(position, data) 插入元素</span></span><br><span class="line"><span class="comment">// 重写 insert()</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">position, element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新的双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、判断多种插入情况</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// 在第 0 个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//== 巧妙之处：相处腾出 this.head 空间，留个 newNode 来赋值 ==//</span></span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head.perv = newNode;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length) &#123; <span class="comment">// 在最后一个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 在 0 ~ this.length 位置中间插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 找到要插入位置的节点</span></span><br><span class="line">      <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 交换节点信息</span></span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">      newNode.prev = previousNode;</span><br><span class="line"></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      currentNode.prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="removeAt-position"><a href="#removeAt-position" class="headerlink" title="removeAt(position)"></a>removeAt(position)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// removeAt() 删除指定位置的节点</span></span><br><span class="line"><span class="comment">// 重写 removeAt()</span></span><br><span class="line"><span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 1、position 越界判断</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、根据不同情况删除元素</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">  <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// 删除第一个节点的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">1</span>) &#123; <span class="comment">// 链表内只有一个节点的情况</span></span><br><span class="line">      <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 链表内有多个节点的情况</span></span><br><span class="line">      <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">      <span class="built_in">this</span>.head.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length - <span class="number">1</span>) &#123; <span class="comment">// 删除最后一个节点的情况</span></span><br><span class="line"></span><br><span class="line">    currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="built_in">this</span>.tail.prev.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="built_in">this</span>.tail.prev;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 删除 0 ~ this.length - 1 里面节点的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">      previousNode = currentNode;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    previousNode.next = currentNode.next;</span><br><span class="line">    currentNode.next.perv = previousNode;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.length--;</span><br><span class="line">  <span class="keyword">return</span> currentNode.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="update-position-data"><a href="#update-position-data" class="headerlink" title="update(position, data)"></a>update(position, data)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// update(position, data) 修改指定位置的节点</span></span><br><span class="line"><span class="comment">// 重写 update()</span></span><br><span class="line"><span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 1、删除 position 位置的节点</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">this</span>.removeAt(position);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、在 position 位置插入元素</span></span><br><span class="line">  <span class="built_in">this</span>.insert(position, data);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="forwardToString"><a href="#forwardToString" class="headerlink" title="forwardToString()"></a>forwardToString()</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// forwardToString() 链表数据从前往后以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">forwardToString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&#x27;--&#x27;</span>;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="backwardString"><a href="#backwardString" class="headerlink" title="backwardString()"></a>backwardString()</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// backwardString() 链表数据从后往前以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">backwardString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&#x27;--&#x27;</span>;</span><br><span class="line">      currentNode = currentNode.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="其他方法的实现"><a href="#其他方法的实现" class="headerlink" title="其他方法的实现"></a>其他方法的实现</h4><p>双向链表的其他方法通过继承单向链表来实现。</p>
<h4 id="完整实现"><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedList</span> <span class="keyword">extends</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ------------ 链表的常见操作 ------------ //</span></span><br><span class="line">  <span class="comment">// append(element) 往双向链表尾部追加一个新的元素</span></span><br><span class="line">  <span class="comment">// 重写 append()</span></span><br><span class="line">  <span class="function"><span class="title">append</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加元素</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// ！！跟单向链表不同，不用通过循环找到最后一个节点</span></span><br><span class="line">      <span class="comment">// 巧妙之处</span></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert(position, data) 插入元素</span></span><br><span class="line">  <span class="comment">// 重写 insert()</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">position, element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新的双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、判断多种插入情况</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 在第 0 个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//== 巧妙之处：相处腾出 this.head 空间，留个 newNode 来赋值 ==//</span></span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head.perv = newNode;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="comment">// 在最后一个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 在 0 ~ this.length 位置中间插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 找到要插入位置的节点</span></span><br><span class="line">      <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 交换节点信息</span></span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">      newNode.prev = previousNode;</span><br><span class="line"></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      currentNode.prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getData() 继承单向链表</span></span><br><span class="line">  <span class="function"><span class="title">getData</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.getData(position);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// indexOf() 继承单向链表</span></span><br><span class="line">  <span class="function"><span class="title">indexOf</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.indexOf(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeAt() 删除指定位置的节点</span></span><br><span class="line">  <span class="comment">// 重写 removeAt()</span></span><br><span class="line">  <span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、根据不同情况删除元素</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 删除第一个节点的情况</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 链表内只有一个节点的情况</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 链表内有多个节点的情况</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">        <span class="built_in">this</span>.head.prev = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 删除最后一个节点的情况</span></span><br><span class="line"></span><br><span class="line">      currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail.prev.next = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">this</span>.tail = <span class="built_in">this</span>.tail.prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 删除 0 ~ this.length - 1 里面节点的情况</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      previousNode.next = currentNode.next;</span><br><span class="line">      currentNode.next.perv = previousNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update(position, data) 修改指定位置的节点</span></span><br><span class="line">  <span class="comment">// 重写 update()</span></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、删除 position 位置的节点</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">this</span>.removeAt(position);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、在 position 位置插入元素</span></span><br><span class="line">    <span class="built_in">this</span>.insert(position, data);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove(data) 删除指定 data 所在的节点（继承单向链表）</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.remove(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 判断链表是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取链表的长度</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// forwardToString() 链表数据从前往后以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">forwardToString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&quot;--&quot;</span>;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// backwardString() 链表数据从后往前以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">backwardString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&quot;--&quot;</span>;</span><br><span class="line">      currentNode = currentNode.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> doublyLinkedList = <span class="keyword">new</span> DoublyLinkedList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// append() 测试</span></span><br><span class="line">doublyLinkedList.append(<span class="string">&quot;ZZ&quot;</span>);</span><br><span class="line">doublyLinkedList.append(<span class="string">&quot;XX&quot;</span>);</span><br><span class="line">doublyLinkedList.append(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert() 测试</span></span><br><span class="line">doublyLinkedList.insert(<span class="number">0</span>, <span class="string">&quot;00&quot;</span>);</span><br><span class="line">doublyLinkedList.insert(<span class="number">2</span>, <span class="string">&quot;22&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getData() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.getData(<span class="number">1</span>)); <span class="comment">//--&gt; ZZ</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// indexOf() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.indexOf(<span class="string">&quot;XX&quot;</span>)); <span class="comment">//--&gt; 3</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeAt() 测试</span></span><br><span class="line">doublyLinkedList.removeAt(<span class="number">0</span>);</span><br><span class="line">doublyLinkedList.removeAt(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// update() 测试</span></span><br><span class="line">doublyLinkedList.update(<span class="number">0</span>, <span class="string">&quot;111111&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.remove(<span class="string">&quot;111111&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.remove(<span class="string">&quot;22222&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// forwardToString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.forwardToString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// backwardString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.backwardString());</span><br></pre></td></tr></table></figure>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/images/algorithm14.png" alt="1"></p>
<p>链式存储结构的优点：</p>
<ul>
<li><p>结点空间可以动态申请和释放；</p>
</li>
<li><p>数据元素的逻辑次序靠结点的指针来指示，插入和删除不需要移动元素。</p>
</li>
<li><p>链式存储结构的缺点：</p>
</li>
<li><p>存储密度小，每个结点的指针域需额外占用存储空间。当每个结点的数据域所占的字节数不多时，指针域所占的存储空间的比重显得很大。</p>
</li>
<li><p>存储密度是指结点数据本身占用的空间/结点占用的空间总量 </p>
</li>
</ul>
<p><img src="/images/algorithm12.png" alt="2"></p>
<p>链式存储结构是非随机存取结构。对任一结点的操作都要从头指针依指针链查找到该结点，这增加了算法的复杂度。(对某个结点操作一般要先找到该结点) </p>
<p><img src="/images/algorithm13.png" alt="3"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构与算法】单向链表详解</title>
    <url>/Algorithm-SingleLinkedList/</url>
    <content><![CDATA[<p>要点：单链表详解、JavaScript单链表方法的封装</p>
<span id="more"></span>

<h2 id="认识链表"><a href="#认识链表" class="headerlink" title="认识链表"></a>认识链表</h2><h3 id="一、链表和数组"><a href="#一、链表和数组" class="headerlink" title="一、链表和数组"></a>一、链表和数组</h3><p>链表和数组一样，可以用于存储一系列的元素，但是链表和数组的实现机制完全不同。</p>
<h4 id="1-1-数组"><a href="#1-1-数组" class="headerlink" title="1.1 数组"></a>1.1 数组</h4><h5 id="数组特点："><a href="#数组特点：" class="headerlink" title="数组特点："></a>数组特点：</h5><p>存储多个元素，数组（或列表）可能是最常用的数据结构。</p>
<p>几乎每一种编程语言都有默认实现数组结构，提供了一个便利的 <code>[]</code> 语法来访问数组元素。</p>
<h5 id="数组缺点："><a href="#数组缺点：" class="headerlink" title="数组缺点："></a>数组缺点：</h5><p>数组的创建需要申请一段连续的<strong>内存空间</strong>(一整块内存)，并且<strong>大小是固定的</strong>，当前数组不能满足容量需求时，需要扩容。 (一般情况下是申请一个更大的数组，比如 2 倍，然后将原数组中的元素复制过去)</p>
<p>在数组开头或中间位置插入数据的成本很高，需要进行大量元素的位移。</p>
<h4 id="1-2-链表"><a href="#1-2-链表" class="headerlink" title="1.2 链表"></a>1.2 链表</h4><h5 id="链表特点："><a href="#链表特点：" class="headerlink" title="链表特点："></a>链表特点：</h5><p>存储多个元素，另外一个选择就是使用链表。</p>
<p>不同于数组，链表中的<strong>元素在内存中不必是连续的空间</strong>。</p>
<p>链表的每个元素由一个存储元素本身的<strong>节点</strong>和一个指向下一个元素的<strong>引用</strong>(有些语言称为<u>指针</u>)<strong>组成</strong>。</p>
<h5 id="链表优点："><a href="#链表优点：" class="headerlink" title="链表优点："></a>链表优点：</h5><p><strong>内存空间不必是连续的</strong>，可以充分利用计算机的内存，实现灵活的内存动态管理。</p>
<p>链表不必在创建时就确定大小，并且大小可以无限延伸下去。</p>
<p>链表在插入和删除数据时，时间复杂度可以达到 $O(1)$，相对数组效率高很多。</p>
<h5 id="链表缺点："><a href="#链表缺点：" class="headerlink" title="链表缺点："></a>链表缺点：</h5><p>访问任何一个位置的元素时，<u>需要从头开始访问</u>。(无法跳过第一个元素访问任何一个元素)</p>
<p><u>无法通过下标值直接访问元素</u>，需要从头开始一个个访问，直到找到对应的元素。</p>
<p>虽然可以轻松地到达下一个节点，但是回到前一个节点是很难的。</p>
<h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><h3 id="一、链表结构"><a href="#一、链表结构" class="headerlink" title="一、链表结构"></a>一、链表结构</h3><p>单向链表类似于火车，有一个火车头，火车头会连接一个节点，节点上有乘客，并且这个节点会连接下一个节点，以此类推。</p>
<h4 id="链表的火车结构"><a href="#链表的火车结构" class="headerlink" title="链表的火车结构"></a>链表的火车结构</h4><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.27xtn3c52zwg.png" alt="链表的火车结构"></p>
<h4 id="链表的数据结构"><a href="#链表的数据结构" class="headerlink" title="链表的数据结构"></a>链表的数据结构</h4><p>head 属性指向链表的第一个节点。<br>链表中的最后一个节点指向 <code>null</code>。<br>当链表中一个节点也没有的时候，head 直接指向 <code>null</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.37j1by46a120.png" alt="链表的数据结构"></p>
<h4 id="给火车加上数据后的结构"><a href="#给火车加上数据后的结构" class="headerlink" title="给火车加上数据后的结构"></a>给火车加上数据后的结构</h4><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.664djiie2t80.png" alt="给火车加上数据后的结构"></p>
<h4 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h4><p><strong>头指针</strong>：</p>
<p><u>指链表指向第一个结点的指针</u>，若链表有头结点，则是指向头结点的指针;</p>
<p>头指针具有<u>标识作用</u>，所以常用头指针冠以链表的名字;</p>
<p>无论链表是否为空，头指针均不为空。头指针是链表的必要元素</p>
<p><strong>头结点</strong>：</p>
<p>头结点是为了操作的统一和方便而设立的，放在第一元素的结点之前，其数据域一般无意义（也可存放链表的长度）</p>
<p>有了头结点，对在第一元素结点前插入结点和删除第一结点，其操作与其它结点的操作就统一了</p>
<p>头结点不一定是链表必须要素</p>
<p><strong>首元结点</strong>：是指链表中存储第一个数据元素a1的结点 </p>
<blockquote>
<p>有头结点有什么好处？</p>
<p>①有了头结点，对在第一元素结点前插入结点和删除第一结点，其操作与其它结点的操作就统一了</p>
<p>②便于空表和非空表的统一处理<br>当链表不设头结点时，假设L为单链表的头指针，它应该指向<u>首元结点</u>，则当单链表为长度n为0的空表时，L指针为空（判定空表的条件可记为：<code>L==NULL</code>)。增加头结点后，无论链表是否为空，头指针都是指向头结点的非空指针。头指针指向头结点。若为空表，则头结点的指针域为空（判定空表的条件可记为：<code>L -&gt;next== NULL</code>)</p>
<p>顺序表每个元素的存储位置都可从线性表的起始位置计算得到。而在单链表中，各个元素的存储位置都是<u>随意的</u>。取得第<code>i</code>个数据元素<u>必须从头指针出发顺链进行寻找</u>，也称为顺序存取的存取结构。之前说的顺序表是随机存取而链表是顺序存储</p>
<p>单链表是由若干个结点构成，所以先定义一下结点。每一个结点都是有两部分组成，一部分是数据元素本身(数据域data)其数据类型根据实际问题的需要确定。另一部分是指向下一个元素(结点)的指针(指针域next)存放下一个元素的地址，结点可以用C语言中的结构体实现当中包含两个成员。 </p>
</blockquote>
<h3 id="二、链表中的常见操作"><a href="#二、链表中的常见操作" class="headerlink" title="二、链表中的常见操作"></a>二、链表中的常见操作</h3><blockquote>
<p>JavaScript方法</p>
</blockquote>
<p><code>append(element)</code> 向链表尾部添加一个新的项。</p>
<p><code>insert(position, element)</code> 向链表的特定位置插入一个新的项。</p>
<p><code>get(position)</code> 获取对应位置的元素。</p>
<p><code>indexOf(element)</code> 返回元素在链表中的索引。如果链表中没有该元素就返回-1。</p>
<p><code>update(position, element)</code> 修改某个位置的元素。</p>
<p><code>removeAt(position)</code> 从链表的特定位置移除一项。</p>
<p><code>remove(element)</code> 从链表中移除一项。</p>
<p><code>isEmpty()</code> 如果链表中不包含任何元素，返回 true，如果链表长度大于 0 则返回 false。</p>
<p><code>size()</code> 返回链表包含的元素个数，与数组的 length 属性类似。</p>
<p><code>toString()</code> 由于链表项使用了 Node 类，就需要重写继承自 JavaScript 对象默认的 toString 方法，让其只输出元素的值。</p>
<h3 id="三、单向链表的封装"><a href="#三、单向链表的封装" class="headerlink" title="三、单向链表的封装"></a>三、单向链表的封装</h3><blockquote>
<p>C语言使用结构体来创建链表与结点；</p>
<p>JavaScript中使用类来创建链表与结点。</p>
</blockquote>
<h4 id="创建单向链表类"><a href="#创建单向链表类" class="headerlink" title="创建单向链表类"></a>创建单向链表类</h4><p>先创建单向链表类 <code>LinkedList</code>，添加基本属性，再逐步实现单向链表的常用方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始链表长度为 0</span></span><br><span class="line">  length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始 head 为 null，head 指向链表的第一个节点</span></span><br><span class="line">  head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部类（链表里的节点 Node）</span></span><br><span class="line">  Node = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    data;		<span class="comment">// 数据域</span></span><br><span class="line">    next = <span class="literal">null</span>; <span class="comment">// 下一结点</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = data;	<span class="comment">// 接收创建传入的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现-append"><a href="#实现-append" class="headerlink" title="实现 append()"></a>实现 append()</h4><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// append() 往链表尾部追加数据</span></span><br><span class="line"><span class="function"><span class="title">append</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加新节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 链表长度为 0 时，即只有 head 的时候</span></span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 链表长度大于 0 时，在最后面添加新节点</span></span><br><span class="line">        <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当 currentNode.next 不为空时，</span></span><br><span class="line">        <span class="comment">// 循序依次找最后一个节点，即节点的 next 为 null 时</span></span><br><span class="line">        <span class="keyword">while</span> (currentNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">            currentNode = currentNode.next;	<span class="comment">// 继续查找下一个，直到null为止，赋值到currentNode</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后一个节点的 next 指向新节点</span></span><br><span class="line">        currentNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、追加完新节点后，链表长度 + 1</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="过程图解"><a href="#过程图解" class="headerlink" title="过程图解"></a>过程图解</h5><p>首先让 <code>currentNode</code> 指向第一个节点。</p>
<p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.5iskrdf4nu40.png" alt="image"></p>
<p>通过 <code>while</code> 循环使 <code>currentNode</code> 指向最后一个节点，最后通过 <code>currentNode.next = newNode</code>，让最后一个节点指向新节点 <code>newNode</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.4mw3bx5g80m0.png" alt="image"></p>
<h5 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line"><span class="comment">// 测试 append 方法</span></span><br><span class="line">linkedList.append(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">linkedList.append(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">linkedList.append(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/JavaScript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image.6kx4qbq8e5c.png" alt="image"></p>
<h4 id="实现-toString"><a href="#实现-toString" class="headerlink" title="实现 toString()"></a>实现 toString()</h4><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// toString() 链表数据以字符串形式返回</span></span><br><span class="line"><span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">        result += currentNode.data + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-1"><a href="#代码测试-1" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 toString 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; AA BB CC</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-insert"><a href="#实现-insert" class="headerlink" title="实现 insert()"></a>实现 insert()</h4><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// insert() 在指定位置（position）插入节点</span></span><br><span class="line"><span class="function"><span class="title">insert</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// position 新插入节点的位置</span></span><br><span class="line">    <span class="comment">// position = 0 表示新插入后是第一个节点</span></span><br><span class="line">    <span class="comment">// position = 1 表示新插入后是第二个节点，以此类推</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、对 position 进行越界判断，不能小于 0 或大于链表长度</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、插入节点</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// position = 0 的情况</span></span><br><span class="line">        <span class="comment">// 让新节点的 next 指向 原来的第一个节点，即 head</span></span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// head 赋值为 newNode</span></span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 0 &lt; position &lt;= length 的情况</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化一些变量</span></span><br><span class="line">        <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head; <span class="comment">// 当前节点初始化为 head</span></span><br><span class="line">        <span class="keyword">let</span> previousNode = <span class="literal">null</span>; <span class="comment">// head 的 上一节点为 null</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// head 的 index 为 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在 0 ~ position 之间遍历，不断地更新 currentNode 和 previousNode</span></span><br><span class="line">        <span class="comment">// 直到找到要插入的位置</span></span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">            previousNode = currentNode;</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在当前节点和当前节点的上一节点之间插入新节点，即它们的改变指向</span></span><br><span class="line">        newNode.next = currentNode;</span><br><span class="line">        previousNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新链表长度</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-2"><a href="#代码测试-2" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 insert 方法</span></span><br><span class="line">linkedList.insert(<span class="number">0</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">linkedList.insert(<span class="number">2</span>, <span class="string">&quot;456&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 123 AA 456 BB CC</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-getData"><a href="#实现-getData" class="headerlink" title="实现 getData()"></a>实现 getData()</h4><p>获取指定位置（position）的 data。</p>
<h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">getData</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、获取指定 position 节点的 data</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">   	 	currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3、返回 data</span></span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-3"><a href="#代码测试-3" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 getData 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.getData(<span class="number">0</span>)); <span class="comment">//--&gt; 123</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.getData(<span class="number">1</span>)); <span class="comment">//--&gt; AA</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-indexOf"><a href="#实现-indexOf" class="headerlink" title="实现 indexOf()"></a>实现 indexOf()</h4><p>indexOf(data) 返回指定 data 的 index，如果没有，返回 -1。</p>
<h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">indexOf</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentNode.data === data) &#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-4"><a href="#代码测试-4" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 indexOf 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.indexOf(<span class="string">&quot;AA&quot;</span>)); <span class="comment">//--&gt; 1</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.indexOf(<span class="string">&quot;ABC&quot;</span>)); <span class="comment">//--&gt; -1</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-update"><a href="#实现-update" class="headerlink" title="实现 update()"></a>实现 update()</h4><p>update(position, data) 修改指定位置节点的 data。</p>
<h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 涉及到 position 都要进行越界判断</span></span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、痛过循环遍历，找到指定 position 的节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">    	currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、修改节点 data</span></span><br><span class="line">    currentNode.data = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-5"><a href="#代码测试-5" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 update 方法</span></span><br><span class="line">linkedList.update(<span class="number">0</span>, <span class="string">&quot;12345&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 AA 456 BB CC</span></span><br><span class="line">linkedList.update(<span class="number">1</span>, <span class="string">&quot;54321&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 54321 456 BB CC</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-removeAt"><a href="#实现-removeAt" class="headerlink" title="实现 removeAt()"></a>实现 removeAt()</h4><p>removeAt(position) 删除指定位置的节点。</p>
<h5 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、删除指定 position 节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// position = 0 的情况</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// position &gt; 0 的情况</span></span><br><span class="line">        <span class="comment">// 通过循环遍历，找到指定 position 的节点，赋值到 currentNode</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">            previousNode = currentNode;</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 巧妙之处，让上一节点的 next 指向到当前的节点的 next，相当于删除了当前节点。</span></span><br><span class="line">        previousNode.next = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、更新链表长度 -1</span></span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-6"><a href="#代码测试-6" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 removeAt 方法</span></span><br><span class="line">linkedList.removeAt(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 54321 456 CC</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-remove"><a href="#实现-remove" class="headerlink" title="实现 remove()"></a>实现 remove()</h4><p>remove(data) 删除指定 data 所在的节点。</p>
<h5 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.removeAt(<span class="built_in">this</span>.indexOf(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-7"><a href="#代码测试-7" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 remove 方法</span></span><br><span class="line">linkedList.remove(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 54321 456</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-isEmpty"><a href="#实现-isEmpty" class="headerlink" title="实现 isEmpty()"></a>实现 isEmpty()</h4><p>isEmpty() 判断链表是否为空。</p>
<h5 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-8"><a href="#代码测试-8" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 isEmpty 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.isEmpty()); <span class="comment">//--&gt; false</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-size"><a href="#实现-size" class="headerlink" title="实现 size()"></a>实现 size()</h4><p>size() 获取链表的长度。</p>
<h5 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-9"><a href="#代码测试-9" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 size 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.size()); <span class="comment">//--&gt; 3</span></span><br></pre></td></tr></table></figure>

<h4 id="完整实现"><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始链表长度为 0</span></span><br><span class="line">  length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始 head 为 null，head 指向链表的第一个节点</span></span><br><span class="line">  head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部类（链表里的节点 Node）</span></span><br><span class="line">  Node = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    data;</span><br><span class="line">    next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ------------ 链表的常见操作 ------------ //</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// append() 往链表尾部追加数据</span></span><br><span class="line">  <span class="function"><span class="title">append</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加新节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 链表长度为 0 时，即只有 head 的时候</span></span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 链表长度大于 0 时，在最后面添加新节点</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 当 currentNode.next 不为空时，</span></span><br><span class="line">      <span class="comment">// 循序依次找最后一个节点，即节点的 next 为 null 时</span></span><br><span class="line">      <span class="keyword">while</span> (currentNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 最后一个节点的 next 指向新节点</span></span><br><span class="line">      currentNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、追加完新节点后，链表长度 + 1</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert() 在指定位置（position）插入节点</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// position 新插入节点的位置</span></span><br><span class="line">    <span class="comment">// position = 0 表示新插入后是第一个节点</span></span><br><span class="line">    <span class="comment">// position = 1 表示新插入后是第二个节点，以此类推</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、对 position 进行越界判断，不能小于 0 或大于链表长度</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、插入节点</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// position = 0 的情况</span></span><br><span class="line">      <span class="comment">// 让新节点的 next 指向 原来的第一个节点，即 head</span></span><br><span class="line">      newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// head 赋值为 newNode</span></span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 0 &lt; position &lt;= length 的情况</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 初始化一些变量</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head; <span class="comment">// 当前节点初始化为 head</span></span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>; <span class="comment">// head 的 上一节点为 null</span></span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// head 的 index 为 0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在 0 ~ position 之间遍历，不断地更新 currentNode 和 previousNode</span></span><br><span class="line">      <span class="comment">// 直到找到要插入的位置</span></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在当前节点和当前节点的上一节点之间插入新节点，即它们的改变指向</span></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新链表长度</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getData() 获取指定位置的 data</span></span><br><span class="line">  <span class="function"><span class="title">getData</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、获取指定 position 节点的 data</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、返回 data</span></span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// indexOf() 返回指定 data 的 index，如果没有，返回 -1。</span></span><br><span class="line">  <span class="function"><span class="title">indexOf</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode.data === data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      &#125;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update() 修改指定位置节点的 data</span></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 涉及到 position 都要进行越界判断</span></span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、痛过循环遍历，找到指定 position 的节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、修改节点 data</span></span><br><span class="line">    currentNode.data = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeAt() 删除指定位置的节点</span></span><br><span class="line">  <span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、删除指定 position 节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// position = 0 的情况</span></span><br><span class="line">      <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// position &gt; 0 的情况</span></span><br><span class="line">      <span class="comment">// 通过循环遍历，找到指定 position 的节点，赋值到 currentNode</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 巧妙之处，让上一节点的 next 指向到当前的节点的 next，相当于删除了当前节点。</span></span><br><span class="line">      previousNode.next = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、更新链表长度 -1</span></span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove() 删除指定 data 的节点</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.removeAt(<span class="built_in">this</span>.indexOf(data));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 判断链表是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取链表的长度</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 链表数据以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构与算法】字符串（JavaScript版详解）</title>
    <url>/Algorithm-String/</url>
    <content><![CDATA[<p>要点：字符串、常见字符串方法</p>
<p>先知：</p>
<span id="more"></span>

<h3 id="一、串"><a href="#一、串" class="headerlink" title="一、串"></a>一、串</h3><h4 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h4><p>串（string） 是由<strong>零个或多个字符</strong>组成的<strong>有限序列</strong>，又名叫 <strong>字符串</strong></p>
<h4 id="1-2-串的逻辑结构"><a href="#1-2-串的逻辑结构" class="headerlink" title="1.2 串的逻辑结构"></a>1.2 串的逻辑结构</h4><p>串 的逻辑结构和<u>线性表</u>很相似，不同之处在于串针对的是<u>字符集</u>，也就是串中的元素都是字符。</p>
<p>因此，对于串的基本操作与线性表是有很大差别的：</p>
<ul>
<li><p>线性表更关注的是<u>单个元素</u>的操作，比如查找一个元素，插入或删除一个元素；</p>
</li>
<li><p>但串中更多的是<u>查找子串位置</u>，得到指定位置子串，替换子串等操作</p>
</li>
</ul>
<h4 id="1-3-串的存储结构"><a href="#1-3-串的存储结构" class="headerlink" title="1.3 串的存储结构"></a>1.3 串的存储结构</h4><p><strong>串</strong> 的存储结构<strong>与</strong>线性表<strong>相同</strong>，分为<strong>两种</strong>：</p>
<ul>
<li><p>顺序存储结构</p>
</li>
<li><p>链式存储结构</p>
</li>
</ul>
<h5 id="串的顺序存储结构"><a href="#串的顺序存储结构" class="headerlink" title="串的顺序存储结构"></a>串的顺序存储结构</h5><p>串的顺序存储结构是用 <strong>一组地址连续的存储单元</strong> 来存储串中的字符序列。一般是<strong>用定长数组来定义</strong></p>
<blockquote>
<p>由于是定长数组，因此就会存在一个<strong>预定义的最大串长度</strong>；</p>
<p>一般可以将<strong>实际</strong>的串长度值<strong>保存在</strong>数组 0 下标位置，也可以放在数组最后一个下标位置；</p>
<p>也有些语言使用在串值后面加一个不计入串长度的<strong>结束标记符（比如<code>\0</code>）</strong>来表示串值得<strong>终结</strong>，这样就<strong>无需使用</strong>数字进行记录</p>
</blockquote>
<h5 id="串的链式存储结构"><a href="#串的链式存储结构" class="headerlink" title="串的链式存储结构"></a>串的链式存储结构</h5><p>对于串的链式存储结构，与线性表是相似的；</p>
<p>但由于串结构的特殊性（结构中的每个元素数据都是一个字符），如果也简单地将每个链结点存储一个字符，就会存在很大的空间浪费；</p>
<p>因此，一个结点可以考虑存放<u>多个字符</u>，如果最后一个结点未被占满时，可以使用 “#” 或其他非串值字符补全</p>
<blockquote>
<p>串的链式存储结构<strong>除了</strong>在链接串与串操作时有一定的<strong>方便之外</strong></p>
<p>总的来说<strong>不如顺序存储灵活</strong>，性能<strong>也不如</strong>顺序存储结构好</p>
</blockquote>
<h3 id="二、JavaScript中的串"><a href="#二、JavaScript中的串" class="headerlink" title="二、JavaScript中的串"></a>二、JavaScript中的串</h3><h4 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h4><p>字符串就是一个或多个排列在一起的字符，放在单引号或双引号之中。</p>
<blockquote>
<p>‘abc’<br>“abc”</p>
</blockquote>
<p>js里的字符串类似于数组，都是一个一个字符拼凑在一起组成的，因此可以用<code>length属性</code>取得字符串的长度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span></span><br><span class="line">str.length; <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-字符串常用的一些方法"><a href="#2-2-字符串常用的一些方法" class="headerlink" title="2.2 字符串常用的一些方法"></a>2.2 字符串常用的一些方法</h4><h5 id="1-charAt"><a href="#1-charAt" class="headerlink" title="1.charAt()"></a>1.charAt()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.charAt(n)</span><br></pre></td></tr></table></figure>

<p>作用：返回字符串的第 n 个字符，如果不在 0~str.length-1之间，则返回一个空字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;javascript&quot;</span>;</span><br><span class="line">str.charAt(<span class="number">2</span>);  <span class="comment">// &#x27;v&#x27;</span></span><br><span class="line">str.charAt(<span class="number">12</span>); <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-indexOf"><a href="#2-indexOf" class="headerlink" title="2.indexOf()"></a>2.indexOf()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">indexOf(substr[,start])</span><br></pre></td></tr></table></figure>

<p>作用：返回 substr 在字符串 str 中首次出现的位置,从 start 位置开始查找，如果不存在，则返回 -1。</p>
<p>start可以是任意整数，默认值为 0。如果 start &lt; 0 则查找整个字符串（如同传进了 0）。如果 start &gt;= str.length，则该方法返回 -1，除非被查找的字符串是一个空字符串，此时返回 str.length.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str =   <span class="string">&quot;javascript&quot;</span>  ;</span><br><span class="line">str.indexOf(<span class="string">&#x27;s&#x27;</span>); <span class="comment">// 1  </span></span><br><span class="line">str.indexOf(  <span class="string">&#x27;s&#x27;</span>  ,<span class="number">6</span>);   <span class="comment">// -1  </span></span><br><span class="line">str.indexOf(  <span class="string">&#x27;&#x27;</span>  ,<span class="number">11</span>);   <span class="comment">// 10  </span></span><br><span class="line">str.indexOf(  <span class="string">&#x27;&#x27;</span>  ,<span class="number">8</span>);   <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<h5 id="3-lastIndexOf"><a href="#3-lastIndexOf" class="headerlink" title="3.lastIndexOf()"></a>3.lastIndexOf()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">lastIndexOf(substr[,start])</span><br></pre></td></tr></table></figure>

<p>作用：返回 substr 在字符串 str 中最后出现的位置,从 start 位置 向前开始查找，如果不存在，则返回 -1。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;lastindex&#x27;</span>.lastIndexOf(  <span class="string">&#x27;a&#x27;</span>  );   <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h5 id="4-substring"><a href="#4-substring" class="headerlink" title="4.substring()"></a>4.substring()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.substring(start[, end])</span><br></pre></td></tr></table></figure>

<p>作用：返回从 start 到 end（不包括）之间的字符，start、end均为 非负整数。若结束参数(end)省略，则表示从start位置一直截取到最后。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  str =   <span class="string">&#x27;abcdefg&#x27;</span>  ;  str.substring(<span class="number">1</span>, <span class="number">4</span>);   <span class="comment">//&quot;bcd&quot;  </span></span><br><span class="line">str.substring(<span class="number">1</span>);   <span class="comment">// &quot;bcdefg&quot;  </span></span><br><span class="line">str.substring(-<span class="number">1</span>);   <span class="comment">//&quot;abcdefg&quot; 传入负值时会视为0</span></span><br></pre></td></tr></table></figure>

<h5 id="5-slice"><a href="#5-slice" class="headerlink" title="5.slice()"></a>5.slice()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.slice(start[,end])</span><br></pre></td></tr></table></figure>

<p>作用：返回从 start 到 end （不包括）之间的字符，可传负值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  str =   <span class="string">&#x27;this is awesome&#x27;</span>  ;  </span><br><span class="line">str.slice(<span class="number">4</span>, -<span class="number">1</span>);   <span class="comment">//&quot; is awesom&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="6-substr"><a href="#6-substr" class="headerlink" title="6. substr()"></a>6. substr()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.slice(start[,end])</span><br></pre></td></tr></table></figure>

<p>作用：返回 str 中从指定位置开始到指定长度的子字符串，start可为负值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  str =   <span class="string">&quot;Just give me a reason&quot;</span>  ;  </span><br><span class="line">str.substr(<span class="number">5</span>, <span class="number">10</span>);   <span class="comment">// &quot;give me a &quot;  </span></span><br><span class="line">str.substr(-<span class="number">4</span>, <span class="number">2</span>);   <span class="comment">// &quot;as&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="7-replace"><a href="#7-replace" class="headerlink" title="7. replace()"></a>7. replace()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.replace(regexp|substr, newSubStr|<span class="function"><span class="keyword">function</span>  )</span></span><br></pre></td></tr></table></figure>

<p>作用：替换 str 的子字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  str =   <span class="string">&quot;do you love me&quot;</span>  ;  </span><br><span class="line">str.replace(  <span class="string">&#x27;love&#x27;</span>  ,  <span class="string">&#x27;hate&#x27;</span>  );   <span class="comment">// &quot;do you hate me&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="8-search"><a href="#8-search" class="headerlink" title="8. search()"></a>8. search()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.search(regexp)</span><br></pre></td></tr></table></figure>

<p>作用：查找 str 与一个正则表达式是否匹配。如果匹配成功，则返回正则表达式在字符串中首次匹配项的<u>索引</u>；否则，返回 <code>-1</code>。如果参数传入的是一个非正则表达式对象，则会使用 new RegExp(obj) 隐式地将其转换为正则表达式对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;I love JavaScript!&#x27;</span>  ;  </span><br><span class="line">str.search(<span class="regexp">/java/</span>);   <span class="comment">// -1  </span></span><br><span class="line">str.search(<span class="regexp">/Java/</span>);   <span class="comment">// 7  </span></span><br><span class="line">str.search(<span class="regexp">/java/i</span>);   <span class="comment">// 7  </span></span><br><span class="line">str.search(  <span class="string">&#x27;Java&#x27;</span>  );   <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>

<h5 id="9-match"><a href="#9-match" class="headerlink" title="9. match()"></a>9. match()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.match(regexp)</span><br></pre></td></tr></table></figure>

<p>作用：返回一个包含匹配结果的数组，如果没有匹配项，则返回 null。如果参数传入的是一个非正则表达式对象，则会使用 new RegExp(obj) 隐式地将其转换为正则表达式对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str =   <span class="string">&#x27;Javascript java&#x27;</span>  ;  str.match(<span class="regexp">/Java/</span>);   <span class="comment">// [&quot;Java&quot;]  </span></span><br><span class="line">str.match(<span class="regexp">/Java/gi</span>);   <span class="comment">// [&quot;java&quot;, &quot;Java&quot;]  </span></span><br><span class="line">str.match(<span class="regexp">/ab/g</span>);   <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<h5 id="10-split"><a href="#10-split" class="headerlink" title="10. split()"></a>10. split()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.split([separator][, limit])</span><br></pre></td></tr></table></figure>

<p>= &gt;返回一个数组，分隔符 separator 可以是一个字符串或正则表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  str =   <span class="string">&quot;Hello?World!&quot;</span>  ;  str.split();   <span class="comment">// [&quot;Hello?World!&quot;]  </span></span><br><span class="line">str.split(  <span class="string">&#x27;&#x27;</span>  );   <span class="comment">// [&quot;H&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot;?&quot;, &quot;W&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;, &quot;!&quot;]  </span></span><br><span class="line">str.split(  <span class="string">&#x27;?&#x27;</span>  );   <span class="comment">// [&quot;Hello&quot;, &quot;World!&quot;]  </span></span><br><span class="line">str.split(  <span class="string">&#x27;&#x27;</span>  ,<span class="number">5</span>);   <span class="comment">// [&quot;H&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span></span><br></pre></td></tr></table></figure>

<h5 id="11-trim"><a href="#11-trim" class="headerlink" title="11. trim()"></a>11. trim()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.trim()</span><br></pre></td></tr></table></figure>

<p>作用：去除 str 开头和结尾处的空白字符，返回 str 的一个副本，不影响字符串本身的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  str =   <span class="string">&#x27; abc &#x27;</span>  ;  </span><br><span class="line">str.trim();   <span class="comment">// &#x27;abc&#x27;  </span></span><br><span class="line"><span class="built_in">console</span>.log(str);   <span class="comment">// &#x27; abc &#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="12-toLowerCase"><a href="#12-toLowerCase" class="headerlink" title="12. toLowerCase()"></a>12. toLowerCase()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.toLowerCase()</span><br></pre></td></tr></table></figure>

<p>作用：将 str 转换为<u>小写</u>，并返回 str 的一个副本，不影响字符串本身的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  str =   <span class="string">&#x27;JavaScript&#x27;</span>  ;  </span><br><span class="line">str.toLowerCase();   <span class="comment">// &#x27;javascript&#x27;  </span></span><br><span class="line"><span class="built_in">console</span>.log(str);   <span class="comment">// &#x27;JavaScript&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="13-toUpperCase"><a href="#13-toUpperCase" class="headerlink" title="13. toUpperCase()"></a>13. toUpperCase()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.toUpperCase()</span><br></pre></td></tr></table></figure>

<p>作用：将 str 转换为<u>大写</u>，并返回 str 的一个副本，不影响字符串本身的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  str =   <span class="string">&#x27;JavaScript&#x27;</span>  ;  </span><br><span class="line">str.toUpperCase();   <span class="comment">// &#x27;JAVASCRIPT&#x27;  </span></span><br><span class="line"><span class="built_in">console</span>.log(str);   <span class="comment">// &#x27;JavaScript&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="三、JavaScript正则表达式"><a href="#三、JavaScript正则表达式" class="headerlink" title="三、JavaScript正则表达式"></a>三、JavaScript正则表达式</h3><blockquote>
<p>关于正则匹配详见：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN</a></p>
</blockquote>
<h4 id="3-1-元字符"><a href="#3-1-元字符" class="headerlink" title="3.1 元字符"></a>3.1 元字符</h4><p><code>( [ &#123; \ ^ $ | ) ? * + .</code></p>
<h4 id="3-2-预定义的特殊字符"><a href="#3-2-预定义的特殊字符" class="headerlink" title="3.2 预定义的特殊字符"></a>3.2 预定义的特殊字符</h4><table>
<thead>
<tr>
<th>字符</th>
<th>正则</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\t</td>
<td>/\t/</td>
<td>制表符</td>
</tr>
<tr>
<td>\n</td>
<td>/\n/</td>
<td>换行符</td>
</tr>
<tr>
<td>\r</td>
<td>/\r/</td>
<td>回车符</td>
</tr>
<tr>
<td>\f</td>
<td>/\f/</td>
<td>换页符</td>
</tr>
<tr>
<td>\a</td>
<td>/\a/</td>
<td>alert字符</td>
</tr>
<tr>
<td>\e</td>
<td>/\e/</td>
<td>escape字符</td>
</tr>
<tr>
<td>\cX</td>
<td>/\cX/</td>
<td>与X相对应的控制字符</td>
</tr>
<tr>
<td>\b</td>
<td>/\b/</td>
<td>与回退字符</td>
</tr>
<tr>
<td>\v</td>
<td>/\v/</td>
<td>垂直制表符</td>
</tr>
<tr>
<td>\0</td>
<td>/\0/</td>
<td>空字符</td>
</tr>
</tbody></table>
<h4 id="3-3-字符类"><a href="#3-3-字符类" class="headerlink" title="3.3 字符类"></a>3.3 字符类</h4><h5 id="简单类"><a href="#简单类" class="headerlink" title="简单类"></a>简单类</h5><p>原则上正则的一个字符对应一个字符，我们可以用[]把它们括起来，让[]这个整体对应一个字符。如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="regexp">/ruby/</span>.test(  <span class="string">&quot;ruby&quot;</span>  ));  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[abc]/</span>.test(  <span class="string">&quot;a&quot;</span>  ));  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[abc]/</span>.test(  <span class="string">&quot;b&quot;</span>  ));  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[abc]/</span>.test(  <span class="string">&quot;c&quot;</span>  ));  <span class="comment">//true  </span></span><br><span class="line">alert(  <span class="string">&quot;a bat ,a Cat,a fAt bat ,a faT cat&quot;</span>.match(<span class="regexp">/[bcf]at/gi</span>));  <span class="comment">//bat,Cat,fAt,bat,faT,cat</span></span><br></pre></td></tr></table></figure>

<h5 id="负向类"><a href="#负向类" class="headerlink" title="负向类"></a>负向类</h5><p>也是在那个括号里做文章，前面加个元字符进行取反，表示匹配不能为括号里面的字符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="regexp">/[^abc]/</span>.test(  <span class="string">&quot;a&quot;</span>  ));  <span class="comment">//false  </span></span><br><span class="line">alert(<span class="regexp">/[^abc]/</span>.test(  <span class="string">&quot;b&quot;</span>  ));  <span class="comment">//false  </span></span><br><span class="line">alert(<span class="regexp">/[^abc]/</span>.test(  <span class="string">&quot;6&quot;</span>  ));  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[^abc]/</span>.test(  <span class="string">&quot;gg&quot;</span>  ));  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h5 id="范围类"><a href="#范围类" class="headerlink" title="范围类"></a>范围类</h5><p>还是在那个中括号里面做文章。有时匹配的东西过多，而且类型又相同，全部输入太麻烦，我们可以用它。特征就是在中间加了个横线。</p>
<h5 id="组合类"><a href="#组合类" class="headerlink" title="组合类"></a>组合类</h5><p>还是在那个中括号里面做文章。允许用中括号匹配不同类型的单个字符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="regexp">/[a-f]/</span>.test(  <span class="string">&quot;b&quot;</span>  ));  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[a-f]/</span>.test(  <span class="string">&quot;k&quot;</span>  ));  <span class="comment">//false  </span></span><br><span class="line">alert(<span class="regexp">/[a-z]/</span>.test(  <span class="string">&quot;h&quot;</span>  ));  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[A-Z]/</span>.test(  <span class="string">&quot;gg&quot;</span>  ));  <span class="comment">//false  </span></span><br><span class="line">alert(<span class="regexp">/[^H-Y]/</span>.test(  <span class="string">&quot;G&quot;</span>  ));  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[0-9]/</span>.test(  <span class="string">&quot;8&quot;</span>  ));  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[^7-9]/</span>.test(  <span class="string">&quot;6&quot;</span>  ));  <span class="comment">//true</span></span><br><span class="line">alert(<span class="regexp">/[a-m1-5\n]/</span>.test(  <span class="string">&quot;a&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[a-m1-5\n]/</span>.test(  <span class="string">&quot;3&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line"><span class="keyword">var</span>  a =   <span class="string">&quot;\n\        &quot;</span>  </span><br><span class="line">alert(<span class="regexp">/[a-m1-5\n]/</span>.test(a))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[a-m1-5\n]/</span>.test(  <span class="string">&quot;r&quot;</span>  ))  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h5 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h5><p>还是在那个中括号里面做文章，不过它好像已经走到尽头了。由于是中括号的马甲，因此它们还是对应一个字符。</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>等同于</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>[^\n\r]</td>
<td>除了换行和回车之外的任意字符</td>
</tr>
<tr>
<td>\d</td>
<td>[0-9]</td>
<td>数字字符</td>
</tr>
<tr>
<td>\D</td>
<td>[^0-9]</td>
<td>非数字字符</td>
</tr>
<tr>
<td>\s</td>
<td>[ \t\n\x0B\f\r]</td>
<td>空白字符</td>
</tr>
<tr>
<td>\S</td>
<td>[^ \t\n\x0B\f\r]</td>
<td>非空白字符</td>
</tr>
<tr>
<td>\w</td>
<td>[a-zA-Z_0-9]</td>
<td>单词字符(所有的字母)</td>
</tr>
<tr>
<td>\W</td>
<td>[^a-zA-Z_0-9]</td>
<td>非单词字符</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="regexp">/\d/</span>.test(  <span class="string">&quot;3&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/\d/</span>.test(  <span class="string">&quot;w&quot;</span>  ))  <span class="comment">//false  </span></span><br><span class="line">alert(<span class="regexp">/\D/</span>.test(  <span class="string">&quot;w&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/\w/</span>.test(  <span class="string">&quot;w&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/\w/</span>.test(  <span class="string">&quot;司&quot;</span>  ))  <span class="comment">//false  </span></span><br><span class="line">alert(<span class="regexp">/\W/</span>.test(  <span class="string">&quot;徒&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/\s/</span>.test(  <span class="string">&quot; &quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/\S/</span>.test(  <span class="string">&quot; &quot;</span>  ))  <span class="comment">//false  </span></span><br><span class="line">alert(<span class="regexp">/\S/</span>.test(  <span class="string">&quot;正&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/./</span>.test(  <span class="string">&quot;美&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/./</span>.test(  <span class="string">&quot; &quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line"><span class="keyword">var</span>  a =   <span class="string">&quot;\n\       &quot;</span>  </span><br><span class="line">alert(<span class="regexp">/./</span>.test(a))  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-量词"><a href="#3-4-量词" class="headerlink" title="3.4 量词"></a>3.4 量词</h4><p>由于元字符与特殊字符或字符类或者它们的组合（中括号）甚至它们的马甲（预定义类）都是一对一进行匹配。我们要匹配“司徒正美这个词”，最简单都要/…./，如果长到50多个字符岂不是要死人。因此我们逼切需要一个简单的操作，来处理这数量关系。</p>
<p>简单量词</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>?</td>
<td>软性量词</td>
<td>出现零次或一次</td>
</tr>
<tr>
<td>*</td>
<td>软性量词</td>
<td>出现零次或多次(任意次)</td>
</tr>
<tr>
<td>+</td>
<td>软性量词</td>
<td>出现一次或多次（至道一次）</td>
</tr>
<tr>
<td>{n}</td>
<td>硬性量词</td>
<td>对应零次或者n次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>软性量词</td>
<td>至少出现n次但不超过m次</td>
</tr>
<tr>
<td>{n,}</td>
<td>软性量词</td>
<td>至少出现n次(+的升级版)</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="regexp">/..../</span>.test(  <span class="string">&quot;司徒正美&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/司徒正美/</span>.test(  <span class="string">&quot;司徒正美&quot;</span>  ))  <span class="comment">//true </span></span><br><span class="line">alert(<span class="regexp">/[\u4e00-\u9fa5]&#123;4&#125;/</span>.test(  <span class="string">&quot;司徒正美&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[\u4e00-\u9fa5]&#123;4&#125;/</span>.test(  <span class="string">&quot;司徒正美55&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/^[\u4e00-\u9fa5]+$/</span>.test(  <span class="string">&quot;正则表达式&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/^[\u4e00-\u9fa5]+$/</span>.test(  <span class="string">&quot;正则表达式&amp;*@@&quot;</span>  ))  <span class="comment">//false  </span></span><br><span class="line">alert(<span class="regexp">/\d&#123;6&#125;/</span>.test(  <span class="string">&quot;123456&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[ruby]&#123;2&#125;/</span>.test(  <span class="string">&quot;rr&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[ruby]&#123;2&#125;/</span>.test(  <span class="string">&quot;ru&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(<span class="regexp">/[ruby]&#123;2&#125;/</span>.test(  <span class="string">&quot;ry&quot;</span>  ))  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>/[\u4e00-\u9fa5]/用于匹配单个汉字。</p>
<p>贪婪量词，惰性量词与支配性量词</p>
<p>贪婪量词，上面提到的所有简单量词。就像成语中说的巴蛇吞象那样，一口吞下整个字符串，发现吞不下（匹配不了），再从后面一点点吐出来（去掉最后一个字符，再看这时这个整个字符串是否匹配，不断这样重复直到长度为零）</p>
<p>隋性量词，在简单量词后加问号。由于太懒了，先吃了前面第一个字符，如果不饱再捏起多添加一个（发现不匹配，就读下第二个，与最初的组成一个有两个字符串的字符串再尝试匹配，如果再不匹配，再吃一个组成拥有三个字符的字符串……）。其工作方式与贪婪量词相反。</p>
<p>支配性量词，在简单量词后加加号。上面两种都有个不断尝试的过程，而支配性量词却只尝试一次，不合口味就算了。就像一个出身高贵居支配地位的公主。但你也可以说它是最懒量词。由于javascript不支持，所以它连出场的机会也没有了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> re1 = <span class="regexp">/.*bbb/g</span>;  <span class="comment">//贪婪  </span></span><br><span class="line"><span class="keyword">var</span> re2 = <span class="regexp">/.*?bbb/g</span>;  <span class="comment">//惰性  </span></span><br><span class="line"><span class="comment">// var re3 = /.*+bbb/g;//支配性,javascript不支持，IE与所有最新的标准浏览器都报错  </span></span><br><span class="line">alert(re1.test(  <span class="string">&quot;abbbaabbbaaabbbb1234&quot;</span>  )+  <span class="string">&quot;&quot;</span>  );  <span class="comment">//true  </span></span><br><span class="line">alert(re1.exec(  <span class="string">&quot;abbbaabbbaaabbbb1234&quot;</span>  )+  <span class="string">&quot;&quot;</span>  );  <span class="comment">//null  </span></span><br><span class="line">alert(  <span class="string">&quot;abbbaabbbaaabbbb1234&quot;</span>  .match(re1)+  <span class="string">&quot;&quot;</span>  );  <span class="comment">//abbbaabbbaaabbbb</span></span><br><span class="line">alert(re2.test(  <span class="string">&quot;abbbaabbbaaabbbb1234&quot;</span>  )+  <span class="string">&quot;&quot;</span>  );  <span class="comment">//true  </span></span><br><span class="line">alert(re2.exec(  <span class="string">&quot;abbbaabbbaaabbbb1234&quot;</span>  )+  <span class="string">&quot;&quot;</span>  );  <span class="comment">//aabbb  </span></span><br><span class="line">alert(  <span class="string">&quot;abbbaabbbaaabbbb1234&quot;</span>  .match(re2)+  <span class="string">&quot;&quot;</span>  );  <span class="comment">//abbb,aabbb,aaabbb</span></span><br></pre></td></tr></table></figure>

<h4 id="3-5-分组"><a href="#3-5-分组" class="headerlink" title="3.5 分组"></a>3.5 分组</h4><p>到目前为止，我们只能一个字符到匹配，虽然量词的出现，能帮助我们处理一排密紧密相连的同类型字符。但这是不够的，下面该轮到小括号出场了，中括号表示范围内选择，大括号表示重复次数。小括号允许我们重复多个字符。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分组+量词  </span></span><br><span class="line">alert(<span class="regexp">/(dog)&#123;2&#125;/</span>.test(  <span class="string">&quot;dogdog&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line"><span class="comment">//分组+范围  </span></span><br><span class="line">alert(  <span class="string">&quot;baddad&quot;</span>  .match(<span class="regexp">/([bd]ad?)*/</span>))  <span class="comment">//baddad,dad  </span></span><br><span class="line"><span class="comment">//分组+分组  </span></span><br><span class="line">alert(  <span class="string">&quot;mon and dad&quot;</span>  .match(<span class="regexp">/(mon( and dad)?)/</span>))  <span class="comment">//mon and dad,mon and dad, and dad</span></span><br></pre></td></tr></table></figure>

<h4 id="3-6-反向引用"><a href="#3-6-反向引用" class="headerlink" title="3.6 反向引用"></a>3.6 反向引用</h4><p>反向引用标识由正则表达式中的匹配组捕获的子字符串。每个反向引用都由一个编号或名称来标识，并通过“\编号”表示法进行引用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> color =   <span class="string">&quot;#990000&quot;</span>  ;  </span><br><span class="line"><span class="regexp">/  #(\d+)/</span>.test(color);  </span><br><span class="line">alert(<span class="built_in">RegExp</span>.$1);  <span class="comment">//990000</span></span><br><span class="line">alert(<span class="regexp">/(dog)\1/</span>.test(  <span class="string">&quot;dogdog&quot;</span>  ))  <span class="comment">//true</span></span><br><span class="line"><span class="keyword">var</span> num =   <span class="string">&quot;1234 5678&quot;</span>  ;</span><br><span class="line"><span class="keyword">var</span> newNum = num.replace(<span class="regexp">/(\d&#123;4&#125;) (\d&#123;4&#125;)/</span>,  <span class="string">&quot;$2 $1&quot;</span>  );  </span><br><span class="line">alert(newNum)</span><br></pre></td></tr></table></figure>

<h4 id="3-7-候选"><a href="#3-7-候选" class="headerlink" title="3.7 候选"></a>3.7 候选</h4><p>继续在分组上做文章。在分组中插入管道符（“|”），把它划分为两个或多个候多项。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  reg = <span class="regexp">/(red|black|yellow)!!/</span>;  alert(reg.test(  <span class="string">&quot;red!!&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(reg.test(  <span class="string">&quot;black!!&quot;</span>  ))  <span class="comment">//true  </span></span><br><span class="line">alert(reg.test(  <span class="string">&quot;yellow!!&quot;</span>  ))  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h4 id="3-8-非捕获性分组"><a href="#3-8-非捕获性分组" class="headerlink" title="3.8 非捕获性分组"></a>3.8 非捕获性分组</h4><p>并不是所有分组都能创建反向引用，有一种特别的分组称之为非捕获性分组，它是不会创建反向引用。反之，就是捕获性分组。要创建一个非捕获性分组，只要在分组的左括号的后面紧跟一个问号与冒号就行了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  color =   <span class="string">&quot;#990000&quot;</span>  ;</span><br><span class="line"><span class="regexp">/  #(?:\d+)/</span>.test(color); </span><br><span class="line">alert(<span class="built_in">RegExp</span>.$1);  <span class="comment">//&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>题目，移除所有标签，只留下innerText!</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> html =   <span class="string">&quot;&lt;p&gt;&lt;a href=&#x27;http://www.cnblogs.com/rubylouvre/&#x27;&gt;Ruby Louvre&lt;/a&gt;by &lt;em&gt;司徒正美&lt;/em&gt;&lt;/p&gt;&quot;</span>  ;  </span><br><span class="line"><span class="keyword">var</span> text = html.replace(<span class="regexp">/&lt;(?:.|\s)*?&gt;/g</span>,   <span class="string">&quot;&quot;</span>  );  </span><br><span class="line">alert(text)</span><br></pre></td></tr></table></figure>

<p>注意：javascript不存在命名分组</p>
<h5 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻"></a>前瞻</h5><p>继续在分组内做文章。前瞻与后瞻其实都属于零宽断言，但javascript不支持后瞻。</p>
<table>
<thead>
<tr>
<th>零宽断言</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>正则</td>
<td>名称</td>
<td>描述</td>
</tr>
<tr>
<td>(?=exp)</td>
<td>正向前瞻</td>
<td>匹配exp前面的位置</td>
</tr>
<tr>
<td>(?!exp)</td>
<td>负向前瞻</td>
<td>匹配后面不是exp的位置</td>
</tr>
<tr>
<td>(?&lt;=exp)</td>
<td>正向后瞻</td>
<td>匹配exp后面的位置不支持</td>
</tr>
<tr>
<td>(?&lt;!exp)</td>
<td>负向后瞻</td>
<td>匹配前面不是exp的位置不支持</td>
</tr>
</tbody></table>
<p>正向前瞻用来检查接下来的出现的是不是某个特定的字符集。而负向前瞻则是检查接下来的不应该出现的特定字符串集。零宽断言是不会被捕获的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  str1 =   <span class="string">&quot;bedroom&quot;</span>  ;  </span><br><span class="line"><span class="keyword">var</span>  str2 =   <span class="string">&quot;bedding&quot;</span>  ;  </span><br><span class="line"><span class="keyword">var</span>  reBed = <span class="regexp">/(bed(?=room))  /</span><span class="regexp">//</span>在我们捕获bed这个字符串时，抢先去看接下来的字符串是不是room  </span><br><span class="line">alert(reBed.test(str1));  <span class="comment">//true </span></span><br><span class="line">alert(<span class="built_in">RegExp</span>.$1)  <span class="comment">//bed  </span></span><br><span class="line">alert(<span class="built_in">RegExp</span>.$2 ===   <span class="string">&quot;&quot;</span>  )  <span class="comment">//true </span></span><br><span class="line">alert(reBed.test(str2))  <span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span>  str1 =   <span class="string">&quot;bedroom&quot;</span>  ; </span><br><span class="line"><span class="keyword">var</span>  str2 =   <span class="string">&quot;bedding&quot;</span>  ; </span><br><span class="line"><span class="keyword">var</span>  reBed = <span class="regexp">/(bed(?!room))/</span>   <span class="comment">//要来它后面不能是room  </span></span><br><span class="line">alert(reBed.test(str1))  <span class="comment">//false  </span></span><br><span class="line">alert(reBed.test(str2))  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>题目，移除hr以外的所有标签，只留下innerText!</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  html =   <span class="string">&quot;&lt;p&gt;&lt;a href=&#x27;http://www.cnblogs.com/rubylouvre/&#x27;&gt;Ruby Louvre&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;by &lt;em&gt;司徒正美&lt;/em&gt;&lt;/p&gt;&quot;</span>  ; </span><br><span class="line"><span class="keyword">var</span>  text = html.replace(<span class="regexp">/&lt;(?!hr)(?:.|\s)*?&gt;/ig</span>,  <span class="string">&quot;&quot;</span>  ) </span><br><span class="line">alert(text)  <span class="comment">//Ruby Louvre&lt;hr/&gt;by 司徒正美</span></span><br></pre></td></tr></table></figure>

<h5 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h5><p>一个要与字符类合用的东西。</p>
<table>
<thead>
<tr>
<th>边界</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>正则</td>
<td>名称</td>
<td>描述</td>
</tr>
<tr>
<td>^</td>
<td>开头</td>
<td>注意不能紧跟于左中括号的后面</td>
</tr>
<tr>
<td>$</td>
<td>结尾</td>
<td></td>
</tr>
<tr>
<td>\b</td>
<td>单词边界</td>
<td>指[a-zA-Z_0-9]之外的字符</td>
</tr>
<tr>
<td>\B</td>
<td>非单词边界</td>
<td></td>
</tr>
</tbody></table>
<p>题目，设计一个字符串原型方法，实现首字母大写！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  a =   <span class="string">&quot;ruby&quot;</span>  ;   </span><br><span class="line"><span class="built_in">String</span>.prototype.capitalize =   <span class="function"><span class="keyword">function</span>  (<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">this</span>.replace(<span class="regexp">/^\w/</span>,   <span class="function"><span class="keyword">function</span>  (<span class="params">s</span>) </span>&#123;        </span><br><span class="line">        <span class="keyword">return</span>  s.toUpperCase();       </span><br><span class="line">    &#125;);   </span><br><span class="line">&#125;  </span><br><span class="line">alert(a.capitalize())  <span class="comment">//Ruby</span></span><br></pre></td></tr></table></figure>

<p>单词边界举例。要匹配的东西的前端或未端不能为英文字母阿拉伯字数字或下横线。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  str =   <span class="string">&quot;12w-eefd&amp;efrew&quot;</span>  ;  </span><br><span class="line">alert(str.match(<span class="regexp">/\b\w+\b/g</span>))  <span class="comment">//12w,eefd,efrew</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>实例属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>global</td>
<td>是当前表达式模式首次匹配内容的开始位置，从0开始计数。其初始值为-1，每次成功匹配时，index属性都会随之改变。</td>
</tr>
<tr>
<td>ignoreCase</td>
<td>返回创建RegExp对象实例时指定的ignoreCase标志（i）的状态。如果创建RegExp对象实例时设置了i标志，该属性返回True，否则返回False，默认值为False。</td>
</tr>
<tr>
<td>lastIndex</td>
<td>是当前表达式模式首次匹配内容中最后一个字符的下一个位置，从0开始计数，常被作为继续搜索时的起始位置，初始值为-1， 表示从起始位置开始搜索，每次成功匹配时，lastIndex属性值都会随之改变。(只有使用exec()或test()方法才会填入，否则为0)</td>
</tr>
<tr>
<td>multiLine</td>
<td>返回创建RegExp对象实例时指定的multiLine标志（m）的状态。如果创建RegExp对象实例时设置了m标志，该属性返回True，否则返回False，默认值为False。</td>
</tr>
<tr>
<td>source</td>
<td>返回创建RegExp对象实例时指定的表达式文本字符串。</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  str =   <span class="string">&quot;JS&#x27;s Louvre&quot;</span>  ;  </span><br><span class="line"><span class="keyword">var</span>  reg = <span class="regexp">/\w/g</span>; </span><br><span class="line">alert(reg.exec(str));  <span class="comment">//J  </span></span><br><span class="line">alert(reg.lastIndex);  <span class="comment">//1  </span></span><br><span class="line">alert(reg.exec(str));  <span class="comment">//S  </span></span><br><span class="line">alert(reg.lastIndex);  <span class="comment">//2  </span></span><br><span class="line">alert(reg.exec(str));  <span class="comment">//s  </span></span><br><span class="line">alert(reg.lastIndex);  <span class="comment">//4  </span></span><br><span class="line">alert(reg.exec(str));  <span class="comment">//L  </span></span><br><span class="line">alert(reg.lastIndex);  <span class="comment">//6</span></span><br></pre></td></tr></table></figure>



<h3 id="四、JavaScript字符串应用"><a href="#四、JavaScript字符串应用" class="headerlink" title="四、JavaScript字符串应用"></a>四、JavaScript字符串应用</h3><h4 id="4-1-回数"><a href="#4-1-回数" class="headerlink" title="4.1 回数"></a>4.1 回数</h4><p>对称数即一个数倒序时，和原数值一样。例如：11，22，111等。</p>
<p>现在利用所学js知识写一个取某范围内所有对称数的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseToNum</span>(<span class="params">num</span>)</span>&#123; <span class="comment">//将该数值反转，取其反转后的值</span></span><br><span class="line">    	<span class="string">&#x27;use strice&#x27;</span>;</span><br><span class="line">    	<span class="keyword">var</span> num = num;</span><br><span class="line">    	<span class="keyword">var</span> str = num.toString().split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    	<span class="keyword">var</span> reverseStr = str.reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    	<span class="keyword">var</span> reverseNum = <span class="built_in">Number</span>(reverseStr);</span><br><span class="line">    	<span class="keyword">return</span> reverseNum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   	<span class="function"><span class="keyword">function</span> <span class="title">isReverse</span>(<span class="params">num</span>)</span>&#123;<span class="comment">//判断该数值是否为对称数</span></span><br><span class="line">    	<span class="string">&#x27;use strice&#x27;</span>;</span><br><span class="line">    	<span class="keyword">var</span> num = num;</span><br><span class="line">    	<span class="keyword">if</span>(num == reverseToNum(num))&#123;</span><br><span class="line">    		<span class="keyword">return</span> num;</span><br><span class="line">    	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">countReverse</span>(<span class="params">num</span>)</span>&#123;<span class="comment">//计算某范围内对称数的总个数，将对称数存入数组并返回</span></span><br><span class="line">    	<span class="string">&#x27;use strice&#x27;</span>;</span><br><span class="line">		<span class="keyword">var</span> num = num;</span><br><span class="line">    	<span class="keyword">var</span> reverseArr = [];</span><br><span class="line">    	<span class="keyword">if</span>(<span class="keyword">typeof</span>(num)!=<span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">    		alert(<span class="string">&quot;please enter a number&quot;</span>);</span><br><span class="line">    		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">    		alert(<span class="string">&quot;please enter positive integer&quot;</span>);</span><br><span class="line">    		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=num;++i)&#123;</span><br><span class="line">    		<span class="keyword">if</span>(isReverse(i))&#123;</span><br><span class="line">    			reverseArr.push(i);</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> reverseArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="4-2-首字母转化为大写"><a href="#4-2-首字母转化为大写" class="headerlink" title="4.2 首字母转化为大写"></a>4.2 首字母转化为大写</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toUpCase</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"><span class="meta">	&#x27;use strict&#x27;</span></span><br><span class="line">	<span class="keyword">var</span> str = str;</span><br><span class="line">	<span class="keyword">var</span> strArr = str.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;strArr.length;++i)&#123;</span><br><span class="line">		strArr[i] = strArr[i].charAt(<span class="number">0</span>).toUpperCase() + strArr[i].slice(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> strArr.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript时间＆日期处理终极解决方案</title>
    <url>/JavaScript-dateTime/</url>
    <content><![CDATA[<p>要点：JavaScript日期格式化方案总结、最新消息（QQ/weChat）日期排序算法</p>
<span id="more"></span>

<h3 id="一、Date类型"><a href="#一、Date类型" class="headerlink" title="一、Date类型"></a>一、Date类型</h3><p>在讲述常见日期问题之前，先梳理一下Date类型的方法。 </p>
<p>ECMAScript中的Date类型使用自UTC（Coordinated in Universal Time，国际协调时间）<strong>1970年1月1日午夜（零时）</strong>开始经过的<u>毫秒数</u>来保存日期。</p>
<h4 id="1-1-常用方法列表"><a href="#1-1-常用方法列表" class="headerlink" title="1.1 常用方法列表"></a>1.1 常用方法列表</h4><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Date()</td>
<td>返回当日的日期和时间。</td>
</tr>
<tr>
<td>getDate()</td>
<td>从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td>
</tr>
<tr>
<td>getDay()</td>
<td>从 Date 对象返回一周中的某一天 (0 ~ 6)。</td>
</tr>
<tr>
<td>getMonth()</td>
<td>从 Date 对象返回月份 (0 ~ 11)。</td>
</tr>
<tr>
<td>getFullYear()</td>
<td>从 Date 对象以四位数字返回年份。</td>
</tr>
<tr>
<td>getHours()</td>
<td>返回 Date 对象的小时 (0 ~ 23)。</td>
</tr>
<tr>
<td>getMinutes()</td>
<td>返回 Date 对象的分钟 (0 ~ 59)。</td>
</tr>
<tr>
<td>getSeconds()</td>
<td>返回 Date 对象的秒数 (0 ~ 59)。</td>
</tr>
<tr>
<td>getMilliseconds()</td>
<td>返回 Date 对象的毫秒(0 ~ 999)。</td>
</tr>
<tr>
<td>getTime()</td>
<td>返回 1970 年 1 月 1 日至今的毫秒数。</td>
</tr>
<tr>
<td>getTimezoneOffset()</td>
<td>返回本地时间与格林威治标准时间 (GMT) 的分钟差。</td>
</tr>
<tr>
<td>parse()</td>
<td>返回1970年1月1日午夜到指定日期（字符串）的毫秒数。</td>
</tr>
<tr>
<td>setDate()</td>
<td>设置 Date 对象中月的某一天 (1 ~ 31)。</td>
</tr>
<tr>
<td>setMonth()</td>
<td>设置 Date 对象中月份 (0 ~ 11)。</td>
</tr>
<tr>
<td>setFullYear()</td>
<td>设置 Date 对象中的年份（四位数字）。</td>
</tr>
<tr>
<td>setHours()</td>
<td>设置 Date 对象中的小时 (0 ~ 23)。</td>
</tr>
<tr>
<td>setMinutes()</td>
<td>设置 Date 对象中的分钟 (0 ~ 59)。</td>
</tr>
<tr>
<td>setSeconds()</td>
<td>设置 Date 对象中的秒钟 (0 ~ 59)。</td>
</tr>
<tr>
<td>setMilliseconds()</td>
<td>设置 Date 对象中的毫秒 (0 ~ 999)。</td>
</tr>
<tr>
<td>setTime()</td>
<td>以毫秒设置 Date 对象。</td>
</tr>
<tr>
<td>toSource()</td>
<td>返回该对象的源代码。</td>
</tr>
<tr>
<td>toString()</td>
<td>把 Date 对象转换为字符串。</td>
</tr>
<tr>
<td>toTimeString()</td>
<td>把 Date 对象的时间部分转换为字符串。</td>
</tr>
<tr>
<td>toDateString()</td>
<td>把 Date 对象的日期部分转换为字符串。</td>
</tr>
<tr>
<td>toUTCString()</td>
<td>根据世界时，把 Date 对象转换为字符串。</td>
</tr>
<tr>
<td>toLocaleString()</td>
<td>根据本地时间格式，把 Date 对象转换为字符串。</td>
</tr>
<tr>
<td>toLocaleTimeString()</td>
<td>根据本地时间格式，把 Date 对象的时间部分转换为字符串。</td>
</tr>
<tr>
<td>toLocaleDateString()</td>
<td>根据本地时间格式，把 Date 对象的日期部分转换为字符串。</td>
</tr>
<tr>
<td>UTC()</td>
<td>根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。</td>
</tr>
<tr>
<td>valueOf()</td>
<td>返回 Date 对象的原始值。</td>
</tr>
</tbody></table>
<h4 id="1-2-时间日期格式参数"><a href="#1-2-时间日期格式参数" class="headerlink" title="1.2 时间日期格式参数"></a>1.2 时间日期格式参数</h4><h5 id="（1）年月日"><a href="#（1）年月日" class="headerlink" title="（1）年月日"></a>（1）年月日</h5><table>
<thead>
<tr>
<th>Input</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>YYYY</code></td>
<td><code>2014</code></td>
<td>4 or 2 digit year</td>
</tr>
<tr>
<td><code>YY</code></td>
<td><code>14</code></td>
<td>2 digit year</td>
</tr>
<tr>
<td><code>Y</code></td>
<td><code>-25</code></td>
<td>Year with any number of digits and sign</td>
</tr>
<tr>
<td><code>Q</code></td>
<td><code>1..4</code></td>
<td>Quarter of year. Sets month to first month in quarter.</td>
</tr>
<tr>
<td><code>M MM</code></td>
<td><code>1..12</code></td>
<td>Month number</td>
</tr>
<tr>
<td><code>MMM MMMM</code></td>
<td><code>Jan..December</code></td>
<td>Month name in locale set by <code>moment.locale()</code></td>
</tr>
<tr>
<td><code>D DD</code></td>
<td><code>1..31</code></td>
<td>Day of month</td>
</tr>
<tr>
<td><code>Do</code></td>
<td><code>1st..31st</code></td>
<td>Day of month with ordinal</td>
</tr>
<tr>
<td><code>DDD DDDD</code></td>
<td><code>1..365</code></td>
<td>Day of year</td>
</tr>
<tr>
<td><code>X</code></td>
<td><code>1410715640.579</code></td>
<td>Unix timestamp</td>
</tr>
<tr>
<td><code>x</code></td>
<td><code>1410715640579</code></td>
<td>Unix ms timestamp</td>
</tr>
</tbody></table>
<h5 id="（2）时分秒"><a href="#（2）时分秒" class="headerlink" title="（2）时分秒"></a>（2）时分秒</h5><table>
<thead>
<tr>
<th>Input</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>H HH</code></td>
<td><code>0..23</code></td>
<td>24 hour time</td>
</tr>
<tr>
<td><code>h hh</code></td>
<td><code>1..12</code></td>
<td>12 hour time used with <code>a A</code>.</td>
</tr>
<tr>
<td><code>a A</code></td>
<td><code>am pm</code></td>
<td>Post or ante meridiem (Note the one character <code>a p</code> are also considered valid)</td>
</tr>
<tr>
<td><code>m mm</code></td>
<td><code>0..59</code></td>
<td>Minutes</td>
</tr>
<tr>
<td><code>s ss</code></td>
<td><code>0..59</code></td>
<td>Seconds</td>
</tr>
<tr>
<td><code>S SS SSS</code></td>
<td><code>0..999</code></td>
<td>Fractional seconds</td>
</tr>
<tr>
<td><code>Z ZZ</code></td>
<td><code>+12:00</code></td>
<td>Offset from UTC as <code>+-HH:mm</code>, <code>+-HHmm</code>, or <code>Z</code></td>
</tr>
</tbody></table>
<h4 id="1-3-补充"><a href="#1-3-补充" class="headerlink" title="1.3 补充"></a>1.3 补充</h4><blockquote>
<p><strong>TimeZone&amp;UTC Offsets:时区与偏移</strong></p>
<p>人们经常会把时区与UTC偏移量搞混，UTC偏移量代表了某个具体的时间值与UTC时间之间的差异，通常用HH:mm形式表述。而TimeZone则表示某个地理区域，某个TimeZone中往往会包含多个偏移量，而多个时区可能在一年的某些时间有相同的偏移量。譬如America/Chicago, America/Denver, 以及 America/Belize在一年中不同的时间都会包含 -06:00 这个偏移。</p>
</blockquote>
<p>1、格林威治时间</p>
<p>格林威治时间是指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().getTimezoneOffset() / <span class="number">60</span>;    <span class="comment">// -8，即英国的当地时间比中国的北京时间晚8小时</span></span><br></pre></td></tr></table></figure>

<p>2、可以通过<code>getUTCMonth</code>、<code>setUTCMonth</code>等方法设置世界时的年、月、日、时、分、秒、毫秒。</p>
<p>3、把Date对象转化为字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().toString();      <span class="comment">// &quot;Fri Aug 05 2016 11:54:25 GMT+0800 (CST)&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().toDateString()   <span class="comment">// &quot;Fri Aug 05 2016&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().toTimeString()   <span class="comment">// &quot;11:54:48 GMT+0800 (CST)&quot;</span></span><br></pre></td></tr></table></figure>

<p>4、获取指定时间毫秒</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2016年8月5日</span></span><br><span class="line"><span class="built_in">Date</span>.parse(<span class="string">&#x27;08/14/2021&#x27;</span>);               <span class="comment">// 1628870400000</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;08/14/2021&#x27;</span>).getTime();       <span class="comment">// 1628870400000</span></span><br><span class="line"><span class="built_in">Date</span>.UTC(<span class="number">2021</span>, <span class="number">8</span>, <span class="number">14</span>);                   <span class="comment">// 1631577600000</span></span><br></pre></td></tr></table></figure>

<p>UTC()方法中，月份从0开始且获得的毫秒值是世界时（即需要+8小时）</p>
<p>5、需要注意合理处理跨月、跨年的问题。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>, <span class="number">7</span>, <span class="number">32</span>);  <span class="comment">// Thu Sep 01 2016 00:00:00 GMT+0800 (CST)</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>, <span class="number">12</span>, <span class="number">1</span>);  <span class="comment">// Sun Jan 01 2017 00:00:00 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure>



<h3 id="二、应用"><a href="#二、应用" class="headerlink" title="二、应用"></a>二、应用</h3><h4 id="2-1-获取过去第n天的时间"><a href="#2-1-获取过去第n天的时间" class="headerlink" title="2.1 获取过去第n天的时间"></a>2.1 获取过去第n天的时间</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取过去的n天</span></span><br><span class="line"><span class="comment"> * @param data 过去的天数</span></span><br><span class="line"><span class="comment"> * @param date 指定日期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBeforeDay</span>(<span class="params">data, date</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> date = date || <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">        timezone = <span class="string">&quot;+08:00&quot;</span>;    <span class="comment">// 时区</span></span><br><span class="line">    <span class="keyword">var</span> now = setTimezone.call(date, timezone.replace(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;.&quot;</span>)); <span class="comment">// 获取指定时区的当前日期</span></span><br><span class="line">    <span class="keyword">var</span> beforeDay = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(now.toString()) - <span class="number">86400000</span> * data);</span><br><span class="line">    <span class="keyword">return</span> format.call(beforeDay, <span class="string">&quot;yyyy/MM/dd&quot;</span>); <span class="comment">// 格式化日期</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置时区</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">tzn</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;setTimezone&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTimezone</span>(<span class="params">tzn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回指定日期与格林威治标准时间 (GMT) 的分钟差[注意，东时区为负值]</span></span><br><span class="line">    tzn = tzn * <span class="number">60</span> * -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 当前时间-相差毫秒数[注意，东时区为负值]</span></span><br><span class="line">    <span class="built_in">this</span>.setTime(<span class="built_in">this</span>.getTime() - (tzn - <span class="built_in">this</span>.getTimezoneOffset()) * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期格式化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">format</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;*&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span> (<span class="params">format</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = &#123;</span><br><span class="line">        <span class="string">&quot;M+&quot;</span>: <span class="built_in">this</span>.getMonth() + <span class="number">1</span>,   <span class="comment">//month</span></span><br><span class="line">        <span class="string">&quot;d+&quot;</span>: <span class="built_in">this</span>.getDate(),      <span class="comment">//day</span></span><br><span class="line">        <span class="string">&quot;h+&quot;</span>: <span class="built_in">this</span>.getHours(),     <span class="comment">//hour</span></span><br><span class="line">        <span class="string">&quot;m+&quot;</span>: <span class="built_in">this</span>.getMinutes(),   <span class="comment">//minute</span></span><br><span class="line">        <span class="string">&quot;s+&quot;</span>: <span class="built_in">this</span>.getSeconds(),   <span class="comment">//second</span></span><br><span class="line">        <span class="string">&quot;q+&quot;</span>: <span class="built_in">Math</span>.floor((<span class="built_in">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//quarter</span></span><br><span class="line">        <span class="string">&quot;S&quot;</span>: <span class="built_in">this</span>.getMilliseconds() <span class="comment">//millisecond</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(format)) &#123;</span><br><span class="line">        format = format.replace(<span class="built_in">RegExp</span>.$1, (<span class="built_in">this</span>.getFullYear() + <span class="string">&quot;&quot;</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$1.length));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;(&quot;</span> + k + <span class="string">&quot;)&quot;</span>).test(format)) &#123;</span><br><span class="line">            format = format.replace(<span class="built_in">RegExp</span>.$1, <span class="built_in">RegExp</span>.$1.length == <span class="number">1</span> ? o[k] : (<span class="string">&quot;00&quot;</span> + o[k]).substr((<span class="string">&quot;&quot;</span> + o[k]).length));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> format;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-获取指定月份的天数"><a href="#2-2-获取指定月份的天数" class="headerlink" title="2.2 获取指定月份的天数"></a>2.2 获取指定月份的天数</h4><h5 id="方式一：日历字典表"><a href="#方式一：日历字典表" class="headerlink" title="方式一：日历字典表"></a>方式一：日历字典表</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定月份的天数</span></span><br><span class="line"><span class="comment"> * 像月份、星期这样可列举且不易发生改变、数据项不是很大的，建议使用字典直接展现出来！！</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>year 年份，如：2016</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>month 月份，如：0（注意，遵循默认日历，从0开始）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDaysInMonth</span> (<span class="params">year, month</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">31</span>, (isLeapYear(year) ? <span class="number">29</span> : <span class="number">28</span>), <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>][month];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否为瑞年</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLeapYear</span>(<span class="params">year</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> ((year % <span class="number">4</span> === <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> !== <span class="number">0</span>) || year % <span class="number">400</span> === <span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方式二：通过日历构造器"><a href="#方式二：通过日历构造器" class="headerlink" title="方式二：通过日历构造器"></a>方式二：通过日历构造器</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定月份的天数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>year 年份，如：2021</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>month 月份，如：0（注意，遵循默认日历，从0开始）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDaysInMonth</span> (<span class="params">year, month</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将天置为0，会获取其上个月的最后一天</span></span><br><span class="line">    <span class="comment">// 获取1月份的天数</span></span><br><span class="line">    <span class="comment">// new Date(2021, 2 , 0) ==&gt; Sun Feb 28 2021 00:00:00 GMT+0800 (GMT+08:00)</span></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(year, month + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> date.getDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-获取上个周的开始时间（上周一）-amp-结束时间（上周日）"><a href="#2-3-获取上个周的开始时间（上周一）-amp-结束时间（上周日）" class="headerlink" title="2.3 获取上个周的开始时间（上周一）&amp;结束时间（上周日）"></a>2.3 获取上个周的开始时间（上周一）&amp;结束时间（上周日）</h4><p>获取本周第一天，然后before(1)、before(7)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayOfLastWeek</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> weekday = <span class="keyword">new</span> <span class="built_in">Date</span>().getDay();  <span class="comment">// 获取当前是周几（周日：0）</span></span><br><span class="line">        weekday = weekday === <span class="number">0</span> ? <span class="number">7</span> : weekday;</span><br><span class="line">    <span class="keyword">var</span> firstDay = getBeforeDay(weekday + <span class="number">7</span> -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> lastDay = getBeforeDay(weekday);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">lastWeekFirstDay</span>: firstDay,</span><br><span class="line">        <span class="attr">lastWeekLastDay</span>: lastDay</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-获取上个月的开始时间和结束时间"><a href="#2-4-获取上个月的开始时间和结束时间" class="headerlink" title="2.4 获取上个月的开始时间和结束时间"></a>2.4 获取上个月的开始时间和结束时间</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * new Date(年, 月, 日)  ==&gt; 月份从0开始</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayOfLastMonth</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">        currentMonth = date.getMonth();</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">lastMonthFirstDay</span>: format.call(<span class="keyword">new</span> <span class="built_in">Date</span>(date.getFullYear(), currentMonth - <span class="number">1</span>, <span class="number">1</span>), <span class="string">&quot;yyyy/MM/dd&quot;</span>),</span><br><span class="line">        <span class="attr">lastMonthLastDay</span>: format.call(<span class="keyword">new</span> <span class="built_in">Date</span>(date.getFullYear(), currentMonth, <span class="number">0</span>), <span class="string">&quot;yyyy/MM/dd&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-5-将2021-8-4转换成2021-08-04格式"><a href="#2-5-将2021-8-4转换成2021-08-04格式" class="headerlink" title="2.5 将2021-8-4转换成2021-08-04格式"></a>2.5 将2021-8-4转换成2021-08-04格式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strDate = <span class="string">&#x27;2005-8-5&#x27;</span>; </span><br><span class="line">strDate.replace(<span class="regexp">/\b(\w)\b/g</span>, <span class="string">&#x27;0$1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-6-间隔天数"><a href="#2-6-间隔天数" class="headerlink" title="2.6 间隔天数"></a>2.6 间隔天数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> IntervalDays = (<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2021/8/14&#x27;</span>)-<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2020/8/14&#x27;</span>))/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>+<span class="string">&quot;天&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(IntervalDays)</span><br></pre></td></tr></table></figure>

<h4 id="2-7-间隔时间"><a href="#2-7-间隔时间" class="headerlink" title="2.7 间隔时间"></a>2.7 间隔时间</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date1=<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2021/08/14 10:00:00&quot;</span>); </span><br><span class="line"><span class="keyword">var</span> date2=<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2021/08/13 10:00:01&quot;</span>); </span><br><span class="line"><span class="keyword">var</span> date3=date1-date2; </span><br><span class="line"><span class="keyword">var</span> h=<span class="built_in">Math</span>.floor(date3/<span class="number">3600000</span>); </span><br><span class="line"><span class="keyword">var</span> m=<span class="built_in">Math</span>.floor((date3-h*<span class="number">3600000</span>)/<span class="number">60000</span>); </span><br><span class="line"><span class="keyword">var</span> s=(date3-h*<span class="number">3600000</span>-m*<span class="number">60000</span>)/<span class="number">1000</span>; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;相差&quot;</span>+h+<span class="string">&quot;小时&quot;</span>+m+<span class="string">&quot;分&quot;</span>+s+<span class="string">&quot;秒&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-8-当天日期"><a href="#2-8-当天日期" class="headerlink" title="2.8 当天日期"></a>2.8 当天日期</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">d = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="keyword">var</span> today = d.getFullYear()+<span class="string">&quot;年&quot;</span>+(d.getMonth()+<span class="number">1</span>)+<span class="string">&quot;月&quot;</span>+d.getDate()+<span class="string">&quot;日&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">detialTime</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> old = <span class="keyword">new</span> <span class="built_in">Date</span>(d)</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="comment">// 获取old时间</span></span><br><span class="line">    <span class="comment">// let d = old.getTime()</span></span><br><span class="line">    <span class="keyword">let</span> h = old.getHours()</span><br><span class="line">    <span class="keyword">let</span> m = old.getMinutes()</span><br><span class="line">    <span class="keyword">let</span> Y = old.getFullYear()</span><br><span class="line">    <span class="keyword">let</span> M = old.getMonth()+<span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> D = old.getDate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理时间</span></span><br><span class="line">    <span class="keyword">if</span> (M&lt;<span class="number">10</span>) M = <span class="string">&#x27;0&#x27;</span> + M</span><br><span class="line">    <span class="keyword">if</span> (D&lt;<span class="number">10</span>) D=<span class="string">&#x27;0&#x27;</span> + D</span><br><span class="line">    <span class="keyword">if</span>(h&lt;<span class="number">10</span>) h=<span class="string">&#x27;0&#x27;</span>+h</span><br><span class="line">    <span class="keyword">if</span>(m&lt;<span class="number">10</span>) m=<span class="string">&#x27;0&#x27;</span>+m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Y+<span class="string">&#x27;-&#x27;</span>+M+<span class="string">&#x27;-&#x27;</span>+D+<span class="string">&#x27; &#x27;</span>+h+<span class="string">&#x27;:&#x27;</span>+m</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-9-数字日期转汉字"><a href="#2-9-数字日期转汉字" class="headerlink" title="2.9 数字日期转汉字"></a>2.9 数字日期转汉字</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.getRead = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;零&quot;</span>, <span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;六&quot;</span>, <span class="string">&quot;七&quot;</span>, <span class="string">&quot;八&quot;</span>, <span class="string">&quot;九&quot;</span>); </span><br><span class="line">    <span class="keyword">var</span> returnValue, temp; </span><br><span class="line">    returnValue = <span class="built_in">this</span>.getYear()+<span class="string">&quot;年&quot;</span>; </span><br><span class="line">    temp = (<span class="built_in">this</span>.getMonth()+<span class="number">1</span>)+<span class="string">&quot;月&quot;</span>+<span class="built_in">this</span>.getDate()+<span class="string">&quot;日&quot;</span>; </span><br><span class="line">    temp = temp.replace(<span class="regexp">/(\d)(\d)/g</span>,<span class="string">&quot;$1十$2&quot;</span>).replace(<span class="regexp">/1十/g</span>,<span class="string">&quot;十&quot;</span>).replace(<span class="regexp">/十0/g</span>,<span class="string">&quot;十&quot;</span>); </span><br><span class="line">    returnValue += temp; </span><br><span class="line">    returnValue = returnValue.replace(<span class="regexp">/\d/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">sts</span>)</span>&#123;<span class="keyword">return</span> values[<span class="built_in">parseInt</span>(sts)]&#125;); </span><br><span class="line">    <span class="keyword">return</span> returnValue; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> t=<span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="built_in">document</span>.write(t.getRead());</span><br></pre></td></tr></table></figure>

<h4 id="2-10-前N天或后N天的日期"><a href="#2-10-前N天或后N天的日期" class="headerlink" title="2.10 前N天或后N天的日期"></a>2.10 前N天或后N天的日期</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showdate</span>(<span class="params">n</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> uom = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>()-<span class="number">0</span>+n*<span class="number">86400000</span>); </span><br><span class="line">    uom = uom.getFullYear() + <span class="string">&quot;-&quot;</span> + (uom.getMonth()+<span class="number">1</span>) + <span class="string">&quot;-&quot;</span> + uom.getDate(); </span><br><span class="line">    <span class="keyword">return</span> uom; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;今天是：&quot;</span>+showdate(<span class="number">0</span>)); </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;昨天是：&quot;</span>+showdate(-<span class="number">1</span>)); </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;明天是：&quot;</span>+showdate(<span class="number">1</span>)); </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;10天前是：&quot;</span>+showdate(-<span class="number">10</span>)); </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;5天后是：&quot;</span>+showdate(<span class="number">5</span>)); </span><br></pre></td></tr></table></figure>

<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showdate</span>(<span class="params">n</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> uom = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line">    uom.setDate(uom.getDate()+n); </span><br><span class="line">    uom = uom.getFullYear() + <span class="string">&quot;-&quot;</span> + (uom.getMonth()+<span class="number">1</span>) + <span class="string">&quot;-&quot;</span> + uom.getDate(); </span><br><span class="line">    <span class="keyword">return</span> uom; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;今天是：&quot;</span>+showdate(<span class="number">0</span>)); </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;昨天是：&quot;</span>+showdate(-<span class="number">1</span>)); </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;明天是：&quot;</span>+showdate(<span class="number">1</span>)); </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;10天前是：&quot;</span>+showdate(-<span class="number">10</span>)); </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;5天后是：&quot;</span>+showdate(<span class="number">5</span>)); </span><br></pre></td></tr></table></figure>

<h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.getDays=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> _newDate=<span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line">    _newDate.setMonth(_newDate.getMonth()+<span class="number">1</span>); </span><br><span class="line">    _newDate.setDate(<span class="number">0</span>); </span><br><span class="line">    $_days=_newDate.getDate(); </span><br><span class="line">    <span class="keyword">delete</span> _newDate; </span><br><span class="line">    <span class="keyword">return</span> $_days; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showdate</span>(<span class="params">n</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> uom = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line">    uom.setDate(uom.getDate()+n); </span><br><span class="line">    uom = uom.getFullYear() + <span class="string">&quot;-&quot;</span> + (uom.getMonth()+<span class="number">1</span>) + <span class="string">&quot;-&quot;</span> + uom.getDate()+<span class="string">&quot;\n星期&quot;</span>+(<span class="string">&#x27;天一二三四五六&#x27;</span>.charAt(uom.getDay()))+<span class="string">&quot;\n本月有&quot;</span>+ uom.getDays()+<span class="string">&quot;天&quot;</span>; </span><br><span class="line">    <span class="keyword">return</span> uom; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;今天是：&quot;</span>+showdate(<span class="number">0</span>)); </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;昨天是：&quot;</span>+showdate(-<span class="number">1</span>)); </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;明天是：&quot;</span>+showdate(<span class="number">1</span>)); </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;10天前是：&quot;</span>+showdate(-<span class="number">10</span>)); </span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;5天后是：&quot;</span>+showdate(<span class="number">5</span>)); </span><br></pre></td></tr></table></figure>

<h4 id="2-11-倒计时"><a href="#2-11-倒计时" class="headerlink" title="2.11 倒计时"></a>2.11 倒计时</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="comment">//创建目标日期</span></span><br><span class="line">    <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2019-9-1 00:00:00&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> seconds = <span class="built_in">parseInt</span>((endTime.getTime() - nowTime.getTime()) / <span class="number">1000</span>);<span class="comment">//两个时间点的时间差(秒)</span></span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(seconds / <span class="number">3600</span> / <span class="number">24</span>);<span class="comment">//得到天数</span></span><br><span class="line">    <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(seconds / <span class="number">3600</span> % <span class="number">24</span>);<span class="comment">//小时</span></span><br><span class="line">    <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(seconds / <span class="number">60</span> % <span class="number">60</span>);<span class="comment">//分钟</span></span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(seconds % <span class="number">60</span>);<span class="comment">//秒</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;djs&quot;</span>).innerHTML = <span class="string">&quot;距离开学还有&quot;</span> + d +<span class="string">&quot;天&quot;</span> + h + <span class="string">&quot;小时&quot;</span> + m + <span class="string">&quot;分钟&quot;</span> + s + <span class="string">&quot;秒&quot;</span>;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前时间　</span></span><br><span class="line"><span class="keyword">var</span> curTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结束时间</span></span><br><span class="line"><span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2015,6,6&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取剩余天数</span></span><br><span class="line"><span class="keyword">var</span> days = <span class="built_in">Math</span>.ceil((endTime.getTime()-curTime.getTime())/(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;距高考只剩：&quot;</span>+days+<span class="string">&quot;天&quot;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="2-12-日期排序"><a href="#2-12-日期排序" class="headerlink" title="2.12 日期排序"></a>2.12 日期排序</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayList = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;2020年活动事件&#x27;</span>,</span><br><span class="line">        <span class="attr">startData</span>: <span class="string">&#x27;2020-07-01&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;2019年活动事件&#x27;</span>,</span><br><span class="line">        <span class="attr">startData</span>: <span class="string">&#x27;2019-08-01&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;2021活动事件&#x27;</span>,</span><br><span class="line">        <span class="attr">startData</span>: <span class="string">&#x27;2021-07-01&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;2022活动事件&#x27;</span>,</span><br><span class="line">        <span class="attr">startData</span>: <span class="string">&#x27;2022-06-08&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 升序</span></span><br><span class="line"><span class="keyword">const</span> timeData =  arrayList.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.startData &gt; b.startData ? <span class="number">1</span> : -<span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line"><span class="keyword">const</span> timeData =  arrayList.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.startData &lt; b.startData ? <span class="number">1</span> : -<span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="2-13-QQ首页消息日期处理"><a href="#2-13-QQ首页消息日期处理" class="headerlink" title="2.13 QQ首页消息日期处理"></a>2.13 QQ首页消息日期处理</h4><p>效果：</p>
<table>
<thead>
<tr>
<th>消息更新日期</th>
<th>显示格式</th>
</tr>
</thead>
<tbody><tr>
<td>当天消息</td>
<td>11:30</td>
</tr>
<tr>
<td>昨天消息</td>
<td>昨天12::30</td>
</tr>
<tr>
<td>大于两天的消息</td>
<td>2021/8/13</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">dataTime</span>(<span class="params">d</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> old = <span class="keyword">new</span> <span class="built_in">Date</span>(d)</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="comment">// 获取old时间</span></span><br><span class="line">    <span class="comment">// let d = old.getTime()</span></span><br><span class="line">    <span class="keyword">let</span> h = old.getHours()</span><br><span class="line">    <span class="keyword">let</span> m = old.getMinutes()</span><br><span class="line">    <span class="keyword">let</span> Y = old.getFullYear()</span><br><span class="line">    <span class="keyword">let</span> M = old.getMonth()+<span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> D = old.getDate()</span><br><span class="line">    <span class="comment">// 获取now时间</span></span><br><span class="line">    <span class="keyword">let</span> nd = now.getTime()</span><br><span class="line">    <span class="keyword">let</span> nh = now.getHours()</span><br><span class="line">    <span class="keyword">let</span> n = now.getMinutes()</span><br><span class="line">    <span class="keyword">let</span> nY = now.getFullYear()</span><br><span class="line">    <span class="keyword">let</span> nM = now.getMonth()+<span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> nD = now.getDate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息是当天，则显示:小时+分钟</span></span><br><span class="line">    <span class="keyword">if</span> (D===nD &amp;&amp; M===nM &amp;&amp; Y===nY) &#123;</span><br><span class="line">        <span class="keyword">if</span>(h&lt;<span class="number">10</span>) h=<span class="string">&#x27;0&#x27;</span>+h</span><br><span class="line">        <span class="keyword">if</span>(m&lt;<span class="number">10</span>) m=<span class="string">&#x27;0&#x27;</span>+m</span><br><span class="line">        <span class="keyword">return</span> h+<span class="string">&#x27;:&#x27;</span>+m</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 消息是昨天</span></span><br><span class="line">    <span class="keyword">if</span> (D+<span class="number">1</span>===nD &amp;&amp; M===nM &amp;&amp; Y===nY) &#123;</span><br><span class="line">        <span class="keyword">if</span>(h&lt;<span class="number">10</span>) h=<span class="string">&#x27;0&#x27;</span>+h</span><br><span class="line">        <span class="keyword">if</span>(m&lt;<span class="number">10</span>) m=<span class="string">&#x27;0&#x27;</span>+m</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;昨天 &#x27;</span>+h+<span class="string">&#x27;:&#x27;</span>+m</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 消息大于两天</span></span><br><span class="line">        <span class="keyword">return</span> Y+<span class="string">&#x27;/&#x27;</span>+M+<span class="string">&#x27;/&#x27;</span>+D</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;今天是：&quot;</span>+showdate(<span class="number">0</span>),<span class="string">&quot;消息更新日期：&quot;</span>+dataTime(showdate(<span class="number">0</span>)))	<span class="comment">// 今天是：2021-8-14 消息更新日期：00:00</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;昨天是：&quot;</span>+showdate(-<span class="number">1</span>),<span class="string">&quot;消息更新日期：&quot;</span>+dataTime(showdate(-<span class="number">1</span>))) <span class="comment">// 昨天是：2021-8-13 消息更新日期：昨天 00:00</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;前天是：&quot;</span>+showdate(-<span class="number">2</span>),<span class="string">&quot;消息更新日期：&quot;</span>+dataTime(showdate(-<span class="number">2</span>))) <span class="comment">// 前天是：2021-8-12 消息更新日期：2021/8/12</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>[showdate()](#2.10 前N天或后N天的日期)为获取前N天或后N天日期。</p>
</blockquote>
<h4 id="2-14-根据文件创建日期为文件命名"><a href="#2-14-根据文件创建日期为文件命名" class="headerlink" title="2.14 根据文件创建日期为文件命名"></a>2.14 根据文件创建日期为文件命名</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每天建的文件夹名称</span></span><br><span class="line"><span class="function"><span class="title">fileName</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> old = <span class="keyword">new</span> <span class="built_in">Date</span>(e)</span><br><span class="line">    <span class="comment">// 获取old时间</span></span><br><span class="line">    <span class="keyword">let</span> Y = old.getFullYear()</span><br><span class="line">    <span class="keyword">let</span> M = old.getMonth()+<span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> D = old.getDate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理时间</span></span><br><span class="line">    <span class="keyword">if</span> (M&lt;<span class="number">10</span>) M = <span class="string">&#x27;0&#x27;</span> + M</span><br><span class="line">    <span class="keyword">if</span> (D&lt;<span class="number">10</span>) D=<span class="string">&#x27;0&#x27;</span> + D</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Y+M+D</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>





















]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】20-GLSL ES着色器语言语法详解</title>
    <url>/20-GLSL%20ES%E7%9D%80%E8%89%B2%E5%99%A8%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3-GLSLES/</url>
    <content><![CDATA[<p>对应《WebGL编程指南》第六章 GLSL ES</p>
<span id="more"></span>

<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>本章知识点：</p>
<p>1、数据、变量和变量类型</p>
<p>2、矢量、矩阵、结构体、数组、采样器（纹理）</p>
<p>3、运算、程序流、函数</p>
<p>4、attribute、uniform和varying变量</p>
<p>5、精度限定词</p>
<p>6、预处理和指令</p>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="基本着色器代码"><a href="#基本着色器代码" class="headerlink" title="基本着色器代码"></a>基本着色器代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顶点着色器程序</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec2 a_TexCoord;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec2 v_TexCoord;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_TexCoord = a_TexCoord;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//片元着色器程序</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform sampler2D u_Sampler0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform sampler2D u_Sampler1;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec2 v_TexCoord;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   vec4 color0 = texture2D(u_Sampler0, v_TexCoord);\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   vec4 color1 = texture2D(u_Sampler1, v_TexCoord);\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = color0 * color1;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、GLSL-ES概述"><a href="#一、GLSL-ES概述" class="headerlink" title="一、GLSL ES概述"></a>一、GLSL ES概述</h3><p>​        <code>GLSL ES</code>编程语言是在<code>OpenGL</code>着色器语言（GLSL）基础上，删除和简化一部分功能后形成的。各位看到<code>ES</code>版本应该会想到<code>GLSL ES</code>应用在手机、游戏主机等设备上，这样可以<strong>降低硬件的功耗，同时也能减少性能开销</strong>。</p>
<p>​        <code>GLSL ES</code>的语法与C语言类似。此外，着色器语言也开始被用来完成一些通用的任务，如图像处理和数据运算（所谓的GPGPU）。</p>
<h3 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h3><h4 id="2-1-基础"><a href="#2-1-基础" class="headerlink" title="2.1 基础"></a>2.1 基础</h4><p>​     <code>GLSL ES</code>对大小写是敏感的，例如：<code>Niuniu</code>和<code>niuniu</code>这就对应的是两个不同的变量；</p>
<p>​     每条语句都要有<code>;</code>结束</p>
<h4 id="2-2-执行次序"><a href="#2-2-执行次序" class="headerlink" title="2.2 执行次序"></a>2.2 执行次序</h4><p>​     每个着色器程序都要有<code>main()</code>函数，就像<code>C语言</code>一样，每个着色器程序都从<code>main</code>开始执行，但是<code>GLSL ES</code>中的<code>main()</code>函数并<strong>不接收任何参数</strong>，并且必须是<code>void</code>类型；</p>
<p>​     <code>void</code>表示函数没有返回值，若有返回值，需明确返回值类型。</p>
<h4 id="2-3-注释"><a href="#2-3-注释" class="headerlink" title="2.3 注释"></a>2.3 注释</h4><p>​     单行注释使用<code>//</code>，多行注释则是<code>/* 注释 */</code>；</p>
<h3 id="三、数据值类型（数值额布尔值）"><a href="#三、数据值类型（数值额布尔值）" class="headerlink" title="三、数据值类型（数值额布尔值）"></a>三、数据值类型（数值额布尔值）</h3><p><strong>3.1</strong> <code>GLSL ES</code>支持两种数据值类型：</p>
<p>​     <strong>数值类型</strong>：<code>GLSL ES</code>支持整数类型和浮点数，没有小数点的值被认定为整数类型，而有小数点的则被认为是浮点数；</p>
<p>​     <strong>布尔值类型</strong>：<code>true</code>和<code>false</code>，无需多言。</p>
<blockquote>
<p><code>GLSL ES</code>不支持字符串类型，虽然字符串对三维图形语言来说还是有一定意义的。</p>
</blockquote>
<h3 id="四、变量"><a href="#四、变量" class="headerlink" title="四、变量"></a>四、变量</h3><h4 id="4-1-变量名规则"><a href="#4-1-变量名规则" class="headerlink" title="4.1 变量名规则"></a>4.1 变量名规则</h4><ul>
<li><p>只能由<code>a-z</code>、<code>A-Z</code>、<code>0-9</code>以及<code>_</code>组成</p>
</li>
<li><p>变量名的第一个字符不能为数字</p>
</li>
<li><p>不能以<code>gl_</code>、<code>webgl_</code>或<code>_webgl</code>开头，这些前缀已被<code>OpenGL ES</code>保留了</p>
</li>
<li><p>不能是下表中所列出的关键字</p>
</li>
</ul>
<p><img src="/images/glsles1.jpg" alt="1"></p>
<p>​        GLSL ES保留字：</p>
<p><img src="/images/glsles2.jpg" alt="2"></p>
<h4 id="4-2-GLSL-ES是强类型语言"><a href="#4-2-GLSL-ES是强类型语言" class="headerlink" title="4.2 GLSL ES是强类型语言"></a>4.2 GLSL ES是强类型语言</h4><p>​    声明变量的方式：&lt;类型&gt; &lt;变量名&gt;，例：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec4</span> a_Position</span><br></pre></td></tr></table></figure>

<blockquote>
<p>进行赋值操作时，等号左右两侧的数据类型必须一致。</p>
</blockquote>
<h3 id="五、基本类型"><a href="#五、基本类型" class="headerlink" title="五、基本类型"></a>五、基本类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>单精度浮点类型</td>
</tr>
<tr>
<td>int</td>
<td>整型数</td>
</tr>
<tr>
<td>bool</td>
<td>布尔值</td>
</tr>
</tbody></table>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明变量</span></span><br><span class="line"><span class="type">float</span> fnumber = <span class="number">1.1</span>;	<span class="comment">// 浮点数</span></span><br><span class="line"><span class="type">int</span> inumber = <span class="number">1</span>;	<span class="comment">// 整型</span></span><br><span class="line"><span class="type">bool</span> blogic = <span class="literal">true</span>;	<span class="comment">// 布尔型</span></span><br></pre></td></tr></table></figure>

<h4 id="5-1-赋值和类型转换"><a href="#5-1-赋值和类型转换" class="headerlink" title="5.1 赋值和类型转换"></a>5.1 赋值和类型转换</h4><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 强制类型转换</span></span><br><span class="line"><span class="type">int</span> fresult = <span class="type">int</span>(fnumber);	<span class="comment">// 去掉小数部分，例如：3.14转换为3</span></span><br><span class="line"><span class="type">bool</span> bresult = <span class="type">int</span>(blogic);	<span class="comment">// true转为1，false转为0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iresult = <span class="type">float</span>(inumber);	<span class="comment">// 整型转换为浮点数，例如：3转换为3.0</span></span><br><span class="line">bresult = <span class="type">float</span>(blogic);	<span class="comment">// 布尔型转换为浮点数，true转为1.0，false转为0.0</span></span><br><span class="line"></span><br><span class="line">iresult = <span class="type">bool</span>(inumber);	<span class="comment">// 整型转换为布尔型，0转为false，其余非0数转为true</span></span><br><span class="line">fresult = <span class="type">bool</span>(fnumber);	<span class="comment">// 整型转换为布尔型，0.0转为false，其余非0.0数转为true</span></span><br></pre></td></tr></table></figure>

<h4 id="5-2-运算符"><a href="#5-2-运算符" class="headerlink" title="5.2 运算符"></a>5.2 运算符</h4><table>
<thead>
<tr>
<th>类别</th>
<th>GLSL ES数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>-  *  /  +</td>
<td>加减乘除</td>
</tr>
<tr>
<td>++  –</td>
<td>自增、自减</td>
</tr>
<tr>
<td>=  +=  -=  *=  /=</td>
<td>赋值、算术赋值</td>
</tr>
<tr>
<td>&lt;  &gt;  &lt;=  &gt;=  ==  !=</td>
<td>比较</td>
</tr>
<tr>
<td>!</td>
<td>取反</td>
</tr>
<tr>
<td>&amp;&amp;  ||  ^^</td>
<td>逻辑与、或、异或</td>
</tr>
<tr>
<td>?  :</td>
<td>三元运算符</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>逻辑与（&amp;&amp;）</strong>：只有第一个表达式的计算值为true时才会计算第二个表达式（找错）。</p>
<p><strong>逻辑或（||）</strong>：只有第一个表达式的计算值为false时才会计算第二个表达式（找对）。</p>
<p><strong>逻辑异或（^^）</strong>：只有当左右两个表达式中有且仅有一个为true时，运算结果为true，否则为false。</p>
</blockquote>
<h3 id="六、矢量和矩阵"><a href="#六、矢量和矩阵" class="headerlink" title="六、矢量和矩阵"></a>六、矢量和矩阵</h3><h4 id="6-1-矢量和矩阵举例"><a href="#6-1-矢量和矩阵举例" class="headerlink" title="6.1 矢量和矩阵举例"></a>6.1 矢量和矩阵举例</h4><p>矢量 $\begin{pmatrix}<br>    8 &amp; 3 &amp; 0<br>\end{pmatrix}<br>$        矩阵$<br>\begin{bmatrix}<br>    8 &amp; 3 &amp; 0 \\<br>    4 &amp; 3 &amp; 6 \\<br>    3 &amp; 2 &amp; 6<br>\end{bmatrix}<br>$​</p>
<h4 id="6-2-矢量和矩阵的类型"><a href="#6-2-矢量和矩阵的类型" class="headerlink" title="6.2 矢量和矩阵的类型"></a>6.2 矢量和矩阵的类型</h4><table>
<thead>
<tr>
<th>类别</th>
<th>GLSL ES</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>矢量</td>
<td>vec2、vec3、vec4</td>
<td>具有2/3/4个浮点数元素的矢量</td>
</tr>
<tr>
<td></td>
<td>ivec2、ivec3、ivec4</td>
<td>具有2/3/4个整型数元素的矢量</td>
</tr>
<tr>
<td></td>
<td>bvec2、bvec3、bvec4</td>
<td>具有2/3/4个布尔值元素的矢量</td>
</tr>
<tr>
<td>矩阵</td>
<td>mat2、mat3、mat4</td>
<td>2x2、3x3、4x4的浮点数元素的矩阵</td>
</tr>
</tbody></table>
<h4 id="6-3-赋值和构造"><a href="#6-3-赋值和构造" class="headerlink" title="6.3 赋值和构造"></a>6.3 赋值和构造</h4><p><strong>6.3.1</strong> 通常使用与数据类型同名的内置构造函数来生成变量，对于vec4类型，就可以使用内置的<code>vec4()</code>函数，如：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec4</span> v4 = <span class="type">vec4</span>(<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>);</span><br></pre></td></tr></table></figure>

<p><strong>6.3.2</strong> 构造函数</p>
<p>概念：专门创建指定类型的变量的函数被称为<strong>构造函数</strong>，构造函数的名称和其创建的变量的类型名称总数一致的。</p>
<h4 id="6-4-矢量构造函数"><a href="#6-4-矢量构造函数" class="headerlink" title="6.4 矢量构造函数"></a>6.4 矢量构造函数</h4><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec3</span> v3 = <span class="type">vec3</span>(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.5</span>);	<span class="comment">// 将矢量v3设为(1.0, 0.0, 0.5)</span></span><br><span class="line"><span class="type">vec2</span> v2 = <span class="type">vec2</span>(v3);	<span class="comment">// 使用v3的前两个值，将v2设为(1.0, 0.0)</span></span><br><span class="line"><span class="type">vec4</span> v4 = <span class="type">vec4</span>(<span class="number">1.0</span>);	<span class="comment">// 将v4设为(1.0, 1.0, 1.0, 1.0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以使用多个矢量组合成一个矢量，例如：</span></span><br><span class="line"><span class="type">vec4</span> v4_2 = <span class="type">vec4</span>(v2, v4);	<span class="comment">// 将v4_2设为(1.0, 0.0, 1.0, 1.0)，如果v2没有填满就继续用第二个参数v4中的元素填充</span></span><br></pre></td></tr></table></figure>

<h4 id="6-5-矩阵构造函数"><a href="#6-5-矩阵构造函数" class="headerlink" title="6.5 矩阵构造函数"></a>6.5 矩阵构造函数</h4><p>​        矩阵构造函数的使用方式与矢量构造函数的使用方式类似，但是要保证存储在矩阵中的元素是按照<a href="https://freepiao.cn/2021/07/26/RotatedTriangle-Matrix/#%E5%88%86%E6%9E%90%E4%BB%A3%E7%A0%812%EF%BC%9A">列主序</a>排列的。下面是使用矩阵构造函数的不同方式。</p>
<h5 id="6-5-1-方式一"><a href="#6-5-1-方式一" class="headerlink" title="6.5.1 方式一"></a>6.5.1 方式一</h5><p>​        使用矩阵构造函数：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">mat4</span> m4 = <span class="type">mat4</span>(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>,</span><br><span class="line">              <span class="number">5.0</span>, <span class="number">6.0</span>, <span class="number">7.0</span>, <span class="number">8.0</span>,</span><br><span class="line">              <span class="number">9.0</span>, <span class="number">10.0</span>, <span class="number">11.0</span>, <span class="number">12.0</span>,</span><br><span class="line">              <span class="number">13.0</span>, <span class="number">14.0</span>, <span class="number">15.0</span>, <span class="number">16.0</span>);</span><br></pre></td></tr></table></figure>

<p>上面构造的<code>4 x 4</code>矩阵对应的是：$<br>\begin{bmatrix}<br>    1.0 &amp; 5.0 &amp; 9.0 &amp; 13.0 \\<br>    2.0 &amp; 6.0 &amp; 10.0 &amp; 14.0 \\<br>    3.0 &amp; 7.0 &amp; 11.0 &amp; 15.0 \\<br>    4.0 &amp; 8.0 &amp; 12.0 &amp; 16.0<br>\end{bmatrix}<br>$</p>
<h5 id="6-5-2-方式二"><a href="#6-5-2-方式二" class="headerlink" title="6.5.2 方式二"></a>6.5.2 方式二</h5><p>​        也可以向矩阵构造函数中传入一个或多个矢量，按照<strong>列主序</strong>使用矢量里的元素值来构造矩阵：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec2</span> v2_1 = <span class="type">vec2</span>(<span class="number">1.0</span>, <span class="number">3.0</span>);</span><br><span class="line"><span class="type">vec2</span> v2_2 = <span class="type">vec2</span>(<span class="number">2.0</span>, <span class="number">4.0</span>);</span><br><span class="line"><span class="type">mat2</span> m2_1 = <span class="type">mat2</span>(v2_1, v2_2);</span><br><span class="line"><span class="comment">// ┌1.0 2.0┐</span></span><br><span class="line"><span class="comment">// └3.0 4.0┘</span></span><br><span class="line"></span><br><span class="line"><span class="type">vec4</span> v4 = <span class="type">vec4</span>(<span class="number">1.0</span>, <span class="number">3.0</span>, <span class="number">2.0</span>, <span class="number">4.0</span>);</span><br><span class="line"><span class="type">mat2</span> m2_2 = <span class="type">mat2</span>(v4);</span><br><span class="line"><span class="comment">// ┌1.0 2.0┐</span></span><br><span class="line"><span class="comment">// └3.0 4.0┘</span></span><br></pre></td></tr></table></figure>

<h5 id="6-5-3-方式三"><a href="#6-5-3-方式三" class="headerlink" title="6.5.3 方式三"></a>6.5.3 方式三</h5><p>​        当然使用浮点数和矢量组合的方式来构造矩阵也是可以的：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec2</span> v2 = <span class="type">vec2</span>(<span class="number">2.0</span>, <span class="number">4.0</span>);</span><br><span class="line"><span class="type">mat2</span> m2 = <span class="type">mat2</span>(<span class="number">1.0</span>, <span class="number">3.0</span>, v2);</span><br><span class="line"><span class="comment">// ┌1.0 2.0┐</span></span><br><span class="line"><span class="comment">// └3.0 4.0┘</span></span><br></pre></td></tr></table></figure>

<h5 id="6-5-4-方式四"><a href="#6-5-4-方式四" class="headerlink" title="6.5.4 方式四"></a>6.5.4 方式四</h5><p>​        如果想构造单位矩阵，那么有更简单的方式：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">mat3</span> m3 = <span class="type">mat3</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="comment">// ┌1.0 0.0 0.0┐</span></span><br><span class="line"><span class="comment">// |0.0 1.0 0.0 |</span></span><br><span class="line"><span class="comment">// └0.0 0.0 1.0┘</span></span><br><span class="line"></span><br><span class="line"><span class="type">mat4</span> m4 = <span class="type">mat4</span>(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)	<span class="comment">// 出错，mat4对象需要16个元素</span></span><br></pre></td></tr></table></figure>

<h4 id="6-6-访问矢量和矩阵的元素"><a href="#6-6-访问矢量和矩阵的元素" class="headerlink" title="6.6 访问矢量和矩阵的元素"></a>6.6 访问矢量和矩阵的元素</h4><p>​        为了访问矢量或矩阵中的元素，可以使用<code>.</code>或<code>[]</code>运算符，下面将详细叙述。</p>
<h5 id="6-6-1-访问矢量元素"><a href="#6-6-1-访问矢量元素" class="headerlink" title="6.6.1 访问矢量元素"></a>6.6.1 访问矢量元素</h5><h6 id="运算符"><a href="#运算符" class="headerlink" title=".运算符"></a><code>.</code>运算符</h6><p>​        在矢量变量名后接<code>.</code>运算符，然后接分量名，就可以访问矢量的元素了。<strong>矢量的分量名</strong>如下表：</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>x，y，z，w</td>
<td>用来获取顶点坐标的分量</td>
</tr>
<tr>
<td>r，g，b，a</td>
<td>用来获取颜色分量</td>
</tr>
<tr>
<td>s，t，p，q</td>
<td>用来获取纹理坐标分量</td>
</tr>
</tbody></table>
<blockquote>
<p>事实上，任何矢量的x、r或s分量都会返回第一个分量</p>
</blockquote>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec4</span> v4 = <span class="type">vec4</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// v4.x;</span></span><br><span class="line"><span class="comment">// v4.y;</span></span><br><span class="line"><span class="comment">// v4.r;</span></span><br></pre></td></tr></table></figure>

<h6 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h6><p>​        其实，任何矢量的<code>x</code>、<code>r</code>或<code>s</code>都是返回第一个分量值，同理<code>y</code>/<code>g</code>/<code>t</code>返回第二个分量。我们还可以通过下面的方式给其他矢量赋值：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec4</span> v4 = <span class="type">vec4</span>(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">vec2</span> v2 = v4.xy;	<span class="comment">// v2 = (0.0, 1.0)	</span></span><br><span class="line"><span class="type">vec2</span> v2 = v4.yx;	<span class="comment">// v2 = (1.0, 0.0)	可逆序</span></span><br><span class="line"><span class="type">vec2</span> v2 = v4.xx;	<span class="comment">// v2 = (0.0, 0.0)	可重复</span></span><br><span class="line"><span class="type">vec3</span> v3 = v4.yzw;	<span class="comment">// v2 = (1.0, 1.0, 0.5)	可跳过</span></span><br><span class="line"><span class="type">vec3</span> v3 = v4.xzw;	<span class="comment">// v2 = (0.0, 1.0, 0.5)	可跳过</span></span><br></pre></td></tr></table></figure>

<p>​        上面的代码中，将同一个集合的多个分量名共同置于<em>点运算符</em>后，就可以从矢量中同时提取出多个分量，这个过程也称作<strong>混合</strong>。当然，聚合分量名也可以作为<em>赋值表达式</em>的<em>左值</em>：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec4</span> position = <span class="type">vec4</span>(<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>);</span><br><span class="line">position.xw = <span class="type">vec2</span>(<span class="number">5.0</span>, <span class="number">6.0</span>);	<span class="comment">// position=(5.0,2.0,3.0,6.0)</span></span><br></pre></td></tr></table></figure>

<h5 id="6-6-2-访问矩阵元素"><a href="#6-6-2-访问矩阵元素" class="headerlink" title="6.6.2 访问矩阵元素"></a>6.6.2 访问矩阵元素</h5><h6 id="运算符-1"><a href="#运算符-1" class="headerlink" title="[]运算符"></a><code>[]</code>运算符</h6><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">mat4</span> m4 = <span class="type">mat4</span>(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>,</span><br><span class="line">              <span class="number">5.0</span>, <span class="number">6.0</span>, <span class="number">7.0</span>, <span class="number">8.0</span>,</span><br><span class="line">              <span class="number">9.0</span>, <span class="number">10.0</span>, <span class="number">11.0</span>, <span class="number">12.0</span>,</span><br><span class="line">              <span class="number">13.0</span>, <span class="number">14.0</span>, <span class="number">15.0</span>, <span class="number">16.0</span>);</span><br></pre></td></tr></table></figure>

<p>​        访问矩阵中元素可以像我们<code>JS</code>中访问二维数组一样：<code>m4[0][0]</code>，这就获取到了<code>m4</code>中的第一个元素<code>1.0</code>，在前面的介绍中有提到，可以使用矢量创建矩阵，当然我们也可以在矩阵中获取矢量：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec4</span> v4 = m4[<span class="number">0</span>];	<span class="comment">// 第一列元素 (1.0, 2.0, 3.0, 4.0)</span></span><br></pre></td></tr></table></figure>

<p>​        同样可以使用<em>点操作符</em>获取分量值：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> m1_2 = m4[<span class="number">0</span>].x;	<span class="comment">// 将m1_2设置为m4第1列的第1个元素</span></span><br><span class="line">m1_2 = m4[<span class="number">0</span>][<span class="number">1</span>];	<span class="comment">// 将m1_2设置为m4第1列的第2个元素</span></span><br></pre></td></tr></table></figure>

<h6 id="常量索引值"><a href="#常量索引值" class="headerlink" title="常量索引值"></a>常量索引值</h6><p>​        在<code>[]</code>中只能出现的索引值必须是<strong>常量索引值</strong>，其定义如下：</p>
<ul>
<li>整型字面量(如0或1)</li>
<li>用<code>const</code>修饰的全局变量或局部变量，不包括函数参数</li>
<li>循环索引</li>
<li>由前述三条的项组成的表达式</li>
</ul>
<p>​        下面这个例子就用到了const变量作为访问数组元素的索引：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="type">int</span> <span class="keyword">index</span> = <span class="number">0</span> <span class="comment">// 只读</span></span><br><span class="line"><span class="type">vec4</span> v4a = m4[<span class="keyword">index</span>]</span><br><span class="line">    </span><br><span class="line"><span class="type">vec4</span> v4b = m4[<span class="keyword">index</span> + <span class="number">1</span>] <span class="comment">// 表达式索引</span></span><br></pre></td></tr></table></figure>

<p>​        注意，不能使用未经const修饰的变量作为索引（除非是循环索引）</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="keyword">index</span> = <span class="number">0</span></span><br><span class="line"><span class="type">vec4</span> v4a = m4[<span class="keyword">index</span>] 	<span class="comment">// 错误使用  </span></span><br></pre></td></tr></table></figure>

<h4 id="6-7-运算"><a href="#6-7-运算" class="headerlink" title="6.7 运算"></a>6.7 运算</h4><h5 id="6-7-1-运算符"><a href="#6-7-1-运算符" class="headerlink" title="6.7.1 运算符"></a>6.7.1 运算符</h5><table>
<thead>
<tr>
<th>运算符</th>
<th>运算</th>
<th>使用数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>*  /</td>
<td>乘除</td>
<td>适用于vec[234]和mat[234]</td>
</tr>
<tr>
<td>+  -</td>
<td>加减</td>
<td></td>
</tr>
<tr>
<td>++  –</td>
<td>自增/减</td>
<td>适用于vec[234]和mat[234]</td>
</tr>
<tr>
<td>=  +=  -=  *=  /=</td>
<td>赋值、运算赋值</td>
<td>适用于vec[234]和mat[234]</td>
</tr>
<tr>
<td>==  !=</td>
<td>比较</td>
<td>适用于vec[234]和mat[234]，对于==，如果两个操作数的每一个分量都相同，那么返回true；对于!=，如果任意分量不同，返回true。</td>
</tr>
</tbody></table>
<blockquote>
<p>补充：</p>
<p>​    矢量和矩阵的比较不能使用&lt;、&gt;、&lt;=、&gt;=，应该使用内置函数如lessThan()；</p>
<p>​    若你想逐一分量比较，可使用内置函数equal()或notEqual()；</p>
<p>​    当运算赋值操作作用于矢量或矩阵时，实际上是逐分量地对每一个元素进行独立的运算。</p>
</blockquote>
<h5 id="6-7-2-矢量运算"><a href="#6-7-2-矢量运算" class="headerlink" title="6.7.2 矢量运算"></a>6.7.2 矢量运算</h5><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec2</span> v2_1 = (<span class="number">1.0</span>, <span class="number">2.0</span>);</span><br><span class="line"><span class="type">vec2</span> v2_2 = (<span class="number">0.1</span>, <span class="number">0.2</span>);</span><br><span class="line"><span class="type">float</span> f = <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加法</span></span><br><span class="line">v2_1 = v2_1 + v2_2;	<span class="comment">// (1.1, 2.2) → (v2_1.x + v2_2.x, v2_1.y + v2_2.y)</span></span><br><span class="line">v2_1 = v2_1 + f;	<span class="comment">// (1.6, 2.7) → (v2_1.x + f, v2_1.y + f)</span></span><br></pre></td></tr></table></figure>

<h5 id="6-7-3-矩阵运算"><a href="#6-7-3-矩阵运算" class="headerlink" title="6.7.3 矩阵运算"></a>6.7.3 矩阵运算</h5><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line"><span class="type">mat2</span> m2_1, m2_2;</span><br><span class="line"><span class="type">vec2</span> v2;</span><br><span class="line"><span class="type">float</span> f;</span><br></pre></td></tr></table></figure>

<h6 id="矩阵和浮点数运算"><a href="#矩阵和浮点数运算" class="headerlink" title="矩阵和浮点数运算"></a>矩阵和浮点数运算</h6><p>​        矩阵与浮点数的运算发生在每个分量上：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">m2_1 + f; <span class="comment">// m2_1[0].x + f; m2_1[0].y + f; m2_1[1].x + f; m2_1[1].y + f;</span></span><br></pre></td></tr></table></figure>

<h6 id="矩阵右乘矢量"><a href="#矩阵右乘矢量" class="headerlink" title="矩阵右乘矢量"></a>矩阵右乘矢量</h6><p>​    矩阵右乘矢量的结果是矢量，其中每个分量都是原矢量中的对应分量，<strong>乘</strong>上矩阵对应<strong>行</strong>的每个元素的<strong>积的和</strong>。可参考之前的<a href="https://freepiao.cn/2021/07/26/RotatedTriangle-Matrix/#%E4%B8%80%E3%80%81%E7%9F%A9%E9%98%B5%E5%92%8C%E7%9F%A2%E9%87%8F%E7%9A%84%E4%B9%98%E6%B3%95">矢量乘法实现旋转矩阵</a>。</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 矩阵右乘矢量</span></span><br><span class="line"><span class="type">vec2</span> v2_result = m2_1 * v2;	</span><br><span class="line"><span class="comment">// v2_result.x = m2_1[0].x * v2.x + m2_1[1].x * v2.y;</span></span><br><span class="line"><span class="comment">// v2_result.y = m2_1[0].y * v2.x + m2_1[1].y * v2.y;</span></span><br></pre></td></tr></table></figure>

<p>例：$<br>\begin{bmatrix}<br>    1 &amp; 2 &amp; 3 \\<br>    4 &amp; 1 &amp; 2 \\<br>    1 &amp; 1 &amp; 2<br>\end{bmatrix}<br>$​​​​ * $<br>\begin{bmatrix}<br>    2  \\<br>    3  \\<br>    1<br>\end{bmatrix}$​​​​ = $<br>\begin{bmatrix}<br>    11  \\<br>    13  \\<br>    7<br>\end{bmatrix}<br>$​​​​</p>
<h6 id="矩阵左乘矢量"><a href="#矩阵左乘矢量" class="headerlink" title="矩阵左乘矢量"></a>矩阵左乘矢量</h6><p>​        结果与右乘不同</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 矩阵左乘矢量</span></span><br><span class="line">v2_result = v2 * m2_1;	</span><br><span class="line"><span class="comment">// v2_result.x = v2.x * m2_1[0].x + v2.y * m2_1[0].y;</span></span><br><span class="line"><span class="comment">// v2_result.y = v2.x * m2_1[1].x + v2.y * m2_1[1].y;</span></span><br></pre></td></tr></table></figure>

<p>例： $<br>\begin{bmatrix}<br>    2  \\<br>    3  \\<br>    1<br>\end{bmatrix}$​  * $<br>\begin{bmatrix}<br>    1 &amp; 2 &amp; 3 \\<br>    4 &amp; 1 &amp; 2 \\<br>    1 &amp; 1 &amp; 2<br>\end{bmatrix}<br>$​​ = $<br>\begin{bmatrix}<br>    15  \\<br>    8  \\<br>    14<br>\end{bmatrix}<br>$​​</p>
<h6 id="矩阵与矩阵相乘"><a href="#矩阵与矩阵相乘" class="headerlink" title="矩阵与矩阵相乘"></a>矩阵与矩阵相乘</h6><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 矩阵相乘</span></span><br><span class="line"><span class="type">mat2</span> m2_result = m2_1 * m2_2;	</span><br><span class="line"><span class="comment">// m2_result[0].x = m2_1[0].x * m2_2[0].x + m2_1[1].x * m2_2[0].y;</span></span><br><span class="line"><span class="comment">// m2_result[1].x = m2_1[0].x * m2_2[1].x + m2_1[1].x * m2_2[1].y;</span></span><br><span class="line"><span class="comment">// m2_result[0].y = m2_1[0].y * m2_2[0].x + m2_1[1].y * m2_2[0].y;</span></span><br><span class="line"><span class="comment">// m2_result[1].y = m2_1[0].y * m2_2[1].x + m2_1[1].y * m2_2[1].y;</span></span><br><span class="line"></span><br><span class="line">m3a * m3b;  <span class="comment">// m3a[0][0] * m3b[0][0] + m3a[1][0] * m3b[0][1] + m3a[2][0] * m3b[0][2]</span></span><br><span class="line">            <span class="comment">// m3a[0][0] * m3b[1][0] + m3a[1][0] * m3b[1][1] + m3a[2][0] * m3b[1][2]</span></span><br><span class="line">            <span class="comment">// m3a[0][0] * m3b[2][0] + m3a[1][0] * m3b[2][1] + m3a[2][0] * m3b[2][2]</span></span><br><span class="line">            <span class="comment">// m3a[0][1] * m3b[0][0] + m3a[1][1] * m3b[0][1] + m3a[2][1] * m3b[0][2]</span></span><br><span class="line">            <span class="comment">// m3a[0][1] * m3b[1][0] + m3a[1][1] * m3b[1][1] + m3a[2][1] * m3b[1][2]</span></span><br><span class="line">            <span class="comment">// m3a[0][1] * m3b[2][0] + m3a[1][1] * m3b[2][1] + m3a[2][1] * m3b[2][2]</span></span><br><span class="line">            <span class="comment">// m3a[0][2] * m3b[0][0] + m3a[1][2] * m3b[0][1] + m3a[2][2] * m3b[0][2]</span></span><br><span class="line">            <span class="comment">// m3a[0][2] * m3b[1][0] + m3a[1][2] * m3b[1][1] + m3a[2][2] * m3b[1][2]</span></span><br><span class="line">            <span class="comment">// m3a[0][2] * m3b[2][0] + m3a[1][2] * m3b[2][1] + m3a[2][2] * m3b[2][2]</span></span><br></pre></td></tr></table></figure>

<h3 id="七、结构体"><a href="#七、结构体" class="headerlink" title="七、结构体"></a>七、结构体</h3><h4 id="7-1-结构体定义"><a href="#7-1-结构体定义" class="headerlink" title="7.1 结构体定义"></a>7.1 结构体定义</h4><p>​        在<code>GLSL ES</code>中可以使用<code>struct</code>关键字定义结构体：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义结构体</span></span><br><span class="line">struct light &#123;</span><br><span class="line">  <span class="type">vec4</span> color;</span><br><span class="line">  <span class="type">vec3</span> position;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明light类型变量</span></span><br><span class="line">light light_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了方便，也可以使用这种方式定义并声明一个结构体类型的变量</span></span><br><span class="line">struct light &#123;</span><br><span class="line">  <span class="type">vec4</span> color;</span><br><span class="line">  <span class="type">vec3</span> position;</span><br><span class="line">&#125; light_1;</span><br></pre></td></tr></table></figure>

<h4 id="7-2-赋值和构造"><a href="#7-2-赋值和构造" class="headerlink" title="7.2 赋值和构造"></a>7.2 赋值和构造</h4><p>​        结构体有标准的构造函数，其名称与结构体一致。构造函数的参数顺序必须与结构体定义中的成员顺序一致。</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">light_1 = light(<span class="type">vec4</span>(<span class="number">0.0</span>,<span class="number">1.0</span>,<span class="number">0.0</span>,<span class="number">1.0</span>), <span class="type">vec3</span>(<span class="number">8.0</span>,<span class="number">3.0</span>,<span class="number">0.0</span>))</span><br></pre></td></tr></table></figure>

<h4 id="7-3-访问成员"><a href="#7-3-访问成员" class="headerlink" title="7.3 访问成员"></a>7.3 访问成员</h4><p>​        通过<code>.</code>操作符访问成员变量：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">vec4</span> lcolor = light_1.color;</span><br></pre></td></tr></table></figure>

<h4 id="7-4-运算符"><a href="#7-4-运算符" class="headerlink" title="7.4 运算符"></a>7.4 运算符</h4><p>​        结构体的成员可参与与其自身类型支持的任何运算，但是结构体本身只支持赋值（=）和比较（==、!=）。</p>
<blockquote>
<p>赋值和比较运算符不适用于含有数组与纹理成员的结构体</p>
</blockquote>
<h3 id="八、数组"><a href="#八、数组" class="headerlink" title="八、数组"></a>八、数组</h3><h4 id="8-1-声明数组"><a href="#8-1-声明数组" class="headerlink" title="8.1 声明数组"></a>8.1 声明数组</h4><p>​        GLSL ES只支持一维数组，而且数组对象不支持pop()和push()等操作，创建数组时也不需要使用new运算符。声明方式如下：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> floatArray[<span class="number">4</span>]; <span class="comment">// 声明含有4个浮点数元素的数组</span></span><br><span class="line"><span class="type">vec4</span> vec4Array[<span class="number">2</span>]; <span class="comment">// 声明含有两个vec4对象的数组</span></span><br></pre></td></tr></table></figure>

<h4 id="8-2-定义数组"><a href="#8-2-定义数组" class="headerlink" title="8.2 定义数组"></a>8.2 定义数组</h4><p>数组的长度必须是大于0的<strong>整形常量表达式</strong>，如下定义：</p>
<ul>
<li><p>整形字面量（0、1）</p>
</li>
<li><p>用const限定字修饰的全局变量或局部变量，不包含函数参数</p>
</li>
<li><p>由上述两条中的项组成的表达式</p>
<p>因此，下面的代码将会出错：</p>
</li>
</ul>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> size = <span class="number">4</span>;</span><br><span class="line"><span class="type">vec4</span> vec4Array[size]; <span class="comment">//错误。如果第一行为const int size = 4;则不会报错</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：不可以用const限定字来修饰数组本身。</p>
</blockquote>
<p>​        只有整型常量表达式和uniform变量可以被用作数组的索引值，此外，与js或c不同，数组不能再声明时被一次性地初始化，而必须显式的对每个元素进行初始化。如下：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">vec4Array[<span class="number">0</span>] = <span class="type">vec4</span>(<span class="number">4.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>,<span class="number">9.0</span>)</span><br><span class="line">vec4Array[<span class="number">1</span>] = <span class="type">vec4</span>(<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>数组本身只支持<code>[]</code>运算符，但数组元素能够参与其自身类型支持的任意运算。</p>
</blockquote>
<h3 id="九、取样器（纹理）"><a href="#九、取样器（纹理）" class="headerlink" title="九、取样器（纹理）"></a>九、取样器（纹理）</h3><h4 id="9-1-概念"><a href="#9-1-概念" class="headerlink" title="9.1 概念"></a>9.1 概念</h4><p>​        我们必须通过取样器（sampler）类型变量访问纹理。有两种基本的取样器类型：<code>sampler2D</code>和<code>samplerCube</code>。<strong>取样器变量只能是uniform变量</strong>，或者需要访问纹理的函数，如texture2D()函数的参数。比如：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">uniform</span> smapler2D u_Sampler;</span><br></pre></td></tr></table></figure>

<p>​        并且，唯一能给取样器变量赋值的就是<em>纹理单元编号</em>，并且必须使用<code>WebGL</code>提供的方法<code>gl.uniform1i()</code>来赋值，比如在之前的文章中我们使用<code>gl.uniform1i(u_Sampler, 0)</code>将纹理单元编号0传给着色器。如：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">gl.uniform1i(u_Sampler, <span class="number">0</span>) <span class="comment">//将纹理单元编号0传给着色器</span></span><br></pre></td></tr></table></figure>

<h4 id="9-2-规范"><a href="#9-2-规范" class="headerlink" title="9.2 规范"></a>9.2 规范</h4><p>​        除了=、==、!=，取样器变量不可以作为操作参数与运算。</p>
<p>​        取样器类型变量受到着色器支持的纹理单元的最大数量限制，如下表。</p>
<table>
<thead>
<tr>
<th>着色器</th>
<th>表示最大数量的内置常量</th>
<th>最小数量</th>
</tr>
</thead>
<tbody><tr>
<td>顶点着色器</td>
<td>const mediump int gl_MaxVertexTextureImageUnits</td>
<td>0</td>
</tr>
<tr>
<td>片元着色器</td>
<td>const mediump int gl_MaxTextureImageUnits</td>
<td>8</td>
</tr>
</tbody></table>
<blockquote>
<p>mediump是一个精度限定词。</p>
</blockquote>
<h3 id="十、程序流程控制：分支和循环"><a href="#十、程序流程控制：分支和循环" class="headerlink" title="十、程序流程控制：分支和循环"></a>十、程序流程控制：分支和循环</h3><h4 id="10-1-if和if-else语句"><a href="#10-1-if和if-else语句" class="headerlink" title="10.1 if和if-else语句"></a>10.1 if和if-else语句</h4><p>​        <code>if-else</code>结构用法与C语言和js一致，但<em>没有switch</em>语句</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (...) &#123;</span><br><span class="line">   ... </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (...) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="10-2-for语句"><a href="#10-2-for语句" class="headerlink" title="10.2 for语句"></a>10.2 for语句</h4><p>​        <strong>只支持for循环</strong>，而且<em>只能</em>在初始化表达式（for(;;)中第一个分号前面的位置）中定义循环变量，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他规范：</p>
<ul>
<li><p>只允许有一个循环变量，且只能是int或float类型</p>
</li>
<li><p>循环表达式必须是以下形式：</p>
<p>i++、i–、i+=常量表达式、i-=常量表达式</p>
</li>
<li><p>条件表达式必须是循环变量与整型常量比较</p>
</li>
<li><p>在循环体内，循环变量不可被赋值</p>
</li>
</ul>
<h4 id="10-3-continue、break、discard语句"><a href="#10-3-continue、break、discard语句" class="headerlink" title="10.3 continue、break、discard语句"></a>10.3 continue、break、discard语句</h4><p>​        只能在for语句中使用continue、break。</p>
<ul>
<li><p>continue终止包含该语句的最内层循环和执行循环表达式（递增/递减循环变量），然后执行下一次循环</p>
</li>
<li><p>break终止包含该语句的最内层循环，并不再执行循环</p>
</li>
<li><p>discard只能在片元着色器中使用，表示放弃当前片元，直接处理下一个片元</p>
</li>
</ul>
<h3 id="十一、函数"><a href="#十一、函数" class="headerlink" title="十一、函数"></a>十一、函数</h3><h4 id="11-1-声明函数"><a href="#11-1-声明函数" class="headerlink" title="11.1 声明函数"></a>11.1 声明函数</h4><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">返回类型 函数名(type0 arg0, ... , typen argn)&#123;</span><br><span class="line">    函数计算</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        如果函数不返回值，那么函数就不需要return语句；也可以将自己定义的结构体类型指定为返回类型，但是结构体的成员不能有数组。</p>
<p>​        下面这段代码实现了将RGBA颜色值转化为亮度值：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> luma (<span class="type">vec4</span> color) &#123;</span><br><span class="line">    <span class="type">float</span>  r = color.r;</span><br><span class="line">    <span class="type">float</span>  g = color.g;</span><br><span class="line">    <span class="type">float</span>  b = color.b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.2126</span> * r + <span class="number">0.7162</span> * g + <span class="number">0.0722</span> * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> a_Color;</span><br><span class="line"><span class="type">void</span> main() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">float</span> brightness = luma(a_Color)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="11-2-规范声明"><a href="#11-2-规范声明" class="headerlink" title="11.2 规范声明"></a>11.2 规范声明</h4><p>​      如果函数定义在其调用之后，那么我们<strong>必须在进行调用之前先声明该函数的规范</strong>（类似C语言）。规范声明不预先告诉WebGL系统函数的参数、参数类型、返回值类型等等。例如：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> luma(<span class="type">vec4</span>); <span class="comment">// 规范声明</span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">float</span> brightness = luma(color); <span class="comment">//luma()在定义之前就被调用了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> luma(<span class="type">vec4</span> color)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.2126</span> * color.r + <span class="number">0.7162</span> * color.g + <span class="number">0.0722</span> * color.r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="11-3-参数限定词"><a href="#11-3-参数限定词" class="headerlink" title="11.3 参数限定词"></a>11.3 参数限定词</h4><p>​        在GLSL ES中有几个参数限定字控制参数的行为，如下：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">in</span>          值传递，可以省略，默认就是值传递</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">in</span>    值传递，在函数内部无法修改参数</span><br><span class="line"><span class="keyword">out</span>         地址传递</span><br><span class="line"><span class="keyword">inout</span>       地址传递，传入的参数必须已经初始化过了</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">类别</th>
<th align="left">规则</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">in</td>
<td align="left">向函数中传入值</td>
<td align="left">可使用，可修改，但内部的修改不会影响传入的值</td>
</tr>
<tr>
<td align="left">const in</td>
<td align="left">向函数中传入值</td>
<td align="left">可使用，不可修改</td>
</tr>
<tr>
<td align="left">out</td>
<td align="left">在函数中被赋值，并被传出</td>
<td align="left"><strong>传入变量引用，在函数内部修改会影响外部传入的变量</strong></td>
</tr>
<tr>
<td align="left">inout</td>
<td align="left">传入函数并传出</td>
<td align="left">传入变量引用，函数会用到变量初始值，然后被修改传出</td>
</tr>
</tbody></table>
<p>​        当缺省参数限定词时默认与in一样，看下面in、out的使用示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="function"><span class="title">luma2</span>(<span class="params"><span class="keyword">in</span> vec3 color, out float brightness</span>)</span> &#123;	</span><br><span class="line">    birghtness = <span class="number">0.2126</span> * color.r + <span class="number">0.7162</span> * color.g + <span class="number">0.0722</span> * color.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">luma2(color, brightness) </span><br><span class="line"><span class="comment">// 结果存储在brightness中</span></span><br></pre></td></tr></table></figure>

<p>​        luma2函数本身不返回值，函数返回类型设置为void，第一个参数限定词为in(其实可以省略)，第二个参数brightness限定词为out，用于返回计算结果。</p>
<h3 id="十二、内置函数"><a href="#十二、内置函数" class="headerlink" title="十二、内置函数"></a>十二、内置函数</h3><p>​        WebGL着色器提供了一系列内置函数，所谓内置函数和内置变量一样，也就是说不用声明，就可以直接调用。比如向量点乘<code>dot()</code>、向量叉乘<code>cross()</code>、两点之间距离<code>distance()</code>等用于数学计算的函数。</p>
<h4 id="12-1-角度函数和三角函数"><a href="#12-1-角度函数和三角函数" class="headerlink" title="12.1 角度函数和三角函数"></a>12.1 角度函数和三角函数</h4><p>​        WebGL着色器内置函数三角函数，名称和初高中数学写法基本一致，函数参数是角度的弧度值，函数参数数据类型是浮点数<code>float</code>。</p>
<table>
<thead>
<tr>
<th>内置函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>radians()</td>
<td>角度值转弧度值</td>
</tr>
<tr>
<td>degrees()</td>
<td>弧度值转角度值</td>
</tr>
<tr>
<td>sin(弧度)</td>
<td>正弦值</td>
</tr>
<tr>
<td>cos(弧度)</td>
<td>余弦值</td>
</tr>
<tr>
<td>tan(弧度)</td>
<td>正切值</td>
</tr>
<tr>
<td>asin()</td>
<td>反正弦值(弧度)</td>
</tr>
<tr>
<td>acos()</td>
<td>反余弦值(弧度)</td>
</tr>
<tr>
<td>atan()</td>
<td>反正切值(弧度)</td>
</tr>
</tbody></table>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//角度为30度，并把角度值转化为弧度值</span></span><br><span class="line"><span class="type">float</span> radian = <span class="built_in">radians</span>(<span class="number">30.0</span>);</span><br><span class="line"><span class="comment">//求解角度余弦值</span></span><br><span class="line"><span class="type">float</span> <span class="built_in">cos</span> = <span class="built_in">cos</span>(radian);</span><br><span class="line"><span class="comment">//求解角度正弦值</span></span><br><span class="line"><span class="type">float</span> <span class="built_in">sin</span> = <span class="built_in">sin</span>(radian);</span><br></pre></td></tr></table></figure>



<h4 id="12-2-几何函数"><a href="#12-2-几何函数" class="headerlink" title="12.2 几何函数"></a>12.2 几何函数</h4><p>​        内置函数几何函数主要是与几何相关计算的函数，比如计算两点之间的距离，计算两个向量的叉乘、点乘…</p>
<table>
<thead>
<tr>
<th>内置函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>length(a)</td>
<td>向量a长度</td>
</tr>
<tr>
<td>distance(a,b)</td>
<td>a、b两点之间距离</td>
</tr>
<tr>
<td>dot(a,b)</td>
<td>两向量点积</td>
</tr>
<tr>
<td>cross(a,b)</td>
<td>两向量叉乘</td>
</tr>
<tr>
<td>normalize(a)</td>
<td>向量a归一化,长度变为1，方向不变，即返回值单位向量</td>
</tr>
<tr>
<td>faceforward(a,b,c)</td>
<td>向量朝前：如果c、b两向量点乘小于0(dot(c,b) &lt; 0)，则返回a，否则返回-a</td>
</tr>
<tr>
<td>reflect(Ru,Fa) 或 reflect(Ru,Fa,Zh)</td>
<td>向量反射：比如通过入射光计算反射光方向向量,Fa表示反射平面的法线方向(单位向量)，Ru表示入射光线的方向(单位向量)，Zh表示折射率</td>
</tr>
</tbody></table>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二维平面：计算(0.5, 0.0)和(0.5, 0.5)两点之间距离</span></span><br><span class="line"><span class="type">float</span> dis2 = <span class="built_in">distance</span>(<span class="type">vec2</span>(<span class="number">0.5</span>, <span class="number">0.0</span>), <span class="type">vec2</span>(<span class="number">0.5</span>, <span class="number">0.5</span>));</span><br><span class="line"><span class="comment">// 3D空间</span></span><br><span class="line"><span class="type">float</span> dis3 = <span class="built_in">distance</span>(<span class="type">vec3</span>(<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.0</span>), <span class="type">vec3</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向量归一化，方向不变，长度为1</span></span><br><span class="line"><span class="comment">// 返回值vec3(1.0,0.0,0.0)</span></span><br><span class="line"><span class="type">vec3</span> normal = <span class="built_in">normalize</span>(<span class="type">vec3</span>(<span class="number">3.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 光线方向：u_lightDirection，顶点法向量：normal</span></span><br><span class="line"><span class="comment">// 计算平行光方向向量和顶点法向量的点积</span></span><br><span class="line"><span class="type">float</span> <span class="built_in">dot</span> = <span class="built_in">max</span>(<span class="built_in">dot</span>(u_lightDirection, normal), <span class="number">0.0</span>);</span><br><span class="line"><span class="comment">// 计算反射后的颜色</span></span><br><span class="line"><span class="comment">// 光线颜色：u_lightColor，顶点颜色：a_color</span></span><br><span class="line"><span class="type">vec3</span> reflectedLight = u_lightColor * a_color.rgb * <span class="built_in">dot</span>;</span><br></pre></td></tr></table></figure>



<h4 id="12-3-指数函数"><a href="#12-3-指数函数" class="headerlink" title="12.3 指数函数"></a>12.3 指数函数</h4><p>​    着色器常见内置函数可以参考数学或javascript语言。</p>
<table>
<thead>
<tr>
<th>内置函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>pow(x,n)</td>
<td>x的n次幂函数</td>
</tr>
<tr>
<td>exp(x)</td>
<td>x的自然指数e</td>
</tr>
<tr>
<td>log(x)</td>
<td>x自然对数</td>
</tr>
<tr>
<td>exp2(x)</td>
<td>2的指数x</td>
</tr>
<tr>
<td>log2()</td>
<td>对数函数，底数为2</td>
</tr>
<tr>
<td>sqrt()</td>
<td>平方根</td>
</tr>
<tr>
<td>inversesqrt()</td>
<td>平方根倒数</td>
</tr>
</tbody></table>
<h4 id="12-4-通用函数"><a href="#12-4-通用函数" class="headerlink" title="12.4 通用函数"></a>12.4 通用函数</h4><table>
<thead>
<tr>
<th>内置函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>abs(x)</td>
<td>绝对值</td>
</tr>
<tr>
<td>sign(x)</td>
<td>判断参数符号，x是正数返回1.0；x是0.0返回0.0，x是负数返回-1.0</td>
</tr>
<tr>
<td>floor(x)</td>
<td>取整，向下取整</td>
</tr>
<tr>
<td>ceil(x)</td>
<td>取整，向上取整</td>
</tr>
<tr>
<td>fract(x)</td>
<td>返回x小数部分</td>
</tr>
<tr>
<td>min(a,b)</td>
<td>比较大小，返回较小的值</td>
</tr>
<tr>
<td>max(a,b)</td>
<td>比较大小，返回较大的值</td>
</tr>
<tr>
<td>mod(x,y)</td>
<td>表示x–y*floor(x/y)</td>
</tr>
<tr>
<td>clamp(x,min,max)</td>
<td>规整输入值,x与min和max比较大小返回中间大小的值，运算规则：min (max (x, min), max)</td>
</tr>
<tr>
<td>mix(m,n,k)</td>
<td>线性插值计算,插值区间[m,n],插值系数k，插值计算公式：m*(1-k)+n*k</td>
</tr>
</tbody></table>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果两向量v1, v2点积是正数就保留，如果是负数就返回0.0</span></span><br><span class="line"><span class="comment">// 常用于光照计算中，v1表示光线方向，v2表示顶点法线法线，光线背面照射，点积设置为0.0</span></span><br><span class="line"><span class="type">float</span> <span class="built_in">dot</span> = <span class="built_in">max</span>(<span class="built_in">dot</span>(v1, v2), <span class="number">0.0</span>);</span><br></pre></td></tr></table></figure>



<h4 id="12-5-矩阵函数"><a href="#12-5-矩阵函数" class="headerlink" title="12.5 矩阵函数"></a>12.5 矩阵函数</h4><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">mat <span class="built_in">matrixCompMult</span> (mat x, mat y)  </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意内置矩阵函数<code>matrixCompMult()</code>不是按照线性代数中的矩阵乘法规则执行的，如果是线性代数中矩阵乘法规则，直接使用乘法符号<code>*</code>就可以，即<code>x*y</code>。</p>
<p>内置矩阵函数<code>matrixCompMult()</code>的运算规则是同行同列的元素相乘，也就是 <code>x[i][j]</code>和<code>y[i][j]</code>相乘</p>
</blockquote>
<h4 id="12-6-向量关系函数"><a href="#12-6-向量关系函数" class="headerlink" title="12.6 向量关系函数"></a>12.6 向量关系函数</h4><p>​        着色器向量关系函数和javascript关系函数类似，区别在于着色器向量关系函数不是直接比较两个数的大小，而是对两个向量的每个元素都进行比较。</p>
<p>​        比较函数返回值是true或flase。</p>
<table>
<thead>
<tr>
<th>内置函数</th>
<th>判断</th>
</tr>
</thead>
<tbody><tr>
<td>lessThan(x,y)</td>
<td>x是否小于y ,参数是vec或ivec</td>
</tr>
<tr>
<td>lessThanEqual(x,y)</td>
<td>x是否小于或等于y,参数是vec或ivec</td>
</tr>
<tr>
<td>greaterThan(x,y)</td>
<td>x是否大于y ,参数是vec或ivec</td>
</tr>
<tr>
<td>greaterThanEqual(x,y)</td>
<td>x是否大于或等于y,参数是vec或ivec</td>
</tr>
<tr>
<td>equal(x,y)</td>
<td>x是否等于y，向量每个分量是否都相等,参数是vec或ivec</td>
</tr>
<tr>
<td>any(x)</td>
<td>x向量是否存在一个分量是true，参数是bvec</td>
</tr>
<tr>
<td>all(x)</td>
<td>x向量所有分量是否全部为true ，参数是bvec</td>
</tr>
<tr>
<td>not(x)</td>
<td>x所有分量执行逻辑非运算 ，参数是bvec</td>
</tr>
</tbody></table>
<h4 id="12-7-纹理查询函数"><a href="#12-7-纹理查询函数" class="headerlink" title="12.7 纹理查询函数"></a>12.7 纹理查询函数</h4><p>​        纹理采用函数主要用于处理WebGL的纹理贴图，根据st坐标从图像上获取像素值。</p>
<table>
<thead>
<tr>
<th>内置函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>texture2D()</td>
<td>在二维纹理获取纹素</td>
</tr>
<tr>
<td>textureCube()</td>
<td>在立方体纹理中获取纹素</td>
</tr>
<tr>
<td>texture2DProj</td>
<td>texture2D的投影版本</td>
</tr>
<tr>
<td>texture2DLod</td>
<td>texture2D的金字塔版本</td>
</tr>
<tr>
<td>textureCubeLogd</td>
<td>textureCube的金字塔版本</td>
</tr>
<tr>
<td>texture2DProjLod</td>
<td>texture2DLod的投影版本</td>
</tr>
</tbody></table>
<h4 id="12-8-内置函数参数常见形式"><a href="#12-8-内置函数参数常见形式" class="headerlink" title="12.8 内置函数参数常见形式"></a>12.8 内置函数参数常见形式</h4><p>​        内置函数参数数据类型常见形式：<code>float</code>、<code>vec2</code>、<code>vec3</code>、<code>vec4</code></p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 角度转弧度</span></span><br><span class="line"><span class="type">float</span> <span class="built_in">radians</span>(<span class="type">float</span> <span class="built_in">degrees</span>)  </span><br><span class="line"><span class="type">vec2</span> <span class="built_in">radians</span>(<span class="type">vec2</span> <span class="built_in">degrees</span>)  </span><br><span class="line"><span class="type">vec3</span> <span class="built_in">radians</span>(<span class="type">vec3</span> <span class="built_in">degrees</span>)  </span><br><span class="line"><span class="comment">// 正弦函数</span></span><br><span class="line"><span class="type">float</span> <span class="built_in">sin</span>(<span class="type">float</span> angle)  </span><br><span class="line"><span class="type">vec4</span> <span class="built_in">sin</span>(<span class="type">vec4</span> angle)  </span><br><span class="line"><span class="comment">// 点乘</span></span><br><span class="line"><span class="type">float</span> <span class="built_in">dot</span>(<span class="type">float</span> x, <span class="type">float</span> y)  </span><br><span class="line"><span class="type">float</span> <span class="built_in">dot</span>(<span class="type">vec3</span> x, <span class="type">vec3</span> y)  </span><br><span class="line"><span class="comment">// 长度</span></span><br><span class="line"><span class="type">float</span> <span class="built_in">length</span>(<span class="type">float</span> x)  </span><br><span class="line"><span class="type">float</span> <span class="built_in">length</span>(<span class="type">vec2</span> x)  </span><br></pre></td></tr></table></figure>



<h3 id="十三、全局变量和局部变量"><a href="#十三、全局变量和局部变量" class="headerlink" title="十三、全局变量和局部变量"></a>十三、全局变量和局部变量</h3><p>​        同Js和C语言，变量声明在函数外面就是全局变量，在函数内部就是局部变量，局部变量只能在函数内部访问。</p>
<p>​        下一节涉及的attribute变量、varying变量和uniform变量由于需要在函数外部访问，所以必须声明为全局变量。</p>
<h3 id="十四、存储限定字"><a href="#十四、存储限定字" class="headerlink" title="十四、存储限定字"></a>十四、存储限定字</h3><p>​        在GLSL ES中，我们经常使用<code>attriute</code>、<code>varying</code>和<code>uniform</code>限定字来修饰变量，如图所示：</p>
<p><img src="/images/glsles3.png" alt="3"></p>
<p>​        此外，我们有时也会使用const限定字，它表示着色器中的某个变量使恒定的常量。</p>
<h4 id="14-1-const"><a href="#14-1-const" class="headerlink" title="14.1 const"></a>14.1 const</h4><p>特点：</p>
<ul>
<li>被<code>const</code>修饰的值不能被改变</li>
<li>在声明<code>const</code>变量时，需要将<code>const</code>写在类型之前</li>
<li>声明时必须进行初始化</li>
<li>声明之后不能去改变值</li>
</ul>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="type">int</span> light1 = <span class="number">22649897</span></span><br></pre></td></tr></table></figure>

<h4 id="14-2-attribute变量"><a href="#14-2-attribute变量" class="headerlink" title="14.2 attribute变量"></a>14.2 attribute变量</h4><p>​        attribute变量只能出现在定点着色器中，只能被声明为全局变量，被用来表示<strong>逐顶点</strong>的信息。</p>
<p>​        顶点着色器中能够容纳的attribute变量的最大数目与设备有关，你可以通过访问内置的全局常量获取该值。但是，支持WebGL环境都支持至少8个attribute变量。如下所示：</p>
<p><img src="/images/glsles4.png" alt="4"></p>
<blockquote>
<p><strong>逐顶点</strong>：比如，如果线段两个顶点(4.0, 3.0, 6.0)和(8.0, 3.0 0.0)，这两个坐标就会传递给attribute变量。而线段上的其他点，虽然也被画了出来，但它们不是顶点，坐标未曾传给attribute变量，也未曾被顶点着色器处理过。如果你想要让顶点着色器坐标处理它们，你就需要将它作为一个顶点添加到图像中来。</p>
</blockquote>
<h4 id="14-3-uniform变量"><a href="#14-3-uniform变量" class="headerlink" title="14.3 uniform变量"></a>14.3 uniform变量</h4><p>​        可以用在顶点着色器和片元着色器中，且必须是<strong>全局变量</strong>。uniform变量是<strong>只读的</strong>，它可以是除了数组或结构体之外的任意类型。<strong>如果顶点着色器和片元着色器中声明了同名的uniform变量，那么它就会被两种着色器共享。</strong></p>
<p>​        uniform变量包含了“一致”（非逐顶点/逐片元的，各顶点或各片元共用）的数据。比如，变换矩阵就不是逐顶点的，而是所有顶点共用的，所以它在着色器中是uniform变量。</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> u_ViewMatrix</span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec3</span> u_LightPosition</span><br></pre></td></tr></table></figure>

<h4 id="14-4-varying变量"><a href="#14-4-varying变量" class="headerlink" title="14.4 varying变量"></a>14.4 varying变量</h4><p>​        必须是<strong>全局变量</strong>，它的任务是从顶点着色器向片元着色器传输数据。我们必须在梁总着色器中声明同名、同类型的varying变量。它的类型只能是以下类型：float、vec2、vec3、vec4、mat2、 mat 3、mat4。</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">varying</span> <span class="type">vec2</span> v_TexCoord</span><br></pre></td></tr></table></figure>



<h3 id="十五、精度限定字"><a href="#十五、精度限定字" class="headerlink" title="十五、精度限定字"></a>十五、精度限定字</h3><p>​        GLSL ES新引入了精度限定字，<strong>目的是帮助着色器程序提高运行效率，消减内存开支</strong>。使用精度限定字，你就能够<strong>精细地控制程序在效果</strong>和<strong>性能间的平衡</strong>。然而，精度限定字是可选的，如果你不确定，可以使用下面这个适中的默认值：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#ifdef GL_ES</span></span><br><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>;</span><br><span class="line"><span class="meta">#endif</span></span><br></pre></td></tr></table></figure>

<p>​        WebGL程序支持三种精度，其限定字分别为highp、mediump、lowp。如下所示：</p>
<p><img src="/images/glsles5.png" alt="5"></p>
<pre><code>     下面是声明变量精度的几个例子：
</code></pre>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mediump</span> <span class="type">float</span> size; <span class="comment">//中精度的浮点型变量</span></span><br><span class="line"><span class="keyword">highp</span> <span class="type">vec4</span> position; <span class="comment">//具有高精度浮点型元素的vec4对象</span></span><br><span class="line"><span class="keyword">lowp</span> <span class="type">vec4</span> color; <span class="comment">//具有低精度浮点型元素的vec4对象</span></span><br></pre></td></tr></table></figure>

<p>​        为每个变量都声明精度很繁琐，我们也可以使用<code>关键字precision</code>来声明着色器的默认精度，并且这行代码必须放在顶点着色器或片元着色器的顶部，格式如下：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// precision 精度限定字 类型名称</span></span><br><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>;</span><br></pre></td></tr></table></figure>

<p>​        使用精度限定字一般都只在<strong>片元着色器</strong>中使用，这是因为，除了片元着色器的<code>float</code>类型没有默认精度（需手动指定，否则报错），其他类型都有默认精度。如下是数据类型的默认精度：</p>
<p><img src="/images/glsles6.png" alt="6"></p>
<p>​        WebGL是否在片元着色器中支持highp精度，取决于具体的设备。如果设备支持，那么着色器就会定义内置宏<code>GL_FRAGMENT_PRECISION_HIGH</code>（见下一节）。</p>
<h3 id="十六、预处理指令——宏"><a href="#十六、预处理指令——宏" class="headerlink" title="十六、预处理指令——宏"></a>十六、预处理指令——宏</h3><p>​        GLSL ES支持预处理指令。<strong>预处理指令用来在真正编译之前对代码进行预处理</strong>。都已<code>#</code>号开始。下面就是预定义float类型精度的预处理指令：    </p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#ifdef GL_ES</span></span><br><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>;</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	这段代码检查了是否已经定义了GL_ES宏，如果是，那就执行#ifdef和#endif之间的部分。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="16-1-预处理指令"><a href="#16-1-预处理指令" class="headerlink" title="16.1 预处理指令"></a>16.1 预处理指令</h4><p>​        下面是我们在GLSL ES中可能用到的三种预处理指令：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#if 条件表达式</span></span><br><span class="line">If 如果条件比倒是为真，执行这里</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#ifdef 某宏</span></span><br><span class="line">如果定义了某宏，执行这里</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#ifndef 某宏</span></span><br><span class="line">如果没有定义某宏，执行这里</span><br><span class="line"><span class="meta">#endif</span></span><br></pre></td></tr></table></figure>

<h4 id="16-2-宏定义"><a href="#16-2-宏定义" class="headerlink" title="16.2 宏定义"></a>16.2 宏定义</h4><p>​        可以使用以下指定进行宏定义：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#define 宏名 宏内容</span></span><br></pre></td></tr></table></figure>

<h4 id="16-3-结束宏"><a href="#16-3-结束宏" class="headerlink" title="16.3 结束宏"></a>16.3 结束宏</h4><p>​        可以使用undef 宏名，结束宏定义。例如：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#undef 宏名</span></span><br></pre></td></tr></table></figure>

<h4 id="16-4-宏分支"><a href="#16-4-宏分支" class="headerlink" title="16.4 宏分支"></a>16.4 宏分支</h4><p>​        可以使用<code>#else</code>指令配合<code>#ifdef</code>：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#define NUM 100</span></span><br><span class="line"><span class="meta">#if NUM == 100</span></span><br><span class="line">如果宏NUM为<span class="number">100</span>，执行这里</span><br><span class="line"><span class="meta">#else</span></span><br><span class="line">否则，执行这里</span><br><span class="line"><span class="meta">#endif</span></span><br></pre></td></tr></table></figure>

<h4 id="16-5-宏名规范"><a href="#16-5-宏名规范" class="headerlink" title="16.5 宏名规范"></a>16.5 宏名规范</h4><p>​        宏的名称可以随意起，只要不和预定义的内置宏相同。</p>
<p>​        下面是预定义的内置宏：</p>
<table>
<thead>
<tr>
<th>宏</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>GL_ES</td>
<td>在OpenGL ES2.0中定义为1</td>
</tr>
<tr>
<td>GL_FRAGEMENT_PRECISION_HIGH</td>
<td>片元着色器支持highp精度</td>
</tr>
</tbody></table>
<p>​        所以，可以这样使用宏来进行精度限定：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#ifndef GL_ES</span></span><br><span class="line"><span class="meta">#ifndef GL_FRAGEMENT_PRECISION_HIGH</span></span><br><span class="line"><span class="keyword">precision</span> <span class="keyword">highp</span> <span class="type">float</span>;	<span class="comment">// 支持高精度，限定浮点型为高精度</span></span><br><span class="line"><span class="meta">#else</span></span><br><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>; <span class="comment">// 不支持高精度，限定浮动型为中精度</span></span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line"><span class="meta">#endif</span></span><br></pre></td></tr></table></figure>

<p>​    可以使用<code>#version</code>来指定着色器使用的GLSL ES版本：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#version number</span></span><br><span class="line">number包括：</span><br><span class="line">    值：<span class="number">100</span>   对应GLSL ES <span class="number">1.00</span></span><br><span class="line">        <span class="number">101</span>	 对应GLSL ES <span class="number">1.01</span></span><br><span class="line">默认<span class="number">100</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】21-三维世界-绘制三个三角形</title>
    <url>/21-%E4%B8%89%E7%BB%B4%E4%B8%96%E7%95%8C-%E7%BB%98%E5%88%B6%E4%B8%89%E4%B8%AA%E4%B8%89%E8%A7%92%E5%BD%A2-LookAtTriangles/</url>
    <content><![CDATA[<p>对应《WebGL编程指南》第七章 22-LookAtTriangles、23-LookAtRotatedTriangles、24-LookAtRotatedTriangles_mvMatrix、25-LookAtTrianglesWithKeys</p>
<p>要点：视点和视线、景深、观察者视图、模型视图矩阵</p>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、立方体由三角形构成"><a href="#一、立方体由三角形构成" class="headerlink" title="一、立方体由三角形构成"></a>一、立方体由三角形构成</h3><h4 id="1-1-深度"><a href="#1-1-深度" class="headerlink" title="1.1 深度"></a>1.1 深度</h4><p>​        之前讨论过，三维物体也是由二维图形（特别是三角形）组成的。既然如此，是不是我们只需要像前几章一样逐个绘制组成物体的每个三角形，最终就可以绘制出整个三维物体了呢？</p>
<p>​        实际上，三维与二维还有一个显著区别：在绘制三维物体时，还得考虑它们的<strong>深度信息</strong>。</p>
<h4 id="1-2-三维世界的观察者"><a href="#1-2-三维世界的观察者" class="headerlink" title="1.2 三维世界的观察者"></a>1.2 三维世界的观察者</h4><p>​        定义：三维世界的观察者：<strong>在什么地方</strong>、<strong>朝哪里看</strong>、<strong>视野有多宽</strong>、<strong>能看多远</strong>。</p>
<h3 id="二、视点和视线"><a href="#二、视点和视线" class="headerlink" title="二、视点和视线"></a>二、视点和视线</h3><p>​        三维物体与二维物体的显著区别：三维具有深度，也就是Z轴。事实上，我们最后还是把三维场景绘制到二维的屏幕上，<strong>即绘制观察者看到的世界，而观察者可以处在任意位置观察</strong>。</p>
<h4 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h4><p>定义一个观察者需要考虑两点：</p>
<ul>
<li><strong>观察方向</strong>，即观察者自己<strong>在什么位置</strong>，在看场景的<strong>哪一部分</strong>。</li>
<li><strong>可视距离</strong>，即观察者能够<strong>看多远</strong>。</li>
</ul>
<p>​        我们将观察者所处的位置称为<strong>视点</strong>，从视点出发沿着观察方向的射线称作<strong>视线</strong>。</p>
<p>​        在WebGL系统中，视点默认处于原点(0, 0, 0)，视线为Z轴负半轴（指向屏幕内部），这一节，我们将视点移动到另一个位置，来观察三维场景。</p>
<h4 id="2-2-程序示例"><a href="#2-2-程序示例" class="headerlink" title="2.2 程序示例"></a>2.2 程序示例</h4><p>​        该程序修改了视点，位于（0.20. 0.25. 0.25），视线沿着原点（0, 0, 0）方向，可以看到原点附近有三个三角形，程序中的这三个三角形错落摆放，以帮助你理解三维场景中深度的概念。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">viewMatrix.setLookAt(<span class="number">0.20</span>, <span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/images/LookAtTriangles1.png" alt="1"></p>
<p><img src="/images/LookAtTriangles2.png" alt="2"></p>
<h4 id="2-3-视点、观察目标点和上方向"><a href="#2-3-视点、观察目标点和上方向" class="headerlink" title="2.3 视点、观察目标点和上方向"></a>2.3 视点、观察目标点和上方向</h4><p>​        为了确定观察者的状态，你需要获取两项信息：视点，即观察者的位置；<strong>观察目标点</strong>，即被观察目标所在的点，它可以用来确定视线。此外，因为我们最后要把观察到的景象绘制到屏幕上，还需要知道<strong>上方向</strong>。有了这三项信息，就可以确定观察者的状态了。</p>
<p><img src="/images/LookAtTriangles3.png" alt="3"></p>
<p>​        <strong>视点</strong>：<u>观察者所在的三维空间中位置，视线的起点</u>。在接下来的几节中，视点坐标都用$（eyeX, eyeY, eyeZ）$表示。</p>
<p>​        <strong>观察目标点</strong>：<u>被观察目标所在的点</u>。视线从视点出发，穿过观察目标点并继续延伸。注意，观察目标点是一个点，而不是视线方向，只有同时知道观察目标点和视点，才能算出视线方向。观察目标点的坐标用$（atX, atY, atZ）$表示。</p>
<p>​        <strong>上方向</strong>：<u>最终绘制在屏幕上的影像中的向上的方向</u>。试想，如果仅仅确定了视点和观察点，观察者还是可能以视线为轴旋转的。所以，为了将观察者固定住，我们还需要指定上方向。上方向是具有3个分量的矢量，用$（upX, upY, upZ）$表示。</p>
<p><img src="/images/LookAtTriangles4.png" alt="4"></p>
<h4 id="2-4-视图矩阵—Matrix4-setLookAt"><a href="#2-4-视图矩阵—Matrix4-setLookAt" class="headerlink" title="2.4 视图矩阵—Matrix4.setLookAt()"></a>2.4 视图矩阵—Matrix4.setLookAt()</h4><p>​        在 WebGL 中，我们可以用上述三个矢量创建一个<strong>视图矩阵</strong>，然后将该矩阵传给顶点着色器。试图矩阵可以表示观察者的状态，含有观察者的视点，观察目标点，上方向等信息。之所以被成为视图矩阵，是因为它最终影响了显示在屏幕上的视图，也就是观察者观察到的场景。 <code>Matrix4.setLookAt()</code>函数可以根据上述三个矢量：<u>视点、观察点和上方向</u>，来创建出视图矩阵。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>eyeX, eyeY, eyeZ</td>
<td>指定视点</td>
</tr>
<tr>
<td>atX, atY, atZ</td>
<td>指定观察点</td>
</tr>
<tr>
<td>upX, upY, upZ</td>
<td>指定上方向，如果Y轴是上方向，那么就是(0, 1, 0)</td>
</tr>
</tbody></table>
<p>在WebGL 中，观察者的默认状态应该是这样的：</p>
<ul>
<li><p>视点位于坐标系统原点<code>（0, 0, 0）</code>。</p>
</li>
<li><p>视线为 Z 轴负方向，观察点为<code>（0, 0, -1）</code>，上方向为为Y 轴正方向， 即<code>（0, 1, 0）</code>。</p>
</li>
</ul>
<p>​        如果将上方向改为 X 轴正半轴方向（1, 0, 0），你将看到场景旋转了90度。创建这样一个矩阵，你只需要简单地使用如下代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置视点、视线、上方向</span></span><br><span class="line"><span class="keyword">var</span> viewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">viewMatrix.setLookAt(<span class="number">0.20</span>, <span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h3 id="三、代码分析"><a href="#三、代码分析" class="headerlink" title="三、代码分析"></a>三、代码分析</h3><h4 id="3-1-LookAtTriangles-与-ColoredTriangle"><a href="#3-1-LookAtTriangles-与-ColoredTriangle" class="headerlink" title="3.1 LookAtTriangles 与 ColoredTriangle"></a>3.1 LookAtTriangles 与 ColoredTriangle</h4><p>​        本节<a href="#%E4%BB%A3%E7%A0%811">代码1</a>根据<a href="https://freepiao.cn/2021/07/29/17-%E9%A2%9C%E8%89%B2%E4%B8%8E%E7%BA%B9%E7%90%86-%E7%BB%98%E5%88%B6%E5%BD%A9%E8%89%B2%E4%B8%8E%E6%B8%90%E5%8F%98%E4%B8%89%E8%A7%92%E5%BD%A2-ColoredTriangle/">【WebGL之巅】17-颜色与纹理-绘制彩色与渐变三角形</a>实例改编，片元着色器、传入定点数据的方式等与 ColoredTriangle.js 中的一样，主要有以下三点区别：</p>
<ul>
<li><p><code>视图矩阵</code>被传给顶点着色器，并与顶点坐标相乘。</p>
</li>
<li><p><code>initVertexBuffers(）</code>函数创建了3个三角形的顶点坐标和颜色数据，并在 main(）函数中调用。</p>
</li>
<li><p><code>main(）</code>函数计算了视图矩阵并传给了顶点着色器的 uniform 变量 <code>u_viewMatrix</code>。视点坐标为（0.25, 0.25, 0.25），观察点坐标为（0, 0, 0），上方向为（0, 1, 0）。</p>
</li>
</ul>
<p>​        首先，来看一下上述第2点中提到 <code>initVertexBuffers()</code>函数。该函数与 ColorTriangle.js 中的区别在于 <code>verticesColors 数组</code>。原先，该数组中只有一个三角形的顶点坐标和颜色数据，修改后数组包含了<u>3个三角形</u>共计<u>9个顶点</u>的数据，而且顶点坐标的 z 分量也不再是0了。接着我们创建了缓冲区对象，并将数组中的数据填了进去。此外，我们还把 <code>gl.drawArrays()</code>的第3个参数改成了<code>9</code>，<strong>因为这里共有9个顶点。</strong></p>
<p>​        然后，根据上述第3点，<u>需要建立视图矩阵（包含了视点、视线和上方向信息）并传给顶点着色器</u>。为此，我们先创建了一个 Matrix4 对象 viewMatrix，然后用 <code>setLookAt()</code>方法将其设置为视图矩阵，最后将视图矩阵中的元素传给顶点着色器中的 <code>u_viewMatrix</code> 变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置视点、视线、上方向</span></span><br><span class="line"><span class="keyword">var</span> viewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">viewMatrix.setLookAt(<span class="number">0.20</span>, <span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 将视图矩阵传给u_viewMatrix变量</span></span><br><span class="line">gl.uniformMatrix4fv(u_ViewMatrix, <span class="literal">false</span>, viewMatrix.elements);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ViewMatrix;\n&#x27;</span> +  <span class="comment">// 修改处</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ViewMatrix * a_Position;\n&#x27;</span> +  <span class="comment">//修改处</span></span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>​        与ColoredTriangle.js 相比，顶点着色器有两处改动：定义 uniform 变量 <code>u_viewMatrix</code>；将<code>视图矩阵与顶点坐标相乘</code>再赋值给 gl_Position。那么这样的改动会怎样影响观察到的景象呢？接着来看。</p>
<h4 id="3-2LookAtTriangles-与-RotatedTriangle-Matrix4"><a href="#3-2LookAtTriangles-与-RotatedTriangle-Matrix4" class="headerlink" title="3.2LookAtTriangles 与 RotatedTriangle_Matrix4"></a>3.2LookAtTriangles 与 RotatedTriangle_Matrix4</h4><p>​        仔细观察示例中的顶点着色器，你会发现它和第4章的 RotatedTriangle_Matrix4.js 很像。后者在顶点着色器中创建了一个 Matrix4 类型的旋转矩阵对象，用它去旋转三角形。我们来回顾一下这个着色器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_xformMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;gl_Position = u_xformMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>​        本例 LookAtTriangle.js 的顶点着色器程序如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ViewMatrix;\n&#x27;</span> +  <span class="comment">// 修改处</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ViewMatrix * a_Position;\n&#x27;</span> +  <span class="comment">//修改处</span></span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>​        可见，后者与前者相比增加了 <strong>attribute 变量 a_Color</strong> 以<strong>存储顶点颜色值</strong>，增加了 <strong>varying 变量 v_Color把颜色传给片元着色器</strong>，uniform 变量由 <code>u_RotMatrix</code> 改成了 <code>u_ViewMatrix</code>。尽管存在上述这些差异，但是在两个着色器中，使用 mat4 对象乘以顶点坐标再赋值给 gl_Position 的行为却非常相似。</p>
<p>​        实际上，“<u>根据自定义的观察者状态，绘制观察者看到的景象</u>”与“<u>使用默认的观察状态，但是对三维对象进行平移，旋转等变换，再绘制观察者看到的景象</u>”，这两种行为是<strong>等价</strong>的。</p>
<p>​        举个例子，默认情况下视点在原点，视线沿着Z轴负方向进行观察。假如我们将点移动到（0, 0, 1），如下图所示。这时，视点与被观察的三角形在Z轴上的距离增加了 1.0 个单位。实际上，如果我们使三角形沿着Z轴负方向1.0个单位，也可以达到同样的效果，因为观察者看上去是一样的。<br><img src="/images/LookAtTriangles5.png" alt="5"></p>
<p>​        事实上，上述过程就发生在示例程序 LookAtTriangles.js 中。根据视点、观察点和上方向参数，setLookAt(）方法计算出的视图矩阵恰恰就是“沿着Z轴负方向移动1.0个单位”的变换矩阵。所以，把这个矩阵与顶点坐标相乘，就相当于获得了“将视点设置在（0.0, 0.0, 1.0）”的效果。视点移动的方向与被观察对象移动的方向正好相反。对于视点的旋转，也可以采用类似的方式。</p>
<p>​        “改变观察者的状态”与“对整个世界进行平移和旋转变换”，本质上是一样的，它们都可以用矩阵来描述。接下来，我们将从一个指定的视点来观察旋转后的三角形。</p>
<h4 id="3-3-从指定视点观察旋转后的三角形"><a href="#3-3-从指定视点观察旋转后的三角形" class="headerlink" title="3.3 从指定视点观察旋转后的三角形"></a>3.3 从指定视点观察旋转后的三角形</h4><p>​        第4章 <a href="https://freepiao.cn/2021/07/26/11-%E4%BD%BF%E7%94%A8Matrix%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2%E6%97%8B%E8%BD%AC%E3%80%81%E5%B9%B3%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE-RotatedTriangle-Matrix/">RotatedTriangle_Matrix</a> 程序绘制了一个绕Z轴旋转一定角度后的三角形。本节将修改 LookAtTriangles 程序来绘制一个<u>从指定位置看过去的旋转后的三角形</u>。这时，我们需要两个矩阵：<strong>旋转矩阵</strong>和<strong>视图矩阵</strong>。首先有一个问题是，以怎样的顺序相乘这两个矩阵。</p>
<p>​        我们知道，矩阵乘以顶点坐标，得到的结果是顶点经过矩阵变换之后的新坐标。也就是说，<u>用旋转矩阵乘以顶点坐标，就可以得到旋转后的顶点坐标</u>。</p>
<p>​        <u>用视图矩阵乘以顶点坐标会把顶点变换到合适的位置，使得观察者（以默认状态）观察新位置的顶点</u>，就好像在观察者处在（视图矩阵描述的）视点上观察原始顶点一样。现在要在某个视点处观察旋转后的三角形，我们需要<u>先旋转三角形</u>，<u>然后从这个视点来观察他</u>。换句话说，我们需要<u>先对三角形进行旋转变换，再对旋转后的三角形进行与”移动视点“等效的变换</u>。我们按照上述顺序相乘两个矩阵。具体看一下等式。</p>
<p>​        我们知道，如果想旋转图形，就需要用旋转矩阵乘以旋转前的顶点坐标：</p>
<p><code>&lt;旋转后顶点坐标&gt; = &lt;旋转矩阵&gt; * &lt;原始顶点坐标&gt;​​</code></p>
<p>​        用视图矩阵乘以旋转后的顶点坐标，就可以获得”从视点看上去“的旋转后的顶点坐标：</p>
<p><code>&lt;&quot;从顶点看上去&quot;的旋转后顶点坐标&gt; = &lt;视图矩阵&gt; * &lt;旋转后顶点坐标&gt;​​​</code></p>
<p>​        将第1个式子带入第2个，可得：</p>
<p><code>&lt;&quot;从顶点看上去&quot;的旋转后顶点坐标&gt;=&lt;视图矩阵&gt;*&lt;旋转矩阵&gt;*&lt;原始顶点坐标&gt;</code>        </p>
<p>​        除了旋转矩阵，你还可以使用平移、缩放等基本变换矩阵或它们的组合，这时矩阵被称为<strong>模型矩阵</strong>。这样，上式就可以写成：</p>
<p><code>&lt;视图矩阵&gt;*&lt;模型矩阵&gt;*&lt;原始顶点坐标&gt;​</code></p>
<p>​        <a href="#%E4%BB%A3%E7%A0%812">代码2</a>着色器代码实现了这一等式，以下是代码核心部分截取：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ViewMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ModelMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ViewMatrix * u_ModelMatrix *  a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 视图矩阵</span></span><br><span class="line"><span class="keyword">var</span> u_ViewMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ViewMatrix&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> viewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">viewMatrix.setLookAt(<span class="number">0.20</span>, <span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);<span class="comment">//设置视点、视线、上方向</span></span><br><span class="line">gl.uniformMatrix4fv(u_ViewMatrix, <span class="literal">false</span>, viewMatrix.elements);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型矩阵</span></span><br><span class="line"><span class="keyword">var</span> u_ModelMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ModelMatrix&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">modelMatrix.setRotate(-<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>);   <span class="comment">// 计算旋转矩阵：绕z轴旋转10度</span></span><br><span class="line">gl.uniformMatrix4fv(u_ModelMatrix, <span class="literal">false</span>, modelMatrix.elements);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>复习：<a href="https://freepiao.cn/2021/07/26/11-%E4%BD%BF%E7%94%A8Matrix%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2%E6%97%8B%E8%BD%AC%E3%80%81%E5%B9%B3%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE-RotatedTriangle-Matrix/#%E5%85%AD%E3%80%81gl-uniformMatrix4fv-location-transpose-array">gl.uniformMatrix4fv</a>、<a href="https://freepiao.cn/2021/07/27/12-%E4%BD%BF%E7%94%A8Matrix4%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2%E6%97%8B%E8%BD%AC%E3%80%81%E5%B9%B3%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE-RotatedTriangle-Matrix4/#setRotate-angle-x-y-z">setRotate(angle, x, y, z)</a></p>
</blockquote>
<h4 id="3-4-模型视图矩阵"><a href="#3-4-模型视图矩阵" class="headerlink" title="3.4 模型视图矩阵"></a>3.4 模型视图矩阵</h4><p>​        上一节实现了<code>&lt;视图矩阵&gt;*&lt;模型矩阵&gt;*&lt;原始顶点坐标&gt;</code>，这样，程序对每个顶点都要计算<code>&lt;视图矩阵&gt;*&lt;模型矩阵&gt;</code>，如果顶点数量很多，就会造成不必要的开销。这是因为，无论对哪个顶点而言，两个矩阵相乘的结果都是一样的。</p>
<p>​        所以我们可以在js中事先把这两个矩阵相乘的结果计算出来，再传给顶点着色器。这两个矩阵相乘得到的结果被称为<strong>模型视图矩阵</strong>，如下：</p>
<p><code>&lt;模型视图矩阵&gt; = &lt;视图矩阵&gt;*&lt;模型矩阵&gt;​</code></p>
<p>​        这样，上一节的式子就可以改成：</p>
<p><code>&lt;模型视图矩阵&gt;*&lt;原始顶点坐标&gt;​​</code></p>
<p>​        <a href="#%E4%BB%A3%E7%A0%813">代码3</a>实现了这一等式，以下是代码核心部分截取：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ModelViewMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ModelViewMatrix *  a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">方法一相乘</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    var viewMatrix = new Matrix4();</span></span><br><span class="line"><span class="comment">    viewMatrix.setLookAt(0.20, 0.25, 0.25, 0, 0, 0, 0, 1, 0);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    var modelMatrix = new Matrix4();</span></span><br><span class="line"><span class="comment">    modelMatrix.setRotate(-50, 0, 0, -1);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">方法二相乘</span><br><span class="line"><span class="keyword">var</span> u_ModelViewMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ModelViewMatrix&#x27;</span>);</span><br><span class="line"><span class="comment">//两个矩阵相乘</span></span><br><span class="line"><span class="comment">//var modelViewMatrix = viewMatrix.multiply(modelMatrix);</span></span><br><span class="line"><span class="keyword">var</span> modelViewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">modelViewMatrix.setLookAt(<span class="number">0.20</span>, <span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>).rotate(-<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">gl.uniformMatrix4fv(u_ModelViewMatrix, <span class="literal">false</span>, modelViewMatrix.elements);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>复习：<a href="https://freepiao.cn/2021/07/27/12-%E4%BD%BF%E7%94%A8Matrix4%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A7%92%E5%BD%A2%E6%97%8B%E8%BD%AC%E3%80%81%E5%B9%B3%E7%A7%BB%E3%80%81%E7%BC%A9%E6%94%BE-RotatedTriangle-Matrix4/#rotate-angle-x-y-z">rotate(angle, x, y, z)</a></p>
</blockquote>
<h4 id="3-5-利用键盘改变视点"><a href="#3-5-利用键盘改变视点" class="headerlink" title="3.5 利用键盘改变视点"></a>3.5 利用键盘改变视点</h4><p>​        这一节将在LookAtTriangles 的基础上进行修改，使得当键盘上的方向键被按下时，观察者的<strong>视点</strong>也随之移动。在新程序 LookAtTrianglesWithKeys 中，<u>如果右方向键被按下，视点 X 坐标将增大 0.01； 如果左方向键被按下，视点的 X 坐标将减少 0.01。</u></p>
<p>​        <a href="#%E4%BB%A3%E7%A0%814">代码4</a>实现了这一效果，以下是代码核心部分截取。</p>
<p>​        在本例中，我们注册了<u>键盘事件响应函数</u>。每当左方向键或右方向键被按下时，就会<u>改变视点的位置</u>，然后调用<code>draw()</code>函数重绘场景。在研究键盘事件响应函数前，先来看一下 draw(）函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> g_eyeX = <span class="number">0.20</span>, g_eyeY = <span class="number">0.25</span>, g_eyeZ = <span class="number">0.25</span>; <span class="comment">// 视点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">gl, n, u_ViewMatrix, viewMatrix</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//设置视点和视线</span></span><br><span class="line">    viewMatrix.setLookAt(g_eyeX, g_eyeY, g_eyeZ, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将视图矩阵传递给u_ViewMatrix变量</span></span><br><span class="line">    gl.uniformMatrix4fv(u_ViewMatrix, <span class="literal">false</span>, viewMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COlOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        <code>draw()</code>函数的流程十分直接：首先根据全局变量 <code>g_eyeX</code>、<code>g_eyeY</code>、<code>g_eyeZ</code> <u>计算视图矩阵</u>，这三个变量的初始值分别是0.2、0.25、0.25；然后<u>将</u>计算得到的<u>视图矩阵传给顶点着色器中的 u_ViewMatrix 变量</u>。注意 <code>main()</code>函数调用 <code>draw()</code>函数时以参数的形式传入了之前获取的着色器中 <u>u_ViewMatrix 的存储地址</u>，和<u>一个新创建的 Matrix4 对象</u>。这样做的目的是为了<u>提高 <code>draw()</code>函数的效率</u>，否则我们就得在每次调用 draw()函数时都重新获取 u_ViewMarix 的地址并新建 Matrix4 对象。</p>
<p>​        全局变量 <code>g_eyeX、g_eyeY、g_eyeZ</code> 中存储着<u>视点的坐标</u>，键盘事件响应函数将更新 g_eyeX 的值。为了在按键被按下时调用该函数，我们必须把函数注册到 document 对象的 onkeydown 属性上去。我们定义了一个匿名函数作为键盘事件响应函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// function main()</span></span><br><span class="line"><span class="comment">// 注册键盘事件响应函数</span></span><br><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    keydown(ev, gl, n, u_ViewMatrix,viewMatrix);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​        匿名函数调用了 <code>keydown()</code>函数，并传入了相关的参数。让我们来看一下 keydown()函数的实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keydown</span>(<span class="params">ev, gl, n, u_ViewMatrix, viewMatrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev.keyCode == <span class="number">39</span>)&#123;   <span class="comment">//按下右键</span></span><br><span class="line">        g_eyeX += <span class="number">0.01</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ev.keyCode == <span class="number">37</span>)&#123; <span class="comment">//按下左键</span></span><br><span class="line">        g_eyeX -= <span class="number">0.01</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    draw(gl, n, u_ViewMatrix, viewMatrix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​         <code>keydown()</code>函数的第1个参数 <code>ev</code> 是一个事件对象，该函数的逻辑很直接，首先根据 <code>ev.keyCode</code> 属性检查哪个案件被按下，然后更新 <code>g_eyeX</code>。如果是右方向键，就令 <code>g_eyeX</code> 增加0.01，如果是左方向键，就令 <code>g_eyeX</code> 减少0.01。最后调用 <code>draw()</code>函数绘制三角形。</p>
<p>​        运行程序，每当你按下左或右方向键时，三角形都会改变一下方向，<u>实际上这时因为观察者的位置发生了变化。</u>（  <a href="#%E6%95%88%E6%9E%9C4">预览效果（可交互）</a>）</p>
<p>​        仔细观察运行效果，你会注意到当视点在极右/左的位置时，三角形会缺少一部分，下一节<a href="https://freepiao.cn/2021/08/01/22-%E4%B8%89%E7%BB%B4%E4%B8%96%E7%95%8C-%E5%8F%AF%E8%A7%86%E8%8C%83%E5%9B%B4-OrthoView/">可视范围</a>将详细讲解。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LookAtTriangles.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ViewMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ViewMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +<span class="comment">//!!! 需要声明浮点数精度，否则报错No precision specified for (float)</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_ViewMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ViewMatrix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置视点、视线、上方向</span></span><br><span class="line">    <span class="keyword">var</span> viewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    viewMatrix.setLookAt(<span class="number">0.20</span>, <span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    gl.uniformMatrix4fv(u_ViewMatrix, <span class="literal">false</span>, viewMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clearColor(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">             <span class="number">0.0</span>,  <span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The back green one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">             <span class="number">0.5</span>, -<span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">             <span class="number">0.5</span>,  <span class="number">0.4</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="comment">// The middle yellow one</span></span><br><span class="line">            -<span class="number">0.5</span>,  <span class="number">0.4</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">             <span class="number">0.0</span>, -<span class="number">0.6</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">             <span class="number">0.0</span>,  <span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="comment">// The front blue one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,</span><br><span class="line">             <span class="number">0.5</span>, -<span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">9</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> verteColorBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE *<span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);<span class="comment">//取消绑定的缓冲区对象</span></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>LookAtTriangles<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">    Please use the browser supporting &quot;canvas&quot;.</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-matrix.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;LookAtTriangles.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="/images/LookAtTriangles1.png" alt="6"></p>
<h4 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h4><p><code>&lt;视图矩阵&gt;*&lt;模型矩阵&gt;*&lt;原始顶点坐标&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LookAtTriangles.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ViewMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ModelMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ViewMatrix * u_ModelMatrix *  a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +<span class="comment">//!!! 需要声明浮点数精度，否则报错No precision specified for (float)</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_ViewMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ViewMatrix&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置视点、视线、上方向</span></span><br><span class="line">    <span class="keyword">var</span> viewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    viewMatrix.setLookAt(<span class="number">0.20</span>, <span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    gl.uniformMatrix4fv(u_ViewMatrix, <span class="literal">false</span>, viewMatrix.elements);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_ModelMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ModelMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    modelMatrix.setRotate(-<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    gl.uniformMatrix4fv(u_ModelMatrix, <span class="literal">false</span>, modelMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clearColor(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">             <span class="number">0.0</span>,  <span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The back green one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">             <span class="number">0.5</span>, -<span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">             <span class="number">0.5</span>,  <span class="number">0.4</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="comment">// The middle yellow one</span></span><br><span class="line">            -<span class="number">0.5</span>,  <span class="number">0.4</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">             <span class="number">0.0</span>, -<span class="number">0.6</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">             <span class="number">0.0</span>,  <span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="comment">// The front blue one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,</span><br><span class="line">             <span class="number">0.5</span>, -<span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">9</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> verteColorBuffer = gl.createBuffer();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE *<span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);<span class="comment">//取消绑定的缓冲区对象</span></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h5><p><img src="/images/LookAtTriangles6.png" alt="7"></p>
<h4 id="代码3"><a href="#代码3" class="headerlink" title="代码3"></a>代码3</h4><p><code>&lt;模型视图矩阵&gt;*&lt;原始顶点坐标&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LookAtTriangles.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ModelViewMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ModelViewMatrix *  a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +<span class="comment">//!!! 需要声明浮点数精度，否则报错No precision specified for (float)</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    var viewMatrix = new Matrix4();</span></span><br><span class="line"><span class="comment">    viewMatrix.setLookAt(0.20, 0.25, 0.25, 0, 0, 0, 0, 1, 0);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    var modelMatrix = new Matrix4();</span></span><br><span class="line"><span class="comment">    modelMatrix.setRotate(-50, 0, 0, -1);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> u_ModelViewMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ModelViewMatrix&#x27;</span>);</span><br><span class="line">    <span class="comment">//两个矩阵相乘</span></span><br><span class="line">    <span class="comment">//var modelViewMatrix = viewMatrix.multiply(modelMatrix);</span></span><br><span class="line">    <span class="keyword">var</span> modelViewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    modelViewMatrix.setLookAt(<span class="number">0.20</span>, <span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>).rotate(-<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    gl.uniformMatrix4fv(u_ModelViewMatrix, <span class="literal">false</span>, modelViewMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clearColor(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空&lt;canvas&gt;</span></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">             <span class="number">0.0</span>,  <span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The back green one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">             <span class="number">0.5</span>, -<span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">             <span class="number">0.5</span>,  <span class="number">0.4</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="comment">// The middle yellow one</span></span><br><span class="line">            -<span class="number">0.5</span>,  <span class="number">0.4</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">             <span class="number">0.0</span>, -<span class="number">0.6</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">             <span class="number">0.0</span>,  <span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="comment">// The front blue one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,</span><br><span class="line">             <span class="number">0.5</span>, -<span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">9</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> verteColorBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE *<span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);<span class="comment">//取消绑定的缓冲区对象</span></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h5><p><img src="/images/LookAtTriangles6.png" alt="8"></p>
<h4 id="代码4"><a href="#代码4" class="headerlink" title="代码4"></a>代码4</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LookAtTrianglesWithKeys.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ViewMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_ViewMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_PointSize = 10.0;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +<span class="comment">//!!! 需要声明浮点数精度，否则报错No precision specified for (float)</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_ViewMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ViewMatrix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置视图矩阵对象（视点、视线、上方向）</span></span><br><span class="line">    <span class="keyword">var</span> viewMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册键盘事件响应函数</span></span><br><span class="line">    <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        keydown(ev, gl, n, u_ViewMatrix,viewMatrix);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">   draw(gl, n, u_ViewMatrix, viewMatrix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_eyeX = <span class="number">0.20</span>, g_eyeY = <span class="number">0.25</span>, g_eyeZ = <span class="number">0.25</span>; <span class="comment">// 视点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keydown</span>(<span class="params">ev, gl, n, u_ViewMatrix, viewMatrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev.keyCode == <span class="number">39</span>)&#123;   <span class="comment">//按下右键</span></span><br><span class="line">        g_eyeX += <span class="number">0.01</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ev.keyCode == <span class="number">37</span>)&#123; <span class="comment">//按下左键</span></span><br><span class="line">        g_eyeX -= <span class="number">0.01</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    draw(gl, n, u_ViewMatrix, viewMatrix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">gl, n, u_ViewMatrix, viewMatrix</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//设置视点和视线</span></span><br><span class="line">    viewMatrix.setLookAt(g_eyeX, g_eyeY, g_eyeZ, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将视图矩阵传递给u_ViewMatrix变量</span></span><br><span class="line">    gl.uniformMatrix4fv(u_ViewMatrix, <span class="literal">false</span>, viewMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COlOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verticesColors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>, <span class="comment">// The back green one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">0.5</span>,  -<span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.5</span>,  <span class="number">0.4</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>, <span class="comment">// The middle yellow one</span></span><br><span class="line">            -<span class="number">0.5</span>,  <span class="number">0.4</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line">            <span class="number">0.0</span>, -<span class="number">0.6</span>,  -<span class="number">0.2</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,</span><br><span class="line"></span><br><span class="line">            <span class="number">0.0</span>,  <span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,  <span class="comment">// The front blue one</span></span><br><span class="line">            -<span class="number">0.5</span>, -<span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span>,  <span class="number">1.0</span>,</span><br><span class="line">            <span class="number">0.5</span>, -<span class="number">0.5</span>,   <span class="number">0.0</span>,  <span class="number">1.0</span>,  <span class="number">0.4</span>,  <span class="number">0.4</span></span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">9</span>; <span class="comment">//点的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建缓冲区对象</span></span><br><span class="line">    <span class="keyword">var</span> verteColorBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象保存到目标上</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向缓存对象写入数据</span></span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FSIZE = verticesColors.BYTES_PER_ELEMENT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将缓冲区对象分配给a_Postion变量</span></span><br><span class="line">    gl.vertexAttribPointer(a_Position, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE *<span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//连接a_Postion变量与分配给它的缓冲区对象</span></span><br><span class="line">    gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a_Color = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Color&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    gl.vertexAttribPointer(a_Color, <span class="number">3</span>, gl.FLOAT, <span class="literal">false</span>, FSIZE * <span class="number">6</span>, FSIZE * <span class="number">3</span>);</span><br><span class="line">    gl.enableVertexAttribArray(a_Color);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);<span class="comment">//取消绑定的缓冲区对象</span></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="效果4"><a href="#效果4" class="headerlink" title="效果4"></a>效果4</h5><blockquote>
<p>模拟观察者（视点）改变自身位置（围绕观察物水平旋转）的场景。</p>
<p>尝试按下你键盘的<code>←</code>键或<code>→</code>键，或点击下面的按钮~</p>
</blockquote>
<script src="\lib\webgl-utils.js"></script>
<script src="\lib\webgl-debug.js"></script>
<script src="\lib\cuon-utils.js"></script>
<script src="\lib\cuon-matrix.js"></script>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
  <title>LookAtTriangles</title>
</head>
<body onload="main()">
<div>
    <button id="left">←</button>
    <button id="right">→</button>
</div>
<canvas id="webgl" width="300" height="300">
  Please use the browser supporting "canvas".
</canvas>
<script type='text/javascript'>
//LookAtTrianglesWithKeys.js
var VSHADER_SOURCE =
    'attribute vec4 a_Position;\n' +
    'attribute vec4 a_Color;\n' +
    'uniform mat4 u_ViewMatrix;\n' +
    'varying vec4 v_Color;\n' +
    'void main() {\n' +
    '   gl_Position = u_ViewMatrix * a_Position;\n' +
    '   gl_PointSize = 10.0;\n' +
    '   v_Color = a_Color;\n' +
    '}\n';
var FSHADER_SOURCE=
    'precision mediump float;\n' +//!!! 需要声明浮点数精度，否则报错No precision specified for (float)
    'varying vec4 v_Color;\n' +
    'void main(){\n'+
    '   gl_FragColor = v_Color;\n'+
    '}\n';
function main() {
    var canvas = document.getElementById("webgl");
    var gl = getWebGLContext(canvas);
    if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
        console.log("Failed to initialize shaders.");
        return;
    }
    //设置顶点位置
    var n = initVertexBuffers(gl);
    var u_ViewMatrix = gl.getUniformLocation(gl.program, 'u_ViewMatrix');
    //设置视点、视线、上方向
    var viewMatrix = new Matrix4();
    //注册键盘事件响应函数
    document.onkeydown = function (ev) {
        keydown(ev, gl, n, u_ViewMatrix,viewMatrix);
    };
    document.onclick = function (ev) {
        myClick(ev, gl, n, u_ViewMatrix,viewMatrix)
    }
   draw(gl, n, u_ViewMatrix, viewMatrix);
}
var g_eyeX = 0.20, g_eyeY = 0.25, g_eyeZ = 0.25; // 视点
function keydown(ev, gl, n, u_ViewMatrix, viewMatrix) {
    if(ev.keyCode == 39){   //按下右键
        g_eyeX += 0.01;
    }else if(ev.keyCode == 37){ //按下左键
        g_eyeX -= 0.01;
    }else {
        return ;
    }
    draw(gl, n, u_ViewMatrix, viewMatrix);
}
function myClick(ev, gl, n, u_ViewMatrix,viewMatrix){
    if(ev.target.id == 'left') {
        g_eyeX -= 0.02;
    } else {
        g_eyeX += 0.02;
    }
    draw(gl, n, u_ViewMatrix, viewMatrix);
}
function draw(gl, n, u_ViewMatrix, viewMatrix) {
    //设置视点和视线
    viewMatrix.setLookAt(g_eyeX, g_eyeY, g_eyeZ, 0, 0, 0, 0, 1, 0);
    //将视图矩阵传递给u_ViewMatrix变量
    gl.uniformMatrix4fv(u_ViewMatrix, false, viewMatrix.elements);
    gl.clear(gl.COlOR_BUFFER_BIT);
    gl.drawArrays(gl.TRIANGLES, 0, n);
}
function initVertexBuffers(gl) {
    var verticesColors = new Float32Array(
        [
            0.0,  0.5,  -0.4,  0.4,  1.0,  0.4, // The back green one
            -0.5, -0.5,  -0.4,  0.4,  1.0,  0.4,
            0.5, -0.5,  -0.4,  1.0,  0.4,  0.4,
            0.5,  0.4,  -0.2,  1.0,  0.4,  0.4, // The middle yellow one
            -0.5,  0.4,  -0.2,  1.0,  1.0,  0.4,
            0.0, -0.6,  -0.2,  1.0,  1.0,  0.4,
            0.0,  0.5,   0.0,  0.4,  0.4,  1.0,  // The front blue one
            -0.5, -0.5,   0.0,  0.4,  0.4,  1.0,
            0.5, -0.5,   0.0,  1.0,  0.4,  0.4
        ]
    );
    var n = 9; //点的个数
    //创建缓冲区对象
    var verteColorBuffer = gl.createBuffer();
    //将缓冲区对象保存到目标上
    gl.bindBuffer(gl.ARRAY_BUFFER, verteColorBuffer);
    //向缓存对象写入数据
    gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);
    var FSIZE = verticesColors.BYTES_PER_ELEMENT;
    var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
    //将缓冲区对象分配给a_Postion变量
    gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE *6, 0);
    //连接a_Postion变量与分配给它的缓冲区对象
    gl.enableVertexAttribArray(a_Position);
    var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
    gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 6, FSIZE * 3);
    gl.enableVertexAttribArray(a_Color);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);//取消绑定的缓冲区对象
    return n;}
    </script>
    </body>
    </html>

]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】28-光照-光照原理-点光源</title>
    <url>/28-%E5%85%89%E7%85%A7-%E5%85%89%E7%85%A7%E5%8E%9F%E7%90%86-%E7%82%B9%E5%85%89%E6%BA%90-PointLightedCube/</url>
    <content><![CDATA[<p>对应《WebGL编程指南》第八章 40-PointLightedCube、41-PointLightedCube_animation、42-PointLightedCube_perFragment</p>
<p>要点：点光源光、逐片元光照</p>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、点光源"><a href="#一、点光源" class="headerlink" title="一、点光源"></a>一、点光源</h3><p>与平行光相比，点光源光发出的光，<u>在三维空间的不同位置上其方向也不同</u>，如下图所示。所以，在对点光源光下的物体进行着色时，需要在每个入射点计算点光源光在该处的方向。</p>
<p><img src="/images/PointLightedCube1.png" alt="点光源光的方向随位置变化"></p>
<p>前一节根据<u>每个顶点的法向量和平行光入射方向</u>来计算反射光的颜色，这一节还是采用该方法，只不过点光源光的方向不再是恒定不变的，而是根据每个顶点的位置逐一计算。<u>着色器需要知道点光源光自身的所在位置，而不是光的方向</u>。</p>
<p>示例程序 PointLightedCube 是前一节 <a href="https://freepiao.cn/26-%E5%85%89%E7%85%A7-%E5%85%89%E7%85%A7%E5%8E%9F%E7%90%86-%E5%B9%B3%E8%A1%8C%E5%85%89-LightedCube/#%E4%BB%A3%E7%A0%813-LightedCube-ambient">LightedCube_ambient</a> 示例程序的点光源光版本，显示了一个点光源下的红色立方体。立方体表面仍然是漫反射，环境光保持不变，程序的效果如下图：</p>
<p><img src="/images/PointLightedCube2.png" alt="PointLightedCube"></p>
<p>旋转示例：</p>
<script src="\lib\webgl-utils.js"></script>
<script src="\lib\webgl-debug.js"></script>
<script src="\lib\cuon-utils.js"></script>
<script src="\lib\cuon-matrix.js"></script>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
  <title>LookAtTriangles</title>
</head>
<body onload="main()">
<div style="margin:0 auto">
    <canvas id="webgl" width="300" height="300" >
      Please use the browser supporting "canvas".
    </canvas>
</div>
<script type='text/javascript'>
//PointLightedCube_animation.js
var VSHADER_SOURCE =
    'attribute vec4 a_Position;\n' +
    'attribute vec4 a_Color;\n' + //表面基底色
    'attribute vec4 a_Normal;\n' + //法向量
    'uniform mat4 u_MvpMatrix;\n' +
    'uniform mat4 u_ModelMatrix;\n' + //模拟矩阵
    'uniform mat4 u_NormalMatrix;\n' + //用来变换法向量的矩阵
    'uniform vec3 u_LightColor;\n' + //光线颜色
    'uniform vec3 u_LightPosition;\n' + //光源位置（世界坐标系）
    'uniform vec3 u_AmbientLight;\n' + //环境光颜色
    'varying vec4 v_Color;\n' +
    'void main() {\n' +
    'gl_Position = u_MvpMatrix * a_Position;\n' +
    'vec3 normal = normalize(vec3(u_NormalMatrix * a_Normal));\n' + //计算变化后的法向量进行归一化
    'vec4 vertexPosition = u_ModelMatrix * a_Position;\n' + //计算顶点的世界坐标
    'vec3 lightDirection = normalize(u_LightPosition - vec3(vertexPosition));\n' + //计算光线方向并归一化
    'float nDotL = max(dot(lightDirection, normal), 0.0);\n' + //计算光线方向和法向量的点积
    'vec3 diffuse = u_LightColor * vec3(a_Color) * nDotL;\n' + //计算漫反射光的颜色
    'vec3 ambient = u_AmbientLight * vec3(a_Color);\n' + //计算环境光产生的反射光颜色
    'v_Color = vec4(diffuse + ambient, a_Color.a);\n' +
    '}\n';
var FSHADER_SOURCE=
    '#ifdef GL_ES\n' +
    'precision mediump float;\n' +
    '#endif\n' +
    'varying vec4 v_Color;\n' +
    'void main(){\n'+
    'gl_FragColor = v_Color;\n'+
    '}\n';
function main() {
    var canvas = document.getElementById("webgl");
    if (!canvas) {
        console.log("Failed to retrieve the <canvas> element");
        return;
    }
    var gl = getWebGLContext(canvas);
    if (!gl) {
        console.log("Failed to get the rendering context for WebGL");
        return;
    }
    if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
        console.log("Failed to initialize shaders.");
        return;
    }
    //设置顶点位置
    var n = initVertexBuffers(gl);
    if (n < 0) {
        console.log('Failed to set the positions of the vertices');
        return;
    }
    // Set the clear color and enable the depth test
    // gl.clearColor(0, 0, 0, 1);
    gl.enable(gl.DEPTH_TEST);
    var u_ModelMatrix = gl.getUniformLocation(gl.program, 'u_ModelMatrix');
    var u_MvpMatrix = gl.getUniformLocation(gl.program, 'u_MvpMatrix');//模型视图投影矩阵
    var u_NormalMatrix = gl.getUniformLocation(gl.program, 'u_NormalMatrix');
    var u_LightColor = gl.getUniformLocation(gl.program, 'u_LightColor');
    var u_LightPosition = gl.getUniformLocation(gl.program, 'u_LightPosition');
    var u_AmbientLight = gl.getUniformLocation(gl.program, 'u_AmbientLight');
    if (!u_MvpMatrix || !u_NormalMatrix || !u_LightColor || !u_LightPosition　|| !u_AmbientLight) {
        console.log('Failed to get the storage location');
        return;
    }
    var vpMatrix = new Matrix4();   // View projection matrix
    vpMatrix.setPerspective(30, canvas.width/canvas.height, 1, 100);
    vpMatrix.lookAt(6, 6, 14, 0, 0, 0, 0, 1, 0);
    gl.uniform3f(u_LightColor, 1.0, 1.0, 1.0); //设置光线颜色为白色
    gl.uniform3f(u_LightPosition, 2.3, 4.0, 3.5);//设置光线位置（在世界坐标系下）
    gl.uniform3f(u_AmbientLight, 0.2, 0.2, 0.2); //设置环境光颜色
    var currentAngle = 0.0;
    var modelMatrix = new Matrix4();  // Model matrix
    var mvpMatrix = new Matrix4();    // Model view projection matrix
    var normalMatrix = new Matrix4(); // Transformation matrix for normals
    var tick = function() {
        currentAngle = animate(currentAngle);  // Update the rotation angle
        // Calculate the model matrix
        modelMatrix.setRotate(currentAngle, 0, 1, 0); // Rotate around the y-axis
        // Pass the model matrix to u_ModelMatrix
        gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
        // Pass the model view projection matrix to u_MvpMatrix
        mvpMatrix.set(vpMatrix).multiply(modelMatrix);
        gl.uniformMatrix4fv(u_MvpMatrix, false, mvpMatrix.elements);
        // Pass the matrix to transform the normal based on the model matrix to u_NormalMatrix
        normalMatrix.setInverseOf(modelMatrix);
        normalMatrix.transpose();
        gl.uniformMatrix4fv(u_NormalMatrix, false, normalMatrix.elements);
        // Clear color and depth buffer
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        // Draw the cube
        gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, 0);
        requestAnimationFrame(tick, canvas); // Request that the browser ?calls tick
    };
    tick();
}
function initVertexBuffers(gl) {
    // Create a cube
    //    v6----- v5
    //   /|      /|
    //  v1------v0|
    //  | |     | |
    //  | |v7---|-|v4
    //  |/      |/
    //  v2------v3
    var vertices = new Float32Array([   // Vertex coordinates
        2.0, 2.0, 2.0,  -2.0, 2.0, 2.0,  -2.0,-2.0, 2.0,   2.0,-2.0, 2.0, // v0-v1-v2-v3 front
        2.0, 2.0, 2.0,   2.0,-2.0, 2.0,   2.0,-2.0,-2.0,   2.0, 2.0,-2.0, // v0-v3-v4-v5 right
        2.0, 2.0, 2.0,   2.0, 2.0,-2.0,  -2.0, 2.0,-2.0,  -2.0, 2.0, 2.0, // v0-v5-v6-v1 up
        -2.0, 2.0, 2.0,  -2.0, 2.0,-2.0,  -2.0,-2.0,-2.0,  -2.0,-2.0, 2.0, // v1-v6-v7-v2 left
        -2.0,-2.0,-2.0,   2.0,-2.0,-2.0,   2.0,-2.0, 2.0,  -2.0,-2.0, 2.0, // v7-v4-v3-v2 down
        2.0,-2.0,-2.0,  -2.0,-2.0,-2.0,  -2.0, 2.0,-2.0,   2.0, 2.0,-2.0  // v4-v7-v6-v5 back
    ]);
    var colors = new Float32Array([     // Colors
        1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0,     // v0-v1-v2-v3 front
        1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0,     // v0-v3-v4-v5 right
        1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0,     // v0-v5-v6-v1 up
        1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0,     // v1-v6-v7-v2 left
        1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0,     // v7-v4-v3-v2 down
        1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0　    // v4-v7-v6-v5 back
    ]);
    var normals = new Float32Array([    // Normal
        0.0, 0.0, 1.0,   0.0, 0.0, 1.0,   0.0, 0.0, 1.0,   0.0, 0.0, 1.0,  // v0-v1-v2-v3 front
        1.0, 0.0, 0.0,   1.0, 0.0, 0.0,   1.0, 0.0, 0.0,   1.0, 0.0, 0.0,  // v0-v3-v4-v5 right
        0.0, 1.0, 0.0,   0.0, 1.0, 0.0,   0.0, 1.0, 0.0,   0.0, 1.0, 0.0,  // v0-v5-v6-v1 up
        -1.0, 0.0, 0.0,  -1.0, 0.0, 0.0,  -1.0, 0.0, 0.0,  -1.0, 0.0, 0.0,  // v1-v6-v7-v2 left
        0.0,-1.0, 0.0,   0.0,-1.0, 0.0,   0.0,-1.0, 0.0,   0.0,-1.0, 0.0,  // v7-v4-v3-v2 down
        0.0, 0.0,-1.0,   0.0, 0.0,-1.0,   0.0, 0.0,-1.0,   0.0, 0.0,-1.0   // v4-v7-v6-v5 back
    ]);
    var indices = new Uint8Array([       // Indices of the vertices
        0, 1, 2,   0, 2, 3,    // front
        4, 5, 6,   4, 6, 7,    // right
        8, 9,10,   8,10,11,    // up
        12,13,14,  12,14,15,    // left
        16,17,18,  16,18,19,    // down
        20,21,22,  20,22,23     // back
    ]);
    // Write the vertex coordinates and color to the buffer object
    if (!initArrayBuffer(gl, vertices, 3, gl.FLOAT, 'a_Position'))
        return -1;
    if (!initArrayBuffer(gl, colors, 3, gl.FLOAT, 'a_Color'))
        return -1;
    if (!initArrayBuffer(gl, normals, 3, gl.FLOAT, 'a_Normal'))
        return -1;
    // Create a buffer object
    var indexBuffer = gl.createBuffer();
    if (!indexBuffer) {
        console.log('Failed to create the buffer object');
        return false;
    }
    // Write the indices to the buffer object
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
    return indices.length;
}
function initArrayBuffer(gl, data, num, type, attribute) {
    var buffer = gl.createBuffer();   // Create a buffer object
    if (!buffer) {
        console.log('Failed to create the buffer object');
        return false;
    }
    // Write date into the buffer object
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
    // Assign the buffer object to the attribute variable
    var a_attribute = gl.getAttribLocation(gl.program, attribute);
    if (a_attribute < 0) {
        console.log('Failed to get the storage location of ' + attribute);
        return false;
    }
    gl.vertexAttribPointer(a_attribute, num, type, false, 0, 0);
    // Enable the assignment of the buffer object to the attribute variable
    gl.enableVertexAttribArray(a_attribute);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    return true;
}
// Rotation angle (degrees/second)
var ANGLE_STEP = 30.0;
// Last time that this function was called
var g_last = Date.now();
function animate(angle) {
    // Calculate the elapsed time
    var now = Date.now();
    var elapsed = now - g_last;
    g_last = now;
    // Update the current rotation angle (adjusted by the elapsed time)
    var newAngle = angle + (ANGLE_STEP * elapsed) / 1000.0;
    return newAngle %= 360;
}
    </script>
    </body>
    </html>


<h3 id="二、程序分析"><a href="#二、程序分析" class="headerlink" title="二、程序分析"></a>二、程序分析</h3><p>与 <code>LightedCube_ambient</code> 相比，顶点着色器中新增加了 <code>u_ModelMatrix</code> 变量和 <code>u_LightPosition</code> 变量，<u>前者表示模型矩阵，后者表示点光源的位置</u>。本例中的光是点光源光而非平行光，所以我们需要用到定光源光的位置，而不是光线方向。为了让你看的更清楚，本例将立方体稍做放大。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> + <span class="comment">//表面基底色</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> + <span class="comment">//法向量</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ModelMatrix;\n&#x27;</span> + <span class="comment">//模拟矩阵</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_NormalMatrix;\n&#x27;</span> + <span class="comment">//用来变换法向量的矩阵</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightColor;\n&#x27;</span> + <span class="comment">//光线颜色</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightPosition;\n&#x27;</span> + <span class="comment">//光源位置（世界坐标系）</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_AmbientLight;\n&#x27;</span> + <span class="comment">//环境光颜色</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   vec3 normal = normalize(vec3(u_NormalMatrix * a_Normal));\n&#x27;</span> + <span class="comment">//计算变化后的法向量进行归一化</span></span><br><span class="line">    <span class="string">&#x27;   vec4 vertexPosition = u_ModelMatrix * a_Position;\n&#x27;</span> + <span class="comment">//计算顶点的世界坐标</span></span><br><span class="line">    <span class="string">&#x27;   vec3 lightDirection = normalize(u_LightPosition - vec3(vertexPosition));\n&#x27;</span> + <span class="comment">//计算光线方向并归一化</span></span><br><span class="line">    <span class="string">&#x27;   float nDotL = max(dot(lightDirection, normal), 0.0);\n&#x27;</span> + <span class="comment">//计算光线方向和法向量的点积</span></span><br><span class="line">    <span class="string">&#x27;   vec3 diffuse = u_LightColor * vec3(a_Color) * nDotL;\n&#x27;</span> + <span class="comment">//计算漫反射光的颜色</span></span><br><span class="line">    <span class="string">&#x27;   vec3 ambient = u_AmbientLight * vec3(a_Color);\n&#x27;</span> + <span class="comment">//计算环境光产生的反射光颜色</span></span><br><span class="line">    <span class="string">&#x27;   v_Color = vec4(diffuse + ambient, a_Color.a);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">var</span> u_ModelMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ModelMatrix&#x27;</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> u_LightPosition = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_LightPosition&#x27;</span>);</span><br><span class="line">...</span><br><span class="line">gl.uniform3f(u_LightPosition, <span class="number">2.3</span>, <span class="number">4.0</span>, <span class="number">3.5</span>);<span class="comment">//设置光线位置（在世界坐标系下）</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();  <span class="comment">// Model matrix</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-顶点着色器"><a href="#2-1-顶点着色器" class="headerlink" title="2.1 顶点着色器"></a>2.1 顶点着色器</h4><p>首先使用模型矩阵变换顶点坐标，获得顶点在世界坐标系中的坐标，以便计算点光源光在顶点处的方向。点光源向四周发射光线，所以<u>顶点处的光线方向是由<strong>点光源光坐标</strong>减去<strong>顶点坐标</strong>而得到的矢量</u>。</p>
<p>点光源在世界坐标系中的坐标已经传给了着色器中的       <code>u_LightPosition</code>，而前面也已经计算出了顶点在世界坐标系中的坐标，这样就将计算出了光线方向矢量 <code>lightDirection</code>。</p>
<blockquote>
<p>注意，需要使用 <code>normaliza()</code>进行归一化，以保证光线方向矢量的长度为1.0。</p>
</blockquote>
<p>最后， 计算光线方向矢量与法向量的点积，从而计算处每个顶点的颜色。</p>
<h4 id="2-2-问题"><a href="#2-2-问题" class="headerlink" title="2.2 问题"></a>2.2 问题</h4><p>运行程序，你会发现效果更加逼真了但是，如果仔细观察还是能发现一个问题：立方体表面有不自然的线条。</p>
<p>出现该现象的原因在第5章讨论过的<strong>内插</strong>过程中提到过。你应该还记得，WebGL 系统会根据顶点的颜色，内插出表面上每个片元的颜色。实际上，点光源光照射到一个表面上，所产生的效果（即每个片元获得的颜色）与简单使用4个顶点颜色内插出的效果并不完全相同，所以<u>为了使效果更加逼真，我们需要对表面的每一个点，而不仅仅是4个顶点计算光照效果</u>。如果使用一个球体，二者的差异可能会更加明显。<br><img src="/images/PointLightedCube3.png" alt="点光源下的球体"></p>
<h3 id="三、逐片元光照"><a href="#三、逐片元光照" class="headerlink" title="三、逐片元光照"></a>三、逐片元光照</h3><p>乍一听，要在表面的每一点上计算光照产生的颜色，似乎是个不可能完成的任务。但实际上，我们只需要逐片元地进行计算。片元着色器总算要派上用场了。</p>
<p>示例程序是 <a href="%E4%BB%A3%E7%A0%812">代码2-PointLightedCube_perFragment</a>，效果如下图所示：</p>
<p><img src="/images/PointLightedCube4.png" alt="PointLightedCube_perFragment"></p>
<p>为了逐片元地计算光照，你需要知道：</p>
<ul>
<li><p>片元在世界坐标下的坐标</p>
</li>
<li><p>片元处表面的法向量。</p>
</li>
</ul>
<p>可以在顶点着色器中，将顶点的世界坐标和法向量以 <code>varying变量</code>的形式传入片元着色器，片元着色器中的同名变量就已经是内插后的逐片元值了。</p>
<p>顶点着色器使用<u>模型矩阵乘以顶点坐标计算处顶点的世界坐标</u>，将其赋值给 <code>v_Position</code> 变量，经过<u>内插</u>过程后，片元着色器就获得了逐片元的 v_Position 变量，也就是片元的世界坐标。类似的，顶点着色器将顶点的法向量赋值给 v_Normal 变量，经过内插，片元着色器就获得了逐片元的 v_Normal 变量，即片元的法向量。</p>
<p>片元着色器计算光照效果的方法与 PointLightedCube.js 相同。首先对法向量 <code>v_Normal 进行归一化</code>，因为<code>内插后法向量可能不再是 1.0</code>了；然后，计算片远处的光线方向并对其归一化；接着<u>计算法向量与光线方向的点积</u>；最后<u>分别计算点光源光和环境光产生的反射光颜色</u>，并将两个结果加起来，赋值给 <code>gl_FragColor</code>，片元就会显示为这个颜色。</p>
<p>如果场景中有超过一个点光源，那么就需要在片元着色器中计算每一个点光源，环境光对片元的颜色贡献，并将它们全部加起来。</p>
<p>核心代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> + <span class="comment">//表面基底色</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> + <span class="comment">//法向量</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ModelMatrix;\n&#x27;</span> + <span class="comment">//模拟矩阵</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_NormalMatrix;\n&#x27;</span> + <span class="comment">//用来变换法向量的矩阵</span></span><br><span class="line">    <span class="string">&#x27;varying vec3 v_Normal;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec3 v_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;v_Position = vec3(u_ModelMatrix * a_Position);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;v_Normal = normalize(vec3(u_NormalMatrix * a_Normal));\n&#x27;</span> + <span class="comment">//计算变化后的法向量进行归一化</span></span><br><span class="line">    <span class="string">&#x27;v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightColor;\n&#x27;</span> +     <span class="comment">// 光的颜色</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightPosition;\n&#x27;</span> +  <span class="comment">// 光源位置</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_AmbientLight;\n&#x27;</span> +   <span class="comment">// 环境光颜色</span></span><br><span class="line">    <span class="string">&#x27;varying vec3 v_Normal;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec3 v_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="comment">// 对法线进行归一化，因为内插后法向量可能不再是 1.0</span></span><br><span class="line">    <span class="string">&#x27;  vec3 normal = normalize(v_Normal);\n&#x27;</span> +</span><br><span class="line">    <span class="comment">// 计算光线方向并归一化</span></span><br><span class="line">    <span class="string">&#x27;  vec3 lightDirection = normalize(u_LightPosition - v_Position);\n&#x27;</span> +</span><br><span class="line">    <span class="comment">// 计算光线方向和法向量的点积</span></span><br><span class="line">    <span class="string">&#x27;  float nDotL = max(dot(lightDirection, normal), 0.0);\n&#x27;</span> +</span><br><span class="line">    <span class="comment">// 计算 diffuse、ambient 以及最终的颜色</span></span><br><span class="line">    <span class="string">&#x27;  vec3 diffuse = u_LightColor * v_Color.rgb * nDotL;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;  vec3 ambient = u_AmbientLight * v_Color.rgb;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;  gl_FragColor = vec4(diffuse + ambient, v_Color.a);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//PointLightedCube.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> + <span class="comment">//表面基底色</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> + <span class="comment">//法向量</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ModelMatrix;\n&#x27;</span> + <span class="comment">//模拟矩阵</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_NormalMatrix;\n&#x27;</span> + <span class="comment">//用来变换法向量的矩阵</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightColor;\n&#x27;</span> + <span class="comment">//光线颜色</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightPosition;\n&#x27;</span> + <span class="comment">//光源位置（世界坐标系）</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_AmbientLight;\n&#x27;</span> + <span class="comment">//环境光颜色</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   vec3 normal = normalize(vec3(u_NormalMatrix * a_Normal));\n&#x27;</span> + <span class="comment">//计算变化后的法向量进行归一化</span></span><br><span class="line">    <span class="string">&#x27;   vec4 vertexPosition = u_ModelMatrix * a_Position;\n&#x27;</span> + <span class="comment">//计算顶点的世界坐标</span></span><br><span class="line">    <span class="string">&#x27;   vec3 lightDirection = normalize(u_LightPosition - vec3(vertexPosition));\n&#x27;</span> + <span class="comment">//计算光线方向并归一化</span></span><br><span class="line">    <span class="string">&#x27;   float nDotL = max(dot(lightDirection, normal), 0.0);\n&#x27;</span> + <span class="comment">//计算光线方向和法向量的点积</span></span><br><span class="line">    <span class="string">&#x27;   vec3 diffuse = u_LightColor * vec3(a_Color) * nDotL;\n&#x27;</span> + <span class="comment">//计算漫反射光的颜色</span></span><br><span class="line">    <span class="string">&#x27;   vec3 ambient = u_AmbientLight * vec3(a_Color);\n&#x27;</span> + <span class="comment">//计算环境光产生的反射光颜色</span></span><br><span class="line">    <span class="string">&#x27;   v_Color = vec4(diffuse + ambient, a_Color.a);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the clear color and enable the depth test</span></span><br><span class="line">    <span class="comment">// gl.clearColor(0, 0, 0, 1);</span></span><br><span class="line">    gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_ModelMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ModelMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_MvpMatrix&#x27;</span>);<span class="comment">//模型视图投影矩阵</span></span><br><span class="line">    <span class="keyword">var</span> u_NormalMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_NormalMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_LightColor = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_LightColor&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_LightPosition = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_LightPosition&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_AmbientLight = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_AmbientLight&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!u_MvpMatrix || !u_NormalMatrix || !u_LightColor || !u_LightPosition　|| !u_AmbientLight) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gl.uniform3f(u_LightColor, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>); <span class="comment">//设置光线颜色为白色</span></span><br><span class="line">    gl.uniform3f(u_LightPosition, <span class="number">2.3</span>, <span class="number">4.0</span>, <span class="number">3.5</span>);<span class="comment">//设置光线位置（在世界坐标系下）</span></span><br><span class="line">    gl.uniform3f(u_AmbientLight, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>); <span class="comment">//设置环境光颜色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();  <span class="comment">// Model matrix</span></span><br><span class="line">    <span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();    <span class="comment">// Model view projection matrix</span></span><br><span class="line">    <span class="keyword">var</span> normalMatrix = <span class="keyword">new</span> Matrix4(); <span class="comment">// Transformation matrix for normals</span></span><br><span class="line"></span><br><span class="line">    modelMatrix.setRotate(<span class="number">90</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    gl.uniformMatrix4fv(u_ModelMatrix, <span class="literal">false</span>, modelMatrix.elements);</span><br><span class="line"></span><br><span class="line">    mvpMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span> ,<span class="number">100</span>);</span><br><span class="line">    mvpMatrix.lookAt(<span class="number">6</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    mvpMatrix.multiply(modelMatrix);</span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br><span class="line"></span><br><span class="line">    normalMatrix.setInverseOf(modelMatrix);</span><br><span class="line">    normalMatrix.transpose();</span><br><span class="line">    gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, normalMatrix.elements);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create a cube</span></span><br><span class="line">    <span class="comment">//    v6----- v5</span></span><br><span class="line">    <span class="comment">//   /|      /|</span></span><br><span class="line">    <span class="comment">//  v1------v0|</span></span><br><span class="line">    <span class="comment">//  | |     | |</span></span><br><span class="line">    <span class="comment">//  | |v7---|-|v4</span></span><br><span class="line">    <span class="comment">//  |/      |/</span></span><br><span class="line">    <span class="comment">//  v2------v3</span></span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([   <span class="comment">// Vertex coordinates</span></span><br><span class="line">        <span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>,  -<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>,  -<span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="number">2.0</span>,   <span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>,   <span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="number">2.0</span>,   <span class="number">2.0</span>,-<span class="number">2.0</span>,-<span class="number">2.0</span>,   <span class="number">2.0</span>, <span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>,   <span class="number">2.0</span>, <span class="number">2.0</span>,-<span class="number">2.0</span>,  -<span class="number">2.0</span>, <span class="number">2.0</span>,-<span class="number">2.0</span>,  -<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>, <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>,  -<span class="number">2.0</span>, <span class="number">2.0</span>,-<span class="number">2.0</span>,  -<span class="number">2.0</span>,-<span class="number">2.0</span>,-<span class="number">2.0</span>,  -<span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        -<span class="number">2.0</span>,-<span class="number">2.0</span>,-<span class="number">2.0</span>,   <span class="number">2.0</span>,-<span class="number">2.0</span>,-<span class="number">2.0</span>,   <span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="number">2.0</span>,  -<span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">2.0</span>,-<span class="number">2.0</span>,-<span class="number">2.0</span>,  -<span class="number">2.0</span>,-<span class="number">2.0</span>,-<span class="number">2.0</span>,  -<span class="number">2.0</span>, <span class="number">2.0</span>,-<span class="number">2.0</span>,   <span class="number">2.0</span>, <span class="number">2.0</span>,-<span class="number">2.0</span>  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([     <span class="comment">// Colors</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>　    <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> normals = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([    <span class="comment">// Normal</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([       <span class="comment">// Indices of the vertices</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">        <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">        <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>,   <span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,    <span class="comment">// up</span></span><br><span class="line">        <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,  <span class="number">12</span>,<span class="number">14</span>,<span class="number">15</span>,    <span class="comment">// left</span></span><br><span class="line">        <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,  <span class="number">16</span>,<span class="number">18</span>,<span class="number">19</span>,    <span class="comment">// down</span></span><br><span class="line">        <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,  <span class="number">20</span>,<span class="number">22</span>,<span class="number">23</span>     <span class="comment">// back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the vertex coordinates and color to the buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, vertices, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Position&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, colors, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Color&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, normals, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Normal&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span> (!indexBuffer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the indices to the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initArrayBuffer</span>(<span class="params">gl, data, num, type, attribute</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = gl.createBuffer();   <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!buffer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Write date into the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);</span><br><span class="line">    <span class="comment">// Assign the buffer object to the attribute variable</span></span><br><span class="line">    <span class="keyword">var</span> a_attribute = gl.getAttribLocation(gl.program, attribute);</span><br><span class="line">    <span class="keyword">if</span> (a_attribute &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of &#x27;</span> + attribute);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    gl.vertexAttribPointer(a_attribute, num, type, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Enable the assignment of the buffer object to the attribute variable</span></span><br><span class="line">    gl.enableVertexAttribArray(a_attribute);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p>见顶部</p>
<h4 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//PointLightedCube_perFragment.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> + <span class="comment">//表面基底色</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> + <span class="comment">//法向量</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_ModelMatrix;\n&#x27;</span> + <span class="comment">//模拟矩阵</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_NormalMatrix;\n&#x27;</span> + <span class="comment">//用来变换法向量的矩阵</span></span><br><span class="line">    <span class="string">&#x27;varying vec3 v_Normal;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec3 v_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;v_Position = vec3(u_ModelMatrix * a_Position);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;v_Normal = normalize(vec3(u_NormalMatrix * a_Normal));\n&#x27;</span> + <span class="comment">//计算变化后的法向量进行归一化</span></span><br><span class="line">    <span class="string">&#x27;v_Color = a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightColor;\n&#x27;</span> +     <span class="comment">// Light color</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightPosition;\n&#x27;</span> +  <span class="comment">// Position of the light source</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_AmbientLight;\n&#x27;</span> +   <span class="comment">// Ambient light color</span></span><br><span class="line">    <span class="string">&#x27;varying vec3 v_Normal;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec3 v_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="comment">// Normalize the normal because it is interpolated and not 1.0 in length any more</span></span><br><span class="line">    <span class="string">&#x27;  vec3 normal = normalize(v_Normal);\n&#x27;</span> +</span><br><span class="line">    <span class="comment">// Calculate the light direction and make its length 1.</span></span><br><span class="line">    <span class="string">&#x27;  vec3 lightDirection = normalize(u_LightPosition - v_Position);\n&#x27;</span> +</span><br><span class="line">    <span class="comment">// The dot product of the light direction and the orientation of a surface (the normal)</span></span><br><span class="line">    <span class="string">&#x27;  float nDotL = max(dot(lightDirection, normal), 0.0);\n&#x27;</span> +</span><br><span class="line">    <span class="comment">// Calculate the final color from diffuse reflection and ambient reflection</span></span><br><span class="line">    <span class="string">&#x27;  vec3 diffuse = u_LightColor * v_Color.rgb * nDotL;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;  vec3 ambient = u_AmbientLight * v_Color.rgb;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;  gl_FragColor = vec4(diffuse + ambient, v_Color.a);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the clear color and enable the depth test</span></span><br><span class="line">    <span class="comment">// gl.clearColor(0, 0, 0, 1);</span></span><br><span class="line">    gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_ModelMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_ModelMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_MvpMatrix&#x27;</span>);<span class="comment">//模型视图投影矩阵</span></span><br><span class="line">    <span class="keyword">var</span> u_NormalMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_NormalMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_LightColor = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_LightColor&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_LightPosition = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_LightPosition&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_AmbientLight = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_AmbientLight&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!u_MvpMatrix || !u_NormalMatrix || !u_LightColor || !u_LightPosition　|| !u_AmbientLight) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gl.uniform3f(u_LightColor, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>); <span class="comment">//设置光线颜色为白色</span></span><br><span class="line">    gl.uniform3f(u_LightPosition, <span class="number">2.3</span>, <span class="number">4.0</span>, <span class="number">3.5</span>);<span class="comment">//设置光线位置（在世界坐标系下）</span></span><br><span class="line">    gl.uniform3f(u_AmbientLight, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>); <span class="comment">//设置环境光颜色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4();  <span class="comment">// Model matrix</span></span><br><span class="line">    <span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();    <span class="comment">// Model view projection matrix</span></span><br><span class="line">    <span class="keyword">var</span> normalMatrix = <span class="keyword">new</span> Matrix4(); <span class="comment">// Transformation matrix for normals</span></span><br><span class="line"></span><br><span class="line">    modelMatrix.setRotate(<span class="number">90</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    gl.uniformMatrix4fv(u_ModelMatrix, <span class="literal">false</span>, modelMatrix.elements);</span><br><span class="line"></span><br><span class="line">    mvpMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span> ,<span class="number">100</span>);</span><br><span class="line">    mvpMatrix.lookAt(<span class="number">6</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    mvpMatrix.multiply(modelMatrix);</span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br><span class="line"></span><br><span class="line">    normalMatrix.setInverseOf(modelMatrix);</span><br><span class="line">    normalMatrix.transpose();</span><br><span class="line">    gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, normalMatrix.elements);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create a cube</span></span><br><span class="line">    <span class="comment">//    v6----- v5</span></span><br><span class="line">    <span class="comment">//   /|      /|</span></span><br><span class="line">    <span class="comment">//  v1------v0|</span></span><br><span class="line">    <span class="comment">//  | |     | |</span></span><br><span class="line">    <span class="comment">//  | |v7---|-|v4</span></span><br><span class="line">    <span class="comment">//  |/      |/</span></span><br><span class="line">    <span class="comment">//  v2------v3</span></span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([   <span class="comment">// Vertex coordinates</span></span><br><span class="line">        <span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>,  -<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>,  -<span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="number">2.0</span>,   <span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>,   <span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="number">2.0</span>,   <span class="number">2.0</span>,-<span class="number">2.0</span>,-<span class="number">2.0</span>,   <span class="number">2.0</span>, <span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>,   <span class="number">2.0</span>, <span class="number">2.0</span>,-<span class="number">2.0</span>,  -<span class="number">2.0</span>, <span class="number">2.0</span>,-<span class="number">2.0</span>,  -<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>, <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>,  -<span class="number">2.0</span>, <span class="number">2.0</span>,-<span class="number">2.0</span>,  -<span class="number">2.0</span>,-<span class="number">2.0</span>,-<span class="number">2.0</span>,  -<span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        -<span class="number">2.0</span>,-<span class="number">2.0</span>,-<span class="number">2.0</span>,   <span class="number">2.0</span>,-<span class="number">2.0</span>,-<span class="number">2.0</span>,   <span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="number">2.0</span>,  -<span class="number">2.0</span>,-<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">2.0</span>,-<span class="number">2.0</span>,-<span class="number">2.0</span>,  -<span class="number">2.0</span>,-<span class="number">2.0</span>,-<span class="number">2.0</span>,  -<span class="number">2.0</span>, <span class="number">2.0</span>,-<span class="number">2.0</span>,   <span class="number">2.0</span>, <span class="number">2.0</span>,-<span class="number">2.0</span>  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([     <span class="comment">// Colors</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>　    <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> normals = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([    <span class="comment">// Normal</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([       <span class="comment">// Indices of the vertices</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">        <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">        <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>,   <span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,    <span class="comment">// up</span></span><br><span class="line">        <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,  <span class="number">12</span>,<span class="number">14</span>,<span class="number">15</span>,    <span class="comment">// left</span></span><br><span class="line">        <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,  <span class="number">16</span>,<span class="number">18</span>,<span class="number">19</span>,    <span class="comment">// down</span></span><br><span class="line">        <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,  <span class="number">20</span>,<span class="number">22</span>,<span class="number">23</span>     <span class="comment">// back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the vertex coordinates and color to the buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, vertices, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Position&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, colors, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Color&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, normals, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Normal&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span> (!indexBuffer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the indices to the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initArrayBuffer</span>(<span class="params">gl, data, num, type, attribute</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = gl.createBuffer();   <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!buffer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Write date into the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);</span><br><span class="line">    <span class="comment">// Assign the buffer object to the attribute variable</span></span><br><span class="line">    <span class="keyword">var</span> a_attribute = gl.getAttribLocation(gl.program, attribute);</span><br><span class="line">    <span class="keyword">if</span> (a_attribute &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of &#x27;</span> + attribute);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    gl.vertexAttribPointer(a_attribute, num, type, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Enable the assignment of the buffer object to the attribute variable</span></span><br><span class="line">    gl.enableVertexAttribArray(a_attribute);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h5><p>见知识点三</p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构与算法】数据结构与算法前言、复杂度</title>
    <url>/Algorithm-guide/</url>
    <content><![CDATA[<p>要点：数据结构与算法、复杂度、程序运行的效率</p>
<p><strong>程序 = 数据结构 + 算法</strong> </p>
<span id="more"></span>

<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="一、数据结构的定义"><a href="#一、数据结构的定义" class="headerlink" title="一、数据结构的定义"></a>一、数据结构的定义</h3><p>官方定义：无</p>
<p>民间定义：</p>
<ul>
<li><p>“数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数来给出。” — 《数据结构、算法与应用》</p>
</li>
<li><p>“数据结构是 ADT（抽象数据类型 Abstract Data Type）的物理实现。” — 《数据结构与算法分析》</p>
</li>
<li><p>“数据结构（data structure）是计算机中存储、组织数据的方式。通常情况下，精心选择的数据结构可以带来最优效率的算法。” —中文维基百科</p>
</li>
<li><p>从自己角度认识</p>
<p>在计算机中，存储和组织数据的方式。</p>
</li>
</ul>
<h3 id="二、数据结构在生活中应用"><a href="#二、数据结构在生活中应用" class="headerlink" title="二、数据结构在生活中应用"></a>二、数据结构在生活中应用</h3><p>我们知道，计算机中数据量非常庞大，如何以高效的方式组织和存储呢?</p>
<p>例如：一个庞大的图书馆中存放了大量的书籍，我们不仅仅要把书放进入，还应该在合适的时候能够取出来。</p>
<p>图书摆放要使得两个相关操作方便实现：</p>
<ul>
<li>操作 1：新书怎么插入？</li>
<li>操作 2：怎么找到某本指定的书？</li>
</ul>
<p>图书各种摆放方式：</p>
<ul>
<li><p>方法 1：随便放</p>
<ul>
<li>操作 1：哪里有空位放哪里。</li>
<li>操作 2：找某本书，累死。</li>
</ul>
</li>
<li><p>方法 2：按照书名的拼音字母顺序排放</p>
<ul>
<li>操作 1：新进一本《阿 Q 正传》， 按照字母顺序找到位置，插入。</li>
<li>操作 2：二分查找法。</li>
</ul>
</li>
<li><p>方法 3：把书架划分成几块区域，按照类别存放，类别中按照字母顺序</p>
<ul>
<li>操作 1：先定类别，二分查找确定位置，移出空位。</li>
<li>操作 2：先定类别，再二分查找。</li>
</ul>
</li>
</ul>
<p>结论：</p>
<ul>
<li>解决问题方法的效率，根据数据的组织方式有关。</li>
<li>计算机中存储的数据量相对于图书馆的书籍来说数据量更大，数据更加多。</li>
<li>以什么样的方式，来存储和组织我们的数据才能在使用数据时更加方便呢?</li>
<li>这就是数据结构需要考虑的问题。</li>
</ul>
<h3 id="三、常见的数据结构"><a href="#三、常见的数据结构" class="headerlink" title="三、常见的数据结构"></a>三、常见的数据结构</h3><ul>
<li>数组（Aarray）</li>
<li>栈（Stack）</li>
<li>链表（Linked List）</li>
<li>图（Graph）</li>
<li>散列表（Hash）</li>
<li>队列（Queue）</li>
<li>树（Tree）</li>
<li>堆（Heap）</li>
</ul>
<blockquote>
<p>注意：数据结构与算法与语言无关，常见的编程语言都有<strong>直接或间接</strong>的使用上述常见的数据结构。</p>
</blockquote>
<h3 id="四、逻辑结构-amp-物理结构的区别用法"><a href="#四、逻辑结构-amp-物理结构的区别用法" class="headerlink" title="四、逻辑结构&amp;物理结构的区别用法"></a>四、逻辑结构&amp;物理结构的区别用法</h3><p>按照<strong>视点的不同</strong>，可以把数据结构分为 <em>逻辑结构</em> 和 <em>物理结构</em>：<strong>基本的目标</strong>就是<strong>将数据及其逻辑关系</strong>存储到<strong>计算机的内存中</strong></p>
<h4 id="4-1-逻辑结构"><a href="#4-1-逻辑结构" class="headerlink" title="4.1 逻辑结构"></a>4.1 逻辑结构</h4><ul>
<li><p>是指<strong>数据对象</strong>中<strong>数据元素之间</strong>的<strong>相互关系</strong></p>
</li>
<li><p><strong>面向问题的</strong></p>
</li>
</ul>
<p>可具体分为以下四种关系：</p>
<h5 id="A-集合结构"><a href="#A-集合结构" class="headerlink" title="A 集合结构"></a>A 集合结构</h5><p>数据元素除了<strong>同属于一个集合</strong>外，它们之间没有其他关系</p>
<p><img src="/images/algorithm1.png" alt="1"></p>
<h5 id="B-线性结构"><a href="#B-线性结构" class="headerlink" title="B 线性结构"></a>B 线性结构</h5><p>数据元素<strong>之间</strong>是<strong>一对一关系</strong></p>
<p><img src="/images/algorithm2.png" alt="2"></p>
<h5 id="C-树型结构"><a href="#C-树型结构" class="headerlink" title="C 树型结构"></a>C 树型结构</h5><p>数据元素之<strong>间</strong>呈现<strong>一对多关系</strong></p>
<p><img src="/images/algorithm3.png" alt="3"></p>
<h5 id="D-图形结构"><a href="#D-图形结构" class="headerlink" title="D 图形结构"></a>D 图形结构</h5><p>数据元素是<strong>多对多关系</strong></p>
<p><img src="/images/algorithm4.png" alt="4"></p>
<h4 id="4-2-物理结构"><a href="#4-2-物理结构" class="headerlink" title="4.2 物理结构"></a>4.2 物理结构</h4><ul>
<li><p>是指<strong>数据的逻辑结构</strong>在<strong>计算机中</strong>的<strong>存储形式</strong>，因此也称为 <strong>存储结构</strong></p>
</li>
<li><p><strong>是面向计算机的</strong></p>
</li>
</ul>
<h5 id="什么是数据"><a href="#什么是数据" class="headerlink" title="什么是数据"></a>什么是数据</h5><ul>
<li><p>数据是<strong>数据元素</strong>的<strong>集合</strong></p>
</li>
<li><p>那么根据物理结构的定义，<strong>实际</strong>上就是<strong>如何</strong>把<strong>数据元素</strong>存储到<strong>计算机的</strong>存储器中</p>
</li>
</ul>
<h5 id="什么是存储器"><a href="#什么是存储器" class="headerlink" title="什么是存储器"></a>什么是存储器</h5><ul>
<li>存储器主要是<strong>针对内存</strong>而言的，像硬盘，软盘，光盘等<strong>外部存储器</strong>的<strong>数据组织</strong>通常<strong>用文件结构来描述</strong></li>
</ul>
<h3 id="五、顺序存储-amp-链式存储的区别用法"><a href="#五、顺序存储-amp-链式存储的区别用法" class="headerlink" title="五、顺序存储&amp;链式存储的区别用法"></a>五、顺序存储&amp;链式存储的区别用法</h3><blockquote>
<p>数据的<strong>存储结构</strong>应正确<strong>反映</strong>数据<strong>元素之间</strong>的<strong>逻辑关系</strong></p>
</blockquote>
<p>数据元素的<strong>存储结构形式</strong>有两种：<em>顺序存储</em> 和 <em>链式存储</em></p>
<h4 id="5-1-顺序存储结构"><a href="#5-1-顺序存储结构" class="headerlink" title="5.1 顺序存储结构"></a>5.1 顺序存储结构</h4><ul>
<li><p>是把数据元素<strong>存放在</strong>地址连续的存储单元里</p>
</li>
<li><p>其数据间的逻辑关系和物理<strong>关系是一致的</strong></p>
</li>
</ul>
<p><img src="/images/algorithm5.png" alt="5"></p>
<h4 id="5-2-链式存储结构"><a href="#5-2-链式存储结构" class="headerlink" title="5.2 链式存储结构"></a>5.2 链式存储结构</h4><ul>
<li><p>是把数据元素<strong>存放在任意的存储单元里</strong></p>
</li>
<li><p>这组存储单元<strong>可以</strong>是<strong>连续</strong>的</p>
</li>
<li><p><strong>也可以</strong>是<strong>不连续</strong>的</p>
</li>
</ul>
<p><img src="/images/algorithm6.png" alt="6"></p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="一、算法（Algorithm）的定义"><a href="#一、算法（Algorithm）的定义" class="headerlink" title="一、算法（Algorithm）的定义"></a>一、算法（Algorithm）的定义</h3><ul>
<li>一个有限指令集，每条指令的描述不依赖于语言。</li>
<li>接收一些输入（有些情况下不需要输入）。</li>
<li>产生输出。</li>
<li>一定在有限步骤之后终止。</li>
</ul>
<h4 id="1-1-算法的特性："><a href="#1-1-算法的特性：" class="headerlink" title="1.1 算法的特性："></a>1.1 算法的特性：</h4><p>1.<strong>有穷性</strong>：算法在执行有限步骤之后，自动结束而不会出现无限循环，并且每一个步骤都在可接受的时间范围内完成。当然这里的有穷并不是纯数学意义的，而是在实际应用中合理的、可以接受的“边界”。你说你写一个算法，计算机需要算上20年，一定会结束，他在数学上是有穷的，媳妇都熬成婆了，算法的意义</p>
<p>就不大了。</p>
<p>2.<strong>确定性</strong>：算法的每一个步骤都有确定的含义，不会出现二义性(不会有歧义)。</p>
<p>3.<strong>可行性</strong>：算法中的所有操作都可以通过已经实现的基本操作运算执行有限次来实现。</p>
<p>4.<strong>输入</strong>：一个算法有零个或多个输入。当用函数描述算法时，输入往往是通过形参表示的，在它们被调用时，从主调函数获得输入值。</p>
<p>5.<strong>输出</strong>：一个算法有一个或多个输出，它们是算法进行信息加工后得到的结果，无输出的算法没有任何意义。当用函数描述算法时，输出多用返回值或引用类型的形参表示。 </p>
<h4 id="1-2-算法的设计要求"><a href="#1-2-算法的设计要求" class="headerlink" title="1.2 算法的设计要求"></a>1.2 算法的设计要求</h4><p>好的算法应该具有<strong>正确性、可读性、健壮性、时间效率高和存储量低</strong>的特征。</p>
<p>1.<strong>正确性</strong>(Correctness)：能正确的反映问题的需求，能得到正确的答案。</p>
<p>分以下四个层次：</p>
<ul>
<li><p>算法程序没有语法错误；</p>
</li>
<li><p>算法程序对n组输入产生正确的结果；</p>
</li>
<li><p>算法程序对典型、苛刻、有刁难性的几组输入可以产生正确的结果；</p>
</li>
<li><p>算法程序对所有输入产生正确的结果；</p>
</li>
</ul>
<p>但我们不可能逐一的验证所有的输入，因此算法的正确性在大多数情况下都不可能用程序证明，而是用数学方法证明。所以一般情况下我们把层次3作为算法是否正确的标准。</p>
<p>2.<strong>可读性</strong>(Readability)：算法，首先应便于人们理解和相互交流，其次才是机器可执行性。可读性强的算法有助于人们对算法的理解，而难懂的算法易于隐藏错误，且难于调试和修改。</p>
<p>3.<strong>健壮性</strong>(Robustness)：当输入的数据非法时，好的算法能适当地做出正确反应或进行相应处理，而不会产生一些莫名其妙的输出结果。【健壮性又叫又名鲁棒性即使用棒子粗鲁地对待他也可以执行类似于Java预料到可能出现的异常并对其进行捕获处理】</p>
<p>4.(<strong>高效性</strong>)时间效率高和存储量低 </p>
<h4 id="1-3-算法分析"><a href="#1-3-算法分析" class="headerlink" title="1.3 算法分析"></a>1.3 算法分析</h4><p>算法分析的目的是看算法实际是否可行，并在同一问题存在多个算法时可进行性能上的比较，以便从中挑选出比较优的算法。</p>
<p>(时间效率)运行时间的长短和(空间效率)占用内存空间的大小是衡量算法好坏的重要因素。</p>
<p>衡量算法时间效率的方法主要有两类：事后统计法和事前分析估算法。</p>
<h3 id="二、算法通俗理解"><a href="#二、算法通俗理解" class="headerlink" title="二、算法通俗理解"></a>二、算法通俗理解</h3><ul>
<li>Algorithm 这个单词本意就是解决问题的办法/步骤逻辑。</li>
<li>数据结构的实现，离不开算法。</li>
</ul>
<h3 id="三、算法案例"><a href="#三、算法案例" class="headerlink" title="三、算法案例"></a>三、算法案例</h3><p>假如上海和杭州之间有一条高架线，高架线长度是 1,000,000 米，有一天高架线中有其中一米出现了故障，请你想出一种算法，可以快速定位到处问题的地方。</p>
<ul>
<li><p>线性查找</p>
<ul>
<li>从上海的起点开始一米一米的排查，最终一定能找到出问题的线段。</li>
<li>但是如果线段在另一头，我们需要排查 1,000,000 次，这是最坏的情况，平均需要 500,000 次。</li>
</ul>
</li>
<li><p>二分查找</p>
<ul>
<li>从中间位置开始排查，看一下问题出在上海到中间位置，还是中间到杭州的位置。</li>
<li>查找对应的问题后，再从中间位置分开，重新锁定一般的路程。</li>
<li>最坏的情况，需要多少次可以排查完呢? 最坏的情况是 20 次就可以找到出问题的地方。</li>
<li>怎么计算出来的呢? log(1000000, 2)，以 2 位底，1000000 的对数 ≈ 20。</li>
</ul>
</li>
</ul>
<p>结论：<br>你会发现，解决问题的办法有很多，但是好的算法对比于差的算法，效率天壤之别。</p>
<h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><h3 id="一、如何衡量程序运行的效率"><a href="#一、如何衡量程序运行的效率" class="headerlink" title="一、如何衡量程序运行的效率"></a>一、如何衡量程序运行的效率</h3><p>当你在大数据环境中开发代码时，你一定遇到过程序执行好几个小时、甚至好几天的情况，或者是执行过程中电脑几乎死机的情况：</p>
<ul>
<li><p>如果这个效率低下的系统是离线的，那么它会让我们的开发周期、测试周期变得很长。</p>
</li>
<li><p>如果这个效率低下的系统是在线的，那么它随时具有时间爆炸或者内存爆炸的可能性。</p>
</li>
</ul>
<p>因此，衡量代码的运行效率对于一个工程师而言，是一项非常重要的基本功。本课时我们就来学习程序运行效率相关的度量方法。</p>
<h3 id="二、复杂度是什么"><a href="#二、复杂度是什么" class="headerlink" title="二、复杂度是什么"></a>二、复杂度是什么</h3><h4 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h4><p><strong>复杂度是衡量代码运行效率的重要度量因素</strong>。在介绍复杂度之前，有必要先看一下复杂度和计算机实际任务处理效率的关系，从而了解降低复杂度的必要性。</p>
<p>计算机通过一个个程序去执行计算任务，也就是对输入数据进行加工处理，并最终得到结果的过程。每个程序都是由代码构成的。可见，编写代码的核心就是要完成计算。但对于同一个计算任务，不同计算方法得到结果的过程复杂程度是不一样的，这对你实际的任务处理效率就有了非常大的影响。</p>
<p>举个例子，你要在一个在线系统中实时处理数据。假设这个系统平均每分钟会新增 300M 的数据量。如果你的代码不能在 1 分钟内完成对这 300M 数据的处理，那么这个系统就会发生时间爆炸和空间爆炸。表现就是，电脑执行越来越慢，直到死机。因此，我们需要讲究合理的计算方法，去通过尽可能低复杂程度的代码完成计算任务。</p>
<img src="https://s0.lgstatic.com/i/image/M00/0C/54/CgqCHl7CRGiAe-NpAR0S70dSC2M990.gif" alt="1.gif" data-nodeid="138424">

<h4 id="2-2-衡量复杂度"><a href="#2-2-衡量复杂度" class="headerlink" title="2.2 衡量复杂度"></a>2.2 衡量复杂度</h4><p>那提到降低复杂度，我们首先需要知道怎么衡量复杂度。而在实际衡量时，我们通常会围绕以下2 个维度进行。</p>
<p><strong>首先，这段代码消耗的资源是什么</strong>。一般而言，代码执行过程中会消耗计算时间和计算空间，那需要衡量的就是<strong>时间复杂度</strong>和<strong>空间复杂度</strong>。</p>
<p>举一个实际生活中的例子。某个十字路口没有建立立交桥时，所有车辆通过红绿灯分批次行驶通过。当大量汽车同时过路口的时候，就会分别消耗大家的时间。但建了立交桥之后，所有车辆都可以同时通过了，因为立交桥的存在，等于是消耗了空间资源，来换取了时间资源。</p>
<img src="https://s0.lgstatic.com/i/image/M00/0C/55/CgqCHl7CRMaAO_oEAJfz6fjfMNQ403.gif" alt="2.gif" data-nodeid="138434">

<p><strong>其次，这段代码对于资源的消耗是多少</strong>。我们不会关注这段代码对于资源消耗的绝对量，因为不管是时间还是空间，它们的消耗程度都与输入的数据量高度相关，输入数据少时消耗自然就少。<u>为了更客观地衡量消耗程度，我们通常会关注时间或者空间消耗量与输入数据量之间的关系</u>。</p>
<h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>定义：时间复杂度所需消耗的时间即<strong>基本操作执行次数</strong></p>
<h5 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h5><p>定义：算法的空间复杂度<strong>通过计算算法所需的存储空间</strong>实现，<strong>即</strong>运行完一个程序<strong>所需内存的大小</strong></p>
<h4 id="2-3-计算复杂度"><a href="#2-3-计算复杂度" class="headerlink" title="2.3 计算复杂度"></a>2.3 计算复杂度</h4><p><strong>复杂度是一个关于输入数据量 n 的函数</strong>。假设你的代码复杂度是 f(n)，那么就用个大写字母 <code>O</code> 和括号，把 <code>f(n)</code> 括起来就可以了，即 <code>O(f(n))</code>。例如，O(n) 表示的是，复杂度与计算实例的个数 n <u>线性相关</u>；<code>O(logn)</code> 表示的是，复杂度与计算实例的个数 n 对数相关。</p>
<p>通常，复杂度的计算方法遵循以下几个原则：</p>
<ul>
<li><p>首先，<strong>复杂度与具体的常系数无关</strong>，例如 O(n) 和 O(2n) 表示的是同样的复杂度。我们详细分析下，<u>O(2n) 等于 O(n+n)</u>，也<u>等于 O(n) + O(n)</u>。也就是说，一段 O(n) 复杂度的代码只是先后执行两遍 O(n)，其复杂度是一致的。</p>
</li>
<li><p>其次，<strong>多项式级的复杂度相加的时候，选择高者作为结果</strong>，例如 O(n²)+O(n) 和 O(n²) 表示的是同样的复杂度。具体分析一下就是，O(n²)+O(n) = O(n²+n)。随着 n 越来越大，二阶多项式的变化率是要比一阶多项式更大的。因此，只需要通过更大变化率的二阶多项式来表征复杂度就可以了。</p>
</li>
</ul>
<p>值得一提的是，<strong>O(1) 也是表示一个特殊复杂度</strong>，含义为某个任务通过有限可数的资源即可完成。此处有限可数的具体意义是，<strong>与输入数据量 n 无关</strong>。</p>
<p>例如，你的代码处理 10 条数据需要消耗 5 个单位的时间资源，3 个单位的空间资源。处理 1000 条数据，还是只需要消耗 5 个单位的时间资源，3 个单位的空间资源。那么就能发现资源消耗与输入数据量无关，就是 O(1) 的复杂度。</p>
<p>为了方便你理解不同计算方法对复杂度的影响，我们来看一个代码任务：对于输入的数组，输出与之逆序的数组。例如，输入 a=[1,2,3,4,5]，输出 [5,4,3,2,1]。</p>
<p>先看<strong>方法一</strong>，建立并初始化数组 b，得到一个与输入数组等长的全零数组。通过一个 for 循环，从左到右将 a 数组的元素，从右到左地赋值到 b 数组中，最后输出数组 b 得到结果。</p>
<img src="https://s0.lgstatic.com/i/image/M00/0C/4A/Ciqc1F7CRP6ARwDTAGHL-opG6Bk835.gif" alt="3.gif" data-nodeid="138488">

<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s1_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> b[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        b[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        b[a.length - i - <span class="number">1</span>] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码的输入数据是 a，数据量就等于数组 a 的长度。代码中有两个 for 循环，作用分别是给b 数组初始化和赋值，其执行次数都与输入数据量相等。因此，代码的<strong>时间复杂度</strong>就是 O(n)+O(n)，也就是 O(n)。</p>
<p>空间方面主要体现在计算过程中，对于存储资源的消耗情况。上面这段代码中，我们定义了一个新的数组 b，它与输入数组 a 的长度相等。因此，空间复杂度就是 O(n)。</p>
<p><strong>接着我们看一下第二种编码方法</strong>，它定义了缓存变量 tmp，接着通过一个 for 循环，从 0 遍历到a 数组长度的一半（即 len(a)/2）。每次遍历执行的是什么内容？就是交换首尾对应的元素。最后打印数组 a，得到结果。</p>
<img src="https://s0.lgstatic.com/i/image/M00/0C/4E/Ciqc1F7CR22AIbSuABc0Rwl-t3w666.gif" alt="4.gif" data-nodeid="138504">

<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s1_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (a.length / <span class="number">2</span>); i++) &#123;</span><br><span class="line">        tmp = a[i];</span><br><span class="line">        a[i] = a[a.length - i - <span class="number">1</span>];</span><br><span class="line">        a[a.length - i - <span class="number">1</span>] = tmp;</span><br><span class="line">	&#125;</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码包含了一个 for 循环，执行的次数是数组长度的一半，时间复杂度变成了 O(n/2)。根据复杂度与具体的常系数无关的性质，这段代码的时间复杂度也就是 <code>O(n)</code>。</p>
<p>空间方面，我们定义了一个 tmp 变量，它与数组长度无关。也就是说，输入是 5 个元素的数组，需要一个 tmp 变量；输入是 50 个元素的数组，依然只需要一个 tmp 变量。因此，<u>空间复杂度与输入数组长度无关，即 O(1)。</u></p>
<p>可见，<strong>对于同一个问题，采用不同的编码方法，对时间和空间的消耗是有可能不一样的</strong>。因此，工程师在写代码的时候，一方面要完成任务目标；另一方面，也需要考虑时间复杂度和空间复杂度，以求用尽可能少的时间损耗和尽可能少的空间损耗去完成任务。</p>
<h3 id="三、时间复杂度与代码结构的关系"><a href="#三、时间复杂度与代码结构的关系" class="headerlink" title="三、时间复杂度与代码结构的关系"></a>三、时间复杂度与代码结构的关系</h3><p>从本质来看，时间复杂度与代码的结构有着非常紧密的关系；而空间复杂度与数据结构的设计有关，关于这一点我们会在下一讲进行详细阐述。接下来我先来系统地讲一下时间复杂度和代码结构的关系。</p>
<p>例 1，定义了一个数组 a = [1, 4, 3]，查找数组 a 中的最大值，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s1_3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> max_val = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; max_val) &#123;</span><br><span class="line">            max_val = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(max_val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子比较简单，实现方法就是，暂存当前最大值并把所有元素遍历一遍即可。因为代码的结构上需要使用一个 for 循环，对数组所有元素处理一遍，所以时间复杂度为 O(n)。</p>
<p>例2，下面的代码定义了一个数组 a = [1, 3, 4, 3, 4, 1, 3]，并会在这个数组中查找出现次数最多的那个数字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s1_4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> val_max = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> time_max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> time_tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        time_tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == a[j]) &#123;</span><br><span class="line">            time_tmp += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (time_tmp &gt; time_max) &#123;</span><br><span class="line">            time_max = time_tmp;</span><br><span class="line">            val_max = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(val_max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码中，我们采用了双层循环的方式计算：第一层循环，我们对数组中的每个元素进行遍历；第二层循环，对于每个元素计算出现的次数，并且通过当前元素次数 time_tmp 和全局最大次数变量 time_max 的大小关系，持续保存出现次数最多的那个元素及其出现次数。由于是双层循环，这段代码在时间方面的消耗就是 n*n 的复杂度，也就是 O(n²)。</p>
<p>在这里，我们给出一些经验性的结论：</p>
<ul>
<li><p>一个<strong>顺序结构</strong>的代码，时间复杂度是 **O(1)**。</p>
</li>
<li><p><strong>二分查找</strong>，或者更通用地说是采用分而治之的二分策略，时间复杂度都是 **O(logn)**。这个我们会在后续课程讲到。</p>
</li>
<li><p>一个简单的 <strong>for 循环</strong>，时间复杂度是 **O(n)**。</p>
</li>
<li><p><strong>两个顺序执行的 for 循环</strong>，时间复杂度是 **O(n)+O(n)=O(2n)**，其实也是 O(n)。</p>
</li>
<li><p>两个<strong>嵌套的 for 循环</strong>，时间复杂度是 **O(n²)**。</p>
</li>
</ul>
<p>有了这些基本的结论，再去分析代码的时间复杂度将会轻而易举。</p>
<h3 id="四、降低时间复杂度的必要性"><a href="#四、降低时间复杂度的必要性" class="headerlink" title="四、降低时间复杂度的必要性"></a>四、降低时间复杂度的必要性</h3><p>很多新手的工程师，对降低时间复杂度并没有那么强的意识。这主要是在学校或者实验室中，参加的课程作业或者科研项目，普遍都不是实时的、在线的工程环境。</p>
<p>实际的在线环境中，用户的访问请求可以看作一个流式数据。假设这个数据流中，每个访问的平均时间间隔是 t。如果你的代码无法在 t 时间内处理完单次的访问请求，那么这个系统就会一波未平一波又起，最终被大量积压的任务给压垮。这就要求工程师必须通过优化代码、优化数据结构，来降低时间复杂度。</p>
<p>为了更好理解，我们来看一些数据。假设某个计算任务需要处理 10 万 条数据。你编写的代码：</p>
<ul>
<li><p>如果是 O(n²) 的时间复杂度，那么计算的次数就大概是 100 亿次左右。</p>
</li>
<li><p>如果是 O(n)，那么计算的次数就是 10 万 次左右。</p>
</li>
<li><p>如果这个工程师再厉害一些，能在 O(log n) 的复杂度下完成任务，那么计算的次数就是 17 次左右（log 100000 = 16.61，计算机通常是二分法，这里的对数可以以 2 为底去估计）。</p>
</li>
</ul>
<p>数字是不是一下子变得很悬殊？通常在小数据集上，时间复杂度的降低在绝对处理时间上没有太多体现。但在当今的大数据环境下，时间复杂度的优化将会带来巨大的系统收益。而这是优秀工程师必须具备的工程开发基本意识。</p>
<h3 id="五、时间复杂度与空间复杂度的转换"><a href="#五、时间复杂度与空间复杂度的转换" class="headerlink" title="五、时间复杂度与空间复杂度的转换"></a>五、时间复杂度与空间复杂度的转换</h3><p>你面试的过程中，常常会遇到考察手写代码的场景，通常面试官会追问：“这段代码的时间复杂度或者空间复杂度，是否还有降低的可能性？”如果没有经过专门的学习或训练，应聘者只能在各种漫无目的的尝试中去寻找答案。</p>
<p>别忘了，代码效率优化就是要将可行解提高到更优解，最终目标是：<u>要采用尽可能低的时间复杂度和空间复杂度，去完成一段代码的开发</u>。</p>
<h4 id="5-1-时间昂贵、空间廉价"><a href="#5-1-时间昂贵、空间廉价" class="headerlink" title="5.1 时间昂贵、空间廉价"></a>5.1 时间昂贵、空间廉价</h4><p>一段代码会消耗计算时间、资源空间，从而产生时间复杂度和空间复杂度，那么你是否尝试过将时间复杂度和空间复杂进行下对比呢？其实对比过后，你就会发现一个重要的现象。</p>
<p><strong>假设一段代码经过优化后，虽然降低了时间复杂度，但依然需要消耗非常高的空间复杂度</strong>。 例如，对于固定数据量的输入，这段代码需要消耗几十 G 的内存空间，很显然普通计算机根本无法完成这样的计算。如果一定要解决的话，一个最简单粗暴的办法就是，购买大量的高性能计算机，来弥补空间性能的不足。</p>
<p><strong>反过来，假设一段代码经过优化后，依然需要消耗非常高的时间复杂度</strong>。 例如，对于固定数据量的输入，这段代码需要消耗 1 年的时间去完成计算。如果在跑程序的 1 年时间内，出现了断电、断网或者程序抛出异常等预期范围之外的问题，那很可能造成 1 年时间浪费的惨重后果。很显然，用 1 年的时间去跑一段代码，对开发者和运维者而言都是极不友好的。</p>
<p>这告诉我们一个什么样的现实问题呢？代码效率的瓶颈可能发生在时间或者空间两个方面。如果是缺少计算空间，花钱买服务器就可以了。这是个花钱就能解决的问题。相反，如果是缺少计算时间，只能投入宝贵的人生去跑程序。即使你有再多的钱、再多的服务器，也是毫无用处。相比于空间复杂度，时间复杂度的降低就显得更加重要了。因此，你会发现这样的结论：空间是廉价的，而时间是昂贵的。</p>
<h4 id="5-2-数据结构连接时空"><a href="#5-2-数据结构连接时空" class="headerlink" title="5.2 数据结构连接时空"></a>5.2 数据结构连接时空</h4><p>假定在不限制时间、也不限制空间的情况下，你可以完成某个任务的代码的开发。这就是通常我们所说的<strong>暴力解法</strong>，更是程序优化的起点。</p>
<p>例如，如果要在 100 以内的正整数中，找到同时满足以下两个条件的最小数字：</p>
<ul>
<li><p>能被 3 整除；</p>
</li>
<li><p>除 5 余 2。</p>
</li>
</ul>
<p>最暴力的解法就是，从 1 开始到 100，每个数字都做一次判断。如果这个数字满足了上述两个条件，则返回结果。这是一种不计较任何时间复杂度或空间复杂度的、最直观的暴力解法。</p>
<p>当你有了最暴力的解法后，就需要用上一讲的方法评估当前暴力解法的复杂度了。如果复杂度比较低或者可以接受，那自然万事大吉。可如果暴力解法复杂度比较高的话，那就要考虑采用程序优化的方法去降低复杂度了。</p>
<p>为了降低复杂度，一个直观的思路是：梳理程序，看其流程中是否有无效的计算或者无效的存储。</p>
<p>我们需要从时间复杂度和空间复杂度两个维度来考虑。常用的<strong>降低时间复杂度</strong>的方法有<strong>递归、二分法、排序算法、动态规划</strong>等，这些知识我们都会在后续逐一学习。而降低空间复杂度的方法，就要围绕<strong>数据结构</strong>做文章了。</p>
<p>降低空间复杂度的核心思路就是，<strong>能用低复杂度的数据结构能解决问题，就千万不要用高复杂度的数据结构。</strong></p>
<p>经过了前面剔除无效计算和存储的处理之后，如果程序在时间和空间等方面的性能依然还有瓶颈，又该怎么办呢？前面我们提到过，空间是廉价的，最不济也是可以通过购买更高性能的计算机进行解决的。然而时间是昂贵的，如果无法降低时间复杂度，那系统的效率就永远无法得到提高。</p>
<p>这时候，开发者们想到这样的一个解决思路。如果可以通过某种方式，把时间复杂度转移到空间复杂度的话，就可以把无价的东西变成有价了。这种时空转移的思想，在实际生活中也会经常遇到。</p>
<p>例如，马路上的十字路口，所有车辆在通过红绿灯时需要分批次通行。这样，就消耗了所有车辆的通行时间。如果要降低这里的时间损耗，人们就想到了修建立交桥。修建立交桥后，每个可能的转弯或直行的行进路线，都有专属的一条公路支持。这样，车辆就不需要全部去等待红绿灯分批通行了。最终，实现了用空间换取时间。</p>
<p>其实，程序开发也是可以借鉴这里的思想的。在程序开发中，连接时间和空间的桥梁就是<strong>数据结构</strong>。对于一个开发任务，如果你能找到一种高效的数据组织方式，采用合理的数据结构的话，那就可以实现时间复杂度的再次降低。同样的，这通常会增加数据的存储量，也就是增加了空间复杂度。</p>
<p>以上就是程序优化的最核心的思路，也是这个专栏的整体框架。我们简单梳理如下：</p>
<ul>
<li><p>第一步，<u>暴力解法</u>。在没有任何时间、空间约束下，完成代码任务的开发。</p>
</li>
<li><p>第二步，<u>无效操作处理</u>。将代码中的无效计算、无效存储剔除，降低时间或空间复杂度。</p>
</li>
<li><p>第三步，<u>时空转换</u>。设计合理数据结构，完成时间复杂度向空间复杂度的转移。</p>
</li>
</ul>
<h4 id="5-3-降低复杂度的案例"><a href="#5-3-降低复杂度的案例" class="headerlink" title="5.3 降低复杂度的案例"></a>5.3 降低复杂度的案例</h4><p>有了如上的方法论，给出几个例子，帮助你加深理解。</p>
<p>第 1 个例子，假设有任意多张面额为 2 元、3 元、7 元的货币，现要用它们凑出 100 元，求总共有多少种可能性。假设工程师小明写了下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s2_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (<span class="number">100</span> / <span class="number">7</span>); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= (<span class="number">100</span> / <span class="number">3</span>); j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= (<span class="number">100</span> / <span class="number">2</span>); k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i * <span class="number">7</span> + j * <span class="number">3</span> + k * <span class="number">2</span> == <span class="number">100</span>) &#123;</span><br><span class="line">                    count += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;`</span><br></pre></td></tr></table></figure>

<p>在这段代码中，使用了 3 层的 for 循环。从结构上来看，是很显然的 O( n³ ) 的时间复杂度。然而，仔细观察就会发现，代码中最内层的 for 循环是多余的。因为，当你确定了要用 i 张 7 元和 j 张 3 元时，只需要判断用有限个 2 元能否凑出 100 - 7* i - 3* j 元就可以了。因此，代码改写如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s2_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (<span class="number">100</span> / <span class="number">7</span>); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= (<span class="number">100</span> / <span class="number">3</span>); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="number">100</span>-i*<span class="number">7</span>-j*<span class="number">3</span> &gt;= <span class="number">0</span>)&amp;&amp;((<span class="number">100</span>-i*<span class="number">7</span>-j*<span class="number">3</span>) % <span class="number">2</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">                count += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过改造后，代码的结构由 3 层 for 循环，变成了 2 层 for 循环。很显然，时间复杂度就变成了O(n²) 。这样的代码改造，就是利用了方法论中的步骤二，将代码中的无效计算、无效存储剔除，降低时间或空间复杂度。</p>
<p>再看第二个例子。查找出一个数组中，出现次数最多的那个元素的数值。例如，输入数组 a = [1,2,3,4,5,5,6 ] 中，查找出现次数最多的数值。从数组中可以看出，只有 5 出现了 2 次，其余都是 1 次。显然 5 出现的次数最多，则输出 5。</p>
<p>工程师小明的解决方法是，采用两层的 for 循环完成计算。第一层循环，对数组每个元素遍历。第二层循环，则是对第一层遍历的数字，去遍历计算其出现的次数。这样，全局再同时缓存一个出现次数最多的元素及其次数就可以了。具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s2_3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> val_max = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> time_max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> time_tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        time_tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == a[j]) &#123;</span><br><span class="line">            time_tmp += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">if</span> (time_tmp &gt; time_max) &#123;</span><br><span class="line">                time_max = time_tmp;</span><br><span class="line">                val_max = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(val_max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这段代码中，小明采用了两层的 for 循环，很显然时间复杂度就是 O(n²)。而且代码中，几乎没有冗余的无效计算。如果还需要再去优化，就要考虑采用一些数据结构方面的手段，来把时间复杂度转移到空间复杂度了。</p>
<p>我们先想象一下，这个问题能否通过一次 for 循环就找到答案呢？一个直观的想法是，一次循环的过程中，我们同步记录下每个元素出现的次数。最后，再通过查找次数最大的元素，就得到了结果。</p>
<p>具体而言，定义一个 k-v 结构的字典，用来存放元素-出现次数的 k-v 关系。那么首先通过一次循环，将数组转变为元素-出现次数的一个字典。接下来，再去遍历一遍这个字典，找到出现次数最多的那个元素，就能找到最后的结果了。</p>
<p>具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s2_4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">    Map&lt;Integer, Integer&gt; d = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d.containsKey(a[i])) &#123;</span><br><span class="line">            d.put(a[i], d.get(a[i]) + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            d.put(a[i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> val_max = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> time_max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Integer key : d.keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d.get(key) &gt; time_max) &#123;</span><br><span class="line">            time_max = d.get(key);</span><br><span class="line">            val_max = key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(val_max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们来计算下这种方法的时空复杂度。代码结构上，有两个 for 循环。不过，这两个循环不是嵌套关系，而是顺序执行关系。其中，第一个循环实现了数组转字典的过程，也就是 O(n) 的复杂度。第二个循环再次遍历字典找到出现次数最多的那个元素，也是一个 O(n) 的时间复杂度。</p>
<p>因此，总体的时间复杂度为 O(n) + O(n)，就是 O(2n)，根<strong>据复杂度与具体的常系数无关的原则</strong>，也就是O(n) 的复杂度。空间方面，由于定义了 k-v 字典，其字典元素的个数取决于输入数组元素的个数。因此，空间复杂度增加为 O(n)。</p>
<p>这段代码的开发，就是借鉴了方法论中的步骤三，通过采用更复杂、高效的数据结构，完成了时空转移，提高了空间复杂度，让时间复杂度再次降低。</p>
<h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>复杂度通常包括时间复杂度和空间复杂度。在具体计算复杂度时需要注意以下几点。</p>
<p>（1）可以忽略加法常数</p>
<p><code>O(2n + 3) = O(2n)</code><br>（2）与最高次项相乘的常数可忽略</p>
<p><code>O(2n^2) = O(n^2)</code><br>（3） 最高次项的指数大的，函数随着 n 的增长，结果也会变得增长得更快</p>
<p><code>O(n^3) &gt; O(n^2)</code><br>（4）判断一个算法的（时间）效率时，函数中常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数</p>
<p><code>O(2n^2) = O(n^2+3n+1)</code><br><code>O(n^3) &gt; O(n^2)</code></p>
<p>它与具体的常系数无关，O(n) 和 O(2n) 表示的是同样的复杂度。</p>
<p>复杂度相加的时候，选择高者作为结果，也就是说 O(n²)+O(n) 和 O(n²) 表示的是同样的复杂度。</p>
<p>O(1) 也是表示一个特殊复杂度，即任务与算例个数 n 无关。</p>
<p>复杂度细分为时间复杂度和空间复杂度，其中时间复杂度与代码的结构设计高度相关；空间复杂度与代码中数据结构的选择高度相关。会计算一段代码的时间复杂度和空间复杂度，是工程师的基本功。这项技能你在实际工作中一定会用到，甚至在参加互联网公司面试的时候，也是面试中的必考内容。</p>
<h3 id="七、练习题"><a href="#七、练习题" class="headerlink" title="七、练习题"></a>七、练习题</h3><p>1.评估一下，如下的代码片段，时间复杂度是多少？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (m = <span class="number">0</span>; m &lt; n; m++) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在下面这段代码中，如果要降低代码的执行时间，第 4 行需要做哪些改动呢？如果做出改动后，是否降低了时间复杂度呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s2_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (<span class="number">100</span> / <span class="number">7</span>); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= (<span class="number">100</span> / <span class="number">3</span>); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="number">100</span>-i*<span class="number">7</span>-j*<span class="number">3</span> &gt;= <span class="number">0</span>)&amp;&amp;((<span class="number">100</span>-i*<span class="number">7</span>-j*<span class="number">3</span>) % <span class="number">2</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">                count += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示，第 4 行代码，j 需要遍历到 33。但很显然，随着 i 的变大，j 并不需要遍历到 33。例如，当 i 为 9 的时候，j 最大也只能取到 12。如果 j 大于 12，则 7<em>9 + 3</em>13 &gt; 100。不过，别忘了，即使是这样，j 的取值范围也是与 n 线性相关的。哪怕是 O(n/2)，其实时间复杂度也并没有变小。</p>
</blockquote>
]]></content>
      <categories>
        <category>code</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>数据可视化之Echarts学习</title>
    <url>/Echarts/</url>
    <content><![CDATA[<p>​        应对现在数据可视化的趋势，越来越多企业需要在很多场景(营销数据，生产数据，用户数据)下使用，可视化图表来展示体现数据，让数据更加直观，数据特点更加突出。 </p>
<p>​        该笔记基于完成一个静态可视化面板项目。预览地址：<a href="http://dsj.aoau.top/">http://dsj.aoau.top</a></p>
<span id="more"></span>

<h3 id="01-使用技术"><a href="#01-使用技术" class="headerlink" title="01-使用技术"></a>01-使用技术</h3><p>完成该项目需要具备以下知识：</p>
<ul>
<li>div + css 布局</li>
<li>flex 布局</li>
<li>Less</li>
<li>原生js + jquery 使用</li>
<li>rem适配</li>
<li><strong>echarts基础</strong></li>
</ul>
<h3 id="02-案例适配方案"><a href="#02-案例适配方案" class="headerlink" title="02- 案例适配方案"></a>02- 案例适配方案</h3><ul>
<li><p>设计稿是1920px  </p>
<ol>
<li><p>flexible.js 把屏幕分为 24 等份</p>
</li>
<li><p>cssrem 插件的基准值是  80px </p>
<p>插件-配置按钮—配置扩展设置–Root Font Size 里面 设置。 </p>
<p>但是别忘记重启vscode软件保证生效</p>
</li>
</ol>
</li>
</ul>
<h3 id="03-基础设置"><a href="#03-基础设置" class="headerlink" title="03-基础设置"></a>03-基础设置</h3><ul>
<li>body 设置背景图 ，缩放为 100%  ， 行高1.15</li>
<li>css初始化</li>
</ul>
<h3 id="04-header-布局"><a href="#04-header-布局" class="headerlink" title="04-header 布局"></a>04-header 布局</h3><ul>
<li>高度为100px</li>
<li>背景图，在容器内显示</li>
<li>缩放比例为 100%</li>
<li>h1 标题部分   白色  38像素 居中显示  行高为 80像素</li>
<li>时间模块 showTime   定位右侧  right 为 30px   行高为 75px  文字颜色为：rgba(255, 255, 255, 0.7)     而文字大小为 20像素 </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式： 当前时间：2020年3月17-0时54分14秒</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">            <span class="keyword">var</span> t = <span class="literal">null</span>;</span><br><span class="line">            t = <span class="built_in">setTimeout</span>(time, <span class="number">1000</span>);<span class="comment">//開始运行</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">time</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(t);<span class="comment">//清除定时器</span></span><br><span class="line">                dt = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">                <span class="keyword">var</span> y = dt.getFullYear();</span><br><span class="line">                <span class="keyword">var</span> mt = dt.getMonth() + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">var</span> day = dt.getDate();</span><br><span class="line">                <span class="keyword">var</span> h = dt.getHours();<span class="comment">//获取时</span></span><br><span class="line">                <span class="keyword">var</span> m = dt.getMinutes();<span class="comment">//获取分</span></span><br><span class="line">                <span class="keyword">var</span> s = dt.getSeconds();<span class="comment">//获取秒</span></span><br><span class="line">                <span class="built_in">document</span>.querySelector(<span class="string">&quot;.showTime&quot;</span>).innerHTML = <span class="string">&#x27;当前时间：&#x27;</span> + y + <span class="string">&quot;年&quot;</span> + mt + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;-&quot;</span> + h + <span class="string">&quot;时&quot;</span> + m + <span class="string">&quot;分&quot;</span> + s + <span class="string">&quot;秒&quot;</span>;</span><br><span class="line">                t = <span class="built_in">setTimeout</span>(time, <span class="number">1000</span>); <span class="comment">//设定定时器，循环运行     </span></span><br><span class="line">            &#125;</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>header部分css样式</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1.25rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../images/head_bg.png</span>) no-repeat top center;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.475rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.showTime</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0.375rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0.9375rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.25rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="05-mainbox-主体模块"><a href="#05-mainbox-主体模块" class="headerlink" title="05-mainbox  主体模块"></a>05-mainbox  主体模块</h3><ul>
<li>需要一个上左右的10px 的内边距</li>
</ul>
<ul>
<li>column 列容器，分三列，占比 3：5：3</li>
</ul>
<p>css样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mainbox</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.125rem</span> <span class="number">0.125rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="selector-class">.column</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="06-公共面板模块-panel"><a href="#06-公共面板模块-panel" class="headerlink" title="06-公共面板模块 panel"></a>06-公共面板模块 panel</h3><ul>
<li>高度为 310px</li>
<li>1像素的 1px solid rgba(25, 186, 139, 0.17)  边框</li>
<li>有line.jpg 背景图片</li>
<li>padding为  上为 0  左右 15px  下为 40px</li>
<li>下外边距是 15px</li>
<li>利用panel  盒子 before 和after 制作上面两个角   大小为 10px  线条为  2px solid #02a6b5</li>
<li>新加一个盒子before 和after   制作下侧两个角  宽度高度为 10px</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.panel</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3.875rem</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">186</span>, <span class="number">139</span>, <span class="number">0.17</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../images/line\(1\</span>).png);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.1875rem</span> <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0.1875rem</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.panel-footer</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">      <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="07-柱形图-bar-模块-布局"><a href="#07-柱形图-bar-模块-布局" class="headerlink" title="07-柱形图 bar 模块(布局)"></a>07-柱形图 bar 模块(布局)</h3><ul>
<li><p>标题模块  h2    高度为 48px   文字颜色为白色  文字大小为  20px  </p>
</li>
<li><p>图标内容模块  chart   高度 240px </p>
</li>
<li><p>以上可以作为panel公共样式部分 </p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0.6rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0.6rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chart</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="08-中间布局"><a href="#08-中间布局" class="headerlink" title="08-中间布局"></a>08-中间布局</h3><ul>
<li>上面是no 数字模块</li>
<li>下面是map 地图模块</li>
</ul>
<ol>
<li>数字模块 no  有个背景颜色  rgba(101, 132, 226, 0.1);  有个15像素的内边距</li>
<li>注意中间列 column 有个 左右 10px 下 15px 的外边距</li>
<li>no 模块里面上下划分  上面是数字（no-hd)   下面 是 相关文字说明(no-bd)</li>
<li>no-hd 数字模块   有一个边框 1px solid rgba(25, 186, 139, 0.17)    </li>
<li>no-hd 数字模块 里面分为两个小li  每个小li高度为 80px   文字大小为   70px   颜色为 #ffeb7b   字体是图标字体  electronicFont</li>
<li>no-hd 利用 after 和 before制作2个小角，  边框  2px solid #02a6b5  宽度为 30px  高度为 10px</li>
<li>小竖线 给 第一个小li after 就可以  1px宽 背景颜色为 rgba(255, 255, 255, 0.2);     高度 50%  top 25% 即可</li>
<li>no-bd 里面也有两个小li  高度为 40px   文字颜色为  rgba(255, 255, 255, 0.7)   文字大小为 18px   上内边距为  10px</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 声明字体*/</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: electronicFont;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">../font/DS-DIGIT.TTF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>地图模块制作：</p>
<ol>
<li>地图模块高度为 810px  里面包含4个盒子  chart 放图表模块      球体盒子  旋转1  旋转2  </li>
<li>球体图片模块 map1    大小为 518px  要加背景图片 因为要缩放100%     定位到最中央    透明度 .3   </li>
<li>旋转1  map 2    大小为 643px 要加背景图片 因为要缩放100%    定位到中央  透明度  .6   做旋转动画   利用z-index压住球体</li>
<li>旋转2  map3  大小为 566px  要加背景图片 因为要缩放100%    定位到中央 旋转动画 注意是逆时针 </li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no-hd&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">li</span>&gt;</span>125811<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">li</span>&gt;</span>104563<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;no-bd&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端需求人数<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">li</span>&gt;</span>市场供应人数<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;map1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;map2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;map3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>中间样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 声明字体*/</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: electronicFont;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">../font/DS-DIGIT.TTF</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.no</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">101</span>, <span class="number">132</span>, <span class="number">226</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.1875rem</span>;</span><br><span class="line">  <span class="selector-class">.no-hd</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">186</span>, <span class="number">139</span>, <span class="number">0.17</span>);</span><br><span class="line">    &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">      <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">ul</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">1rem</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">1rem</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0.875rem</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#ffeb7b</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0.05rem</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">font-family</span>: electronicFont;</span><br><span class="line">        <span class="attribute">font-weight</span>: bold;</span><br><span class="line">        &amp;<span class="selector-pseudo">:first</span>-child<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">          <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">          <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>);</span><br><span class="line">          <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">25%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.no-bd</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">0.5rem</span>;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">0.5rem</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">0.225rem</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>);</span><br><span class="line">      <span class="attribute">padding-top</span>: <span class="number">0.125rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.map</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10.125rem</span>;</span><br><span class="line">  <span class="selector-class">.chart</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10.125rem</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.map1</span>,</span><br><span class="line">  <span class="selector-class">.map2</span>,</span><br><span class="line">  <span class="selector-class">.map3</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6.475rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">6.475rem</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../images/map.png</span>) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.map2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8.0375rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8.0375rem</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/lbx.png</span>);</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span><br><span class="line">    <span class="attribute">animation</span>: rotate <span class="number">15s</span> linear infinite;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.map3</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">7.075rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">7.075rem</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/jt.png</span>);</span><br><span class="line">    <span class="attribute">animation</span>: rotate1 <span class="number">10s</span> linear infinite;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> rotate &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@keyframes</span> rotate1 &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="09-Echarts-介绍"><a href="#09-Echarts-介绍" class="headerlink" title="09-Echarts-介绍"></a>09-Echarts-介绍</h3><p>常见的数据可视化库：</p>
<ul>
<li>D3.js   目前 Web 端评价最高的 Javascript 可视化工具库(入手难)  </li>
<li>ECharts.js   百度出品的一个开源 Javascript 数据可视化库   </li>
<li>Highcharts.js  国外的前端数据可视化库，非商用免费，被许多国外大公司所使用  </li>
<li>AntV  蚂蚁金服全新一代数据可视化解决方案  等等</li>
<li>Highcharts 和 Echarts 就像是 Office 和 WPS 的关系</li>
</ul>
<blockquote>
<p>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖矢量图形库 <a href="https://github.com/ecomfe/zrender">ZRender</a>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p>
</blockquote>
<p>大白话：</p>
<ul>
<li>是一个JS插件</li>
<li>性能好可流畅运行PC与移动设备</li>
<li>兼容主流浏览器</li>
<li>提供很多常用图表，且可<strong>定制</strong>。<ul>
<li><a href="https://www.echartsjs.com/zh/option.html#series-line">折线图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-bar">柱状图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-scatter">散点图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-pie">饼图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-candlestick">K线图</a></li>
</ul>
</li>
</ul>
<p>官网地址：<a href="https://www.echartsjs.com/zh/index.html">https://www.echartsjs.com/zh/index.html</a></p>
<h3 id="10-Echarts-体验"><a href="#10-Echarts-体验" class="headerlink" title="10-Echarts-体验"></a>10-Echarts-体验</h3><p>官方教程：[五分钟上手ECharts](<a href="https://www.echartsjs.com/zh/tutorial.html#5">https://www.echartsjs.com/zh/tutorial.html#5</a> 分钟上手 ECharts)</p>
<ul>
<li>下载echarts  <a href="https://github.com/apache/incubator-echarts/tree/4.5.0">https://github.com/apache/incubator-echarts/tree/4.5.0</a>  </li>
</ul>
<p>使用步骤：</p>
<ol>
<li>引入echarts 插件文件到html页面中</li>
<li>准备一个具备大小的DOM容器</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li> 初始化echarts实例对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>));</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>指定配置项和数据(option)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&#x27;Mon&#x27;</span>, <span class="string">&#x27;Tue&#x27;</span>, <span class="string">&#x27;Wed&#x27;</span>, <span class="string">&#x27;Thu&#x27;</span>, <span class="string">&#x27;Fri&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>, <span class="string">&#x27;Sun&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [&#123;</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>],</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>将配置项设置给echarts实例对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myChart.setOption(option);</span><br></pre></td></tr></table></figure>

<h3 id="11-Echarts-基础配置"><a href="#11-Echarts-基础配置" class="headerlink" title="11-Echarts-基础配置"></a>11-Echarts-基础配置</h3><p>这是要求同学们知道以下配置每个模块的主要作用干什么的就可以了</p>
<blockquote>
<p>需要了解的主要配置：<code>series</code> <code>xAxis</code> <code>yAxis</code> <code>grid</code> <code>tooltip</code> <code>title</code> <code>legend</code> <code>color</code> </p>
</blockquote>
<ul>
<li><p>series</p>
<ul>
<li>系列列表。每个系列通过 <code>type</code> 决定自己的图表类型</li>
<li>大白话：图标数据，指定什么类型的图标，可以多个图表重叠。</li>
</ul>
</li>
<li><p>xAxis：直角坐标系 grid 中的 x 轴</p>
<ul>
<li>type: “category”</li>
<li>boundaryGap: 坐标轴两边留白策略 true，这时候刻度只是作为分隔线，标签和数据点都会在两个刻度之间的带(band)中间。</li>
</ul>
</li>
<li><p>yAxis：直角坐标系 grid 中的 y 轴</p>
<ul>
<li>type: “value”</li>
</ul>
</li>
<li><p>grid：直角坐标系内绘图网格。 <em>grid可以控制线形图 柱状图 图表大小</em></p>
<ul>
<li>containLabel: true <em>是否显示刻度标签 如果是true 就显示 否则反之</em></li>
</ul>
</li>
<li><p>title：标题组件</p>
</li>
<li><p>tooltip：提示框组件</p>
<ul>
<li>saveAsImage</li>
</ul>
</li>
<li><p>legend：图例组件</p>
<ul>
<li><em>series里面有了 name值则 legend里面的data可以删掉</em></li>
</ul>
</li>
<li><p>color：调色盘颜色列表</p>
<p>数据堆叠，同个类目轴上系列配置相同的<code>stack</code>值后 后一个系列的值会在前一个系列的值上相加。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    <span class="comment">// color设置我们线条的颜色 注意后面是个数组</span></span><br><span class="line">    <span class="attr">color</span>: [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;skyblue&#x27;</span>],</span><br><span class="line">    <span class="comment">// 设置图表的标题</span></span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;折线图堆叠123&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 图表的提示框组件 </span></span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">        <span class="comment">// 触发方式</span></span><br><span class="line">        <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 图例组件</span></span><br><span class="line">    <span class="attr">legend</span>: &#123;</span><br><span class="line">       <span class="comment">// series里面有了 name值则 legend里面的data可以删掉</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 网格配置  grid可以控制线形图 柱状图 图表大小</span></span><br><span class="line">    <span class="attr">grid</span>: &#123;</span><br><span class="line">        <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">        <span class="attr">right</span>: <span class="string">&#x27;4%&#x27;</span>,</span><br><span class="line">        <span class="attr">bottom</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">        <span class="comment">// 是否显示刻度标签 如果是true 就显示 否则反之</span></span><br><span class="line">        <span class="attr">containLabel</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 工具箱组件  可以另存为图片等功能</span></span><br><span class="line">    <span class="attr">toolbox</span>: &#123;</span><br><span class="line">        <span class="attr">feature</span>: &#123;</span><br><span class="line">            <span class="attr">saveAsImage</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置x轴的相关配置</span></span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">        <span class="comment">// 是否让我们的线条和坐标轴有缝隙</span></span><br><span class="line">        <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;周二&#x27;</span>, <span class="string">&#x27;周三&#x27;</span>, <span class="string">&#x27;周四&#x27;</span>, <span class="string">&#x27;周五&#x27;</span>, <span class="string">&#x27;周六&#x27;</span>, <span class="string">&#x27;周日&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="comment">// 设置y轴的相关配置</span></span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 系列图表配置 它决定着显示那种类型的图表</span></span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;邮件营销&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">           </span><br><span class="line">            <span class="attr">data</span>: [<span class="number">120</span>, <span class="number">132</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;联盟广告&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="attr">data</span>: [<span class="number">220</span>, <span class="number">182</span>, <span class="number">191</span>, <span class="number">234</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;视频广告&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">          </span><br><span class="line">            <span class="attr">data</span>: [<span class="number">150</span>, <span class="number">232</span>, <span class="number">201</span>, <span class="number">154</span>, <span class="number">190</span>, <span class="number">330</span>, <span class="number">410</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;直接访问&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">          </span><br><span class="line">            <span class="attr">data</span>: [<span class="number">320</span>, <span class="number">332</span>, <span class="number">301</span>, <span class="number">334</span>, <span class="number">390</span>, <span class="number">330</span>, <span class="number">320</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="12-柱状图图表（两大步骤）"><a href="#12-柱状图图表（两大步骤）" class="headerlink" title="12- 柱状图图表（两大步骤）"></a>12- 柱状图图表（两大步骤）</h3><ul>
<li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li>
<li>根据需求定制图表</li>
</ul>
<ol>
<li>引入到html页面中</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 柱状图1模块</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">let</span> myChart = echarts.init(<span class="built_in">document</span>.querySelector(<span class="string">&quot;.bar .chart&quot;</span>));</span><br><span class="line">  <span class="comment">// 指定配置和数据</span></span><br><span class="line">  <span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">color</span>: [<span class="string">&quot;#3398DB&quot;</span>],</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&quot;axis&quot;</span>,</span><br><span class="line">      <span class="attr">axisPointer</span>: &#123;</span><br><span class="line">        <span class="comment">// 坐标轴指示器，坐标轴触发有效</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;shadow&quot;</span> <span class="comment">// 默认为直线，可选为：&#x27;line&#x27; | &#x27;shadow&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">grid</span>: &#123;</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&quot;3%&quot;</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="string">&quot;4%&quot;</span>,</span><br><span class="line">      <span class="attr">bottom</span>: <span class="string">&quot;3%&quot;</span>,</span><br><span class="line">      <span class="attr">containLabel</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">xAxis</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tue&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>],</span><br><span class="line">        <span class="attr">axisTick</span>: &#123;</span><br><span class="line">          <span class="attr">alignWithLabel</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">yAxis</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;value&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;直接访问&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">        <span class="attr">barWidth</span>: <span class="string">&quot;60%&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">10</span>, <span class="number">52</span>, <span class="number">200</span>, <span class="number">334</span>, <span class="number">390</span>, <span class="number">330</span>, <span class="number">220</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把配置给实例对象</span></span><br><span class="line">  myChart.setOption(option);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>根据需求定制</p>
<ul>
<li>修改图表柱形颜色  #2f89cf</li>
</ul>
</li>
</ol>
<ul>
<li>修改图表大小  top 为 10px   bottom 为  4%    grid决定我们的柱状图的大小</li>
</ul>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">color: [<span class="string">&quot;#2f89cf&quot;</span>],</span><br><span class="line"><span class="attr">grid</span>: &#123;</span><br><span class="line">  <span class="attr">left</span>: <span class="string">&quot;0%&quot;</span>,</span><br><span class="line">  <span class="attr">top</span>: <span class="string">&quot;10px&quot;</span>,</span><br><span class="line">  <span class="attr">right</span>: <span class="string">&quot;0%&quot;</span>,</span><br><span class="line">  <span class="attr">bottom</span>: <span class="string">&quot;4%&quot;</span>,</span><br><span class="line">  <span class="attr">containLabel</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>X轴相关设置  xAxis<ul>
<li>文本颜色设置为   rgba(255,255,255,.6)   字体大小为 12px</li>
<li>X轴线的样式 不显示</li>
</ul>
</li>
</ul>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 设置x轴标签文字样式</span></span><br><span class="line"><span class="comment">// x轴的文字颜色和大小</span></span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;rgba(255,255,255,.6)&quot;</span>,</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="string">&quot;12&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line"> <span class="comment">//  x轴样式不显示</span></span><br><span class="line"> <span class="attr">axisLine</span>: &#123;</span><br><span class="line">     <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">     <span class="comment">// 如果想要设置单独的线条样式 </span></span><br><span class="line">     <span class="comment">// lineStyle: &#123;</span></span><br><span class="line">     <span class="comment">//    color: &quot;rgba(255,255,255,.1)&quot;,</span></span><br><span class="line">     <span class="comment">//    width: 1,</span></span><br><span class="line">     <span class="comment">//    type: &quot;solid&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Y 轴相关定制<ul>
<li>文本颜色设置为   rgba(255,255,255,.6)   字体大小为 12px</li>
<li>Y 轴线条样式 更改为  1像素的  rgba(255,255,255,.1) 边框</li>
<li>分隔线的颜色修饰为  1像素的  rgba(255,255,255,.1)   </li>
</ul>
</li>
</ul>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// y 轴文字标签样式</span></span><br><span class="line"><span class="attr">axisLabel</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;rgba(255,255,255,.6)&quot;</span>,</span><br><span class="line">       <span class="attr">fontSize</span>: <span class="string">&quot;12&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"> <span class="comment">// y轴线条样式</span></span><br><span class="line"> <span class="attr">axisLine</span>: &#123;</span><br><span class="line">      <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">         <span class="attr">color</span>: <span class="string">&quot;rgba(255,255,255,.1)&quot;</span>,</span><br><span class="line">         <span class="comment">// width: 1,</span></span><br><span class="line">         <span class="comment">// type: &quot;solid&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="number">5232</span>&#125;,</span><br><span class="line"> <span class="comment">// y 轴分隔线样式</span></span><br><span class="line"><span class="attr">splitLine</span>: &#123;</span><br><span class="line">    <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">       <span class="attr">color</span>: <span class="string">&quot;rgba(255,255,255,.1)&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改柱形为圆角以及柱子宽度  series 里面设置</li>
</ul>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">series: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;直接访问&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">        <span class="comment">// 修改柱子宽度</span></span><br><span class="line">        <span class="attr">barWidth</span>: <span class="string">&quot;35%&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">10</span>, <span class="number">52</span>, <span class="number">200</span>, <span class="number">334</span>, <span class="number">390</span>, <span class="number">330</span>, <span class="number">220</span>],</span><br><span class="line">        <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">          <span class="comment">// 修改柱子圆角</span></span><br><span class="line">          <span class="attr">barBorderRadius</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>更换对应数据</li>
</ul>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// x轴中更换data数据</span></span><br><span class="line"> <span class="attr">data</span>: [ <span class="string">&quot;旅游行业&quot;</span>,<span class="string">&quot;教育培训&quot;</span>, <span class="string">&quot;游戏行业&quot;</span>, <span class="string">&quot;医疗行业&quot;</span>, <span class="string">&quot;电商行业&quot;</span>, <span class="string">&quot;社交行业&quot;</span>, <span class="string">&quot;金融行业&quot;</span> ],</span><br><span class="line"><span class="comment">// series 更换数据</span></span><br><span class="line"> <span class="attr">data</span>: [<span class="number">200</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">900</span>, <span class="number">1500</span>, <span class="number">1200</span>, <span class="number">600</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>让图表跟随屏幕自适应</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myChart.resize();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="13-柱状图2定制"><a href="#13-柱状图2定制" class="headerlink" title="13-柱状图2定制"></a>13-柱状图2定制</h3><ul>
<li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li>
<li>根据需求定制图表</li>
</ul>
<p>需求1： 修改图形大小 grid</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图标位置</span></span><br><span class="line">  <span class="attr">grid</span>: &#123;</span><br><span class="line">    <span class="attr">top</span>: <span class="string">&quot;10%&quot;</span>,</span><br><span class="line">    <span class="attr">left</span>: <span class="string">&quot;22%&quot;</span>,</span><br><span class="line">    <span class="attr">bottom</span>: <span class="string">&quot;10%&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>需求2： 不显示x轴 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xAxis: &#123;</span><br><span class="line">   <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<p>需求3： y轴相关定制</p>
<ul>
<li>不显示y轴线和相关刻度</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不显示y轴线条</span></span><br><span class="line"><span class="attr">axisLine</span>: &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="comment">// 不显示刻度</span></span><br><span class="line"><span class="attr">axisTick</span>: &#123;</span><br><span class="line">   <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>y轴文字的颜色设置为白色</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axisLabel: &#123;</span><br><span class="line">       <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>需求4： 修改第一组柱子相关样式（条状）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">name: <span class="string">&quot;条&quot;</span>,</span><br><span class="line"><span class="comment">// 柱子之间的距离</span></span><br><span class="line"><span class="attr">barCategoryGap</span>: <span class="number">50</span>,</span><br><span class="line"><span class="comment">//柱子的宽度</span></span><br><span class="line"><span class="attr">barWidth</span>: <span class="number">10</span>,</span><br><span class="line"><span class="comment">// 柱子设为圆角</span></span><br><span class="line"><span class="attr">itemStyle</span>: &#123;</span><br><span class="line">    <span class="attr">normal</span>: &#123;</span><br><span class="line">      <span class="attr">barBorderRadius</span>: <span class="number">20</span>,       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>设置第一组柱子内百分比显示数据</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图形上的文本标签</span></span><br><span class="line"><span class="attr">label</span>: &#123;</span><br><span class="line">    <span class="attr">normal</span>: &#123;</span><br><span class="line">         <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">         <span class="comment">// 图形内显示</span></span><br><span class="line">         <span class="attr">position</span>: <span class="string">&quot;inside&quot;</span>,</span><br><span class="line">         <span class="comment">// 文字的显示格式</span></span><br><span class="line">         <span class="attr">formatter</span>: <span class="string">&quot;&#123;c&#125;%&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>设置第一组柱子不同颜色</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明颜色数组</span></span><br><span class="line"><span class="keyword">var</span> myColor = [<span class="string">&quot;#1089E7&quot;</span>, <span class="string">&quot;#F57474&quot;</span>, <span class="string">&quot;#56D0E3&quot;</span>, <span class="string">&quot;#F8B448&quot;</span>, <span class="string">&quot;#8B78F6&quot;</span>];</span><br><span class="line"><span class="comment">// 2. 给 itemStyle  里面的color 属性设置一个 返回值函数</span></span><br><span class="line">  itemStyle: &#123;</span><br><span class="line">          <span class="attr">normal</span>: &#123;</span><br><span class="line">            <span class="attr">barBorderRadius</span>: <span class="number">20</span>,  </span><br><span class="line">            <span class="comment">// params 传进来的是柱子对象</span></span><br><span class="line">            <span class="built_in">console</span>.log(params);</span><br><span class="line">            <span class="comment">// dataIndex 是当前柱子的索引号</span></span><br><span class="line">            <span class="keyword">return</span> myColor[params.dataIndex];</span><br><span class="line">          &#125;</span><br><span class="line">         </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>需求5： 修改第二组柱子的相关配置（框状）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> name: <span class="string">&quot;框&quot;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">  <span class="attr">barCategoryGap</span>: <span class="number">50</span>,</span><br><span class="line">  <span class="attr">barWidth</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">      <span class="attr">borderColor</span>: <span class="string">&quot;#00c1de&quot;</span>,</span><br><span class="line">      <span class="attr">borderWidth</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">barBorderRadius</span>: <span class="number">15</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: [<span class="number">19325</span>, <span class="number">23438</span>, <span class="number">31000</span>, <span class="number">121594</span>, <span class="number">134141</span>, <span class="number">681807</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需求6： 给y轴添加第二组数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yAxis: [</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&quot;印尼&quot;</span>, <span class="string">&quot;美国&quot;</span>, <span class="string">&quot;印度&quot;</span>, <span class="string">&quot;中国&quot;</span>, <span class="string">&quot;世界人口(万)&quot;</span>],</span><br><span class="line">      <span class="comment">// 不显示y轴的线</span></span><br><span class="line">      <span class="attr">axisLine</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 不显示刻度</span></span><br><span class="line">      <span class="attr">axisTick</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 把刻度标签里面的文字颜色设置为白色</span></span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">702</span>, <span class="number">350</span>, <span class="number">610</span>, <span class="number">793</span>, <span class="number">664</span>],</span><br><span class="line">           <span class="comment">// 不显示y轴的线</span></span><br><span class="line">      <span class="attr">axisLine</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 不显示刻度</span></span><br><span class="line">      <span class="attr">axisTick</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">        <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">          <span class="attr">textStyle</span>: &#123;</span><br><span class="line">            <span class="attr">fontSize</span>: <span class="number">12</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure>

<p>需求7： 设置两组柱子层叠以及更换数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给series  第一个对象里面的 添加 </span></span><br><span class="line"><span class="attr">yAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line"><span class="comment">// 给series  第二个对象里面的 添加 </span></span><br><span class="line"><span class="attr">yAxisIndex</span>: <span class="number">1</span>,</span><br><span class="line"><span class="comment">// series 第一个对象里面的data</span></span><br><span class="line"><span class="attr">data</span>: [<span class="number">70</span>, <span class="number">34</span>, <span class="number">60</span>, <span class="number">78</span>, <span class="number">69</span>],</span><br><span class="line"><span class="comment">// series 第二个对象里面的data</span></span><br><span class="line"><span class="attr">data</span>: [<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>],</span><br><span class="line"><span class="comment">// y轴更换第一个对象更换data数据</span></span><br><span class="line"><span class="attr">data</span>: [<span class="string">&quot;HTML5&quot;</span>, <span class="string">&quot;CSS3&quot;</span>, <span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;VUE&quot;</span>, <span class="string">&quot;NODE&quot;</span>],</span><br><span class="line"><span class="comment">// y轴更换第二个对象更换data数据</span></span><br><span class="line"><span class="attr">data</span>:[<span class="number">702</span>, <span class="number">350</span>, <span class="number">610</span>, <span class="number">793</span>, <span class="number">664</span>],</span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 柱状图2</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myColor = [<span class="string">&quot;#1089E7&quot;</span>, <span class="string">&quot;#F57474&quot;</span>, <span class="string">&quot;#56D0E3&quot;</span>, <span class="string">&quot;#F8B448&quot;</span>, <span class="string">&quot;#8B78F6&quot;</span>];</span><br><span class="line">  <span class="comment">// 1. 实例化对象</span></span><br><span class="line">  <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.querySelector(<span class="string">&quot;.bar2 .chart&quot;</span>));</span><br><span class="line">  <span class="comment">// 2. 指定配置和数据</span></span><br><span class="line">  <span class="keyword">var</span> option = &#123;</span><br><span class="line">    <span class="attr">grid</span>: &#123;</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&quot;10%&quot;</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&quot;22%&quot;</span>,</span><br><span class="line">      <span class="attr">bottom</span>: <span class="string">&quot;10%&quot;</span></span><br><span class="line">      <span class="comment">// containLabel: true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 不显示x轴的相关信息</span></span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">        <span class="attr">inverse</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&quot;HTML5&quot;</span>, <span class="string">&quot;CSS3&quot;</span>, <span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;VUE&quot;</span>, <span class="string">&quot;NODE&quot;</span>],</span><br><span class="line">        <span class="comment">// 不显示y轴的线</span></span><br><span class="line">        <span class="attr">axisLine</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 不显示刻度</span></span><br><span class="line">        <span class="attr">axisTick</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 把刻度标签里面的文字颜色设置为白色</span></span><br><span class="line">        <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">702</span>, <span class="number">350</span>, <span class="number">610</span>, <span class="number">793</span>, <span class="number">664</span>],</span><br><span class="line">        <span class="attr">inverse</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 不显示y轴的线</span></span><br><span class="line">        <span class="attr">axisLine</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 不显示刻度</span></span><br><span class="line">        <span class="attr">axisTick</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 把刻度标签里面的文字颜色设置为白色</span></span><br><span class="line">        <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;条&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">70</span>, <span class="number">34</span>, <span class="number">60</span>, <span class="number">78</span>, <span class="number">69</span>],</span><br><span class="line">        <span class="attr">yAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 修改第一组柱子的圆角</span></span><br><span class="line">        <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">          <span class="attr">barBorderRadius</span>: <span class="number">20</span>,</span><br><span class="line">          <span class="comment">// 此时的color 可以修改柱子的颜色</span></span><br><span class="line">          <span class="attr">color</span>: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// params 传进来的是柱子对象</span></span><br><span class="line">            <span class="built_in">console</span>.log(params);</span><br><span class="line">            <span class="comment">// dataIndex 是当前柱子的索引号</span></span><br><span class="line">            <span class="keyword">return</span> myColor[params.dataIndex];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 柱子之间的距离</span></span><br><span class="line">        <span class="attr">barCategoryGap</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="comment">//柱子的宽度</span></span><br><span class="line">        <span class="attr">barWidth</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="comment">// 显示柱子内的文字</span></span><br><span class="line">        <span class="attr">label</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">position</span>: <span class="string">&quot;inside&quot;</span>,</span><br><span class="line">          <span class="comment">// &#123;c&#125; 会自动的解析为 数据  data里面的数据</span></span><br><span class="line">          <span class="attr">formatter</span>: <span class="string">&quot;&#123;c&#125;%&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;框&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">        <span class="attr">barCategoryGap</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="attr">barWidth</span>: <span class="number">15</span>,</span><br><span class="line">        <span class="attr">yAxisIndex</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>],</span><br><span class="line">        <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">          <span class="attr">borderColor</span>: <span class="string">&quot;#00c1de&quot;</span>,</span><br><span class="line">          <span class="attr">borderWidth</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">barBorderRadius</span>: <span class="number">15</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 把配置给实例对象</span></span><br><span class="line">  myChart.setOption(option);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="14-折线图1-人员变化模块制作"><a href="#14-折线图1-人员变化模块制作" class="headerlink" title="14-折线图1 人员变化模块制作"></a>14-折线图1 人员变化模块制作</h3><ul>
<li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li>
<li>根据需求定制图表</li>
</ul>
<p>需求1： 修改折线图大小，显示边框设置颜色：#012f4a，并且显示刻度标签。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置网格样式</span></span><br><span class="line"><span class="attr">grid</span>: &#123; </span><br><span class="line">  <span class="attr">top</span>: <span class="string">&#x27;20%&#x27;</span>,</span><br><span class="line">  <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">  <span class="attr">right</span>: <span class="string">&#x27;4%&#x27;</span>,</span><br><span class="line">  <span class="attr">bottom</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">  <span class="attr">show</span>: <span class="literal">true</span>,<span class="comment">// 显示边框</span></span><br><span class="line">  <span class="attr">borderColor</span>: <span class="string">&#x27;#012f4a&#x27;</span>,<span class="comment">// 边框颜色</span></span><br><span class="line">  <span class="attr">containLabel</span>: <span class="literal">true</span> <span class="comment">// 包含刻度文字在内</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>需求2： 修改图例组件中的文字颜色 #4c9bfd， 距离右侧 right 为 10%</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图例组件</span></span><br><span class="line">   <span class="attr">legend</span>: &#123;</span><br><span class="line">     <span class="attr">textStyle</span>: &#123;</span><br><span class="line">       <span class="attr">color</span>: <span class="string">&#x27;#4c9bfd&#x27;</span> <span class="comment">// 图例文字颜色</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">right</span>: <span class="string">&#x27;10%&#x27;</span> <span class="comment">// 距离右边10%</span></span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>

<p>需求3： x轴相关配置</p>
<ul>
<li>刻度去除</li>
<li>x轴刻度标签字体颜色：#4c9bfd</li>
<li>剔除x坐标轴线颜色（将来使用Y轴分割线)</li>
<li>轴两端是不需要内间距 boundaryGap</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> xAxis: &#123;</span><br><span class="line">   <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">   <span class="attr">data</span>: [<span class="string">&quot;周一&quot;</span>, <span class="string">&quot;周二&quot;</span>],</span><br><span class="line"><span class="attr">axisTick</span>: &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">false</span> <span class="comment">// 去除刻度线</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#4c9bfd&#x27;</span> <span class="comment">// 文本颜色</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">axisLine</span>: &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">false</span> <span class="comment">// 去除轴线</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">boundaryGap</span>: <span class="literal">false</span>  <span class="comment">// 去除轴内间距</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<p>需求4： y轴的定制</p>
<ul>
<li>刻度去除</li>
<li>字体颜色：#4c9bfd</li>
<li>分割线颜色：#012f4a</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">yAxis: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">  <span class="attr">axisTick</span>: &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">false</span>  <span class="comment">// 去除刻度</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;#4c9bfd&#x27;</span> <span class="comment">// 文字颜色</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">splitLine</span>: &#123;</span><br><span class="line">    <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#012f4a&#x27;</span> <span class="comment">// 分割线颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>需求5： 两条线形图定制</p>
<ul>
<li>颜色分别：#00f2f1  #ed3f35</li>
<li>把折线修饰为圆滑 series 数据中添加 smooth 为 true</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   color: [<span class="string">&#x27;#00f2f1&#x27;</span>, <span class="string">&#x27;#ed3f35&#x27;</span>],</span><br><span class="line"><span class="attr">series</span>: [&#123;</span><br><span class="line">     <span class="attr">name</span>:<span class="string">&#x27;新增粉丝&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>: [<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>],</span><br><span class="line">     <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">     <span class="comment">// 折线修饰为圆滑</span></span><br><span class="line">     <span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line">     &#125;,&#123;</span><br><span class="line">     <span class="attr">name</span>:<span class="string">&#x27;新增游客&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>: [<span class="number">100</span>, <span class="number">331</span>, <span class="number">200</span>, <span class="number">123</span>, <span class="number">233</span>, <span class="number">543</span>, <span class="number">400</span>],</span><br><span class="line">     <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">     <span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line">   &#125;]</span><br></pre></td></tr></table></figure>

<p>需求6： 配置数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// x轴的文字</span></span><br><span class="line"><span class="attr">xAxis</span>: &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: [<span class="string">&#x27;1月&#x27;</span>, <span class="string">&#x27;2月&#x27;</span>, <span class="string">&#x27;3月&#x27;</span>, <span class="string">&#x27;4月&#x27;</span>, <span class="string">&#x27;5月&#x27;</span>, <span class="string">&#x27;6月&#x27;</span>, <span class="string">&#x27;7月&#x27;</span>, <span class="string">&#x27;8月&#x27;</span>, <span class="string">&#x27;9月&#x27;</span>, <span class="string">&#x27;10月&#x27;</span>, <span class="string">&#x27;11月&#x27;</span>, <span class="string">&#x27;12月&#x27;</span>],</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图标数据</span></span><br><span class="line">    <span class="attr">series</span>: [&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;新增粉丝&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>:  [<span class="number">24</span>, <span class="number">40</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">120</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">120</span>],</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">      <span class="attr">smooth</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;新增游客&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">40</span>, <span class="number">64</span>, <span class="number">191</span>, <span class="number">324</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>, <span class="number">213</span>, <span class="number">180</span>, <span class="number">200</span>, <span class="number">180</span>, <span class="number">79</span>],     </span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">      <span class="attr">smooth</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br></pre></td></tr></table></figure>

<p>需求7： 新增需求  点击 2020年   2021年 数据发生变化</p>
<p>以下是后台送过来数据（ajax请求过来的）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> yearData = [</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">year</span>: <span class="string">&#x27;2020&#x27;</span>,  <span class="comment">// 年份</span></span><br><span class="line">       <span class="attr">data</span>: [  <span class="comment">// 两个数组是因为有两条线</span></span><br><span class="line">            [<span class="number">24</span>, <span class="number">40</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">120</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">120</span>],</span><br><span class="line">            [<span class="number">40</span>, <span class="number">64</span>, <span class="number">191</span>, <span class="number">324</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>, <span class="number">213</span>, <span class="number">180</span>, <span class="number">200</span>, <span class="number">180</span>, <span class="number">79</span>]</span><br><span class="line">         ]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">year</span>: <span class="string">&#x27;2021&#x27;</span>,  <span class="comment">// 年份</span></span><br><span class="line">       <span class="attr">data</span>: [  <span class="comment">// 两个数组是因为有两条线</span></span><br><span class="line">            [<span class="number">123</span>, <span class="number">175</span>, <span class="number">112</span>, <span class="number">197</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">98</span>, <span class="number">21</span>, <span class="number">43</span>, <span class="number">64</span>, <span class="number">76</span>, <span class="number">38</span>],</span><br><span class="line">    		[<span class="number">143</span>, <span class="number">131</span>, <span class="number">165</span>, <span class="number">123</span>, <span class="number">178</span>, <span class="number">21</span>, <span class="number">82</span>, <span class="number">64</span>, <span class="number">43</span>, <span class="number">60</span>, <span class="number">19</span>, <span class="number">34</span>]</span><br><span class="line">         ]</span><br><span class="line">     &#125;</span><br><span class="line">    ];</span><br></pre></td></tr></table></figure>

<ul>
<li>tab栏切换事件</li>
<li>点击2020按钮   需要把 series 第一个对象里面的data  换成  2020年对象里面data[0] </li>
<li>点击2020按钮   需要把 series 第二个对象里面的data  换成  2020年对象里面data[1] </li>
<li>2021 按钮同样道理</li>
</ul>
<p>完整代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 折线图1模块制作</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> yearData = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">year</span>: <span class="string">&quot;2020&quot;</span>, <span class="comment">// 年份</span></span><br><span class="line">      <span class="attr">data</span>: [</span><br><span class="line">        <span class="comment">// 两个数组是因为有两条线</span></span><br><span class="line">        [<span class="number">24</span>, <span class="number">40</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">120</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">120</span>],</span><br><span class="line">        [<span class="number">40</span>, <span class="number">64</span>, <span class="number">191</span>, <span class="number">324</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>, <span class="number">213</span>, <span class="number">180</span>, <span class="number">200</span>, <span class="number">180</span>, <span class="number">79</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">year</span>: <span class="string">&quot;2021&quot;</span>, <span class="comment">// 年份</span></span><br><span class="line">      <span class="attr">data</span>: [</span><br><span class="line">        <span class="comment">// 两个数组是因为有两条线</span></span><br><span class="line">        [<span class="number">123</span>, <span class="number">175</span>, <span class="number">112</span>, <span class="number">197</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">98</span>, <span class="number">21</span>, <span class="number">43</span>, <span class="number">64</span>, <span class="number">76</span>, <span class="number">38</span>],</span><br><span class="line">        [<span class="number">143</span>, <span class="number">131</span>, <span class="number">165</span>, <span class="number">123</span>, <span class="number">178</span>, <span class="number">21</span>, <span class="number">82</span>, <span class="number">64</span>, <span class="number">43</span>, <span class="number">60</span>, <span class="number">19</span>, <span class="number">34</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="comment">// 1. 实例化对象</span></span><br><span class="line">  <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.querySelector(<span class="string">&quot;.line .chart&quot;</span>));</span><br><span class="line">  <span class="comment">// 2.指定配置</span></span><br><span class="line">  <span class="keyword">var</span> option = &#123;</span><br><span class="line">    <span class="comment">// 通过这个color修改两条线的颜色</span></span><br><span class="line">    <span class="attr">color</span>: [<span class="string">&quot;#00f2f1&quot;</span>, <span class="string">&quot;#ed3f35&quot;</span>],</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&quot;axis&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">legend</span>: &#123;</span><br><span class="line">      <span class="comment">// 如果series 对象有name 值，则 legend可以不用写data</span></span><br><span class="line">      <span class="comment">// 修改图例组件 文字颜色</span></span><br><span class="line">      <span class="attr">textStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#4c9bfd&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 这个10% 必须加引号</span></span><br><span class="line">      <span class="attr">right</span>: <span class="string">&quot;10%&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">grid</span>: &#123;</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&quot;20%&quot;</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&quot;3%&quot;</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="string">&quot;4%&quot;</span>,</span><br><span class="line">      <span class="attr">bottom</span>: <span class="string">&quot;3%&quot;</span>,</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">// 显示边框</span></span><br><span class="line">      <span class="attr">borderColor</span>: <span class="string">&quot;#012f4a&quot;</span>, <span class="comment">// 边框颜色</span></span><br><span class="line">      <span class="attr">containLabel</span>: <span class="literal">true</span> <span class="comment">// 包含刻度文字在内</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">      <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">data</span>: [</span><br><span class="line">        <span class="string">&quot;1月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;2月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;3月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;4月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;5月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;6月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;7月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;8月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;9月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;10月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;11月&quot;</span>,</span><br><span class="line">        <span class="string">&quot;12月&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">axisTick</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span> <span class="comment">// 去除刻度线</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#4c9bfd&quot;</span> <span class="comment">// 文本颜色</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span> <span class="comment">// 去除轴线</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="attr">axisTick</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span> <span class="comment">// 去除刻度线</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#4c9bfd&quot;</span> <span class="comment">// 文本颜色</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span> <span class="comment">// 去除轴线</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">splitLine</span>: &#123;</span><br><span class="line">        <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&quot;#012f4a&quot;</span> <span class="comment">// 分割线颜色</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;新增粉丝&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">        <span class="comment">// true 可以让我们的折线显示带有弧度</span></span><br><span class="line">        <span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">data</span>: yearData[<span class="number">0</span>].data[<span class="number">0</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;新增游客&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">        <span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">data</span>: yearData[<span class="number">0</span>].data[<span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 把配置给实例对象</span></span><br><span class="line">  myChart.setOption(option);</span><br><span class="line">  <span class="comment">// 4. 让图表跟随屏幕自动的去适应</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myChart.resize();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5.点击切换效果</span></span><br><span class="line">  $(<span class="string">&quot;.line h2&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// alert(1);</span></span><br><span class="line">    <span class="comment">// console.log($(this).index());</span></span><br><span class="line">    <span class="comment">// 点击 a 之后 根据当前a的索引号 找到对应的 yearData的相关对象</span></span><br><span class="line">    <span class="comment">// console.log(yearData[$(this).index()]);</span></span><br><span class="line">    <span class="keyword">var</span> obj = yearData[$(<span class="built_in">this</span>).index()];</span><br><span class="line">    option.series[<span class="number">0</span>].data = obj.data[<span class="number">0</span>];</span><br><span class="line">    option.series[<span class="number">1</span>].data = obj.data[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 需要重新渲染</span></span><br><span class="line">    myChart.setOption(option);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h3 id="15-折线图2-播放量模块制作"><a href="#15-折线图2-播放量模块制作" class="headerlink" title="15-折线图2 播放量模块制作"></a>15-折线图2 播放量模块制作</h3><ul>
<li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li>
<li>根据需求定制图表</li>
</ul>
<p>需求1： 更换图例组件文字颜色 rgba(255,255,255,.5)  文字大小为12</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> legend: &#123;</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&quot;0%&quot;</span>,</span><br><span class="line">      <span class="attr">textStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;rgba(255,255,255,.5)&quot;</span>,</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="string">&quot;12&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>需求2： 修改图表大小</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">grid: &#123;</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&quot;30&quot;</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">      <span class="attr">bottom</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">      <span class="attr">containLabel</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>需求3： 修改x轴相关配置</p>
<ul>
<li>修改文本颜色为rgba(255,255,255,.6)  文字大小为 12</li>
<li>x轴线的颜色为   rgba(255,255,255,.2)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文本颜色为rgba(255,255,255,.6)  文字大小为 12</span></span><br><span class="line"><span class="attr">axisLabel</span>: &#123;</span><br><span class="line">     <span class="attr">textStyle</span>: &#123;</span><br><span class="line">       <span class="attr">color</span>: <span class="string">&quot;rgba(255,255,255,.6)&quot;</span>,</span><br><span class="line">       <span class="attr">fontSize</span>: <span class="number">12</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">    <span class="comment">// x轴线的颜色为   rgba(255,255,255,.2)</span></span><br><span class="line">   <span class="attr">axisLine</span>: &#123;</span><br><span class="line">     <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">       <span class="attr">color</span>: <span class="string">&quot;rgba(255,255,255,.2)&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>

<p>需求4： 修改y轴的相关配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    axisTick: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    <span class="attr">axisLine</span>: &#123;</span><br><span class="line">      <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;rgba(255,255,255,.1)&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">      <span class="attr">textStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;rgba(255,255,255,.6)&quot;</span>,</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="number">12</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// 修改分割线的颜色</span></span><br><span class="line">    <span class="attr">splitLine</span>: &#123;</span><br><span class="line">      <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;rgba(255,255,255,.1)&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>需求5： 修改两个线模块配置(注意在series 里面定制)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一条 线是圆滑</span></span><br><span class="line"><span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line"> <span class="comment">// 单独修改线的样式</span></span><br><span class="line"> <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">     <span class="attr">color</span>: <span class="string">&quot;#0184d5&quot;</span>,</span><br><span class="line">     <span class="attr">width</span>: <span class="number">2</span> </span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="comment">// 填充区域</span></span><br><span class="line"> <span class="attr">areaStyle</span>: &#123;</span><br><span class="line">       <span class="comment">// 渐变色，只需要复制即可</span></span><br><span class="line">     <span class="attr">color</span>: <span class="keyword">new</span> echarts.graphic.LinearGradient(</span><br><span class="line">       <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>,</span><br><span class="line">       <span class="number">1</span>,</span><br><span class="line">       [</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">           <span class="attr">color</span>: <span class="string">&quot;rgba(1, 132, 213, 0.4)&quot;</span>   <span class="comment">// 渐变色的起始颜色</span></span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">offset</span>: <span class="number">0.8</span>,</span><br><span class="line">           <span class="attr">color</span>: <span class="string">&quot;rgba(1, 132, 213, 0.1)&quot;</span>   <span class="comment">// 渐变线的结束颜色</span></span><br><span class="line">         &#125;</span><br><span class="line">       ],</span><br><span class="line">       <span class="literal">false</span></span><br><span class="line">     ),</span><br><span class="line">     <span class="attr">shadowColor</span>: <span class="string">&quot;rgba(0, 0, 0, 0.1)&quot;</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">// 设置拐点 小圆点</span></span><br><span class="line"> <span class="attr">symbol</span>: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line"> <span class="comment">// 拐点大小</span></span><br><span class="line"> <span class="attr">symbolSize</span>: <span class="number">8</span>,</span><br><span class="line"> <span class="comment">// 设置拐点颜色以及边框</span></span><br><span class="line"><span class="attr">itemStyle</span>: &#123;</span><br><span class="line">     <span class="attr">color</span>: <span class="string">&quot;#0184d5&quot;</span>,</span><br><span class="line">     <span class="attr">borderColor</span>: <span class="string">&quot;rgba(221, 220, 107, .1)&quot;</span>,</span><br><span class="line">     <span class="attr">borderWidth</span>: <span class="number">12</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">// 开始不显示拐点， 鼠标经过显示</span></span><br><span class="line"> <span class="attr">showSymbol</span>: <span class="literal">false</span>,</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">name: <span class="string">&quot;转发量&quot;</span>,</span><br><span class="line"> <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line"> <span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line"> <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">   <span class="attr">normal</span>: &#123;</span><br><span class="line">     <span class="attr">color</span>: <span class="string">&quot;#00d887&quot;</span>,</span><br><span class="line">     <span class="attr">width</span>: <span class="number">2</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">areaStyle</span>: &#123;</span><br><span class="line">   <span class="attr">normal</span>: &#123;</span><br><span class="line">     <span class="attr">color</span>: <span class="keyword">new</span> echarts.graphic.LinearGradient(</span><br><span class="line">       <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>,</span><br><span class="line">       <span class="number">1</span>,</span><br><span class="line">       [</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">           <span class="attr">color</span>: <span class="string">&quot;rgba(0, 216, 135, 0.4)&quot;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">offset</span>: <span class="number">0.8</span>,</span><br><span class="line">           <span class="attr">color</span>: <span class="string">&quot;rgba(0, 216, 135, 0.1)&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">       ],</span><br><span class="line">       <span class="literal">false</span></span><br><span class="line">     ),</span><br><span class="line">     <span class="attr">shadowColor</span>: <span class="string">&quot;rgba(0, 0, 0, 0.1)&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">// 设置拐点 小圆点</span></span><br><span class="line"> <span class="attr">symbol</span>: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line"> <span class="comment">// 拐点大小</span></span><br><span class="line"> <span class="attr">symbolSize</span>: <span class="number">5</span>,</span><br><span class="line"> <span class="comment">// 设置拐点颜色以及边框</span></span><br><span class="line">  <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">     <span class="attr">color</span>: <span class="string">&quot;#00d887&quot;</span>,</span><br><span class="line">     <span class="attr">borderColor</span>: <span class="string">&quot;rgba(221, 220, 107, .1)&quot;</span>,</span><br><span class="line">     <span class="attr">borderWidth</span>: <span class="number">12</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="comment">// 开始不显示拐点， 鼠标经过显示</span></span><br><span class="line"> <span class="attr">showSymbol</span>: <span class="literal">false</span>,</span><br></pre></td></tr></table></figure>



<p>需求6： 更换数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// x轴更换数据</span></span><br><span class="line"><span class="attr">data</span>: [ <span class="string">&quot;01&quot;</span>,<span class="string">&quot;02&quot;</span>,<span class="string">&quot;03&quot;</span>,<span class="string">&quot;04&quot;</span>,<span class="string">&quot;05&quot;</span>,<span class="string">&quot;06&quot;</span>,<span class="string">&quot;07&quot;</span>,<span class="string">&quot;08&quot;</span>,<span class="string">&quot;09&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;11&quot;</span>,<span class="string">&quot;12&quot;</span>,<span class="string">&quot;13&quot;</span>,<span class="string">&quot;14&quot;</span>,<span class="string">&quot;15&quot;</span>,<span class="string">&quot;16&quot;</span>,<span class="string">&quot;17&quot;</span>,<span class="string">&quot;18&quot;</span>,<span class="string">&quot;19&quot;</span>,<span class="string">&quot;20&quot;</span>,<span class="string">&quot;21&quot;</span>,<span class="string">&quot;22&quot;</span>,<span class="string">&quot;23&quot;</span>,<span class="string">&quot;24&quot;</span>,<span class="string">&quot;25&quot;</span>,<span class="string">&quot;26&quot;</span>,<span class="string">&quot;26&quot;</span>,<span class="string">&quot;28&quot;</span>,<span class="string">&quot;29&quot;</span>,<span class="string">&quot;30&quot;</span>],</span><br><span class="line"><span class="comment">// series  第一个对象data数据</span></span><br><span class="line"> <span class="attr">data</span>: [ <span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">40</span>,<span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>,<span class="number">60</span>,<span class="number">20</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">40</span>,<span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>,<span class="number">60</span>,<span class="number">20</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">40</span>,<span class="number">30</span>, <span class="number">40</span>, <span class="number">20</span>,<span class="number">60</span>,<span class="number">50</span>, <span class="number">40</span>],</span><br><span class="line"><span class="comment">// series  第二个对象data数据</span></span><br><span class="line"> <span class="attr">data</span>: [ <span class="number">130</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>,<span class="number">30</span>, <span class="number">40</span>, <span class="number">80</span>,<span class="number">60</span>,<span class="number">20</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">40</span>,<span class="number">20</span>, <span class="number">140</span>,<span class="number">30</span>, <span class="number">40</span>, <span class="number">130</span>,<span class="number">20</span>,<span class="number">20</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">30</span>, <span class="number">40</span>,<span class="number">30</span>, <span class="number">120</span>, <span class="number">20</span>,<span class="number">99</span>,<span class="number">50</span>, <span class="number">20</span>],</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="16-饼形图-1年龄分布模块制作"><a href="#16-饼形图-1年龄分布模块制作" class="headerlink" title="16-饼形图 1年龄分布模块制作"></a>16-饼形图 1年龄分布模块制作</h3><ul>
<li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li>
<li>根据需求定制图表</li>
</ul>
<p>定制图表需求1： </p>
<ul>
<li>修改图例组件在底部并且居中显示。 </li>
<li>每个小图标的宽度和高度修改为 10px   </li>
<li>文字大小为12 颜色  rgba(255,255,255,.5)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">     <span class="comment">// 距离底部为0%</span></span><br><span class="line">     <span class="attr">bottom</span>: <span class="string">&quot;0%&quot;</span>,</span><br><span class="line">     <span class="comment">// 小图标的宽度和高度</span></span><br><span class="line">     <span class="attr">itemWidth</span>: <span class="number">10</span>,</span><br><span class="line">     <span class="attr">itemHeight</span>: <span class="number">10</span>,</span><br><span class="line">     <span class="attr">data</span>: [<span class="string">&#x27;直接访问&#x27;</span>, <span class="string">&#x27;邮件营销&#x27;</span>, <span class="string">&#x27;联盟广告&#x27;</span>, <span class="string">&#x27;视频广告&#x27;</span>, <span class="string">&#x27;搜索引擎&#x27;</span>],</span><br><span class="line">     <span class="comment">// 修改图例组件的文字为 12px</span></span><br><span class="line">     <span class="attr">textStyle</span>: &#123;</span><br><span class="line">       <span class="attr">color</span>: <span class="string">&quot;rgba(255,255,255,.5)&quot;</span>,</span><br><span class="line">       <span class="attr">fontSize</span>: <span class="string">&quot;12&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>定制需求2：</p>
<ul>
<li>修改水平居中 垂直居中</li>
<li>修改内圆半径和外圆半径为    [“40%”, “60%”]   pink老师友情提示，带有直角坐标系的比如折线图柱状图是 grid修改图形大小，而我们饼形图是通过 radius 修改大小</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">series: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;年龄分布&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;pie&quot;</span>,</span><br><span class="line">        <span class="comment">// 设置饼形图在容器中的位置</span></span><br><span class="line">        <span class="attr">center</span>: [<span class="string">&quot;50%&quot;</span>, <span class="string">&quot;50%&quot;</span>],</span><br><span class="line">        <span class="comment">//  修改内圆半径和外圆半径为  百分比是相对于容器宽度来说的</span></span><br><span class="line">        <span class="attr">radius</span>: [<span class="string">&quot;40%&quot;</span>, <span class="string">&quot;60%&quot;</span>],</span><br><span class="line">        <span class="comment">// 不显示标签文字</span></span><br><span class="line">        <span class="attr">label</span>: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">        <span class="comment">// 不显示连接线</span></span><br><span class="line">        <span class="attr">labelLine</span>: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<p>定制需求3：更换数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// legend 中的data  可省略</span></span><br><span class="line"><span class="attr">data</span>: [<span class="string">&quot;0岁以下&quot;</span>, <span class="string">&quot;20-29岁&quot;</span>, <span class="string">&quot;30-39岁&quot;</span>, <span class="string">&quot;40-49岁&quot;</span>, <span class="string">&quot;50岁以上&quot;</span>],</span><br><span class="line"><span class="comment">//  series 中的数据</span></span><br><span class="line"> <span class="attr">data</span>: [</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;0岁以下&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;20-29岁&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;30-39岁&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;40-49岁&quot;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;50岁以上&quot;</span> &#125;</span><br><span class="line"> ] ,</span><br></pre></td></tr></table></figure>

<p>定制需求4： 更换颜色</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">color: [</span><br><span class="line">          <span class="string">&quot;#065aab&quot;</span>,</span><br><span class="line">          <span class="string">&quot;#066eab&quot;</span>,</span><br><span class="line">          <span class="string">&quot;#0682ab&quot;</span>,</span><br><span class="line">          <span class="string">&quot;#0696ab&quot;</span>,</span><br><span class="line">          <span class="string">&quot;#06a0ab&quot;</span>,</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 让图表跟随屏幕自动的去适应</span></span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   myChart.resize();</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="17-饼形图2-地区分布模块制作（南丁格尔玫瑰图）"><a href="#17-饼形图2-地区分布模块制作（南丁格尔玫瑰图）" class="headerlink" title="17-饼形图2 地区分布模块制作（南丁格尔玫瑰图）"></a>17-饼形图2 地区分布模块制作（南丁格尔玫瑰图）</h3><ul>
<li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li>
<li>根据需求定制图表</li>
</ul>
<p>第二步：按照需求定制</p>
<ul>
<li>需求1：颜色设置</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">color: [<span class="string">&#x27;#006cff&#x27;</span>, <span class="string">&#x27;#60cda0&#x27;</span>, <span class="string">&#x27;#ed8884&#x27;</span>, <span class="string">&#x27;#ff9f7f&#x27;</span>, <span class="string">&#x27;#0096ff&#x27;</span>, <span class="string">&#x27;#9fe6b8&#x27;</span>, <span class="string">&#x27;#32c5e9&#x27;</span>, <span class="string">&#x27;#1d9dff&#x27;</span>],</span><br></pre></td></tr></table></figure>

<ul>
<li>需求2：修改饼形图大小 ( series对象)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">radius: [<span class="string">&#x27;10%&#x27;</span>, <span class="string">&#x27;70%&#x27;</span>],</span><br></pre></td></tr></table></figure>

<ul>
<li>需求3： 把饼形图的显示模式改为 半径模式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">roseType: <span class="string">&quot;radius&quot;</span>,</span><br></pre></td></tr></table></figure>

<ul>
<li>需求4：数据使用更换（series对象 里面 data对象）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">name</span>: <span class="string">&#x27;云南&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">26</span>, <span class="attr">name</span>: <span class="string">&#x27;北京&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">24</span>, <span class="attr">name</span>: <span class="string">&#x27;山东&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">&#x27;河北&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">name</span>: <span class="string">&#x27;江苏&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">&#x27;浙江&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">30</span>, <span class="attr">name</span>: <span class="string">&#x27;四川&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">value</span>: <span class="number">42</span>, <span class="attr">name</span>: <span class="string">&#x27;湖北&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>需求5：字体略小些  10 px ( series对象里面设置 )</p>
<p>饼图图形上的文本标签可以控制饼形图的文字的一些样式。   label 对象设置</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">series: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;面积模式&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;pie&quot;</span>,</span><br><span class="line">        <span class="attr">radius</span>: [<span class="number">30</span>, <span class="number">110</span>],</span><br><span class="line">        <span class="attr">center</span>: [<span class="string">&quot;50%&quot;</span>, <span class="string">&quot;50%&quot;</span>],</span><br><span class="line">        <span class="attr">roseType</span>: <span class="string">&quot;radius&quot;</span>,</span><br><span class="line">        <span class="comment">// 文本标签控制饼形图文字的相关样式， 注意它是一个对象</span></span><br><span class="line">        <span class="attr">label</span>: &#123;</span><br><span class="line">          <span class="attr">fontSize</span>: <span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>需求6：防止缩放的时候，引导线过长。引导线略短些   (series对象里面的  labelLine  对象设置  ) <ul>
<li>连接图表 6 px</li>
<li>连接文字 8 px</li>
</ul>
</li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+        // 文字调整</span></span><br><span class="line"><span class="addition">+        label:&#123;</span></span><br><span class="line"><span class="addition">+          fontSize: 10</span></span><br><span class="line"><span class="addition">+        &#125;,</span></span><br><span class="line"><span class="addition">+        // 引导线调整</span></span><br><span class="line"><span class="addition">+        labelLine: &#123;</span></span><br><span class="line"><span class="addition">+          // 连接扇形图线长</span></span><br><span class="line"><span class="addition">+          length: 6,</span></span><br><span class="line"><span class="addition">+          // 连接文字线长</span></span><br><span class="line"><span class="addition">+          length2: 8</span></span><br><span class="line"><span class="addition">+        &#125; </span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line"><span class="addition">+    ],</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>需求6：浏览器缩放的时候，图表跟着自动适配。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听浏览器缩放，图表对象调用缩放resize函数</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myChart.resize();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>



<h3 id="18-Echarts-社区介绍"><a href="#18-Echarts-社区介绍" class="headerlink" title="18-Echarts-社区介绍"></a>18-Echarts-社区介绍</h3><blockquote>
<p><a href="https://gallery.echartsjs.com/explore.html#sort=rank~timeframe=all~author=all">社区</a>就是一些，活跃的echart使用者，交流和贡献定制好的图表的地方。</p>
</blockquote>
<p><img src="docs/media/1576664444951.png" alt="1576664444951"></p>
<ul>
<li>在这里可以找到一些基于echart的高度定制好的图表，相当于基于jquery开发的插件，这里是基于echarts开发的第三方的图表。</li>
</ul>
<h3 id="19-Echarts-map使用（扩展）"><a href="#19-Echarts-map使用（扩展）" class="headerlink" title="19-Echarts-map使用（扩展）"></a>19-Echarts-map使用（扩展）</h3><p>参考社区的例子：<a href="https://gallery.echartsjs.com/editor.html?c=x0-ExSkZDM">https://gallery.echartsjs.com/editor.html?c=x0-ExSkZDM</a>  (模拟飞机航线)</p>
<p>实现步骤：</p>
<ul>
<li>第一需要下载china.js提供中国地图的js文件</li>
<li>第二个因为里面代码比较多，我们新建一个新的js文件 myMap.js 引入</li>
<li>使用社区提供的配置即可。</li>
</ul>
<p>需要修改：</p>
<ul>
<li>去掉标题组件</li>
<li>去掉背景颜色</li>
<li>修改地图省份背景  #142957  areaColor 里面做修改</li>
<li>地图放大通过  zoom   设置为1.2即可</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">geo: &#123;</span><br><span class="line">  <span class="attr">map</span>: <span class="string">&#x27;china&#x27;</span>,</span><br><span class="line">  <span class="attr">zoom</span>: <span class="number">1.2</span>,</span><br><span class="line">  <span class="attr">label</span>: &#123;</span><br><span class="line">    <span class="attr">emphasis</span>: &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">roam</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">    <span class="attr">normal</span>: &#123;</span><br><span class="line">      <span class="attr">areaColor</span>: <span class="string">&#x27;#142957&#x27;</span>,</span><br><span class="line">      <span class="attr">borderColor</span>: <span class="string">&#x27;#0692a4&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">emphasis</span>: &#123;</span><br><span class="line">      <span class="attr">areaColor</span>: <span class="string">&#x27;#0b1c2d&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>总结：这例子是扩展案例，大家以后可以多看看社区里面的案例。</p>
<h3 id="20-最后约束缩放"><a href="#20-最后约束缩放" class="headerlink" title="20- 最后约束缩放"></a>20- 最后约束缩放</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 约束屏幕尺寸 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1024px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">42px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1920px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">80px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>echarts</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>Echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记</title>
    <url>/TypeScript/</url>
    <content><![CDATA[<blockquote>
<p>ts学习笔记</p>
</blockquote>
<span id="more"></span>

<h1 id="第一章-快速入门"><a href="#第一章-快速入门" class="headerlink" title="第一章 快速入门"></a>第一章 快速入门</h1><h2 id="0、TypeScript简介"><a href="#0、TypeScript简介" class="headerlink" title="0、TypeScript简介"></a>0、TypeScript简介</h2><ol>
<li><p>TypeScript是<strong>JavaScript的超集</strong>。</p>
</li>
<li><p>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</p>
</li>
<li><p>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</p>
</li>
<li><p>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</p>
</li>
</ol>
<ul>
<li>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；</li>
<li>TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；</li>
<li>TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；</li>
<li>同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li>
</ul>
<h2 id="1、TypeScript-开发环境搭建"><a href="#1、TypeScript-开发环境搭建" class="headerlink" title="1、TypeScript 开发环境搭建"></a>1、TypeScript 开发环境搭建</h2><ol>
<li><p>下载Node.js</p>
<ul>
<li>64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li>
<li>32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li>
</ul>
</li>
<li><p>安装Node.js</p>
</li>
<li><p>使用npm全局安装typescript</p>
<ul>
<li>进入命令行</li>
<li>输入：npm i -g typescript</li>
</ul>
</li>
<li><p>创建一个ts文件</p>
</li>
<li><p>使用tsc对ts文件进行<strong>编译</strong></p>
<ul>
<li><p>进入命令行</p>
</li>
<li><p>进入ts文件所在目录</p>
</li>
<li><p>执行命令：tsc xxx.ts</p>
</li>
</ul>
</li>
</ol>
<h2 id="2、基本类型"><a href="#2、基本类型" class="headerlink" title="2、基本类型"></a>2、基本类型</h2><ul>
<li><h4 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h4><ul>
<li><p>类型声明是TS非常重要的一个特点</p>
</li>
<li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p>
</li>
<li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</p>
</li>
<li><p><strong>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</strong></p>
</li>
<li><p>语法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h4 id="自动类型判断"><a href="#自动类型判断" class="headerlink" title="自动类型判断"></a>自动类型判断</h4><ul>
<li>TS拥有自动的类型判断机制</li>
<li><strong>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</strong></li>
<li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</li>
</ul>
</li>
<li><h4 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h4><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">例子</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">number</td>
<td align="center">1, -33, 2.5</td>
<td align="center">任意数字</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">‘hi’, “hi”, <code>hi</code></td>
<td align="center">任意字符串</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">true、false</td>
<td align="center">布尔值true或false</td>
</tr>
<tr>
<td align="center">字面量</td>
<td align="center">其本身</td>
<td align="center">限制变量的值就是该字面量的值</td>
</tr>
<tr>
<td align="center">any</td>
<td align="center">*</td>
<td align="center">任意类型</td>
</tr>
<tr>
<td align="center">unknown</td>
<td align="center">*</td>
<td align="center">类型安全的any</td>
</tr>
<tr>
<td align="center">void</td>
<td align="center">空值（undefined）</td>
<td align="center">没有值（或undefined）</td>
</tr>
<tr>
<td align="center">never</td>
<td align="center">没有值</td>
<td align="center">不能是任何值</td>
</tr>
<tr>
<td align="center">object</td>
<td align="center">{name:’孙悟空’}</td>
<td align="center">任意的JS对象</td>
</tr>
<tr>
<td align="center">array</td>
<td align="center">[1,2,3]</td>
<td align="center">任意JS数组</td>
</tr>
<tr>
<td align="center">tuple</td>
<td align="center">[4,5]</td>
<td align="center">元素，TS新增类型，固定长度数组</td>
</tr>
<tr>
<td align="center">enum</td>
<td align="center">enum{A, B}</td>
<td align="center">枚举，TS中新增类型</td>
</tr>
</tbody></table>
</li>
<li><p>number</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> decimal: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hex: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binary: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octal: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> big: bigint = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>boolean</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>string</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> color: <span class="built_in">string</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fullName: <span class="built_in">string</span> = <span class="string">`Bob Bobbington`</span>;</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;fullName&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>字面量</p>
<ul>
<li><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p>
</li>
<li><p>```typescript<br>let color: ‘red’ | ‘blue’ | ‘black’;<br>let num: 1 | 2 | 3 | 4 | 5;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- any</span><br><span class="line"></span><br><span class="line">  - 相当于关闭该变量的ts语法，开发时不建议使用</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    let d: any = 4;</span><br><span class="line">    d = &#x27;hello&#x27;;</span><br><span class="line">    d = true;</span><br><span class="line">    </span><br><span class="line">    // 声明变量如果不指定类型，则TS解析器会自动判断变量的类型为any （隐式的any）</span><br><span class="line">    let d;</span><br><span class="line">    d = 10;</span><br><span class="line">    d = &#x27;hello&#x27;;</span><br><span class="line">    d = true;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>unknown</p>
<ul>
<li><p>区别any</p>
<ul>
<li>any，可以赋值给任意变量</li>
<li>unknown类型的变量，不能直接赋值给其他变量</li>
</ul>
</li>
<li><p>```typescript<br>let notSure: unknown = 4;<br>notSure = ‘hello’;<br>// unknown 实际上就是一个类型安全的any</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- void</span><br><span class="line"></span><br><span class="line">  ```typescript</span><br><span class="line">  let unusable: void = undefined;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>never</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>object（没啥用）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: <span class="built_in">object</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.&#123;&#125; 用来指定对象中可以包含哪些属性// 语法：&#123;属性名:属性值,属性名:属性值&#125;// 在属性名后边加上?，表示属性是可选的let b: &#123;name: string, age?: number&#125;;b = &#123;name: &#x27;孙悟空&#x27;, age: 18&#125;;// 2.[propName: string]: any 表示任意类型的属性let c: &#123;name: string, [propName: string]: any&#125;;c = &#123;name: &#x27;猪八戒&#x27;, age: 18, gender: &#x27;男&#x27;&#125;;/**  3.设置函数结构的类型声明：*       语法：(形参:类型, 形参:类型 ...) =&gt; 返回值* */let d: (a: number ,b: number)=&gt;number;let d = function (n1: string, n2: string): number&#123;   return 10;&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>array</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**   数组的类型声明：*       类型[]*       Array&lt;类型&gt;* */</span><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="comment">// string[] 表示字符串数组let e: string[];// number[] 表示数值数值let f: number[];let g: Array&lt;number&gt;;</span></span><br></pre></td></tr></table></figure></li>
<li><p>tuple</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**   元组，元组就是固定长度的数组*       语法：[类型, 类型, 类型]* */</span><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];x = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>]; </span><br></pre></td></tr></table></figure></li>
<li><p>enum</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//enum 枚举enum Color &#123;  Red,  Green,  Blue,&#125;let c: Color = Color.Green;enum Color &#123;  Red = 1,  Green,  Blue,&#125;let c: Color = Color.Green;enum Color &#123;  Red = 1,  Green = 2,  Blue = 4,&#125;let c: Color = Color.Green;// 补充let j: &#123; name: string &#125; &amp; &#123; age: number &#125;;// j = &#123;name: &#x27;孙悟空&#x27;, age: 18&#125;;</span></span><br></pre></td></tr></table></figure></li>
<li><p>类型别名</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> myType = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;<span class="keyword">let</span> k: myType;<span class="keyword">let</span> l: myType;<span class="keyword">let</span> m: myType;k = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>类型断言</p>
<ul>
<li><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，<strong>可以通过类型断言来告诉编译器变量的类型</strong>，类比强制转换。</p>
</li>
<li><p>断言有两种形式：</p>
<ul>
<li><p>第一种</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: unknown = <span class="string">&quot;this is a string&quot;</span>;<span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure></li>
<li><p>第二种</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: unknown = <span class="string">&quot;this is a string&quot;</span>;<span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3、编译选项"><a href="#3、编译选项" class="headerlink" title="3、编译选项"></a>3、编译选项</h2><h3 id="自动编译文件"><a href="#自动编译文件" class="headerlink" title="自动编译文件"></a>自动编译文件</h3><ul>
<li><p>编译文件时，使用 <code>-w</code> 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p>
</li>
<li><p>示例：</p>
<ul>
<li><p>```powershell<br>tsc xxx.ts -w</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 自动编译整个项目</span><br><span class="line"></span><br><span class="line">- 如果直接使用**tsc**指令，则可以自动将当前项目下的所有ts文件编译为js文件。</span><br><span class="line">- 但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 **tsconfig.json**</span><br><span class="line">- tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译</span><br><span class="line"></span><br><span class="line">#### 配置选项</span><br><span class="line"></span><br><span class="line">##### **include**</span><br><span class="line"></span><br><span class="line">- 定义希望被编译文件所在的目录</span><br><span class="line"></span><br><span class="line">- 默认值：[&quot;\*\*/\*&quot;]</span><br><span class="line"></span><br><span class="line">- 示例：</span><br><span class="line"></span><br><span class="line">  ```json</span><br><span class="line">  &quot;include&quot;:[    &quot;src/**/*&quot;,     &quot;tests/**/*&quot;]// &quot;**&quot;表示任意目录，“*”表示任意文件</span><br></pre></td></tr></table></figure></li>
<li><p>上述示例中，所有src目录和tests目录下的文件都会被编译</p>
</li>
</ul>
</li>
</ul>
<h5 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a><strong>exclude</strong></h5><ul>
<li><p>定义需要排除在外的目录</p>
</li>
<li><p>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</p>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;./src/hello/**/*&quot;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>上述示例中，src下hello目录下的文件都不会被编译</li>
</ul>
</li>
</ul>
<h5 id="extends"><a href="#extends" class="headerlink" title="extends"></a><strong>extends</strong></h5><ul>
<li><p>定义被继承的配置文件</p>
</li>
<li><p>示例：</p>
<ul>
<li><p>```json<br>“extends”: “./configs/base”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 上述示例中，当前配置文件中会自动包含config目录下**base.json**中的所有配置信息</span><br><span class="line"></span><br><span class="line">##### **files**</span><br><span class="line"></span><br><span class="line">- 指定被编译文件的列表，只有需要编译的文件少时才会用到</span><br><span class="line"></span><br><span class="line">- 示例：</span><br><span class="line"></span><br><span class="line">  - ```json</span><br><span class="line">    &quot;files&quot;: [    &quot;core.ts&quot;,    &quot;sys.ts&quot;,    &quot;types.ts&quot;,    &quot;scanner.ts&quot;,    &quot;parser.ts&quot;,    &quot;utilities.ts&quot;,    &quot;binder.ts&quot;,    &quot;checker.ts&quot;,    &quot;tsc.ts&quot;  ]</span><br></pre></td></tr></table></figure></li>
<li><p>列表中的文件都会被TS编译器所编译</p>
</li>
</ul>
</li>
</ul>
<h5 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a><strong>compilerOptions</strong></h5><ul>
<li><p><strong>编译选项</strong>是配置文件中非常重要也比较复杂的配置选项</p>
</li>
<li><p>在compilerOptions中包含多个子选项，用来完成对编译的配置</p>
</li>
</ul>
<h6 id="项目选项"><a href="#项目选项" class="headerlink" title="项目选项"></a>项目选项</h6><ul>
<li><p><strong>target</strong></p>
<ul>
<li><p>设置ts代码编译的目标版本</p>
</li>
<li><p>可选值：</p>
<ul>
<li>ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li>
</ul>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES6&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>lib</strong></p>
<ul>
<li><p>指定代码运行时所包含的库（宿主环境）</p>
</li>
<li><p>可选值：</p>
<ul>
<li>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</li>
</ul>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES6&quot;</span>,    <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;ES6&quot;</span>, <span class="string">&quot;DOM&quot;</span>],    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span>,    <span class="attr">&quot;outFile&quot;</span>: <span class="string">&quot;dist/aa.js&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>module</strong></p>
<ul>
<li><p>设置编译后代码使用的模块化系统</p>
</li>
<li><p>可选值：</p>
<ul>
<li>CommonJS、UMD、AMD、System、ES2020、ESNext、None</li>
</ul>
</li>
<li><p>示例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;CommonJS&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>outDir</strong></p>
<ul>
<li><p>编译后文件的所在目录</p>
</li>
<li><p>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>设置后编译后的js文件将会生成到dist目录</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>outFile</strong></p>
<ul>
<li><p>将所有的文件编译为一个js文件</p>
</li>
<li><p>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</p>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="attr">&quot;outFile&quot;</span>: <span class="string">&quot;dist/app.js&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>rootDir</strong></p>
<ul>
<li><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</p>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="attr">&quot;rootDir&quot;</span>: <span class="string">&quot;./src&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>allowJs</strong></p>
<ul>
<li>是否对js文件编译，默认是false</li>
</ul>
</li>
<li><p><strong>checkJs</strong></p>
<ul>
<li><p>是否检查js代码是否符合语法规范，默认是false</p>
</li>
<li><p>示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;    <span class="attr">&quot;allowJs&quot;</span>: <span class="literal">true</span>,    <span class="attr">&quot;checkJs&quot;</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>removeComments</strong></p>
<ul>
<li>是否删除注释</li>
<li>默认值：false</li>
</ul>
</li>
<li><p><strong>noEmit</strong></p>
<ul>
<li>不生成编译后的文件</li>
<li>默认值：false</li>
</ul>
</li>
<li><p><strong>sourceMap</strong></p>
<ul>
<li>是否生成sourceMap</li>
<li>默认值：false</li>
</ul>
</li>
<li><p><strong>noEmitOnError</strong></p>
<ul>
<li>当有错误时不生成编译后的文件</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>严格检查</strong></p>
</li>
<li><p>strict</p>
<ul>
<li>启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查</li>
<li>alwaysStrict<ul>
<li>总是以严格模式对代码进行编译</li>
</ul>
</li>
<li>noImplicitAny<ul>
<li>禁止隐式的any类型</li>
</ul>
</li>
<li>noImplicitThis<ul>
<li>禁止类型不明确的this</li>
</ul>
</li>
<li>strictBindCallApply<ul>
<li>严格检查bind、call和apply的参数列表</li>
</ul>
</li>
<li>strictFunctionTypes<ul>
<li>严格检查函数的类型</li>
</ul>
</li>
<li>strictNullChecks<ul>
<li>严格的空值检查</li>
</ul>
</li>
<li>strictPropertyInitialization<ul>
<li>严格检查属性是否初始化</li>
</ul>
</li>
</ul>
</li>
<li><p>额外检查</p>
<ul>
<li>noFallthroughCasesInSwitch<ul>
<li>检查switch语句包含正确的break</li>
</ul>
</li>
<li>noImplicitReturns<ul>
<li>检查函数没有隐式的返回值</li>
</ul>
</li>
<li>noUnusedLocals<ul>
<li>检查未使用的局部变量</li>
</ul>
</li>
<li>noUnusedParameters<ul>
<li>检查未使用的参数</li>
</ul>
</li>
</ul>
</li>
<li><p>高级</p>
<ul>
<li>allowUnreachableCode<ul>
<li>检查不可达代码</li>
<li>可选值：<ul>
<li>true，忽略不可达代码</li>
<li>false，不可达代码将引起错误</li>
</ul>
</li>
</ul>
</li>
<li>noEmitOnError<ul>
<li>有错误的情况下不进行编译</li>
<li>默认值：false</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4、webpack"><a href="#4、webpack" class="headerlink" title="4、webpack"></a>4、webpack</h2><ul>
<li><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。</p>
</li>
<li><p>步骤：</p>
<ol>
<li><p>初始化项目</p>
<ul>
<li>进入项目根目录，执行命令 <code> npm init -y</code><ul>
<li>主要作用：创建package.json文件</li>
</ul>
</li>
</ul>
</li>
<li><p>下载构建工具</p>
<ul>
<li><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code><ul>
<li>共安装了7个包<ul>
<li><strong>webpack</strong><ul>
<li>构建工具webpack</li>
</ul>
</li>
<li><strong>webpack-cli</strong><ul>
<li>webpack的命令行工具</li>
</ul>
</li>
<li><strong>webpack-dev-server</strong><ul>
<li>webpack的开发服务器</li>
</ul>
</li>
<li><strong>typescript</strong><ul>
<li>ts编译器</li>
</ul>
</li>
<li><strong>ts-loader</strong><ul>
<li>ts加载器，用于在webpack中编译ts文件</li>
</ul>
</li>
<li><strong>html-webpack-plugin</strong><ul>
<li>webpack中html插件，用来自动创建html文件</li>
</ul>
</li>
<li><strong>clean-webpack-plugin</strong><ul>
<li>webpack中的清除插件，每次构建都会先清除目录</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>根目录下创建webpack的配置文件webpack.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);<span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);<span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);<span class="built_in">module</span>.exports = &#123;    <span class="attr">optimization</span>:&#123;        <span class="attr">minimize</span>: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选    &#125;,    entry: &quot;./src/index.ts&quot;,        devtool: &quot;inline-source-map&quot;,        devServer: &#123;        contentBase: &#x27;./dist&#x27;    &#125;,    output: &#123;        path: path.resolve(__dirname, &quot;dist&quot;),        filename: &quot;bundle.js&quot;,        environment: &#123;            arrowFunction: false // 关闭webpack的箭头函数，可选        &#125;    &#125;,	// 用来设置引用模块    resolve: &#123;        extensions: [&quot;.ts&quot;, &quot;.js&quot;]    &#125;,        module: &#123;        // 指定要加载的规则        rules: [            &#123;                // test指定的是规则生效的文件                test: /\.ts$/,                // 配置babel                use: &#123;                   loader: &quot;ts-loader&quot;                     &#125;,                // 要排除的文件                exclude: /node_modules/            &#125;        ]    &#125;,    plugins: [        new CleanWebpackPlugin(),        new HtmlWebpackPlugin(&#123;            title:&#x27;TS测试&#x27;        &#125;),    ]&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>根目录下创建tsconfig.json，配置可以根据自己需要</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;    <span class="attr">&quot;compilerOptions&quot;</span>: &#123;        <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,        <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,        <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>    &#125;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改package.json添加如下配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;  ...略...  <span class="attr">&quot;scripts&quot;</span>: &#123;    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --open chrome.exe&quot;</span>  &#125;,  ...略...&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译，或者执行<code>npm start</code>来启动开发服务器</p>
</li>
</ol>
</li>
</ul>
<h2 id="5、Babel"><a href="#5、Babel" class="headerlink" title="5、Babel"></a>5、Babel</h2><ul>
<li><p>经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来<strong>对代码进行转换</strong>以使其可以<strong>兼容到更多的浏览器</strong>，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。</p>
<ol>
<li><p>安装依赖包：</p>
<ul>
<li><code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code></li>
<li>共安装了4个包，分别是：<ul>
<li>@babel/core<ul>
<li>babel的核心工具</li>
</ul>
</li>
<li>@babel/preset-env<ul>
<li>babel的预定义环境</li>
</ul>
</li>
<li>@babel-loader<ul>
<li>babel在webpack中的加载器</li>
</ul>
</li>
<li>core-js<ul>
<li>core-js用来使老版本的浏览器支持新版ES语法</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>修改webpack.config.js配置文件</p>
<ul>
<li>```javascript<br>…略…module: {  rules: [    {      test: /.ts$/,      use: [        {           loader: “babel-loader”,// 指定加载器            // 设置babel           options:{               // 设置预定义环境             presets: [                   [                  “@babel/preset-env”,// 指定环境的插件                    // 配置信息                     {                        “targets”:{                            // 要兼容的目标浏览器                           “chrome”: “58”,                              “ie”: “11”                          },                          “corejs”:”3”,// 指定corejs版本                          “useBuiltIns”: “usage” // 按需加载                       }                ]             ]            }          },          {             loader: “ts-loader”,           }          ],            exclude: /node_modules/        }    ]}…略…<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">     - 如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第二章：面向对象</span><br><span class="line"></span><br><span class="line">面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是**程序之中所有的操作都需要通过对象来完成**。</span><br><span class="line"></span><br><span class="line">- 举例来说：</span><br><span class="line">  - 操作浏览器要使用window对象</span><br><span class="line">  - 操作网页要使用document对象</span><br><span class="line">  - 操作控制台要使用console对象</span><br><span class="line"></span><br><span class="line">一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是**对现实事物的抽象**，**抽象**的反义词是**具体**，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</span><br><span class="line"></span><br><span class="line">在程序中所有的对象都被分成了两个部分：**数据**和**功能**，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，**在程序中一切皆是对象。**</span><br><span class="line"></span><br><span class="line">## 1、类（class）</span><br><span class="line"></span><br><span class="line">要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何**创建对象**。要创建对象，必须要**先定义类**，所谓的类可以理解为**对象的模型**，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</span><br><span class="line"></span><br><span class="line">- 定义类：</span><br><span class="line"></span><br><span class="line">  ```typescript</span><br><span class="line">  class 类名 &#123;	属性名: 类型;		constructor(参数: 类型)&#123;		this.属性名 = 参数;	&#125;		方法名()&#123;		....	&#125;&#125;/*    *   1.直接定义的属性是实例属性，需要通过对象的实例去访问：    *       const per = new Person();    *       per.name    *    *   2.使用static开头的属性是静态属性（类属性），可以直接通过类去访问    *       Person.age    *    *   readonly开头的属性表示一个只读的属性无法修改    * */</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>两种属性：</p>
<ul>
<li><strong>实例属性</strong><ul>
<li>直接定义的属性是实例属性，需要通过对象的实例去访问</li>
</ul>
</li>
<li><strong>静态属性</strong><ul>
<li>使用static开头的属性是静态属性（类属性），可以直接通过类去访问</li>
</ul>
</li>
</ul>
</li>
<li><p>构造函数constructor：</p>
<ul>
<li>```typescript<br>constructor(name: string, age: number) {    // 在实例方法中，this就表示当前当前的实例    // 在构造函数中当前对象就是当前新建的那个对象    // 可以通过this向新建的对象中添加属性    this.name = name;    this.age = age;}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 示例：</span><br><span class="line"></span><br><span class="line">  ```typescript</span><br><span class="line">  class Person&#123;    name: string;    age: number;    constructor(name: string, age: number)&#123;        this.name = name;        this.age = age;    &#125;    sayHello()&#123;        console.log(`大家好，我是$&#123;this.name&#125;`);    &#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用类：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);p.sayHello();</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2、面向对象的特点"><a href="#2、面向对象的特点" class="headerlink" title="2、面向对象的特点"></a>2、面向对象的特点</h2><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul>
<li><p>对象实质上就是属性和方法的容器，它的主要作用就是<strong>存储属性和方法</strong>，这就是所谓的封装</p>
</li>
<li><p>默认情况下，对象的属性是可以任意的修改的，为了<strong>确保数据的安全性</strong>，在TS中可以对属性的权限进行设置</p>
</li>
<li><p>只读属性（readonly）：</p>
<ul>
<li>如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</li>
</ul>
</li>
<li><p>TS中<strong>属性</strong>具有三种<strong>修饰符</strong>：</p>
<ul>
<li><strong>public</strong>（默认值），可以在类、子类和对象中修改</li>
<li><strong>protected</strong> ，可以在类、子类中修改</li>
<li><strong>private</strong> ，可以在类中修改</li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li><p>public</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;    <span class="keyword">public</span> name: <span class="built_in">string</span>; <span class="comment">// 写或什么都不写都是public    public age: number;    constructor(name: string, age: number)&#123;        this.name = name; // 可以在类中修改        this.age = age;    &#125;    sayHello()&#123;        console.log(`大家好，我是$&#123;this.name&#125;`);    &#125;&#125;class Employee extends Person&#123;    constructor(name: string, age: number)&#123;        super(name, age);        this.name = name; //子类中可以修改    &#125;&#125;const p = new Person(&#x27;孙悟空&#x27;, 18);p.name = &#x27;猪八戒&#x27;;// 可以通过对象修改</span></span><br></pre></td></tr></table></figure></li>
<li><p>protected</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;    <span class="keyword">protected</span> name: <span class="built_in">string</span>;    <span class="keyword">protected</span> age: <span class="built_in">number</span>;    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;        <span class="built_in">this</span>.name = name; <span class="comment">// 可以修改        this.age = age;    &#125;    sayHello()&#123;        console.log(`大家好，我是$&#123;this.name&#125;`);    &#125;&#125;class Employee extends Person&#123;    constructor(name: string, age: number)&#123;        super(name, age);        this.name = name; //子类中可以修改    &#125;&#125;const p = new Person(&#x27;孙悟空&#x27;, 18);p.name = &#x27;猪八戒&#x27;;// 不能修改</span></span><br></pre></td></tr></table></figure></li>
<li><p>private</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;    <span class="keyword">private</span> name: <span class="built_in">string</span>;    <span class="keyword">private</span> age: <span class="built_in">number</span>;    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;        <span class="built_in">this</span>.name = name; <span class="comment">// 可以修改        this.age = age;    &#125;    sayHello()&#123;        console.log(`大家好，我是$&#123;this.name&#125;`);    &#125;&#125;class Employee extends Person&#123;    constructor(name: string, age: number)&#123;        super(name, age);        this.name = name; //子类中不能修改    &#125;&#125;const p = new Person(&#x27;孙悟空&#x27;, 18);p.name = &#x27;猪八戒&#x27;;// 不能修改</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>属性存取器</p>
<ul>
<li><p>对于一些不希望被任意修改的属性，可以将其设置为private</p>
</li>
<li><p>直接将其设置为private将导致无法再通过对象修改其中的属性</p>
</li>
<li><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p>
</li>
<li><p>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</p>
</li>
<li><p>示例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;    <span class="keyword">private</span> _name: <span class="built_in">string</span>;    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span>&#123;        <span class="built_in">this</span>._name = name;    &#125;    <span class="keyword">get</span> <span class="title">name</span>()&#123;        <span class="keyword">return</span> <span class="built_in">this</span>._name;    &#125;    <span class="keyword">set</span> <span class="title">name</span>(<span class="params">name: <span class="built_in">string</span></span>)&#123;        <span class="built_in">this</span>._name = name;    &#125;&#125;<span class="keyword">const</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;孙悟空&#x27;</span>);<span class="built_in">console</span>.log(p1.name); <span class="comment">// 通过getter读取name属性p1.name = &#x27;猪八戒&#x27;; // 通过setter修改name属性</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;    <span class="comment">// 定义一个表示人的类    class Person&#123;        // TS可以在属性前添加属性的修饰符        /*        *   public 修饰的属性可以在任意位置访问（修改） 默认值        *   private 私有属性，私有属性只能在类内部进行访问（修改）        *       - 通过在类中添加方法使得私有属性可以被外部访问        *   protected 受包含的属性，只能在当前类和当前类的子类中访问（修改）        *        * */        private _name: string;        private _age: number;        constructor(name: string, age: number) &#123;            this._name = name;            this._age = age;        &#125;        /*        *   getter方法用来读取属性        *   setter方法用来设置属性        *       - 它们被称为属性的存取器        * */        // 定义方法，用来获取name属性        // getName()&#123;        //     return this._name;        // &#125;        //        // // 定义方法，用来设置name属性        // setName(value: string)&#123;        //     this._name = value;        // &#125;        //        // getAge()&#123;        //     return this._age;        // &#125;        //        // setAge(value: number)&#123;        //     // 判断年龄是否合法        //     if(value &gt;= 0)&#123;        //         this._age = value;        //     &#125;        // &#125;        // TS中设置getter方法的方式        get name()&#123;            // console.log(&#x27;get name()执行了！！&#x27;);            return this._name;        &#125;        set name(value)&#123;            this._name = value;        &#125;        get age()&#123;            return this._age;        &#125;        set age(value)&#123;            if(value &gt;= 0)&#123;                this._age = value            &#125;        &#125;    &#125;    const per = new Person(&#x27;孙悟空&#x27;, 18);    /*    * 现在属性是在对象中设置的，属性可以任意的被修改,    *   属性可以任意被修改将会导致对象中的数据变得非常不安全    * */    // per.setName(&#x27;猪八戒&#x27;);    // per.setAge(-33);    per.name = &#x27;猪八戒&#x27;;    per.age = -33;    // console.log(per);    class A&#123;        protected num: number;        constructor(num: number) &#123;            this.num = num;        &#125;    &#125;    class B extends A&#123;        test()&#123;            console.log(this.num);        &#125;    &#125;    const b = new B(123);    // b.num = 33;   /* class C&#123;        name: string;        age: number        // 可以直接将属性定义在构造函数中        constructor(name: string, age: number) &#123;            this.name = name;             this.age = age;        &#125;    &#125;*/    class C&#123;        // 可以直接将属性定义在构造函数中        constructor(public name: string, public age: number) &#123;        &#125;    &#125;    const c = new C(&#x27;xxx&#x27;, 111);    console.log(c);&#125;)();</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>静态属性</p>
<ul>
<li><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</p>
</li>
<li><p>静态属性（方法）使用static开头</p>
</li>
<li><p>示例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tools</span></span>&#123;    <span class="keyword">static</span> PI = <span class="number">3.1415926</span>;        <span class="keyword">static</span> <span class="function"><span class="title">sum</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>)</span>&#123;        <span class="keyword">return</span> num1 + num2    &#125;&#125;<span class="built_in">console</span>.log(Tools.PI);<span class="built_in">console</span>.log(Tools.sum(<span class="number">123</span>, <span class="number">456</span>));</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>this</p>
<ul>
<li>在类中，使用this表示当前对象</li>
</ul>
</li>
</ul>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul>
<li><p>继承时面向对象中的又一个特性</p>
</li>
<li><p>通过继承可以将其他类中的属性和方法引入到当前类中</p>
<ul>
<li><p>示例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;    name: <span class="built_in">string</span>;    age: <span class="built_in">number</span>;    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span>&#123;        <span class="built_in">this</span>.name = name;        <span class="built_in">this</span>.age = age;    &#125;&#125;<span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);    &#125;&#125;<span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);dog.bark();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>通过继承可以在不修改类的情况下完成对类的扩展</p>
</li>
</ul>
<h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><ul>
<li><p>发生继承时，如果子类中的方法会<strong>替换</strong>掉父类中的同名方法，这就称为方法的重写</p>
</li>
<li><p>示例：</p>
<ul>
<li>```typescript<br>class Animal{    name: string;    age: number;    constructor(name: string, age: number){        this.name = name;        this.age = age;    }    run(){        console.log(<code>父类中的run方法！</code>);    }}class Dog extends Animal{    bark(){        console.log(<code>$&#123;this.name&#125;在汪汪叫！</code>);    }    run(){        console.log(<code>子类中的run方法，会重写父类中的run方法！</code>);    }}const dog = new Dog(‘旺财’, 4);dog.bark();<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **super**</span><br><span class="line"></span><br><span class="line">  - 在类的方法中 **super就表示当前类的父类**</span><br><span class="line">  - 如果在子类中写了构造函数，在子类构造函数中必须对父类的构造函数进行调用</span><br><span class="line"></span><br><span class="line">  ```typescript</span><br><span class="line">  (function () &#123;    class Animal &#123;        name: string;        constructor(name: string) &#123;            this.name = name;        &#125;        sayHello() &#123;            console.log(&#x27;动物在叫~&#x27;);        &#125;    &#125;    class Dog extends Animal&#123;        age: number;        // 相当于重写了        constructor(name: string, age: number) &#123;            // 如果在子类中写了构造函数，在子类构造函数中必须对父类的构造函数进行调用            super(name); // 调用父类的构造函数            this.age = age;        &#125;        sayHello() &#123;            // 在类的方法中 super就表示当前类的父类            //super.sayHello();            console.log(&#x27;汪汪汪汪！&#x27;);        &#125;    &#125;    const dog = new Dog(&#x27;旺财&#x27;, 3);    dog.sayHello();&#125;)();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>抽象类</strong>（abstract class）</p>
<ul>
<li><p>抽象类是专门用来被其他类所继承的类，它<strong>只能被其他类所继承不能用来创建实例</strong></p>
</li>
<li><p>```typescript<br>abstract class Animal{    abstract run(): void;    bark(){        console.log(‘动物在叫<del>‘);    }}class Dog extends Animals{    run(){        console.log(‘狗在跑</del>‘);    }}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 使用**abstract**开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现（必须重写）</span><br><span class="line"></span><br><span class="line">  ```typescript</span><br><span class="line">  abstract sayHello():void;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="3、接口（Interface）"><a href="#3、接口（Interface）" class="headerlink" title="3、接口（Interface）"></a>3、接口（Interface）</h2><ul>
<li><p>接口的作用<strong>类似于抽象类</strong>，不同点在于接口中的所有方法和属性都是<strong>没有实值</strong>的，换句话说接口中的所有方法<strong>都是抽象方法</strong>。</p>
</li>
<li><p>接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。</p>
</li>
<li><p>示例（检查对象类型）：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person&#123;    name: <span class="built_in">string</span>;    sayHello():<span class="built_in">void</span>;&#125;<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">per: Person</span>)</span>&#123;    per.sayHello();&#125;fn(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>, <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;<span class="built_in">console</span>.log(<span class="string">`Hello, 我是 <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)&#125;&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</p>
</li>
<li><p>实现接口就是使类满足接口的要求</p>
</li>
<li><p>示例（实现）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person&#123;    name: <span class="built_in">string</span>;    sayHello():<span class="built_in">void</span>;&#125;<span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="title">implements</span> <span class="title">Person</span></span>&#123;    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>)</span> &#123;    &#125;    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;        <span class="built_in">console</span>.log(<span class="string">&#x27;大家好，我是&#x27;</span>+<span class="built_in">this</span>.name);    &#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4、泛型（Generic）"><a href="#4、泛型（Generic）" class="headerlink" title="4、泛型（Generic）"></a>4、泛型（Generic）</h2><ul>
<li><p>概念</p>
<ul>
<li>不确定某个类型</li>
<li><strong>自定义表示某个类型。</strong></li>
</ul>
</li>
<li><p>使用条件</p>
<ul>
<li>在定义函数或是类时，如果遇到类型不明确就可以使用泛型</li>
<li>定义一个函数或类时，有些情况下<strong>无法确定其中要使用的具体类型</strong>（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。</li>
</ul>
</li>
<li><p>举个例子：</p>
<ul>
<li><p>```typescript<br>function test(arg: any): any{    return arg;}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值**均使用了any**，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</span><br><span class="line"></span><br><span class="line">- 使用泛型：</span><br><span class="line"></span><br><span class="line">- ```typescript</span><br><span class="line">  function test&lt;T&gt;(arg: T): T&#123;	return arg;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>这里的<code>&lt;T&gt;</code>就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就<strong>表示某个类型。</strong></p>
</li>
<li><p>那么如何使用上边的函数呢？</p>
<ul>
<li><p>方式一（直接使用）：</p>
<ul>
<li><p>```typescript<br>test(10)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</span><br><span class="line"></span><br><span class="line">- 方式二（指定类型）：</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    test&lt;number&gt;(10)</span><br></pre></td></tr></table></figure></li>
<li><p>也可以在函数后手动指定泛型</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p>
<ul>
<li>```typescript<br>function test&lt;T, K&gt;(a: T, b: K): K{    return b;}test&lt;number, string&gt;(10, “hello”);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 使用泛型时，完全可以将泛型当成是一个普通的类去使用</span><br><span class="line"></span><br><span class="line">- 类中同样可以使用泛型：</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    class MyClass&lt;T&gt;&#123;    prop: T;    constructor(prop: T)&#123;        this.prop = prop;    &#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>除此之外，也可以对泛型的范围进行约束</p>
<ul>
<li><pre><code class="typescript">interface MyInter&#123;    length: number;&#125;function test&lt;T extends MyInter&gt;(arg: T): number&#123;    return arg.length;&#125;
</code></pre>
</li>
<li><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>【Web安全扫盲】01-概览、常用渗透工具、信息收集</title>
    <url>/WebSecurity01/</url>
    <content><![CDATA[<p>要点：web渗透、信息收集、靶场搭建、XSS、SQL注入、CSRF漏洞、SSRF漏洞、XXE漏洞、反序列化漏洞、文件上传漏洞、命令与代码注入、逻辑漏洞、内网渗透、研发安全。</p>
<span id="more"></span>

<h3 id="一、概览"><a href="#一、概览" class="headerlink" title="一、概览"></a>一、概览</h3><h4 id="1-1-Why-Web-安全？"><a href="#1-1-Why-Web-安全？" class="headerlink" title="1.1 Why Web 安全？"></a>1.1 Why Web 安全？</h4><p>随着时代的发展，如今无论是国家还是企业，都十分重视网络安全，各种相关的岗位也随之出现。在拉勾网上搜“Web 安全”就能找到相关的岗位。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0C/Cip5yF_ZrimAa4buAAGDyX9tPm4751.png" alt="招聘信息来源拉勾网" data-nodeid="6336">



<p>根据 HackerOne 的报告数据（下图），71％ 的安全问题都出现在网站上，其次是一些 API 接口，这些接口可能是 Web 的，也有可能是二进制软件的；再往下就是 iOS 与 Android 应用了。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/C7/Cip5yF_a9iqAG5wmAAEiks_na48436.png" alt="HackerOne 的报告数据" data-nodeid="6340">

<p>可以说，网站安全攻防，也就是我们俗称的 Web 安全，占比通常达到了 80％以上。<strong>Web 安全是最受外部黑客关注的目标，也是企业应该重点防御的对象</strong></p>
<p>尽管 Web 安全如此重要，但我在面试一些渗透测试岗位的<strong>求职者</strong>时，发现多数人要么<strong>只懂得利用，不懂得防御</strong>，要么就是<strong data-nodeid="6365">缺乏实战能力</strong>。</p>
<p>企业你是想让你来发现和解决安全问题的，如果不懂防御，又如何为企业提供相应的解决方案呢？更何况 Web 安全是一项注重实战的技能，如果缺乏实战能力，到了真被入侵的时候，根本就无法应对。</p>
<p>另外，学习 Web 安全相关的知识，不仅可以帮助你提升自己，还能赚取赏金。国内外企业都有自建安全响应中心，用于接收外部报告漏洞；然后，依据漏洞危害等级和质量给予相应的赏金或礼品，比如 TSRC（腾讯安全应急响应中心）、MSRC（微软安全响应中心）。此外也有一些知名的第三方漏洞奖励平台，比如 HackerOne，上面经常会公开一些漏洞案例，非常有学习价值。</p>
<h4 id="1-2-学习模块"><a href="#1-2-学习模块" class="headerlink" title="1.2 学习模块"></a>1.2 学习模块</h4><p>分成了 3 个模块</p>
<h5 id="模块一：Web-攻防基础"><a href="#模块一：Web-攻防基础" class="headerlink" title="模块一：Web 攻防基础"></a>模块一：Web 攻防基础</h5><p>这是正式开始前的准备工作，主要介绍了一些常用的工具，并带你<strong data-nodeid="6387">搭建靶场，避免非法测试他人网站</strong>。通过这一部分的学习，你可以掌握一些常用的渗透工具和信息收集的方法，帮助你提高测试效率和成功率；搭建靶场也能让你更好地理解漏洞的产生原理和利用，提高实战能力。</p>
<h5 id="模块二：漏洞攻防原理"><a href="#模块二：漏洞攻防原理" class="headerlink" title="模块二：漏洞攻防原理"></a>模块二：漏洞攻防原理</h5><p>作为这门课最硬核的部分，在模块一的基础上，补充了一些实用的工具和测试方法（例如 sqlmap），讲解了各种常见的 Web 漏洞攻防原理，教你进行安全测试，并通过靶场进行演练。通过这一部分的学习，你可以<strong>了解 XSS、SQL 注入、CSRF 等常见 Web 漏洞类型的攻击与防御方法</strong>。只有深入学习这些漏洞攻防技术，才能避免自己成为只会使用工具的“脚本小子”。</p>
<h5 id="模块三：-Web-安全建设"><a href="#模块三：-Web-安全建设" class="headerlink" title="模块三： Web 安全建设"></a>模块三： Web 安全建设</h5><p>这里介绍的是企业内部对于 Web 安全漏洞的防御方法。<strong>如何更系统、更全面、更早地检测、修复、拦截各种漏洞，防止企业产品遭受外部利用漏洞进行恶意攻击</strong>是这一模块的重点。业务开发过程中，避免安全漏洞的产生也是一个非常重要的流程。</p>
<h4 id="1-3-How-学习web渗透技术"><a href="#1-3-How-学习web渗透技术" class="headerlink" title="1.3 How 学习web渗透技术"></a>1.3 How 学习web渗透技术</h4><h5 id="Web-所涉及的内容"><a href="#Web-所涉及的内容" class="headerlink" title="Web 所涉及的内容"></a>Web 所涉及的内容</h5><p>一般来说，我们常说的 Web 是指网站，其本义是万维网。这个实际涵盖的内容就很多了，涉及<u>浏览器、服务器运行环境等常出现内存破坏漏洞的应用和系统</u>。但是在安全行业内，我们通常所说的 Web 安全，是指 Web 应用安全，即<u>网站安全，也包含仅提供后端 CGI 服务的应用（供移动 App 调用的，无直接的前端网页），可以简单地分为前端和后端</u>，如下图所示：</p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/39/CgqCHl_Zr5-ATUhRAAMpS6Rf1Ck851.png" alt="图片1.png" data-nodeid="9229">

<p>平常行业内所说的二进制安全，通常是指<u>内存破坏漏洞、逆向工程、病毒对抗</u>等涉及二进制数据分析的技术领域。虽然浏览器、Linux 系统等也是 Web 领域中的一个环节，但本课程不涉及二进制安全内容，仍以狭义上的网站安全为主要内容。<br>在学习 Web 安全的过程中，有 3 个阶段。</p>
<h4 id="1-4-三个阶段"><a href="#1-4-三个阶段" class="headerlink" title="1.4 三个阶段"></a>1.4 三个阶段</h4><h5 id="阶段一：前端知识学习"><a href="#阶段一：前端知识学习" class="headerlink" title="阶段一：前端知识学习"></a>阶段一：前端知识学习</h5><p>前端开发主要就是 HTML、CSS、JavaScript 这 3 门语言的学习。在学习前，建议先了解下 HTTP 相关的知识，掌握它的工作原理、请求方法、响应头、状态码、内容类型等等</p>
<p>学完之后，直接用 Chrome 浏览器的检查器（快捷键 F12 或 Ctrl+Shift+I）里的“Network”标签查看 HTTP 请求与响应包数据，如下图所示：</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0C/Cip5yF_Zr76AWiNtAAQSZ-8_J_I002.png" alt="Chrome 浏览器的 HTTP 请求与响应包数据g" data-nodeid="9247">

<h5 id="阶段二：后端知识学习"><a href="#阶段二：后端知识学习" class="headerlink" title="阶段二：后端知识学习"></a>阶段二：后端知识学习</h5><p>随着 Node.js 的崛起，很多后端也开始用前端语言 JavaScript 来开发后端功能。Node.js 基于 Chrome V8 提供的 JavaScript 运行环境，非常适合前端工程师作为进军后端开发的阶梯。关于 Node.js 教程的链接在文末的“其他资料”一节中已附上。<br>更为传统的后端开发经常是搭配 PHP+MySQL 数据库。以下是 2020 年 W3Tech 对当前 Web 开发技术的调查情况，其结果表明全球 78.8% 的网站使用 PHP 作为服务器后端开发语言。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0D/CgpVE1_Zr9CANWyzAAU-P_qrIcA458.png" alt="2020 年 W3Tech 对当前 Web 开发技术的调查情况" data-nodeid="9288">

<h5 id="阶段三：漏洞攻防学习"><a href="#阶段三：漏洞攻防学习" class="headerlink" title="阶段三：漏洞攻防学习"></a>阶段三：漏洞攻防学习</h5><p>Web 漏洞包含哪一些主流的漏洞类型，最佳的参考就是 OWASP Top 10，不过它在 2017 年之后就停止更新维护了。以下是当前的官方统计结果，按顺序排名。</p>
<ol>
<li><p><strong>注入</strong>：SQL、NoSQL 数据库注入，还有命令注入和 LDAP 注入等。</p>
</li>
<li><p><strong>失效的身份认证和会话管理</strong>：比如攻击者破解密码、窃取密钥、会话令牌或其他漏洞去冒充他人的身份。</p>
</li>
<li><p><strong>跨站脚本（XSS）</strong>：XSS 允许攻击者在受害者的浏览器上执行恶意脚本，从而劫持用户会话、钓鱼欺骗等等。</p>
</li>
<li><p><strong>失效的访问控制</strong>：比如越权访问其他用户的个人资料、查看敏感文件、篡改数据等。</p>
</li>
<li><p><strong>安全配置错误</strong>：比如服务器的不安全配置，导致敏感信息泄露。</p>
</li>
<li><p><strong>敏感信息泄露</strong>：比如账号密码未加密存储、敏感数据传输时未加密保护，最终造成数据泄露。</p>
</li>
<li><p><strong>攻击检测与防护不足</strong>：比如 WAF、主机入侵检测等防御系统部署不全，这块偏向漏洞防御本身。</p>
</li>
<li><p><strong>跨站请求伪造（CSRF）</strong>：攻击者诱使其他登录用户访问恶意站点，以冒用对方的身份执行一些敏感操作。</p>
</li>
<li><p><strong>使用含有已知漏洞的组件</strong>：比如一些第三方的开源库、框架等，尤其是已公开漏洞的旧版本，比如名燥一声的 Struts2 漏洞，因频繁出现漏洞被许多开发者弃用。</p>
</li>
<li><p><strong>未受有效保护的 API</strong>：比如浏览器和移动 App 中的 JavaScript API，常常因其提供的特殊功能未受有效保护而被滥用，造成不同等级的危害程度。</p>
</li>
</ol>
<blockquote>
<p>推荐书籍：《黑客攻防技术宝典：Web 实战篇》和《白帽子讲 Web 安全》</p>
</blockquote>
<h4 id="1-5-学习技巧"><a href="#1-5-学习技巧" class="headerlink" title="1.5 学习技巧"></a>1.5 学习技巧</h4><h5 id="面向岗位学习"><a href="#面向岗位学习" class="headerlink" title="面向岗位学习"></a>面向岗位学习</h5><img src="https://s0.lgstatic.com/i/image2/M01/02/0D/CgpVE1_Zr-WAMAhNAAFcqtWjIv0666.png" alt="招聘信息">

<p>关键在于“任职要求”，一般招聘信息里面都会有“职位描述”和“任职要求”或“岗位要求”的信息，“任职要求”里面与技术相关要求就是你要学习的方向。比如上图 360 的招聘信息，总结下技术要求就是：<strong>熟悉 Web 漏洞攻防、工具实战、开发能力</strong>。</p>
<h5 id="面向赏金学习"><a href="#面向赏金学习" class="headerlink" title="面向赏金学习"></a>面向赏金学习</h5><p>当前国内 SRC（安全响应中心）平台早已是企业标配，各家各户有能力的都在自建，没能力没条件的就寄托在第三方漏洞平台上。无论是自建的还是寄托在第三方漏洞平台上的，它们的目的只有一个，那就是收集自家产品漏洞，提高产品安全性，完善自身检测与防御系统，同时避免被公关炒作。<br>SRC 平台会给报告者提供奖品或现金奖励，因此长期吸引着大批白帽子为其测试网站。国外比较著名的漏洞奖励平台有 HackerOne，像微软 Google、Apple 也都有自己的漏洞奖励计划，但因后者都是美金奖励，在汇率的优势下，奖金换算成人民币，常常价值不低。这也是一些老白帽子更喜欢混迹于国外漏洞奖励平台的原因。<br><strong>Web 漏洞常常都能够直观地危害到网站的安全性</strong>。它们整体上相比二进制漏洞更容易被利用，危害也就更大。除了像微软、Google、Apple 这种集中在二进制漏洞为主的奖励计划，很多赏金其实都是分给了 Web 漏洞，比如 SRC、HackerOne。<br>你可以根据漏洞奖励计划中提供的网站范围，有针对性地进行安全测试，然后将发现的漏洞报给平台换取赏金。这种以赏金为驱动力的学习方式，对于在校生特别有诱惑力。他们可以通过赏金购买书籍、电子产品进一步学习，然后挖掘更多漏洞，赚取更多赏金，将学习转变为主动学习，构造出良性特征的学习动力。<br>采用面向赏金的学习方法，不仅可以提高自身的漏洞实战能力，而且还可以赚取赏金，何乐而不为？</p>
<h5 id="面向工具学习"><a href="#面向工具学习" class="headerlink" title="面向工具学习"></a>面向工具学习</h5><p>GitHub 上经常开源一些优秀的安全工具，在 Web 安全领域，以 sqlmap 最为著名。整个项目非常工程化，表现能力也非常优秀。它采用 Python 开发，通过阅读 sqlmap 源码，对研究 SQL 注入漏洞有很大的帮助。<br>其他的还有一些漏洞靶场，除了实战测试，也可以通过源码了解是什么样的代码导致的漏洞，避免自己在未来开发中遇到。<br>一些优秀的开源工具，常会提供一些不错的漏洞检测和利用的方向，及时掌握相关技术，有助于自身技术的与时俱进，避免落后于技术发展。</p>
<h5 id="面向漏洞学习"><a href="#面向漏洞学习" class="headerlink" title="面向漏洞学习"></a>面向漏洞学习</h5><p>在国外有词叫 Variant Analysis，直译过来叫“变异分析”，意思是通过历史漏洞学习和研究，从而挖掘出类似产品中更多相似的漏洞。尤其是同一款产品下，如果开发写出了一个漏洞，那么在其他地方出现同一类漏洞的概率就比较大。<br>乌云网已经成为历史，但其遗留下的漏洞案例是一笔不错的财富。网上也有人搭建了乌云镜像提供相关的漏洞、知识库的检索，你可以点击链接查看。<br>HackerOne 通常在漏洞修复后的 3 个月会公开漏洞细节，栏目名叫“Hacktivity”，它提供 RSS 订阅，可以非常方便地关注。</p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/2E/Ciqc1F_ZsIyAXEQjAANXYn70e8c897.png" alt="图片5.png" data-nodeid="9438">

<p>说到漏洞库就不得不提 Exploit-db，其中有着丰富的漏洞细节和利用代码。2014 年那时还是一个叫 milw00rm 的漏洞库为主流，milw00rm 不再维护后，所有漏洞信息都被并入了 Exploit-db。至今，Exploit-db 还在正常运营，其背后的团队正是打造了著名黑客系统 Kali 的 Offensive-Security 安全公司，是一家专门从事安全培训和渗透测试服务的提供商。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0C/Cip5yF_ZsJiAAv-dAASNGdT-lWY809.png" alt="Exploit-db" data-nodeid="9442">

<p>这种通过漏洞学习漏洞的方式，除了加深对漏洞的理解，还可以提高漏洞挖掘的产出，是一种十分有效地学习方式。</p>
<h5 id="面向大牛学习"><a href="#面向大牛学习" class="headerlink" title="面向大牛学习"></a>面向大牛学习</h5><p>在你感兴趣的安全领域里，通常都有一些大牛，你可以去收集他们发表的论文、文章、大会议题，关注他们的微博、公众号、Twitter、GitHub、博客等社交平台账号，去了解他们的技术成长路线。<br>这种学习方法，前期以模仿为主，参考他们的学习方法、技术文章，把握行业技术趋势；后期是在入门之后，有了一定的技术积累，就可以开始在前人的基础上自主研究技术、创新技术，这是比较难的一个阶段，但突破后，你在技术上将会有质的飞跃。</p>
<h5 id="关注安全动态"><a href="#关注安全动态" class="headerlink" title="关注安全动态"></a>关注安全动态</h5><p>技术发展非常迅速，一不留眼你就落后了，所以要避免闭门造车，比如诺基亚的塞班、微软的 Windows Mobile，现在都退出了历史舞台，如果你之前不关注这些，还在埋头研究它们的安全性，那就有点浪费时间了。<br>你可以关注一些技术资讯网站、公众号、Twitter、Github、博客、RSS 订阅集合，国内外安全大会（工业界顶会：BlackHat、Defcon、CanSecWest、OffensiveCon，学术界顶会：CCS、NDSS、Oakland S&amp;P、USENIX Security），以及 CTF 比赛等。这些都可以帮你了解安全动态的途径。<br>在文末的“网站推荐”中，我已经整理一份清单，建议你采用 RSS 订阅的方式关注，手机上装个 RSS 订阅客户端，比如 Inoreader、Feedly、深蓝阅读，一有更新就可以立马感知到，非常方便。</p>
<h4 id="1-6-学习资料清单"><a href="#1-6-学习资料清单" class="headerlink" title="1.6 学习资料清单"></a>1.6 学习资料清单</h4><h5 id="书籍清单"><a href="#书籍清单" class="headerlink" title="书籍清单"></a>书籍清单</h5><table>
<thead>
<tr>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>《JavaScript DOM 编程艺术》：<a href="https://item.jd.com/10603153.html">https://item.jd.com/10603153.html</a></td>
</tr>
<tr>
<td>《JavaScript 高级程序设计》：<a href="https://item.jd.com/12958580.html">https://item.jd.com/12958580.html</a></td>
</tr>
<tr>
<td>《PHP 和 MySQL Web 开发》：<a href="https://item.jd.com/10059047.html">https://item.jd.com/10059047.html</a></td>
</tr>
<tr>
<td>《黑客攻防技术宝典：Web 实战篇》：<a href="https://item.jd.com/11020022.html">https://item.jd.com/11020022.html</a></td>
</tr>
<tr>
<td>《白帽子讲 Web 安全》：<a href="https://item.jd.com/11483966.html">https://item.jd.com/11483966.html</a></td>
</tr>
<tr>
<td>《Web 安全测试》：<a href="https://item.jd.com/10021008335997.html">https://item.jd.com/10021008335997.html</a></td>
</tr>
<tr>
<td>《Web 前端黑客技术揭秘》：<a href="https://item.jd.com/11181832.html">https://item.jd.com/11181832.html</a></td>
</tr>
<tr>
<td>《SQL 注入攻击与防御》：<a href="https://item.jd.com/12369984.html">https://item.jd.com/12369984.html</a></td>
</tr>
<tr>
<td>网络安全从业者书单推荐：<a href="https://github.com/riusksk/secbook">https://github.com/riusksk/secbook</a></td>
</tr>
</tbody></table>
<h5 id="网站推荐"><a href="#网站推荐" class="headerlink" title="网站推荐"></a>网站推荐</h5><table>
<thead>
<tr>
<th>FreeBuf：<a href="https://www.freebuf.com/">https://www.freebuf.com</a></th>
</tr>
</thead>
<tbody><tr>
<td>安全客：<a href="https://www.anquanke.com/">https://www.anquanke.com</a></td>
</tr>
<tr>
<td>Seebug Paper：<a href="https://paper.seebug.org/">https://paper.seebug.org</a></td>
</tr>
<tr>
<td>安全 RSS 订阅：<a href="http://riusksk.me/media/riusksk_RSS_20190330.xml">http://riusksk.me/media/riusksk_RSS_20190330.xml</a></td>
</tr>
<tr>
<td>CTFTime Writeups：<a href="https://ctftime.org/writeups">https://ctftime.org/writeups</a></td>
</tr>
<tr>
<td>安全脉搏：<a href="https://www.secpulse.com/">https://www.secpulse.com</a></td>
</tr>
<tr>
<td>SecWiki：<a href="https://www.sec-wiki.com/">https://www.sec-wiki.com</a></td>
</tr>
<tr>
<td>玄武每日安全：<a href="https://sec.today/pulses">https://sec.today/pulses</a></td>
</tr>
<tr>
<td>学术论文检索：<a href="https://arxiv.org/search/cs">https://arxiv.org/search/cs</a></td>
</tr>
<tr>
<td>Exploit-db：<a href="https://www.exploit-db.com/">https://www.exploit-db.com</a></td>
</tr>
<tr>
<td>Github：<a href="https://github.com/">https://github.com</a></td>
</tr>
<tr>
<td>信息安全知识库：<a href="https://vipread.com/">https://vipread.com</a></td>
</tr>
<tr>
<td>先知社区：<a href="https://xz.aliyun.com/">https://xz.aliyun.com</a></td>
</tr>
</tbody></table>
<h3 id="二、常用渗透测试工具"><a href="#二、常用渗透测试工具" class="headerlink" title="二、常用渗透测试工具"></a>二、常用渗透测试工具</h3><h4 id="Burp-Suite"><a href="#Burp-Suite" class="headerlink" title="Burp Suite"></a>Burp Suite</h4><p>Burp Suite：集成化的 Web 应用测试工具</p>
<p>使用 Burp Suite 前需要配置浏览器代理，这样才能将 HTTP/HTTPS 请求转发到 Burp Suite 上进行分析与测试</p>
<p>在 Chrome 的设置中搜索“代理”会让你选择“打开您计算机的代理设置”，如下图所示：</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0D/Cip5yF_ZsVeACMEcAAIScM5BkEE861.png" alt="Chrome 代理设置" data-nodeid="1758">

<p>打开之后你就可以设置 HTTP/HTTPS 代理为 Burp Suite 的对应端口，默认为 127.0.0.1:8080。下面两张图分别是系统和 Burp Suite 上的代理设置页面：</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0D/Cip5yF_ZsWiAZ9iGAACtiDp2x7A093.png" alt="系统代理设置页面" data-nodeid="1762">

<img src="https://s0.lgstatic.com/i/image/M00/8A/2F/Ciqc1F_ZsXSAHU-wAAA9V42FWPM054.png" alt="Burp Suite 代理设置页面" data-nodeid="1765">

<p>如果每次使用都要进行这样的配置代理其实还挺麻烦的，毕竟有时也得正常地使用浏览器上网。我在这里推荐个小技巧：你可以使用 Chrome 上的插件“<strong data-nodeid="1771">Proxy SwitchyOmega</strong>”来快速切换代理，如果你用的是 FireFox，那可以使用 FoxyProxy 插件。</p>
<p>在 Chrome 应用商店中搜索“Proxy SwitchyOmega”并安装它，然后像下图这样配置：</p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/3A/CgqCHl_ZsX2ANrS4AAEIEgIoD68852.png" alt="Proxy SwitchyOmega 配置" data-nodeid="1775">

<p>配置完成后你就可以在 Chrome 浏览器右上角的插件栏中点击“Proxy SwitchyOmega”插件图标，选择上面创建的“Burp Suite”情景模式开启代理，若想关闭代理直接选择“系统代理”即可。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0D/Cip5yF_ZsZWAONnTAALKGIyBcc4584.png" alt="Proxy SwitchyOmega 快速代理展示" data-nodeid="1779">

<p>下图是代理成功后，Burp Suite 拦截到流量的效果图：</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0E/Cip5yF_ZsaKAVGGeAAJbFdx82DU937.png" alt="Burp Suite 代理成功" data-nodeid="1783">

<p>其他更详细的 Burp Suite 功能，你可以参考<a href="https://portswigger.net/burp/documentation/contents" data-nodeid="1787">Burp Suite Document</a>和<a href="https://t0data.gitbooks.io/burpsuite/content/" data-nodeid="1791">Burp Suite 实战指南</a>这两份资料学习，此处不再展开。</p>
<h4 id="Acunetix-WVS"><a href="#Acunetix-WVS" class="headerlink" title="Acunetix WVS"></a>Acunetix WVS</h4><p>Acunetix WVS（Web Vulnerability Scanner）是 Web 漏洞扫描器。</p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/3B/CgqCHl_ZscGAeTzSAAIginYu50Q791.png" alt="Acunetix WVS" data-nodeid="1797">

<p><strong data-nodeid="1802">WVS 支持登录态扫描，可以登录账号访问需要权限的页面，从而爬取更多 URL，提高漏洞发现率</strong>。这个功能很重要，有些网页的功能全都要求登录，如果没有这一步设置，你什么也扫不到。不过现在很多扫描器也支持登录态扫描了。</p>
<h4 id="Xray"><a href="#Xray" class="headerlink" title="Xray"></a>Xray</h4><p>Xray：Web 漏洞扫描器</p>
<p>随着 WVS 的没落，国内的长亭科技出了一款叫作 Xray 的漏洞扫描器，现在国内不少白帽子开始使用它。他们会自己开发一些自动化工具去爬虫，然后导入地址到 WVS 和 Xray 扫描（参考资料：<a href="https://github.com/ox01024/Xray_and_crwlergo_in_server" data-nodeid="1821">Xray_and_crwlergo_in_serve</a>、<a href="https://github.com/timwhitez/crawlergo_x_XRAY" data-nodeid="1829">crawlergo_x_XRAY</a>），在扫到漏洞后，微信会自动通知。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0E/Cip5yF_Zsc6AaAIpAADD4PGQU64235.png" alt="Xray">

<p><strong data-nodeid="1839">Xray 的准确率要比 WVS 高，但漏洞发现率不是很高</strong>，经常扫完后报告是空的，而且 Xray 的扫描速度很慢，还有一定优化的空间。</p>
<h4 id="Goby"><a href="#Goby" class="headerlink" title="Goby"></a>Goby</h4><p>Goby：基于网络空间测绘的漏洞扫描器。</p>
<p>Goby 是一款国内新出的安全扫描器，它基于网络空间测绘技术进行资产收集，也就是先通过对目标网络的 IT 资产进行规则分析，建立知识库，在发生安全事件时就能直接用于应急响应，这项功能比较适合企业内部。Goby 属于免费的工具，且跨平台支持 Windows、Linux 和 macOS，界面不错，还提供了多个皮肤。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0E/Cip5yF_ZsduADxmJAAQFbh7gdPE888.png" alt="Goby" data-nodeid="1844">

<p><strong data-nodeid="1853">Goby 有个比较实用的功能，那就是支持自定义规则的漏洞扫描框架</strong>。它本身也会收集一些产品的 PoC（概念证明，常被用于验证是否存在漏洞，如下图所示），同时在外部曝光或自主挖掘到漏洞时，借助该框架添加规则，可以快速去扫描相关资产是否存在漏洞，<strong data-nodeid="1854">对于企业应急和个人刷 SRC 平台漏洞是一个神器</strong>。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0E/Cip5yF_ZseWAdqgJAAGCxqkdD48418.png" alt="Goby 收集的 PoC" data-nodeid="1857">

<p>Goby 的使用可以参考<a href="https://cn.gobies.org/docs.html?v=1" data-nodeid="1861">官方文档</a>中的内容。</p>
<h4 id="SQLMap"><a href="#SQLMap" class="headerlink" title="SQLMap"></a>SQLMap</h4><p>SQLMap：SQL 注入检测与利用</p>
<p>SQLMap 无疑是 SQL 注入工具中的王者。在 SQL 注入漏洞检测与利用上，SQLMap 提供了非常全面的功能，哪怕是一些漏洞无法检测到，许多白帽子仍习惯在上面做二次开发，或者利用 tamper 脚本来扩展。</p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/3B/CgqCHl_ZsfSAc3xqAAlj1Wt1MjA788.png" alt="SQLMap">

<p>后面将会使用此工具学习。详细的使用方法可以从<a href="http://sqlmap.org/" data-nodeid="1875">官网</a>了解。</p>
<h4 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h4><p>Nmap：网络扫描与主机检测。</p>
<p>Nmap 有界面版本和命令行版本</p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/3B/CgqCHl_ZsgKARmaVAAIlxL9iyXY234.png" alt="Nmap 界面版本" data-nodeid="1881">

<img src="https://s0.lgstatic.com/i/image/M00/8A/3B/CgqCHl_ZshKAJg3QAAgAnpqJC2Y626.png" alt="Nmap 命令行版本" data-nodeid="1884">

<p>很多人只知道 Nmap 可用于端口扫描和主机服务识别，但实际上它远不止如此。Nmap 提供的丰富脚本，大大扩展了它的功能，它可以探测弱口令，甚至是漏洞扫描。Nmap 的功能十分强大，需要你慢慢探索。</p>
<p>关于 Nmap 详细的使用说明，你可以参考<a href="https://nmap.org/book/toc.html" data-nodeid="1889">官方文档</a></p>
<p>在“信息收集”一节中，会使用nmap。</p>
<h4 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h4><p>Postman：模拟发包工具</p>
<p>虽然 Burp Suite 功能强大，但有时会觉得开启代理麻烦，对于能在浏览器上直接完成的，一般都不开 Burp Suite 操作。</p>
<p>Chrome 上自带的开发者工具可以直接抓包查看：通过在网页右击，选择“检查”即可打开；然后切换到“Network”标签页，操作网页后即可获取到网络请求包，但它不支持拦截修改请求包。</p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/30/Ciqc1F_ZshyALB-qAAGumg9CRg0315.png" alt="Chrome 抓包" data-nodeid="1896">



<p><strong data-nodeid="1901">如果你想直接构造请求去发包，或者用来测试一些网络接口的调用，那使用 Postman 再适合不过了</strong>。安装完 Postman 后，通过 Chrome 标签栏的“应用”即可打开 Postman。</p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/30/Ciqc1F_ZsiaAL7vJAADOYBSf2OE763.png" alt="Chrome “应用”标签" data-nodeid="1904">

<img src="https://s0.lgstatic.com/i/image/M00/8A/30/Ciqc1F_ZsjGAYczeAAXvGuO1mGE366.png" alt="Postman" data-nodeid="1907">

<p>Postman 也支持网络拦截来修改数据包重发，但需要另外安装个插件“Postman Interceptor”，我感觉没有 Burp Suite 来得好用和强大，因此我很少用它。关于 Postman 更多的使用方法，可以参考<a href="https://learning.postman.com/docs/getting-started/introduction/" data-nodeid="1911">官方文档</a></p>
<p>对于 Postman 与 Burp Suite，<strong data-nodeid="1926">轻量操作可以选择 Postman</strong>，比如单纯发包测试接口，又懒得配置代理的操作；<strong data-nodeid="1927">如果你需要更多安全测试方面的功能</strong>，比如改包、批量发包测试用来暴力猜解密码或遍历信息，<strong data-nodeid="1928">那么 Burp Suite 无疑是最佳的选择</strong>。</p>
<h4 id="HackBar"><a href="#HackBar" class="headerlink" title="HackBar"></a>HackBar</h4><p>HackBar：安全测试插件</p>
<p>HackBar 是一款非常经典的 Web 安全测试插件，最早出现在 FireFox 浏览器中，后来也被移植到了 Chrome。它可以用来构造 GET/POST 请求，自带一些编码解码工具，以及 XSS 和 SQL 注入常用测试用例，能为你在实际测试中提供很大的便利。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0E/Cip5yF_ZskSAMLsBAAFVySz_ctA678.png" alt="HackBar" data-nodeid="1933">

<p>HackBar 的功能跟 Postman 有些类似，都是用来模拟发包的工具，<strong data-nodeid="1939">但 HackBar 显然是为专业的安全人员开发的，而 Postman 虽然有很多开发在用，但常被用来测试一些网络 API 接口</strong>。</p>
<p>HackBar 使用非常简单，正如它简洁的界面一样，所有的功能都可以很快上手，用几次基本就熟练了。无论是 HackBar 还是 Postman，你都可以试一下，选择自己顺手的工具即可。不管什么工具，能够帮助你挖到漏洞的都是好工具。</p>
<h4 id="NC（NetCat）"><a href="#NC（NetCat）" class="headerlink" title="NC（NetCat）"></a>NC（NetCat）</h4><p>NC（NetCat）：网络瑞士军刀</p>
<p>简单易用，功能强大，在行业内非常流行。在实际渗透测试中，常用的有两个功能：</p>
<ul>
<li>监听端口以等待后门回连</li>
<li><strong data-nodeid="1952">发包测试</strong>，有时请求包内容较多，可以放在一个文件里面直接提交（不局限 http/https 这种请求），其他任意端口都支持，所以它要比 postman 和 hackbar 这些发包工具的应用范围要广。</li>
</ul>
<p>除此之外 NC 还有其他功能，比如端口扫描、作为代理来端口转发数据，甚至可以在两台主机之间搭建起聊天室。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0F/CgpVE1_ZsmOAJ1y7AADZnpy2HvE117.png" alt="NC" data-nodeid="1956">

<p>更多 NC 命令参数的使用，可以通过 man nc 命令来查看。</p>
<h4 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h4><p>Metasploit：渗透测试平台</p>
<p>Metasploit 在渗透测试中经常被使用到，它不是一个单纯的工具，而是一个集成各种渗透测试工具的平台，上面有很多漏洞利用工具，还有免杀处理、后门生成与留存、远程控制等很多强大的功能。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0F/CgpVE1_ZsnGAdzeMAADU1Q17564791.png" alt="Metasploit" data-nodeid="1962">

<p><strong data-nodeid="1968">Metasploit 在主机渗透，甚至是当前移动手机上的渗透测试都可以使用</strong>，所以这里我非常推荐你去好好研究一下 Metasploit 平台的应用。</p>
<p>国内外已经出版了很多本关于 Metasploit 的书籍，你也可以直接阅读<a href="https://docs.rapid7.com/metasploit/" data-nodeid="1972">官方文档</a>。</p>
<h3 id="三、信息收集"><a href="#三、信息收集" class="headerlink" title="三、信息收集"></a>三、信息收集</h3><h4 id="3-1-信息收集分类"><a href="#3-1-信息收集分类" class="headerlink" title="3.1 信息收集分类"></a>3.1 信息收集分类</h4><p>根据收集方式的不同，我们可以将信息收集分为两类：主动收集和被动收集。</p>
<ul>
<li>主动收集是指<strong>通过扫描确认目标的操作系统和网络服务</strong>，为后续发现漏洞提供信息帮助，但它可能引起目标的注意，或被记录下扫描行为。一些服务指纹检测、网站爬虫都是主动收集的方式，它们直接向目标发起请求，在有防火墙的情况下，可能会被拦截告警。</li>
<li>被动收集是指在<strong>不接触目标的情况下，通过互联网搜索来收集目标遗留在网络中的信息</strong>。这样可以避免引起目标的警觉。网上很多人说的<strong>公开来源情报</strong>（Open-Source Intelligence，OSINT，简称“开源情报”）正是需要被动收集的信息，它是从公共资源中收集到的。</li>
</ul>
<p>综上可以看出，主动收集与被动收集的主要区别就在于收集信息的过程中是否需要接触目标。在实际渗透测试过程中，一般两种方法都会用上，以收集更多有价值的信息</p>
<p>在收集信息时，无论是主动还是被动，都建议使用小号，尤其是在一些社交平台上的信息收集，小号可以避免行为暴露。</p>
<h4 id="3-2-信息收集实践"><a href="#3-2-信息收集实践" class="headerlink" title="3.2 信息收集实践"></a>3.2 信息收集实践</h4><p>收集子域名和 IP 常常是信息收集的开端，这对你摸清整个目标的资产起着很关键的作用，它们直接决定了渗透目标范围的大小。当然，有时候渗透测试任务直接限死子域名，这种情况下这一步就可以直接省略了。</p>
<p>在 GitHub 上有一个开源项目，叫 <a href="https://github.com/arkadiyt/bounty-targets-data">bounty-targets-data</a>，它会收集一些漏洞奖励计划中的域名范围，并在持续更新，目前已经收集了 2000 多个域名。对于喜欢刷漏洞奖励平台的同学，bounty-targets-data 确实是一份不错资源，它可以开启循环扫描，不停地去扫这些有奖励计划的域名，运气好的话，可以挖到漏洞拿奖金。</p>
<p>关于收集子域名的技术原理在《<a href="https://security.tencent.com/index.php/blog/msg/161">红蓝对抗之域名搜集方法总结</a>》中有详细的介绍，主要包括证书透明度、DNS 查询、Whois 查询、备案网站、搜索引擎、暴力猜测等多种方法实现。</p>
<p>收集子域名可以通过一些在线网站或者本地工具来收集，常用的工具或站点有 OneForAll、subDomainsBrute、subfinder、ESD、Amass、DNSDumpster 和 Subdomain Finder。</p>
<h5 id="OneForAll"><a href="#OneForAll" class="headerlink" title="OneForAll"></a><a href="https://github.com/shmilylty/OneForAll">OneForAll</a></h5><p>在功能上非常集全，使用字典爆破、证书透明度、常规检查（域传递、sitemap 文件、robts 文件、内容安全策略 csp 等）、网络爬虫、DNS 数据集、DNS 查询、威胁情报平台、搜索引擎等多种方式，也支持多种文件格式导出。OneForAll 收集到的有效域名很多，但经常会有误报，速度也相对比较慢。</p>
<p>使用示例如下：</p>
<p><code>python3 oneforall.py --target lagou.com run</code></p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0F/CgpVE1_Zs8GACtELAAPLVt3Jvzo273.png" alt="OneForAll" data-nodeid="15548">

<h5 id="subDomainsBrute"><a href="#subDomainsBrute" class="headerlink" title="subDomainsBrute"></a>subDomainsBrute</h5><p>采用暴力猜解域名的方式，速度快、准确度高。但由于是字典猜解方式，仍会存在一定的漏报。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0E/Cip5yF_Zs8mAA8mZAABmufeGtgo263.png" alt="subDomainsBrute 运行效果图" data-nodeid="15555">



<img src="https://s0.lgstatic.com/i/image/M00/8A/3B/CgqCHl_Zs9CAAyGNAAGHTTFk6E8801.png" alt="subDomainsBrute 爬取的域名结果图" data-nodeid="15558">

<p>同一域名有时会有指向多个 IP 地址情况，因为企业可能采用 CDN 内容分发网络，就近选择网络最好的节点服务器响应用户。因此，有时同一台机器访问同一个域名时，会访问到不同的 IP，比如 weixin.lagou.com 就是如此。</p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/30/Ciqc1F_Zs9iAPsGyAAEeKOg3y5k105.png" alt="同一个域名的不同 IP" data-nodeid="15562">



<p>subDomainsBrute 也会将同一域名指向的多个 IP 一并收集起来，但如果超过 10 个 IP 就会放弃收集。</p>
<p>使用示例如下：<br><code>python3 subDomainsBrute.py lagou.com</code></p>
<h5 id="subfinder"><a href="#subfinder" class="headerlink" title="subfinder"></a>subfinder</h5><p>subfinder 的扫描速度很快，它支持很多第三方 API 接口（需要配置），同时支持多种输出格式，但 subfinder 没有字典爆破域名的功能。</p>
<p>使用示例如下：<br><code>subfinder -d lagou.com</code></p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/30/Ciqc1F_Zs-yAEoFuAADD99-z4Ik735.png" alt="subfinder" data-nodeid="15572">

<h5 id="ESD"><a href="#ESD" class="headerlink" title="ESD"></a>ESD</h5><p>ESD支持域名爆破、DNS 解析、域传递、搜索引擎、证书透明度等多种搜索方式，还支持 zoomeye、censys、fofa、shodan 等网络空间搜索引擎的接口结果收集，这个需要在配置文件中设置 key 或者账密才能使用。</p>
<p>使用示例如下：<br><code>esd -d lagou.com</code></p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/30/Ciqc1F_Zs_iABcOrAALV9jkN3Zo313.png" alt="Drawing 5.png" data-nodeid="15581">

<h5 id="Amass"><a href="#Amass" class="headerlink" title="Amass"></a>Amass</h5><p>Amass是一款 OWASP 出口的资产搜索工具，除了常规的域名收集方式，它还支持搜索结果可视化，并能从很多网站和 API 收集子域名。另外，它提供了一套类似 Nmap 的脚本引擎，支持用户自定义数据源以扩展搜索范围。它的扫描速度非常慢，但能够收集到非常多的子域名信息。</p>
<p>以 lagou.com 为例，它共收集到了 40769 个子域。这数据相当多了，不过里面有不少是跳转到主页 lagou.com 的，实际没有单独的子域网站，即不同域名指向同一台服务器，或者是直接 302 跳转到主页的情况。这些子域在网站扫描时可以考虑去重，避免重复扫描。</p>
<p>使用示例如下：</p>
<p><code>amass enum -o out.txt -d lagou.com</code></p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/3C/CgqCHl_ZtAWATELmAAGlhU6Ab50316.png" alt="Drawing 6.png" data-nodeid="15590">

<h5 id="DNSDumpster"><a href="#DNSDumpster" class="headerlink" title="DNSDumpster"></a>DNSDumpster</h5><p>DNSDumpster可以在线搜索子域名以及相应的 IP 地址，提供 xlsx 文件导出，以及整个域名映射关系图、IP 分布地图等信息，在展示和准确度上还是不错的。它的搜索速度也很快，但就是子域收集相对少很多。</p>
<img src="https://s0.lgstatic.com/i/image/M00/8A/3C/CgqCHl_ZtA2AdSg9AAJyoGGL9kE009.png" alt="Drawing 7.png" data-nodeid="15597">

<h5 id="Subdomain-Finder"><a href="#Subdomain-Finder" class="headerlink" title="Subdomain Finder"></a>Subdomain Finder</h5><p>Subdomain Finder支持在线搜索子域名以及相应的 IP 地址。它的扫描速度很快，若没有显示 IP 则代表域名没有绑定有效的网络服务器，或者无法访问该域名。在界面上，它直接提供“Check Status”功能来检测网站的访问状态。该网站上还提供有“Private scan”功能，可以防止扫描时被记录。但它的不足之处在于，扫描结果无法直接导出文件到本地。</p>
<img src="https://s0.lgstatic.com/i/image2/M01/02/0E/Cip5yF_ZtBWAJtG0AAIX71NtOjI255.png" alt="Drawing 8.png" data-nodeid="15604">



<h4 id="3-3-端口服务检测"><a href="#3-3-端口服务检测" class="headerlink" title="3.3 端口服务检测"></a>3.3 端口服务检测</h4><p>在上一讲常用的渗透测试工具中介绍了 Nmap，用它来扫描端口服务就足够了。那我们为什么要做端口服务探测呢？</p>
<p>近期 FBI 发布紧急警告称，SonarQube 商业化源码审计系统被利用默认弱密码窃取政府内部一些产品源代码。</p>
<p>安装 SonarQube 时会默认开启 9000 端口，默认的管理员账号密码均为 admin。攻击者在网站上扫描开放 9000 端口的服务器，若发现是 SonarQube 就可以尝试用 admin 登录，如果能登录就可以窃取到上面的产品源码了。这是扫描端口服务非常典型的应用场景。</p>
<p>再比如端口 3389 用于远程桌面连接，如果发现了，也可以尝试用弱密码登录，或者利用一些远程桌面漏洞去测试。</p>
<p>针对开放端口和服务识别的方式，在渗透测试过程可以有针对性地采取不同的测试方法，虽然简单，但非常有效。</p>
<p>下面以探测拉勾网的端口服务为例，使用 Nmap 去探测：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Nmap -A lagou.com</span></span><br><span class="line">Starting Nmap 7.91 ( https://Nmap.org ) at 2020-11-15 12:55 CST</span><br><span class="line">Nmap scan report for lagou.com (117.50.36.103)</span><br><span class="line">Host is up (0.037s latency).</span><br><span class="line">Other addresses for lagou.com (not scanned): 117.50.39.99 106.75.118.232</span><br><span class="line">Not shown: 993 closed ports</span><br><span class="line">PORT     STATE    SERVICE        VERSION</span><br><span class="line">80/tcp   open     http           OpenResty web app server</span><br><span class="line">|_http-server-header: openresty</span><br><span class="line">|_http-title: Did not follow redirect to https://www.lagou.com/</span><br><span class="line">135/tcp  filtered msrpc</span><br><span class="line">139/tcp  filtered netbios-ssn</span><br><span class="line">443/tcp  open     ssl/http       OpenResty web app server</span><br><span class="line">|_http-server-header: openresty</span><br><span class="line">|_http-title: Did not follow redirect to https://www.lagou.com/</span><br><span class="line"></span><br><span class="line">| ssl-cert: Subject: commonName=*.lagou.com/organizationName=\xE5\x8C\x97\xE4\xBA\xAC\xE6\x8B\x89\xE5\x8B\xBE\xE7\xBD\x91\xE7\xBB\x9C\xE6\x8A\x80\xE6\x9C\xAF\xE6\x9C\x89\xE9\x99\x90\xE5\x85\xAC\xE5\x8F\xB8/stateOrProvinceName=\xE5\x8C\x97\xE4\xBA\xAC/countryName=CN</span><br><span class="line">| Subject Alternative Name: DNS:*.lagou.com, DNS:lagou.com</span><br><span class="line">| Not valid before: 2019-04-01T08:51:44</span><br><span class="line">|_Not valid after:  2021-05-19T12:00:00</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">| tls-alpn: </span><br><span class="line">|   h2</span><br><span class="line">|_  http/1.1</span><br><span class="line">| tls-nextprotoneg: </span><br><span class="line">|   h2</span><br><span class="line">|_  http/1.1</span><br><span class="line">445/tcp  filtered microsoft-ds</span><br><span class="line">593/tcp  filtered http-rpc-epmap</span><br><span class="line">4444/tcp filtered krb524</span><br><span class="line">Service detection performed. Please report any incorrect results at https://Nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 24.95 seconds</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-A 参数开启端口扫描、系统检测、版本检测、脚本扫描及路由追踪，是一个比较常用的参数。</p>
</blockquote>
<p>从扫描结果可以看到，lagou.com 开放端口：80、135、139、443、445、593、4444 以及对应的服务名称。</p>
<h4 id="3-4-网站指纹识别"><a href="#3-4-网站指纹识别" class="headerlink" title="3.4 网站指纹识别"></a>3.4 网站指纹识别</h4><p>网站指纹是 Web 服务组件在开发时留下的类型、版本等标记信息，包括 Web 服务器指纹、Web 运用指纹及前端框架指纹等。</p>
<p>除了前面用 Nmap 扫描端口和服务的方法，我们还可以通过前端网页和返回一些 HTTP 头信息来判断网站使用的哪些开发框架、服务器、系统，在渗透测试时也可以提供有针对性的测试思路。</p>
<p>推荐 Chrome 插件<strong>Wappalyzer</strong>。在你打开网站后，点击插件，按钮就会弹出如下类似信息，网站的指纹信息一目了然。</p>
<p>还有一个在线检测网站也支持指纹检测：<a href="https://scan.top15.cn/web/">https://scan.top15.cn/web/</a></p>
<p>其他检测指纹的工具还有 WhatWeb、WPScan、JoomScan 等，可以自行搜索试用。</p>
<h4 id="3-5-旁站与-C-段查询"><a href="#3-5-旁站与-C-段查询" class="headerlink" title="3.5 旁站与 C 段查询"></a>3.5 旁站与 C 段查询</h4><p>有时测试的网站非常坚固，找不到任何漏洞，那我们就可以尝试<strong>对“旁站”进行渗透测试</strong>。旁站即同一服务器上的其他域名网站，如果你能攻下该旁站，就有机会间接拿到目标网站的权限。</p>
<p>还有另一种方法就是<strong>查询 C 段 IP</strong>，即同一内网段的服务器。比如 lagou.com 的 IP 为 106.75.118.232，那它的 C 段 IP 为 106.75.118.1~106.75.118.255，通过攻下同一 C 段的服务器，再间接渗透到目标服务器。</p>
<p>无论是旁站还是 C 段渗透方式，都是尝试从目标网站的旁路途径去间接渗透目标。在这里我推荐几个在线查询旁站和 C 段的网站，同时提供一些指纹检测信息。</p>
<h5 id="https-www-webscan-cc"><a href="#https-www-webscan-cc" class="headerlink" title="https://www.webscan.cc/"></a><a href="https://www.webscan.cc/">https://www.webscan.cc/</a></h5><img src="https://s0.lgstatic.com/i/image2/M01/02/10/CgpVE1_ZtGKACONzAAJroYitakc640.png" alt="The Web of WebScan" data-nodeid="15677">



<h5 id="https-chapangzhan-com"><a href="#https-chapangzhan-com" class="headerlink" title="https://chapangzhan.com/"></a><a href="https://chapangzhan.com/">https://chapangzhan.com/</a></h5><img src="https://s0.lgstatic.com/i/image2/M01/02/0F/Cip5yF_ZtGmAb6vpAAEgG3hQbFE603.png" alt="Drawing 13.png" data-nodeid="15684">



<h4 id="3-6-WAF-探测"><a href="#3-6-WAF-探测" class="headerlink" title="3.6 WAF 探测"></a>3.6 WAF 探测</h4><p>当网站开启 WAF（<strong>Web 防火墙</strong>）时，很多测试请求都会被拦截，导致无法正常扫描。此时就要分析 WAF 找到绕过的方法，否则很难挖到漏洞。在不知道的情况下，还以为真的没有漏洞，其实有时只是被 WAF 拦截了而已。不过就算挖到了漏洞，利用起来也有一定的门槛。</p>
<p>因此，在测试前，若发现发包经常测试失败的话，除非网络不通，否则都建议先探测下 WAF。如果存在 WAF 就尝试寻找绕过的方法，再改造测试用例进行重试。</p>
<p>上一讲中介绍的 SQLMap 就支持 WAF 检测，上文介绍的 TScan 也支持，不过有时会误报。这里我主要介绍一下 SQLMap 检测 WAF 的方法，使用命令如下：<br><code>python sqlmap.py -u &quot;http://www.lagou.com&quot; --identify-waf --batch</code></p>
<p>上述代码中，–identify-waf 参数开启 WAF 检测，–batch 参数不询问用户输入，按默认执行。</p>
<p>SQLMap 既支持常见 WAF 的检测，也支持自己写脚本扩展检测能力。</p>
<h4 id="3-7-敏感信息收集"><a href="#3-7-敏感信息收集" class="headerlink" title="3.7 敏感信息收集"></a>3.7 敏感信息收集</h4><p>2019 年 4 月发生了一起大疆前员工泄密源码的事件，该名员工将大疆公司的在用产品源码开放到 GitHub 上，其中还包含云服务器上登录密钥，导致他人可以登录服务器查看上面存在的各种用户数据，最后被判刑。</p>
<p>从这件事也可以看到在网络上泄露的一些敏感信息，有时会直接导致服务器被入侵，公司相关的知识技术产权被窃取，造成实际的经济财产损失。</p>
<p>因此，在授权的渗透测试过程中，我们要多方收集与目标相关的信息，包括 Google、GitHub、社交平台等多方渠道。我曾多次利用 GitHub 找到一些账号密码或密钥，从而获得授权测试的网站的最高权限，收集 GitHub 相关的敏感信息如下：</p>
<ul>
<li>Gitrob，<a href="https://github.com/michenriksen/gitrob%EF%BC%9B">https://github.com/michenriksen/gitrob；</a></li>
<li>码小六，<a href="https://github.com/4x99/code6%EF%BC%9B">https://github.com/4x99/code6；</a></li>
<li>GitMonitor，<a href="https://github.com/Talkaboutcybersecurity/GitMonitor%E3%80%82">https://github.com/Talkaboutcybersecurity/GitMonitor。</a></li>
</ul>
<p>根据收集到的相关信息，我们还可以制作字典用来猜解一些相关账号和密码，此类的相关工具有：</p>
<ul>
<li>Wordhound，<a href="https://github.com/kurobeats/wordhound%EF%BC%9B">https://github.com/kurobeats/wordhound；</a></li>
<li>BruteScrape，<a href="https://github.com/cheetz/brutescrape%E3%80%82">https://github.com/cheetz/brutescrape。</a></li>
</ul>
<p>推荐几款综合能力较好的信息收集工具。</p>
<ul>
<li><a href="https://github.com/lanmaster53/recon-ng">Recon-NG</a> 是一款被动信息收集工具，它可以通过搜索获取 IP 地址、地理位置、用户、邮件地址、密码泄露或者其他敏感信息，最终生成一份完整报告。</li>
</ul>
<img src="https://s0.lgstatic.com/i/image/M00/8A/31/Ciqc1F_ZtI6AbSuGAAFRQ7AvPZU584.png" alt="Drawing 15.png" data-nodeid="15735">

<ul>
<li><a href="https://github.com/kennbroorg/iKy">iKy</a>能够从 Twitter、GitHub、Skype、Linkedin、Instagram 等社交平台上收集信息，但需要提前设置各平台上的 API KEY，可以输入一个邮箱地址去搜索其上述平台上的关联信息，最后会以可视化效果展示出来，如下图所示。</li>
</ul>
<img src="https://s0.lgstatic.com/i/image/M00/8A/3C/CgqCHl_ZtJuAMTSAAGHC1Ng-II8825.png" alt="Drawing 16.png" data-nodeid="15742">

<ul>
<li><a href="https://github.com/leebaird/discover">discover</a>综合使用了很多工具，包括 dnsrecon、goofile、whois、recon-ng、dnssy\Nikto 等，它能够收集邮箱地址、雇员名字、主机信息、域名、IP 等一系列信息，最后提供 html 报告。</li>
</ul>
<p>信息收集不局限于上面举例的这些，有些你通过 Google 搜索到的文档、图片、敏感文件和目录等都可以。在后面的渗透测试过程中，说不定它们就能派上用场了。</p>
<p><strong>收集的信息不怕多，就怕不全。</strong></p>
<h4 id="3-8-总结"><a href="#3-8-总结" class="headerlink" title="3.8 总结"></a>3.8 总结</h4><p>包括域名和 IP、端口服务、网站指纹、旁站和 C 段、WAF、敏感信息等信息的收集。但信息收集不应局限于此，你可以根据渗透测试的需要，对扩展收集信息的范围，灵活变通。</p>
<p>收集信息之所以如此关键，是因为它能曝光出更多的攻击面，有助于我们寻找到目标的短板，这常常决定渗透测试的成败。</p>
<p>前面讲的域名收集方法中介绍了不少工具，但扫出来的域名该如何批量检测是否可访问呢？手工显然是不合理的，毕竟数量通常都很大。因此，我们需要自己动手写个脚本。</p>
<p>你可以尝试写一个看看，比如用 Python 的 requests 模块。但你要注意一下，有些域名只允许 https 或 http 的方式连接，需要把这些因素考虑进去。如果域名较多，你还要考虑下多线程并发提高检测速度，同时还要做好域名的去重。</p>
<h3 id="四、网络安全法"><a href="#四、网络安全法" class="headerlink" title="四、网络安全法"></a>四、网络安全法</h3><p>2017 年 6 月 1 日发布的《中华人民共和国网络安全法》，对一些网络犯罪行为有了更明确的规定，这里我主要讲下涉及个人的相关规定，其对应的法律条文摘抄如下：</p>
<blockquote>
<p>第十二条　任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。<br>第二十七条　任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。<br>第四十四条　任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。<br>第四十六条　任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。<br>第四十八条　任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。<br>第七十六条　本法下列用语的含义：<br>（五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。</p>
</blockquote>
<p>息息相关的就是第 27 条规定，希望牢记：<strong>主动或协助他人入侵、提供黑客工具、发送恶意程序等行为都属于违法行为</strong>。</p>
<h4 id="刑法"><a href="#刑法" class="headerlink" title="刑法"></a>刑法</h4><p>《刑法》第 285 条和第 286 条中，分别规定了非法入侵计算机信息系统罪和破坏计算机信息系统罪：</p>
<blockquote>
<p>第二百八十五条　违反国家规定，侵入国家事务、国防建设、尖端科学技术领域的计算机信息系统的，处三年以下有期徒刑或者拘役。<br>第二百八十六条　违反国家规定，对计算机信息系统功能进行删除、修改、增加、干扰，造成计算机信息系统不能正常运行，后果严重的，处五年以下有期徒刑或者拘役；后果特别严重的，处五年以上有期徒刑。<br>违反国家规定，对计算机信息系统中存储、处理或者传输的数据和应用程序进行删除、修改、增加的操作，后果严重的，依照前款的规定处罚。<br>故意制作、传播计算机病毒等破坏性程序，影响计算机系统正常运行，后果严重的，依照第一款的规定处罚。</p>
</blockquote>
<p>最高人民法院最高人民检察院也对此作出了相关的解释，视具有以下情形之一的，就会被认定为“情节严重”：</p>
<blockquote>
<p>（一）获取支付结算、证券交易、期货交易等网络金融服务的身份认证信息十组以上的；<br>（二）获取第（一）项以外的身份认证信息五百组以上的；<br>（三）非法控制计算机信息系统二十台以上的；<br>（四）违法所得五千元以上或者造成经济损失一万元以上的；<br>（五）其他情节严重的情形。</p>
</blockquote>
<h4 id="测试与入侵"><a href="#测试与入侵" class="headerlink" title="测试与入侵"></a>测试与入侵</h4><p>现在很多企业都有自己的 SRC（安全响应中心）平台，都有公开的漏洞奖励计划，允许大家对其产品进行安全测试。也有一些第三方众测平台，招集优秀的白帽子进行安全测试，这种一般可以理解为授权，但也不是绝对的，主要还是得明确测试与入侵的区别。</p>
<p>测试与入侵的区别可以参考以下几点：</p>
<ul>
<li><p>是否窃取业务数据；</p>
</li>
<li><p>是否破坏业务的正常运营，特别是造没造成实际的经济损失；</p>
</li>
<li><p>是否恶意留取后门；</p>
</li>
<li><p>是否未经授权，对国家事务、国防建设、尖端科学技术领域的计算机信息系统进行测试。</p>
</li>
</ul>
<p>不过，这里更关键的是看企业的态度，如果企业真的追究起来，一般都是一告一个准，哪怕你第一时间报到 SRC 或第三方平台上了，比如著名的“袁炜事件”。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】26-光照-光照原理</title>
    <url>/26-%E5%85%89%E7%85%A7-%E5%85%89%E7%85%A7%E5%8E%9F%E7%90%86-%E5%B9%B3%E8%A1%8C%E5%85%89-LightedCube/</url>
    <content><![CDATA[<p>对应《WebGL编程指南》第八章 36-LightedCube、37-LightedCube_animation、38-LightedCube_ambient</p>
<p>要点：光源类型（平行光、点光源光）、反射类型（漫反射、环境反射）、根据光线和表面的方向计算入射角、法向量</p>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、光照原理"><a href="#一、光照原理" class="headerlink" title="一、光照原理"></a>一、光照原理</h3><h4 id="1-1-引入——着色与阴影"><a href="#1-1-引入——着色与阴影" class="headerlink" title="1.1 引入——着色与阴影"></a>1.1 引入——着色与阴影</h4><p>现实世界中的物体被光纤照射时，会反射一部分光。只有当反射光线进入你的眼睛时，你才能够看到物体并辨认出它的颜色。</p>
<p>在现实世界中，当光线照射到物体上时，发生了两个重要的现象：</p>
<ul>
<li>根据光源和光线方向，物体不同表面的<u>明暗程度</u>变得不一致。</li>
<li>根据<u>光源</u>和<u>光线方向</u>，物体向地面投下<u>影子</u>。</li>
</ul>
<p><img src="/images/LightedCube1.png" alt="明暗差异和阴影"></p>
<p>明暗差异给了物体立体感。上图中的立方体是纯白的，但是它每个面受到光照程度不同所以能够辨认。</p>
<p><strong>着色</strong>：根据光照条件重建“物体各表面明暗不一的效果”的过程。</p>
<p><strong>阴影</strong>：物体向地面投下影子的现象，又被成为阴影。</p>
<p>在讨论着色过程之前，考虑两件事：</p>
<ul>
<li><p>发出光线的光源的类型</p>
</li>
<li><p>物体表面如何反射光线</p>
</li>
</ul>
<h4 id="1-2-光源类型"><a href="#1-2-光源类型" class="headerlink" title="1.2 光源类型"></a>1.2 光源类型</h4><p>真实世界的光主要有两种类型：</p>
<ul>
<li><strong>平行光</strong>，类似于自然中的太阳光</li>
<li><strong>点光源光</strong>，类似于人造灯泡的光</li>
<li>此外，我们还用<strong>环境光</strong>来模拟真实世界中的非直射光（也就是由光源发出后经过墙壁或其他物体反射后的光）</li>
</ul>
<blockquote>
<p>三维图形学还使用一些其他类型的光，比如用聚合灯光来模拟电筒，车前灯等。</p>
</blockquote>
<p><img src="/images/LightedCube2.png" alt="平行光、点光源光、环境光"></p>
<h5 id="平行光"><a href="#平行光" class="headerlink" title="平行光"></a>平行光</h5><p>顾名思义，平行光的光线是互相平行的，<u>平行光具有方向</u>。平行光可以看做是无限远处的光源（比如太阳）发出的光。因为太阳距离地球很远，所以阳光到达地球时可以认为是平行的。平行光很简单，可以用一个方向和一个<u>颜色</u>来定义。</p>
<blockquote>
<p>本章节提到的“光的颜色”，实际上已包含光的强度信息。比如标准的白光为(1, 1, 1)，那么两倍于其强度的白光就表示为(2, 2, 2)。</p>
</blockquote>
<h5 id="点光源光"><a href="#点光源光" class="headerlink" title="点光源光"></a>点光源光</h5><p>点光源光是<u>从一个点向周围</u>的所有方向发出的光。点光源光可以用来表示现实中的灯泡、火焰等。我们需要指定点光源的<u>位置</u>和<u>颜色</u>。光线的方向将根据点光源的位置和被照射之处的位置计算出来，因为<u>点光源的光线的方向在场景内的不同位置是不同的。</u></p>
<blockquote>
<p>实际上点光源的光会衰减，本章教程中为了程序简单并未进行点光源光强的衰减。</p>
</blockquote>
<h5 id="环境光"><a href="#环境光" class="headerlink" title="环境光"></a>环境光</h5><p>环境光（间接光）是指那些经光源（点光源或平行光源）发出后，被墙壁等物体多次<u>反射</u>，然后照到物体表面上的光。环境光从各个角度照射物体，其强度都是一致的。比如说，在夜间打开冰箱的门，整个厨房都会有些微微亮，这就是环境光的作用。<u>环境光不用指定位置和方向，只需要指定颜色即可</u>。</p>
<h4 id="1-3-反射类型"><a href="#1-3-反射类型" class="headerlink" title="1.3 反射类型"></a>1.3 反射类型</h4><p>物体向哪个方向反射光，反射的光是什么颜色，取决于以下两个因素：</p>
<ul>
<li>入射光</li>
<li>物体表面的类型</li>
</ul>
<p>入射光的信息包括<u>入射光的方向和颜色</u>，而物体表面的信息包括<u>表面的固有颜色和反射特性。</u></p>
<p>物体表面反射光线的方式由两种：<strong>漫反射</strong>和<strong>环境反射</strong>。本节的重点是如何很据上述两种信息（入射光和物体表面特性）来计算出反射光的颜色。本节会涉及一些简单的数学计算。</p>
<h5 id="漫反射"><a href="#漫反射" class="headerlink" title="漫反射"></a>漫反射</h5><p>漫反射是针对<strong>平行光</strong>或<strong>点光源</strong>而言的。漫反射的反射光在各个方向上是均匀的，如下图所示。</p>
<p><img src="/images/LightedCube3.png" alt="漫反射"></p>
<p>如果物体表面像镜子一样光滑，那么光线就会以特定的角度反射出去；但是现实中的大部分材质，比如纸张、岩石、塑料等，其表面都是粗糙的，在这种情况下反射光就会以不固定的角度反射出去。漫反射就是针对后一种情况而建立的理想反射模型。</p>
<p>在漫反射中，反射光的颜色取决于<strong>入射光的颜色</strong>、<strong>表面的基底色</strong>、<strong>入射光与表面形成的入射角</strong>。</p>
<p><strong>入射角定义</strong>：入射光与表面的法线形成的夹角，用 θ 表示。</p>
<p>漫反射光的颜色可以根据下式计算得到：</p>
<p><code>&lt;漫反射光颜色&gt; = &lt;入射光颜色&gt; x &lt;表面基底色&gt; x cosθ</code></p>
<p>式子中，<code>&lt;入射光颜色&gt;</code>指的是<u>点光源</u>或<u>平行光的颜色</u>，乘法操作是在颜色矢量上<u>逐分量（R、G、B）</u>进行的。因为漫反射光在各个方向上都是”均匀“的，所以从任何角度看上去其<u>强度都相等</u>。</p>
<p><img src="/images/LightedCube4.png" alt="漫反射光各方向均匀"></p>
<h5 id="环境反射"><a href="#环境反射" class="headerlink" title="环境反射"></a>环境反射</h5><p>环境反射是针对<u>环境光</u>而言的。</p>
<p>在环境反射中，<u>反射光的方向可以认为就是入射光的<strong>反方向</strong></u>。由于环境光照射物体的方式就是各方向均匀的、强度相等的，所以<u>反射光也是各向均匀的</u>，如下图所示。我们可以这样来描述它：</p>
<p><code>&lt;环境反射颜色&gt; = &lt;入射光颜色&gt; x &lt;表面基底色&gt;</code></p>
<blockquote>
<p>这里的<code>&lt;入射光颜色&gt;</code>实际上也就是环境光的颜色。</p>
</blockquote>
<p><img src="/images/LightedCube5.png" alt="环境反射"></p>
<h5 id="漫反射-环境反射"><a href="#漫反射-环境反射" class="headerlink" title="漫反射+环境反射"></a>漫反射+环境反射</h5><p>当漫反射和环境反射同时存在时，将两者加起来，就会得到物体最终被观察到的颜色：</p>
<p><code>&lt;表面的反射颜色&gt; = &lt;漫反射光颜色&gt; + &lt;环境反射光颜色&gt;</code></p>
<blockquote>
<p>注意，两种反射光并不一定总是存在，也并不一定要按照上述公式来计算。渲染三维模型时，你可以修改这些公式以达到想要的效果。</p>
</blockquote>
<p>下面来建立一个示例程序，在合适的位置放置一个光源，对场景进行着色。首先实现平行光下的漫反射。</p>
<h3 id="二、-平行光下的漫反射"><a href="#二、-平行光下的漫反射" class="headerlink" title="二、 平行光下的漫反射"></a>二、 平行光下的漫反射</h3><p>如前所述，漫反射的反射光，其颜色与入射光在入射点的入射角<code>θ</code>有关。平行光入射产生的漫反射光的颜色很容易计算，因为<u>平行光的方向唯一</u>的，对于<u>同一个平面上的所有点，入射角是相同的</u>，根据式子计算平行光入射的漫反射光颜色：</p>
<p><code>&lt;漫反射光颜色&gt; = &lt;入射光颜色&gt; x &lt;表面基底色&gt; x cosθ</code></p>
<p>上式用到了三项数据：</p>
<ul>
<li>平行入射光的颜色</li>
<li>表面的基底色</li>
<li>入射光与表面形成的入射角 θ</li>
</ul>
<p>颜色可以用<code>RGB</code>值来表示，比如标准强度的白光颜色就是<code>（1.0, 1.0, 1.0）</code>。物体表面的基底色其实就是”<u>物体本来的颜色</u>“（或者说是”物体在标准白光下的颜色“），按照式子计算反射光颜色时，我们对 RGB 值的三个分量逐个相乘。</p>
<p>假设入射光是白色<code>（1.0, 1.0, 1.0）</code>，而物体表面的基底色是红色<code>（1.0, 0.0, 0.0）</code>，而入射角 <u>θ 为 0.0（即入射光垂直入射）</u>，根据式子，入射光的红色分量 R 为 1.0，基底色的红色分量 R 为1.0，入射角余弦值 cos θ 为 1.0，那么反射光的红色分量 R 就可以由如下计算得到：</p>
<p><code>R = 1.0 * 1.0 * 1.0 = 1.0</code></p>
<p>类似的，我们可以算出绿色分量 G 和蓝色分量 B：</p>
<p><code>G = 1.0 * 0.0 * 1.0 = 0.0</code></p>
<p><code>B = 1.0 * 0.0 * 1.0 = 0.0</code></p>
<p>根据上面的计算，当白光垂直入射到红色物体的表面时，漫反射光的颜色就变成了红色<code>（1.0, 0.0, 0.0）</code>。而如果是红光垂直入射到白色物体的表面时，漫反射光的颜色也会是红色。这两种情况下，物体在观察者看来就是红色的。</p>
<blockquote>
<p>那么如果入射角 θ 是 90 度，也就是说入射光与表面平行，一点都没有照射到表面上，在这种情况下会怎样呢？根据我们在现实世界中的经验，物体表面应该完全不反光，看上去是黑的。验证一下：当 θ 是 90 度，cos θ 的值是0，那么根据上面的式子，不管入射光的颜色和物体表面基底色是什么，最后得到的漫反射光颜色都为（0.0, 0.0, 0.0），也就是黑色。</p>
<p>同样，如果 θ 是60度，也就是斜射平行光斜射到物体表面上，那么该表面应该还是红色的，只不过比垂直入射时暗一些。根据上式，cos θ 是0.5，漫反射光颜色为 （0.5, 0.0, 0.0），即暗红色。</p>
</blockquote>
<p>但是我们并不知道入射光 θ 是多少，只知道光线的方向。下面我们就来通过光线和物体表面的方向来计算入射角 θ，将式子中的 θ 换成我们更加熟悉的东西。</p>
<h4 id="1-5-根据光线和表面的方向计算入射角"><a href="#1-5-根据光线和表面的方向计算入射角" class="headerlink" title="1.5 根据光线和表面的方向计算入射角"></a>1.5 根据光线和表面的方向计算入射角</h4><p>原理：根据入射光的方向和物体表面的朝向，即<strong>法线方向</strong>来计算出入射角。</p>
<blockquote>
<p>在创建三维建模的时候，我们无法预先确定光线将以怎样的角度照射到每个表面上。但是，我们可以确定每个表面的朝向。在指定光源的时候，再确定光的方向，就可以用这两项信息来计算处入射角了。</p>
</blockquote>
<h5 id="点积运算"><a href="#点积运算" class="headerlink" title="点积运算"></a>点积运算</h5><p>通过计算两个矢量的点积，来计算这两个矢量的夹角余弦值 <code>cosθ</code>。点积运算的使用非常频繁，GLSL ES 内置了点积运算函数。在公式中，我们使用点符号 <code>.</code> 来表示点积运算。这样，cosθ 就可以通过下式计算出来：</p>
<p><code>cosθ = &lt;光线方向&gt; · &lt;法线方向&gt;</code></p>
<p>进而计算反射光颜色：</p>
<p><code>&lt;漫反射光颜色&gt; = &lt;入射光颜色&gt; x &lt;表面基底色&gt; x (&lt;光线方向&gt; · &lt;法线方向&gt;)</code></p>
<p>注意：</p>
<ul>
<li><p>光线方向矢量和表面法线矢量的长度必须为1，否则反射光的颜色就会过暗或过亮将一个矢量的长度调整为1，同时保持方向不变的过程称之为<a href="#%E5%BD%92%E4%B8%80%E5%8C%96">归一化</a>。GLSL ES 提供了内置的归一化函数，你可以直接使用。</p>
</li>
<li><p>这里所谓的“光线方向”，实际上是<u>入射方向的反方向</u>，即从入射点指向光源方向，如下图所示。</p>
</li>
</ul>
<p><img src="/images/LightedCube6.png" alt="光线方向"></p>
<h5 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h5><p>设矢量n为$(nx, ny, nz)$，则其长度为 $|n| = \sqrt {n_x^2 + n_y^2 + n_z^2}$​ ；</p>
<p>对矢量n进行归一化后的结果是 $(nx/m, ny/m, nz/m)$​​，式中<code>m</code>为<code>n</code>的长度。如矢量(2, 2, 1)的长度为 |n| = sqrt(3)，那么归一化后就是(2/3, 2/3, 1/3)；</p>
<h5 id="补充：矢量的点乘与叉乘"><a href="#补充：矢量的点乘与叉乘" class="headerlink" title="补充：矢量的点乘与叉乘"></a>补充：矢量的点乘与叉乘</h5><p>向量的点乘,也叫向量的内积、数量积，对两个向量执行点乘运算，就是对这两个向量对应位一一相乘之后求和的操作，点乘的结果是一个<u>标量</u>。</p>
<p>点乘公式：</p>
<p>设$a =<br>\begin{bmatrix}<br>    a_1, &amp; a_2, &amp; a_3<br>\end{bmatrix}<br>$，$b =<br>\begin{bmatrix}<br>    b_1, &amp; b_2, &amp; b_3<br>\end{bmatrix}<br>$，则  $a · b =<br>\begin{bmatrix}<br>    a_1b_1, &amp; a_2b_2, &amp; a_3b_3<br>\end{bmatrix}<br>$​​</p>
<p>（要求一维向量a和向量b的行列数相同。）</p>
<p>点乘几何意义：</p>
<p>点乘的几何意义是可以用来表征或计算<u>两个向量之间的夹角</u>，以及在b向量在a向量方向上的投影，有公式：$a · b = |a| |b| cosθ$​；​​​</p>
<p>两个向量的叉乘，又叫向量积、外积、叉积，叉乘的运算结果是一个<u>向量</u>而不是一个标量。并且两个向量的叉积与这两个向量组成的坐标平面垂直。</p>
<p>叉乘几何意义：</p>
<p>在三维几何中，向量a和向量b的叉乘结果是一个向量，更为熟知的叫法是法向量，该向量垂直于a和b向量构成的平面。</p>
<blockquote>
<p>一般点乘用来判断两个向量是否垂直，也可以用来计算一个向量在某个方向上的投影长度，就像定义一样。</p>
<p>叉乘更多的是判断某个平面的方向。从这个平面上选两个不共线的向量，叉乘的结果就是这个平面的法向量。</p>
<p>更多关于叉乘与点乘知识点，请自行复习数学教材或百度。</p>
</blockquote>
<h4 id="1-6-法线：表面的朝向"><a href="#1-6-法线：表面的朝向" class="headerlink" title="1.6 法线：表面的朝向"></a>1.6 法线：表面的朝向</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>物体表面的朝向，即<u>垂直于表面的方向</u>，又称<strong>法线</strong>或<strong>法向量</strong>。</p>
<h5 id="表示"><a href="#表示" class="headerlink" title="表示"></a>表示</h5><p>法向量有三个分量，向量<code>（nx, ny, nz）</code>表示<u>从原点（0, 0, 0）指向点（nx, ny, nz）的方向</u>。比如，向量<code>（1, 0, 0）</code>表示 x 轴正方向，向量（0, 0, 1）表示 z 轴正方向。设计到表面和法向量的问题时，必须考虑以下两点：</p>
<ul>
<li>一个表面具有两个法向量</li>
<li>平面的法向量唯一</li>
</ul>
<h5 id="一个表面具有两个法向量"><a href="#一个表面具有两个法向量" class="headerlink" title="一个表面具有两个法向量"></a>一个表面具有两个法向量</h5><p>每个表面都有两个面，”正面“和”背面“。<u>两个面各自具有一个法向量</u>。比如，垂直与z 轴的 xy平面，其正面的法向量为z负半轴，即（0, 0, -1），而正面的法向量为 x 负半轴，即（0, 0, 1）。</p>
<p><img src="/images/LightedCube7.png" alt="法向量"></p>
<p>在三维图形学中，表面的正面和背面取决与绘制表面时的<u>顶点顺序</u>。当你按照v0, v1, v2, v3 的顶点顺序绘制了一个平面（该平面由两个三角形组成，各自绘制顺序是v0，v1，v2和v2，v3，v0），那么当你从正面观察这个表示时，这4个顶点是顺时针的，而你从背面观察该表面，这4个顶点就是逆时针的。如上图，该平面正面的法向量是（0, 0, -1）。</p>
<h5 id="平面的法向量唯一"><a href="#平面的法向量唯一" class="headerlink" title="平面的法向量唯一"></a>平面的法向量唯一</h5><p>由于法向量表示的是方向，与位置无关，所以一个平面只有一个法向量。换句话说，平面的任意一点都具有相同的法向量。</p>
<p>进一步来说，即使有两个不同的平面，只要其<u>朝向相同</u>（也就是两个平面平行），<u>法向量也相同</u>。比如说，有一个经过点（10, 98, 9）的平面，只要垂直与 Z 轴，它的法向量仍然是（0, 0, 1）和（0, 0, -1），和经过原点并垂直与z轴的平面一样。</p>
<p><img src="/images/LightedCube8.png" alt="法向量与位置无关"></p>
<p>下图左显示了<a href="#%E4%BB%A3%E7%A0%811">示例程序</a>中的立方体及每个表面的法向量。比如立方体表面上的法向量表示为 <code>n(0, 1, 0)</code>。</p>
<p><img src="/images/LightedCube9.png" alt="立方体各表面法向量"></p>
<p>一旦计算好每个平面的法向量，接下来的任务就是<u>将数据传给着色器程序</u>。以前程序把颜色作为“逐顶点数据”存储在缓冲区中，并传给着色器。对法向量数据也可以这样做。如上图右所示，<u>每个顶点对应3个法向量</u>，就像之前每个顶点都对应3个颜色值一样。</p>
<blockquote>
<p>由于立方体各表面垂直相交，所以每个顶点对3个法向量（同时在缓冲区中被拆成3个顶点）。但是，一些表面光滑的物体，通常其每个顶点只对应1个法向量。</p>
</blockquote>
<h4 id="1-7-程序分析"><a href="#1-7-程序分析" class="headerlink" title="1.7 程序分析"></a>1.7 程序分析</h4><h5 id="1-7-1-顶点着色器"><a href="#1-7-1-顶点着色器" class="headerlink" title="1.7.1 顶点着色器"></a>1.7.1 顶点着色器</h5><p>顶点着色器实现了：</p>
<p><code>&lt;漫反射光颜色&gt; = &lt;入射光颜色&gt; x &lt;表面基底色&gt; x (&lt;光线方向&gt; · &lt;法线方向&gt;)</code></p>
<p>由[1.5](#1.5 根据光线和表面的方向计算入射角)可知计算漫反射光颜色需要：</p>
<ul>
<li>入射光颜色</li>
<li>表面基底色</li>
<li>入射光方向（归一化）</li>
<li>表面法线方向（归一化）</li>
</ul>
<p>主要代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> + <span class="comment">//表面基底色</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> + <span class="comment">//法向量</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> + <span class="comment">//光线颜色</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightColor;\n&#x27;</span> + <span class="comment">//归一化的世界坐标（入射光方向）</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightDirection;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   vec3 normal = normalize(vec3(a_Normal));\n&#x27;</span> + <span class="comment">//对法向量进行归一化</span></span><br><span class="line">    <span class="string">&#x27;   float nDotL = max(dot(u_LightDirection, normal), 0.0);\n&#x27;</span> + <span class="comment">//计算光线方向和法向量的点积</span></span><br><span class="line">    <span class="string">&#x27;   vec3 diffuse = u_LightColor * vec3(a_Color) * nDotL;\n&#x27;</span> + <span class="comment">//计算漫反射光的颜色</span></span><br><span class="line">    <span class="string">&#x27;   v_Color = vec4(diffuse, a_Color.a);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h6 id="变量分析"><a href="#变量分析" class="headerlink" title="变量分析"></a>变量分析</h6><table>
<thead>
<tr>
<th>变量名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>a_Color</td>
<td>表面基底色</td>
</tr>
<tr>
<td>a_Normal</td>
<td>表面法线方向</td>
</tr>
<tr>
<td>u_LightColor</td>
<td>入射光颜色</td>
</tr>
<tr>
<td>u_LightDirection</td>
<td>归一化的世界坐标（入射光方向）</td>
</tr>
</tbody></table>
<blockquote>
<p>注意，入射光方向 u_LightDirection 是在世界坐标下的，而且在传入着色器前已经在 JS 中归一化了。这样，我们就可以避免在顶点着色器每次执行时都对它进行归一化。</p>
</blockquote>
<blockquote>
<p>关于<a href="https://freepiao.cn/%E4%B8%96%E7%95%8C%E5%9D%90%E6%A0%87%E7%B3%BB%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%9D%90%E6%A0%87%E7%B3%BB/">世界坐标系和本地坐标系</a>参考。</p>
<p>本章节中，光照效果是在世界坐标系下计算的。</p>
</blockquote>
<h6 id="计算a-Normal"><a href="#计算a-Normal" class="headerlink" title="计算a_Normal"></a>计算a_Normal</h6><p>有了这些信息，就可以开始在顶点着色器中进行计算了。</p>
<p>首先对 <code>a_Normal</code> 进行归一化。严格地说，本例通过缓冲区传入的法向量都是已经归一化过的，所以实际上这一步可以略去。但是顶点着色器可不知道传入的矢量是否经过了归一化，而且这里没有节省开销的理由，所以，有这一步总比没有要好：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对法向量进行归一化</span></span><br><span class="line"><span class="string">&#x27;   vec3 normal = normalize(vec3(a_Normal));\n&#x27;</span> + </span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>a_Normal</code> 变量是 vec4 类型的，使用前三个分量x、y和 z 表示法线法相，所以我们将这三个分量提取出来进行归一化。对vec3 类型的变量进行归一化不必这样做。本例使用 vec4 类型的 a_Normal 变量是为了方便对下一个示例程序进行扩展。GLSL ES 提供了内置函数 <code>normalize()</code>对矢量参数进行归一化。归一化的结果赋给了 vec3类型的 normal 变量，供之后使用。</p>
</blockquote>
<h6 id="计算点积"><a href="#计算点积" class="headerlink" title="计算点积"></a>计算点积</h6><p>接下来，计算<code>点积</code>。光线方向存储在 <code>u_LightDirection变量</code>中，而且已经被归一化了，<u>可以直接使用</u>。法线方向存储在之前进行归一化后的结果 <code>normal变量</code>中。使用 GLSL ES 提供的内置函数 <code>dot()</code>计算两个矢量的点积，该函数接受两个矢量作为参数，返回它们的点积。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算光线方向和法向量的点积</span></span><br><span class="line"><span class="string">&#x27;   float nDotL = max(dot(u_LightDirection, normal), 0.0);\n&#x27;</span> + </span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果点积大于0，就将点积赋值给 <code>nDotL</code> 变量，如果其小于0，就将0赋给该变量。使用内置函数 <code>max()</code>完成这个任务，<u>将点积和0两者中的较大者赋值给 nDotL。</u></p>
<p><u>点积值小于0，意味着 <code>cosθ</code> 中的 <code>θ</code> 大于90度</u>。 <code>θ</code>是入射角，也就是<strong>入射反方向(光线方向)<strong>与</strong>表面法向量</strong>的夹角 。 <code>θ</code>大于90度说明光线照射在表面的背面上，此时，将nDotL 赋为 0.0。如下图：</p>
</blockquote>
<p><img src="/images/LightedCube11.png" alt="入射角大于90度"></p>
<h6 id="计算漫反射颜色"><a href="#计算漫反射颜色" class="headerlink" title="计算漫反射颜色"></a>计算漫反射颜色</h6><blockquote>
<p>注意 a_Color 变量即顶点的颜色，被从vec4对象转成了 vec3 对象，因为其第4个分量与式子无关。</p>
</blockquote>
<p>实际上，物体<u>表面的透明度</u>确实会影响物体的外观。但这时光照的计算较为复杂，现在暂时认为物体都是不透明的，这样就计算出了漫反射光的颜色 <code>diffuse</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算漫反射光的颜色</span></span><br><span class="line"><span class="string">&#x27;   vec3 diffuse = u_LightColor * vec3(a_Color) * nDotL;\n&#x27;</span> + </span><br></pre></td></tr></table></figure>

<p>然后，将 <code>diffuse</code> 的值赋给 <code>v_Color变量</code>。<code>v_Color</code> 是 <code>vec4</code> 对象，而 <code>diffuse</code> 是 <code>vec3</code> 对象，需要将第4个分量补上为<code>1.0</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;   v_Color = vec4(diffuse, a_Color.a);\n&#x27;</span> +</span><br></pre></td></tr></table></figure>

<p>顶点着色器运行的结果就是计算出了 <code>v_Color变量</code>，其值取决于<u>顶点的颜色</u>、<u>法线方向</u>、<u>平行光的颜色和方向</u>。v_Color 变量将被传入<u>片元着色器</u>并赋值给 <code>gl_FragColor变量</code>。</p>
<blockquote>
<p>本例中的光是<strong>平行光</strong>，所以立方体上同一个面的颜色是<strong>一致</strong>的，没有之前出现的颜色渐变效果。</p>
</blockquote>
<h5 id="1-7-2-JS-程序流程"><a href="#1-7-2-JS-程序流程" class="headerlink" title="1.7.2 JS 程序流程"></a>1.7.2 JS 程序流程</h5><p>JS 将光的颜色 <code>u_LightColor</code> 和方向 <code>u_LightDirection</code> 传给顶点着色器。首先用 <code>gl.uniform3f()</code>函数将 u_LightColor 赋值为（1.0, 1.0, 1.0），表示入射光是<u>白光</u>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gl.uniform3f(u_LightColor, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>); <span class="comment">// 设置光线颜色为白色</span></span><br></pre></td></tr></table></figure>

<p>下一步是设置光线方向，注意<u>光线方向必须被归一化</u>。cuon-matrix.js 为 vector3 类型提供了 <code>normalize()</code>函数，以实现归一化。该函数的用法非常简单：在你想要进行归一化的 Vector3 对象上调用即可。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lightDirection = <span class="keyword">new</span> Vector3([<span class="number">0.5</span>, <span class="number">3.0</span>, <span class="number">4.0</span>]);<span class="comment">//设置光线方向（世界坐标系下）</span></span><br><span class="line">lightDirection.normalize();<span class="comment">//归一化</span></span><br><span class="line">gl.uniform3fv(u_LightDirection, lightDirection.elements);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意 JS 和 GLSL ES 对矢量进行归一化的不同之处。</p>
</blockquote>
<p>归一化后的光线方向以 <code>Float32Array</code> 类型的形式存储在 <code>lightDirection</code> 对象的 <code>elements属性</code>中，使用<code>gl.uniform3fv()</code>将其<u>分配给着色器中的 u_LightDirection 变量</u>。</p>
<p>最后，在<code>initVertexBuffers()</code>函数中为每个顶点定义法向量。法向量数据存储在 normals 数组中，然后被 initArrayBuffer()函数传给了顶点着色器的 a_Normal 变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> normals = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([    <span class="comment">// Normal</span></span><br><span class="line">    <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">    <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">    <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">    -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">    <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">    <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!initArrayBuffer(gl, <span class="string">&#x27;a_Normal&#x27;</span>, normals, <span class="number">3</span>, gl.FLOAT)) 		<span class="keyword">return</span> -<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><code>initArrayBuffer()</code>函数的作用是<u>将第3个参数指定的数组分配给第2个参数指定的着色器中的变量。</u></p>
<h3 id="三、环境光下的漫反射"><a href="#三、环境光下的漫反射" class="headerlink" title="三、环境光下的漫反射"></a>三、环境光下的漫反射</h3><h4 id="3-1-平行光下漫反射的缺陷"><a href="#3-1-平行光下漫反射的缺陷" class="headerlink" title="3.1 平行光下漫反射的缺陷"></a>3.1 平行光下漫反射的缺陷</h4><p>现在，我们已经成功实现了平行光下的漫反射光。但是结果图和显示中的立方体还是有点不大一样，特别是右侧表面是全黑的，仿佛不存在一样。如果这个立方体动起来，你也许就能看的更清楚一些，试着运行程序 <a href="#%E4%BB%A3%E7%A0%812">Lighted_Cube_animation</a>，如图所示：</p>
<script src="\lib\webgl-utils.js"></script>
<script src="\lib\webgl-debug.js"></script>
<script src="\lib\cuon-utils.js"></script>
<script src="\lib\cuon-matrix.js"></script>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
  <title>LookAtTriangles</title>
</head>
<body onload="main()">
<canvas id="mywebgl" width="300" height="300">
  Please use the browser supporting "canvas".
</canvas>
<script type='text/javascript'>
//LightedCube_animation.js
var VSHADER_SOURCE =
    'attribute vec4 a_Position;\n' +
    'attribute vec4 a_Color;\n' +
    'attribute vec4 a_Normal;\n' +
    'uniform mat4 u_MvpMatrix;\n' +
    'uniform mat4 u_NormalMatrix;\n' +
    'uniform vec3 u_LightDirection;\n' +
    'varying vec4 v_Color;\n' +
    'void main() {\n' +
    '  gl_Position = u_MvpMatrix * a_Position;\n' +
    '  vec4 normal = u_NormalMatrix * a_Normal;\n' +
    '  float nDotL = max(dot(u_LightDirection, normalize(normal.xyz)), 0.0);\n' +
    '  v_Color = vec4(a_Color.xyz * nDotL, a_Color.a);\n' +
    '}\n';
var FSHADER_SOURCE=
    '#ifdef GL_ES\n' +
    'precision mediump float;\n' +
    '#endif\n' +
    'varying vec4 v_Color;\n' +
    'void main(){\n'+
    'gl_FragColor = v_Color;\n'+
    '}\n';
function main() {
    var canvas = document.getElementById("mywebgl");
    if (!canvas) {
        console.log("Failed to retrieve the <canvas> element");
        return;
    }
    var gl = getWebGLContext(canvas);
    if (!gl) {
        console.log("Failed to get the rendering context for WebGL");
        return;
    }
    if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
        console.log("Failed to initialize shaders.");
        return;
    }
    //设置顶点位置
    var n = initVertexBuffers(gl);
    if (n < 0) {
        console.log('Failed to set the positions of the vertices');
        return;
    }
    // Set the clear color and enable the depth test
    //gl.clearColor(0, 0, 0, 1);
    gl.enable(gl.DEPTH_TEST);
    var u_MvpMatrix = gl.getUniformLocation(gl.program, 'u_MvpMatrix');//模型视图投影矩阵
    var u_NormalMatrix = gl.getUniformLocation(gl.program, 'u_NormalMatrix');
    var u_LightDirection = gl.getUniformLocation(gl.program, 'u_LightDirection');
    if (!u_MvpMatrix || !u_NormalMatrix || !u_LightDirection) {
        console.log('Failed to get the storage location');
        return;
    }
    var lightDirection = new Vector3([0.5, 3.0, 4.0]);//设置光线方向（世界坐标系下）
    lightDirection.normalize();//归一化
    gl.uniform3fv(u_LightDirection, lightDirection.elements);
    var mvpMatrix = new Matrix4();//视图投影矩阵
    mvpMatrix.setPerspective(30, canvas.width / canvas.height, 1, 100);
    mvpMatrix.lookAt(3, 3, 7, 0, 0, 0, 0, 1, 0);
    var currentAngle = 0.0; //目前的旋转角度
    var modelMatrix = new Matrix4(); //模型矩阵
    var vpMatrix = new Matrix4();//模型视图投影矩阵
    var normalMatrix = new Matrix4();//法线变换矩阵
    var tick = function () {
        currentAngle = animate(currentAngle);//更新当前旋转角度
        //计算模型矩阵
        modelMatrix.setRotate(currentAngle, 0, 1, 0); //围绕y轴旋转
        vpMatrix.set(mvpMatrix).multiply(modelMatrix);
        gl.uniformMatrix4fv(u_MvpMatrix, false, vpMatrix.elements);
        // Pass the matrix to transform the normal based on the model matrix to u_NormalMatrix
        normalMatrix.setInverseOf(modelMatrix);
        normalMatrix.transpose();
        gl.uniformMatrix4fv(u_NormalMatrix, false, normalMatrix.elements);
        // Clear color and depth buffer
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        // Draw the cube
        gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, 0);
        requestAnimationFrame(tick, canvas); // Request that the browser ?calls tick
    };
    tick();
}
function draw(gl, n, angle, vpMatrix, u_MvpMatrix, u_NormalMatrix) {
}
function initVertexBuffers(gl) {
    // Create a cube
    //    v6----- v5
    //   /|      /|
    //  v1------v0|
    //  | |     | |
    //  | |v7---|-|v4
    //  |/      |/
    //  v2------v3
    var vertices = new Float32Array([   // Vertex coordinates
        1.0, 1.0, 1.0,  -1.0, 1.0, 1.0,  -1.0,-1.0, 1.0,   1.0,-1.0, 1.0,  // v0-v1-v2-v3 front
        1.0, 1.0, 1.0,   1.0,-1.0, 1.0,   1.0,-1.0,-1.0,   1.0, 1.0,-1.0,  // v0-v3-v4-v5 right
        1.0, 1.0, 1.0,   1.0, 1.0,-1.0,  -1.0, 1.0,-1.0,  -1.0, 1.0, 1.0,  // v0-v5-v6-v1 up
        -1.0, 1.0, 1.0,  -1.0, 1.0,-1.0,  -1.0,-1.0,-1.0,  -1.0,-1.0, 1.0,  // v1-v6-v7-v2 left
        -1.0,-1.0,-1.0,   1.0,-1.0,-1.0,   1.0,-1.0, 1.0,  -1.0,-1.0, 1.0,  // v7-v4-v3-v2 down
        1.0,-1.0,-1.0,  -1.0,-1.0,-1.0,  -1.0, 1.0,-1.0,   1.0, 1.0,-1.0   // v4-v7-v6-v5 back
    ]);
    var colors = new Float32Array([     // Colors
        1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0,     // v0-v1-v2-v3 front
        1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0,     // v0-v3-v4-v5 right
        1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0,     // v0-v5-v6-v1 up
        1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0,     // v1-v6-v7-v2 left
        1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0,     // v7-v4-v3-v2 down
        1, 0, 0,   1, 0, 0,   1, 0, 0,  1, 0, 0　    // v4-v7-v6-v5 back
    ]);
    var normals = new Float32Array([    // Normal
        0.0, 0.0, 1.0,   0.0, 0.0, 1.0,   0.0, 0.0, 1.0,   0.0, 0.0, 1.0,  // v0-v1-v2-v3 front
        1.0, 0.0, 0.0,   1.0, 0.0, 0.0,   1.0, 0.0, 0.0,   1.0, 0.0, 0.0,  // v0-v3-v4-v5 right
        0.0, 1.0, 0.0,   0.0, 1.0, 0.0,   0.0, 1.0, 0.0,   0.0, 1.0, 0.0,  // v0-v5-v6-v1 up
        -1.0, 0.0, 0.0,  -1.0, 0.0, 0.0,  -1.0, 0.0, 0.0,  -1.0, 0.0, 0.0,  // v1-v6-v7-v2 left
        0.0,-1.0, 0.0,   0.0,-1.0, 0.0,   0.0,-1.0, 0.0,   0.0,-1.0, 0.0,  // v7-v4-v3-v2 down
        0.0, 0.0,-1.0,   0.0, 0.0,-1.0,   0.0, 0.0,-1.0,   0.0, 0.0,-1.0   // v4-v7-v6-v5 back
    ]);
    var indices = new Uint8Array([       // Indices of the vertices
        0, 1, 2,   0, 2, 3,    // front
        4, 5, 6,   4, 6, 7,    // right
        8, 9,10,   8,10,11,    // up
        12,13,14,  12,14,15,    // left
        16,17,18,  16,18,19,    // down
        20,21,22,  20,22,23     // back
    ]);
    // Write the vertex coordinates and color to the buffer object
    if (!initArrayBuffer(gl, vertices, 3, gl.FLOAT, 'a_Position'))
        return -1;
    if (!initArrayBuffer(gl, colors, 3, gl.FLOAT, 'a_Color'))
        return -1;
    if (!initArrayBuffer(gl, normals, 3, gl.FLOAT, 'a_Normal'))
        return -1;
    // Create a buffer object
    var indexBuffer = gl.createBuffer();
    if (!indexBuffer) {
        console.log('Failed to create the buffer object');
        return false;
    }
    // Write the indices to the buffer object
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
    return indices.length;
}
function initArrayBuffer(gl, data, num, type, attribute) {
    var buffer = gl.createBuffer();   // Create a buffer object
    if (!buffer) {
        console.log('Failed to create the buffer object');
        return false;
    }
    // Write date into the buffer object
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
    // Assign the buffer object to the attribute variable
    var a_attribute = gl.getAttribLocation(gl.program, attribute);
    if (a_attribute < 0) {
        console.log('Failed to get the storage location of ' + attribute);
        return false;
    }
    gl.vertexAttribPointer(a_attribute, num, type, false, 0, 0);
    // Enable the assignment of the buffer object to the attribute variable
    gl.enableVertexAttribArray(a_attribute);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    return true;
}
// Rotation angle (degrees/second)
var ANGLE_STEP = 30.0;
// Last time that this function was called
var g_last = Date.now();
function animate(angle) {
    // Calculate the elapsed time
    var now = Date.now();
    var elapsed = now - g_last;
    g_last = now;
    // Update the current rotation angle (adjusted by the elapsed time)
    var newAngle = angle + (ANGLE_STEP * elapsed) / 1000.0;
    return newAngle %= 360;
}
    </script>
    </body>
    </html>





<p>虽然程序是严格按照式子对场景进行光照的，但经验告诉我们肯定有什么对方不对劲。在现实世界中，光照下物体的各表面的差异不会如此分明：那些背光的面虽然会暗一些，但决不至于黑到看不见的程度。</p>
<h4 id="3-2-环境光颜色计算"><a href="#3-2-环境光颜色计算" class="headerlink" title="3.2 环境光颜色计算"></a>3.2 环境光颜色计算</h4><p>实际上，那些<u>背光的面是被非直射光照亮</u>的（即其他物体，如墙壁的反光等），前面提到的环境光就起到了这部分非直射光的作用，它<u>使场景更加逼真</u>。因为环境光<u>均匀</u>地从各个角度照在物体表面，所以由环境光反射产生的颜色只去取决与<u>光的颜色</u>和<u>表面基底色</u>，使用式子计算后我们再来看一下：</p>
<p><code>&lt;环境反射光颜色&gt; = &lt;入射光颜色&gt; x &lt;表面基底色&gt;</code></p>
<p>接下来，向示例程序中加入上式中的环境光所产生的反射光颜色：</p>
<p><code>&lt;表面的反射颜色&gt; = &lt;漫反射光颜色&gt; + &lt;环境反射光颜色&gt;</code></p>
<blockquote>
<p>环境光是由墙壁等其物体反射产生的，所以环境光的强度通常比较弱。假设环境光是较弱的<code>白光（0.2, 0.2, 0.2</code>），而物体表面是<code>红色（1.0, 1.0, 1.0）</code>。根据式子，由环境光反射的光颜色就是<code>暗红色（0.2, 0.0, 0.0）</code>。同样，在蓝色的空间中，环境光为（0.0, 0.0, 0.2），有一个白色的物体，即表面基底色为（1.0, 1.0, 1.0），那么由环境光产生的漫反射光颜色就是淡蓝色（0.0, 0.0, 0.2）。</p>
</blockquote>
<h4 id="3-3-程序分析"><a href="#3-3-程序分析" class="headerlink" title="3.3 程序分析"></a>3.3 程序分析</h4><p>示例程序 <a href="#%E4%BB%A3%E7%A0%813-LightedCube_ambient">LightedCube_ambient</a> 实现了环境光漫反射的效果，如下图左所见。可见，完全没有被平行光照到的表面也不是全黑，而是呈现较暗的颜色，与真实世界更加相符。</p>
<div style="display: flex;">
    <img src="/images/LightedCube12.png" alt="LightedCube_ambient"/>
    <img src="/images/LightedCube10.png" alt="LightedCube"/>
</div>

<h5 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> + <span class="comment">//表面基底色</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> + <span class="comment">//法向量</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightColor;\n&#x27;</span> + <span class="comment">//光线颜色</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightDirection;\n&#x27;</span> + <span class="comment">//归一化的世界坐标（入射光方向）</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_AmbientLight;\n&#x27;</span> + <span class="comment">//环境光颜色</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   vec3 normal = normalize(vec3(a_Normal));\n&#x27;</span> + <span class="comment">//对法向量进行归一化</span></span><br><span class="line">    <span class="string">&#x27;   float nDotL = max(dot(u_LightDirection, normal), 0.0);\n&#x27;</span> + <span class="comment">//计算光线方向和法向量的点积</span></span><br><span class="line">    <span class="string">&#x27;   vec3 diffuse = u_LightColor * vec3(a_Color) * nDotL;\n&#x27;</span> + <span class="comment">//计算漫反射光的颜色</span></span><br><span class="line">    <span class="string">&#x27;   vec3 ambient = u_AmbientLight * vec3(a_Color);\n&#x27;</span> + <span class="comment">//计算环境光产生的反射光颜色</span></span><br><span class="line">    <span class="string">&#x27;   v_Color = vec4(diffuse + ambient, a_Color.a);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>顶点着色器中新增加了 <code>u_AmbientLight变量</code>用来接收环境光的颜色。使用该变量和表面的基底色 a_Color 计算出反射光的颜色，将其存储在 ambient 变量中。这样我们就即由环境光反射产生的颜色 ambient，又有了由平行光漫反射产生的颜色 diffuse。最后根据式子计算物体的最终颜色并存储在 v_Color 变量中，作为物体表面最终显示处的颜色，和 LightCube 一样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> u_AmbientLight = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_AmbientLight&#x27;</span>);</span><br><span class="line">gl.uniform3f(u_AmbientLight, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>); <span class="comment">//设置环境光颜色</span></span><br></pre></td></tr></table></figure>


















<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h4 id="代码1-LightedCube"><a href="#代码1-LightedCube" class="headerlink" title="代码1-LightedCube"></a>代码1-LightedCube</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LightedCube.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> + <span class="comment">//表面基底色</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> + <span class="comment">//法向量</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> + <span class="comment">//光线颜色</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightColor;\n&#x27;</span> + <span class="comment">//归一化的世界坐标（入射光方向）</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightDirection;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   vec3 normal = normalize(vec3(a_Normal));\n&#x27;</span> + <span class="comment">//对法向量进行归一化</span></span><br><span class="line">    <span class="string">&#x27;   float nDotL = max(dot(u_LightDirection, normal), 0.0);\n&#x27;</span> + <span class="comment">//计算光线方向和法向量的点积</span></span><br><span class="line">    <span class="string">&#x27;   vec3 diffuse = u_LightColor * vec3(a_Color) * nDotL;\n&#x27;</span> + <span class="comment">//计算漫反射光的颜色</span></span><br><span class="line">    <span class="string">&#x27;   v_Color = vec4(diffuse, a_Color.a);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the clear color and enable the depth test</span></span><br><span class="line">    <span class="comment">// gl.clearColor(0, 0, 0, 1);</span></span><br><span class="line">    gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_MvpMatrix&#x27;</span>);<span class="comment">//模型视图投影矩阵</span></span><br><span class="line">    <span class="keyword">var</span> u_LightColor = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_LightColor&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_LightDirection = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_LightDirection&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!u_MvpMatrix || !u_LightColor || !u_LightDirection) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gl.uniform3f(u_LightColor, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>); <span class="comment">//设置光线颜色为白色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lightDirection = <span class="keyword">new</span> Vector3([<span class="number">0.5</span>, <span class="number">3.0</span>, <span class="number">4.0</span>]);<span class="comment">//设置光线方向（世界坐标系下）</span></span><br><span class="line">    lightDirection.normalize();<span class="comment">//归一化</span></span><br><span class="line">    gl.uniform3fv(u_LightDirection, lightDirection.elements);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    mvpMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span> ,<span class="number">100</span>);</span><br><span class="line">    mvpMatrix.lookAt(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create a cube</span></span><br><span class="line">    <span class="comment">//    v6----- v5</span></span><br><span class="line">    <span class="comment">//   /|      /|</span></span><br><span class="line">    <span class="comment">//  v1------v0|</span></span><br><span class="line">    <span class="comment">//  | |     | |</span></span><br><span class="line">    <span class="comment">//  | |v7---|-|v4</span></span><br><span class="line">    <span class="comment">//  |/      |/</span></span><br><span class="line">    <span class="comment">//  v2------v3</span></span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([   <span class="comment">// Vertex coordinates</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([     <span class="comment">// Colors</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>　    <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> normals = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([    <span class="comment">// Normal</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([       <span class="comment">// Indices of the vertices</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">        <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">        <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>,   <span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,    <span class="comment">// up</span></span><br><span class="line">        <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,  <span class="number">12</span>,<span class="number">14</span>,<span class="number">15</span>,    <span class="comment">// left</span></span><br><span class="line">        <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,  <span class="number">16</span>,<span class="number">18</span>,<span class="number">19</span>,    <span class="comment">// down</span></span><br><span class="line">        <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,  <span class="number">20</span>,<span class="number">22</span>,<span class="number">23</span>     <span class="comment">// back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the vertex coordinates and color to the buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, vertices, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Position&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, colors, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Color&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, normals, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Normal&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span> (!indexBuffer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the indices to the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initArrayBuffer</span>(<span class="params">gl, data, num, type, attribute</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = gl.createBuffer();   <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!buffer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Write date into the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);</span><br><span class="line">    <span class="comment">// Assign the buffer object to the attribute variable</span></span><br><span class="line">    <span class="keyword">var</span> a_attribute = gl.getAttribLocation(gl.program, attribute);</span><br><span class="line">    <span class="keyword">if</span> (a_attribute &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of &#x27;</span> + attribute);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    gl.vertexAttribPointer(a_attribute, num, type, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Enable the assignment of the buffer object to the attribute variable</span></span><br><span class="line">    gl.enableVertexAttribArray(a_attribute);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>LightedCube<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;main()&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;webgl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    Please use the browser supporting &quot;canvas&quot;.</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/webgl-debug.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/cuon-matrix.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;LightedCube.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="/images/LightedCube10.png" alt="LightedCube"></p>
<h4 id="代码2-LightedCube-animation"><a href="#代码2-LightedCube-animation" class="headerlink" title="代码2-LightedCube_animation"></a>代码2-LightedCube_animation</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LightedCube_animation.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_NormalMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightDirection;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;  gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;  vec4 normal = u_NormalMatrix * a_Normal;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;  float nDotL = max(dot(u_LightDirection, normalize(normal.xyz)), 0.0);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;  v_Color = vec4(a_Color.xyz * nDotL, a_Color.a);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Set the clear color and enable the depth test</span></span><br><span class="line">    <span class="comment">// gl.clearColor(0, 0, 0, 1);</span></span><br><span class="line">    gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_MvpMatrix&#x27;</span>);<span class="comment">//模型视图投影矩阵</span></span><br><span class="line">    <span class="keyword">var</span> u_NormalMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_NormalMatrix&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_LightDirection = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_LightDirection&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lightDirection = <span class="keyword">new</span> Vector3([<span class="number">0.5</span>, <span class="number">3.0</span>, <span class="number">4.0</span>]);<span class="comment">//设置光线方向（世界坐标系下）</span></span><br><span class="line">    lightDirection.normalize();<span class="comment">//归一化</span></span><br><span class="line">    gl.uniform3fv(u_LightDirection, lightDirection.elements);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();<span class="comment">//视图投影矩阵</span></span><br><span class="line">    mvpMatrix.setPerspective(<span class="number">30</span>, canvas.width / canvas.height, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    mvpMatrix.lookAt(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> currentAngle = <span class="number">0.0</span>; <span class="comment">//目前的旋转角度</span></span><br><span class="line">    <span class="keyword">var</span> modelMatrix = <span class="keyword">new</span> Matrix4(); <span class="comment">//模型矩阵</span></span><br><span class="line">    <span class="keyword">var</span> vpMatrix = <span class="keyword">new</span> Matrix4();<span class="comment">//模型视图投影矩阵</span></span><br><span class="line">    <span class="keyword">var</span> normalMatrix = <span class="keyword">new</span> Matrix4();<span class="comment">//法线变换矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        currentAngle = animate(currentAngle);<span class="comment">//更新当前旋转角度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算模型矩阵</span></span><br><span class="line">        modelMatrix.setRotate(currentAngle, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">//围绕y轴旋转</span></span><br><span class="line">        vpMatrix.set(mvpMatrix).multiply(modelMatrix);</span><br><span class="line">        gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, vpMatrix.elements);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Pass the matrix to transform the normal based on the model matrix to u_NormalMatrix</span></span><br><span class="line">        normalMatrix.setInverseOf(modelMatrix);</span><br><span class="line">        normalMatrix.transpose();</span><br><span class="line">        gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, normalMatrix.elements);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Clear color and depth buffer</span></span><br><span class="line">        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Draw the cube</span></span><br><span class="line">        gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        requestAnimationFrame(tick, canvas); <span class="comment">// Request that the browser ?calls tick</span></span><br><span class="line">    &#125;;</span><br><span class="line">    tick();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">gl, n, angle, vpMatrix, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create a cube</span></span><br><span class="line">    <span class="comment">//    v6----- v5</span></span><br><span class="line">    <span class="comment">//   /|      /|</span></span><br><span class="line">    <span class="comment">//  v1------v0|</span></span><br><span class="line">    <span class="comment">//  | |     | |</span></span><br><span class="line">    <span class="comment">//  | |v7---|-|v4</span></span><br><span class="line">    <span class="comment">//  |/      |/</span></span><br><span class="line">    <span class="comment">//  v2------v3</span></span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([   <span class="comment">// Vertex coordinates</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([     <span class="comment">// Colors</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>　    <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> normals = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([    <span class="comment">// Normal</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([       <span class="comment">// Indices of the vertices</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">        <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">        <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>,   <span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,    <span class="comment">// up</span></span><br><span class="line">        <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,  <span class="number">12</span>,<span class="number">14</span>,<span class="number">15</span>,    <span class="comment">// left</span></span><br><span class="line">        <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,  <span class="number">16</span>,<span class="number">18</span>,<span class="number">19</span>,    <span class="comment">// down</span></span><br><span class="line">        <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,  <span class="number">20</span>,<span class="number">22</span>,<span class="number">23</span>     <span class="comment">// back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the vertex coordinates and color to the buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, vertices, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Position&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, colors, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Color&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, normals, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Normal&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span> (!indexBuffer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the indices to the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initArrayBuffer</span>(<span class="params">gl, data, num, type, attribute</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = gl.createBuffer();   <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!buffer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Write date into the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);</span><br><span class="line">    <span class="comment">// Assign the buffer object to the attribute variable</span></span><br><span class="line">    <span class="keyword">var</span> a_attribute = gl.getAttribLocation(gl.program, attribute);</span><br><span class="line">    <span class="keyword">if</span> (a_attribute &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of &#x27;</span> + attribute);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    gl.vertexAttribPointer(a_attribute, num, type, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Enable the assignment of the buffer object to the attribute variable</span></span><br><span class="line">    gl.enableVertexAttribArray(a_attribute);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rotation angle (degrees/second)</span></span><br><span class="line"><span class="keyword">var</span> ANGLE_STEP = <span class="number">30.0</span>;</span><br><span class="line"><span class="comment">// Last time that this function was called</span></span><br><span class="line"><span class="keyword">var</span> g_last = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">angle</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Calculate the elapsed time</span></span><br><span class="line">    <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">var</span> elapsed = now - g_last;</span><br><span class="line">    g_last = now;</span><br><span class="line">    <span class="comment">// Update the current rotation angle (adjusted by the elapsed time)</span></span><br><span class="line">    <span class="keyword">var</span> newAngle = angle + (ANGLE_STEP * elapsed) / <span class="number">1000.0</span>;</span><br><span class="line">    <span class="keyword">return</span> newAngle %= <span class="number">360</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="效果：3-1-平行光下漫反射的缺陷-3-1-平行光下漫反射的缺陷"><a href="#效果：3-1-平行光下漫反射的缺陷-3-1-平行光下漫反射的缺陷" class="headerlink" title="[效果：3.1 平行光下漫反射的缺陷](#3.1 平行光下漫反射的缺陷)"></a>[效果：3.1 平行光下漫反射的缺陷](#3.1 平行光下漫反射的缺陷)</h5><h4 id="代码3-LightedCube-ambient"><a href="#代码3-LightedCube-ambient" class="headerlink" title="代码3-LightedCube_ambient"></a>代码3-LightedCube_ambient</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LightedCube_ambient.js</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Color;\n&#x27;</span> + <span class="comment">//表面基底色</span></span><br><span class="line">    <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> + <span class="comment">//法向量</span></span><br><span class="line">    <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightColor;\n&#x27;</span> + <span class="comment">//光线颜色</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_LightDirection;\n&#x27;</span> + <span class="comment">//归一化的世界坐标（入射光方向）</span></span><br><span class="line">    <span class="string">&#x27;uniform vec3 u_AmbientLight;\n&#x27;</span> + <span class="comment">//环境光颜色</span></span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;   vec3 normal = normalize(vec3(a_Normal));\n&#x27;</span> + <span class="comment">//对法向量进行归一化</span></span><br><span class="line">    <span class="string">&#x27;   float nDotL = max(dot(u_LightDirection, normal), 0.0);\n&#x27;</span> + <span class="comment">//计算光线方向和法向量的点积</span></span><br><span class="line">    <span class="string">&#x27;   vec3 diffuse = u_LightColor * vec3(a_Color) * nDotL;\n&#x27;</span> + <span class="comment">//计算漫反射光的颜色</span></span><br><span class="line">    <span class="string">&#x27;   vec3 ambient = u_AmbientLight * vec3(a_Color);\n&#x27;</span> + <span class="comment">//计算环境光产生的反射光颜色</span></span><br><span class="line">    <span class="string">&#x27;   v_Color = vec4(diffuse + ambient, a_Color.a);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE=</span><br><span class="line">    <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;   gl_FragColor = v_Color;\n&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;webgl&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!canvas) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to retrieve the &lt;canvas&gt; element&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">    <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to get the rendering context for WebGL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Failed to initialize shaders.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置顶点位置</span></span><br><span class="line">    <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the positions of the vertices&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the clear color and enable the depth test</span></span><br><span class="line">    <span class="comment">// gl.clearColor(0, 0, 0, 1);</span></span><br><span class="line">    gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_MvpMatrix&#x27;</span>);<span class="comment">//模型视图投影矩阵</span></span><br><span class="line">    <span class="keyword">var</span> u_LightColor = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_LightColor&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_LightDirection = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_LightDirection&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> u_AmbientLight = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_AmbientLight&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!u_MvpMatrix || !u_LightColor || !u_LightDirection || !u_AmbientLight) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gl.uniform3f(u_LightColor, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>); <span class="comment">//设置光线颜色为白色</span></span><br><span class="line">    gl.uniform3f(u_AmbientLight, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>); <span class="comment">//设置环境光颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lightDirection = <span class="keyword">new</span> Vector3([<span class="number">0.5</span>, <span class="number">3.0</span>, <span class="number">4.0</span>]);<span class="comment">//设置光线方向（世界坐标系下）</span></span><br><span class="line">    lightDirection.normalize();<span class="comment">//归一化</span></span><br><span class="line">    gl.uniform3fv(u_LightDirection, lightDirection.elements);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">    mvpMatrix.setPerspective(<span class="number">30</span>, canvas.width/canvas.height, <span class="number">1</span> ,<span class="number">100</span>);</span><br><span class="line">    mvpMatrix.lookAt(<span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, mvpMatrix.elements);</span><br><span class="line"></span><br><span class="line">    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create a cube</span></span><br><span class="line">    <span class="comment">//    v6----- v5</span></span><br><span class="line">    <span class="comment">//   /|      /|</span></span><br><span class="line">    <span class="comment">//  v1------v0|</span></span><br><span class="line">    <span class="comment">//  | |     | |</span></span><br><span class="line">    <span class="comment">//  | |v7---|-|v4</span></span><br><span class="line">    <span class="comment">//  |/      |/</span></span><br><span class="line">    <span class="comment">//  v2------v3</span></span><br><span class="line">    <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([   <span class="comment">// Vertex coordinates</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>, <span class="number">1.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>,-<span class="number">1.0</span>,-<span class="number">1.0</span>,  -<span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>,   <span class="number">1.0</span>, <span class="number">1.0</span>,-<span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([     <span class="comment">// Colors</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,     <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>　    <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> normals = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([    <span class="comment">// Normal</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">        <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,   <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">        -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">        <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,   <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,   <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>   <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([       <span class="comment">// Indices of the vertices</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">        <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">        <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>,   <span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,    <span class="comment">// up</span></span><br><span class="line">        <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,  <span class="number">12</span>,<span class="number">14</span>,<span class="number">15</span>,    <span class="comment">// left</span></span><br><span class="line">        <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,  <span class="number">16</span>,<span class="number">18</span>,<span class="number">19</span>,    <span class="comment">// down</span></span><br><span class="line">        <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,  <span class="number">20</span>,<span class="number">22</span>,<span class="number">23</span>     <span class="comment">// back</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the vertex coordinates and color to the buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, vertices, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Position&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, colors, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Color&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!initArrayBuffer(gl, normals, <span class="number">3</span>, gl.FLOAT, <span class="string">&#x27;a_Normal&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">if</span> (!indexBuffer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the indices to the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initArrayBuffer</span>(<span class="params">gl, data, num, type, attribute</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = gl.createBuffer();   <span class="comment">// Create a buffer object</span></span><br><span class="line">    <span class="keyword">if</span> (!buffer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Write date into the buffer object</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);</span><br><span class="line">    <span class="comment">// Assign the buffer object to the attribute variable</span></span><br><span class="line">    <span class="keyword">var</span> a_attribute = gl.getAttribLocation(gl.program, attribute);</span><br><span class="line">    <span class="keyword">if</span> (a_attribute &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of &#x27;</span> + attribute);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    gl.vertexAttribPointer(a_attribute, num, type, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Enable the assignment of the buffer object to the attribute variable</span></span><br><span class="line">    gl.enableVertexAttribArray(a_attribute);</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a><a href="">效果</a></h5><p><img src="/images/LightedCube12.png"></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>【WebGL之巅】（完结篇）30-层次模型-多节点模型</title>
    <url>/30-%E5%B1%82%E6%AC%A1%E6%A8%A1%E5%9E%8B-%E5%A4%9A%E8%8A%82%E7%82%B9%E6%A8%A1%E5%9E%8B-MultiJointModel/</url>
    <content><![CDATA[<p>对应《WebGL编程指南》第九章 44-MultiJointModel、45-MultiJointModel_segment</p>
<p>要点：层次结构模型、多节点模型</p>
<span id="more"></span>

<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="一、多节点模型"><a href="#一、多节点模型" class="headerlink" title="一、多节点模型"></a>一、多节点模型</h3><p>这一节将把 JointModel 扩展为 <a href="#%E4%BB%A3%E7%A0%811">MultiJointModel</a>，后者绘制一个具有多个关节的完整的机器人手臂，包括基座 base，上臂 arm1，前臂 arm2，手掌 palm，两根手指 finger1 &amp; finger2，全部可以通过键盘来控制。arm1 和 arm2 的连接关节 joint1 位于 arm1 顶部，arm2 和 palm 的连接关节 joint2 位于 arm2 顶部，finger1 和 finger2 位于 palm 一段，如下图所示：<br><img src="/images/MultiJointModel1.png" alt="MultiJointModel中的层次结构"></p>
<p>实现功能：用户可以通过键盘操纵机器人手臂，arm1 和 arm2 的操作和 JointModel 一样，此外，还可以使用 x 和 z 键旋转 Joint2，使用 C 和 V 键旋转 finger1 和 finger2。控制这些小部件旋转角度的全局变量。</p>
<h4 id="1-1-程序分析"><a href="#1-1-程序分析" class="headerlink" title="1.1 程序分析"></a>1.1 程序分析</h4><blockquote>
<p>对应代码：<a href="#%E4%BB%A3%E7%A0%811">MultiJointModel</a></p>
</blockquote>
<p>示例程序 <code>MultiJointModel</code> 和 <code>JointModel</code> 相比，主要有两处不同：<code>keydown()</code>函数响应更多的键盘情况，<code>draw()</code>函数绘制各部件的逻辑更复杂了。</p>
<h5 id="keydown-函数"><a href="#keydown-函数" class="headerlink" title="keydown()函数"></a>keydown()函数</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ANGLE_STEP = <span class="number">3.0</span>;    <span class="comment">// 每次按键转动的角度</span></span><br><span class="line"><span class="keyword">var</span> g_arm1Angle = <span class="number">90.0</span>; <span class="comment">// arm1的当前角度</span></span><br><span class="line"><span class="keyword">var</span> g_joint1Angle = <span class="number">45.0</span>; <span class="comment">// joint1的当前角度</span></span><br><span class="line"><span class="keyword">var</span> g_joint2Angle = <span class="number">0.0</span>;  <span class="comment">// joint2</span></span><br><span class="line"><span class="keyword">var</span> g_joint3Angle = <span class="number">0.0</span>;  <span class="comment">// joint3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keydown</span>(<span class="params">ev, gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (ev.keyCode) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">40</span>: <span class="comment">// 上方向键 - joint1绕z轴正向转动</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint1Angle &lt; <span class="number">135.0</span>) g_joint1Angle += ANGLE_STEP;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">38</span>: <span class="comment">// 下方向键 - joint1绕z轴负向转动</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint1Angle &gt; -<span class="number">135.0</span>) g_joint1Angle -= ANGLE_STEP;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">39</span>: <span class="comment">// 右方向键 - arm1绕y轴正向转动</span></span><br><span class="line">      g_arm1Angle = (g_arm1Angle + ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">37</span>: <span class="comment">// 左方向键 - arm1绕y轴负向转动</span></span><br><span class="line">      g_arm1Angle = (g_arm1Angle - ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span>: <span class="comment">// &#x27;ｚ&#x27;key -&gt; 使joint2正向旋转</span></span><br><span class="line">      g_joint2Angle = (g_joint2Angle + ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">case</span> <span class="number">88</span>: <span class="comment">// &#x27;x&#x27;key -&gt; 使joint2负向旋转</span></span><br><span class="line">      g_joint2Angle = (g_joint2Angle - ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">86</span>: <span class="comment">// &#x27;v&#x27;key -&gt; 使joint3正向旋转</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint3Angle &lt; <span class="number">60.0</span>)  g_joint3Angle = (g_joint3Angle + ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">67</span>: <span class="comment">// &#x27;c&#x27;key -&gt; 使joint3负向旋转</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint3Angle &gt; -<span class="number">60.0</span>) g_joint3Angle = (g_joint3Angle - ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span>; <span class="comment">// Skip drawing at no effective action</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Draw the robot arm</span></span><br><span class="line">  draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>本例的 keydown()函数，除了需要在方向键被按下时做出响应，更新 <code>g_arm1Angle</code> 和 <code>g_joint1Angle</code> 变量，还需要在<code>Z</code>键、<code>X</code>键、<code>V</code>键和<code>C</code>键被按下时做出响应，更新 <code>g_joint2Angle</code> 和 <code>g_joint3Angle</code> 变量。在此之后，就调用 draw()函数，把整个模型画出来。</p>
<p>模型的各个部件 base、arm1、arm2、palm、finger1 和 finger2 等虽然都是立方体，但是长宽高各不相同。所以本例扩展了 drawBox(）函数，添加了3个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBox</span>(<span class="params">gl, n, width, height, depth, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>)</span></span><br></pre></td></tr></table></figure>

<p>新增加的3个参数表示部件的<u>宽度、高度和长度（深度）</u>，drawBox(）会根据这3个参数，将部件分毫不差地绘制出来。</p>
<h5 id="draw-函数—绘制模型部分"><a href="#draw-函数—绘制模型部分" class="headerlink" title="draw()函数—绘制模型部分"></a>draw()函数—绘制模型部分</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变换坐标的矩阵</span></span><br><span class="line"><span class="keyword">var</span> g_modelMatrix = <span class="keyword">new</span> Matrix4(), g_mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用以清空颜色缓冲区和深度缓冲区的背景颜色</span></span><br><span class="line">  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// base绘制</span></span><br><span class="line">  <span class="keyword">var</span> baseHeight = <span class="number">2.0</span>;</span><br><span class="line">  g_modelMatrix.setTranslate(<span class="number">0.0</span>, -<span class="number">12.0</span>, <span class="number">0.0</span>);</span><br><span class="line">  drawBox(gl, n, <span class="number">10.0</span>, baseHeight, <span class="number">10.0</span>, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Arm1</span></span><br><span class="line">  <span class="keyword">var</span> arm1Length = <span class="number">10.0</span>;</span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, baseHeight, <span class="number">0.0</span>);     <span class="comment">// Move onto the base</span></span><br><span class="line">  g_modelMatrix.rotate(g_arm1Angle, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);  <span class="comment">// Rotate around the y-axis</span></span><br><span class="line">  drawBox(gl, n, <span class="number">3.0</span>, arm1Length, <span class="number">3.0</span>, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Arm2</span></span><br><span class="line">  <span class="keyword">var</span> arm2Length = <span class="number">10.0</span>;</span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, arm1Length, <span class="number">0.0</span>);       <span class="comment">// Move to joint1</span></span><br><span class="line">  g_modelMatrix.rotate(g_joint1Angle, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);  <span class="comment">// Rotate around the z-axis</span></span><br><span class="line">  drawBox(gl, n, <span class="number">4.0</span>, arm2Length, <span class="number">4.0</span>, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A palm</span></span><br><span class="line">  <span class="keyword">var</span> palmLength = <span class="number">2.0</span>;</span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, arm2Length, <span class="number">0.0</span>);       <span class="comment">// Move to palm</span></span><br><span class="line">  g_modelMatrix.rotate(g_joint2Angle, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);  <span class="comment">// Rotate around the y-axis</span></span><br><span class="line">  drawBox(gl, n, <span class="number">2.0</span>, palmLength, <span class="number">6.0</span>, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);  <span class="comment">// Draw</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Move to the center of the tip of the palm</span></span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, palmLength, <span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Draw finger1</span></span><br><span class="line">  pushMatrix(g_modelMatrix);</span><br><span class="line">    g_modelMatrix.translate(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">2.0</span>);</span><br><span class="line">    g_modelMatrix.rotate(g_joint3Angle, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);  <span class="comment">// Rotate around the x-axis</span></span><br><span class="line">    drawBox(gl, n, <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">1.0</span>, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line">  g_modelMatrix = popMatrix();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Draw finger2</span></span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">2.0</span>);</span><br><span class="line">  g_modelMatrix.rotate(-g_joint3Angle, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);  <span class="comment">// Rotate around the x-axis</span></span><br><span class="line">  drawBox(gl, n, <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">1.0</span>, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>draw()函数的任务和 JointModel 中的相同，就是对每个部件进行：</p>
<ul>
<li>平移</li>
<li>旋转</li>
<li>绘制</li>
</ul>
<p>首先，base 不会旋转，所以只需要将其移动到合适的位置，再调用 <code>drawBox()</code>进行绘制。通过向<code>drawBox()</code>传入参数，指定 base 的宽度是10，高度是2，长度是10，即一个扁平的基座。</p>
<p>然后，按照 <u>arm1、arm2 和 palm</u> 这些部件在模型中的层次顺序，对每一个部件都进行上述三个步骤，这与 JointModel 中的是一样的。</p>
<p>比较麻烦的是 <u>finger1 和 finger2</u>，<u>因为它们并不是上下层的关系，而是都连接在 palm 上</u>，此时要格外注意计算模型矩阵的过程。首先来看 finger1，它相对于 palm 原点<u>沿Z 轴平移了2.0</u>单位，并且可以绕X轴旋转，我们执行上述三个步骤。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">g_modelMatrix.translate(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">2.0</span>);</span><br><span class="line">g_modelMatrix.rotate(g_joint3Angle, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);  <span class="comment">// Rotate around the x-axis</span></span><br><span class="line">drawBox(gl, n, <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">1.0</span>, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);</span><br></pre></td></tr></table></figure>

<p>接着看 finger2，如果遵循上述同样的步骤，沿 z 轴平移 -2.0 个单位并绕X轴旋转就会出现问题。在将模型矩阵“沿Z轴平移-2.0个单位”之前，模型矩阵实际上处于绘制 finger1 的状态，<u>这会导致 finger2 连接在 finger1 而不是 palm上</u>，使得 <u>finger1 转动带动 finger2</u>。</p>
<p>所以，我们在绘制 finger1 之前，<strong>先将模型矩阵保存起来</strong>；绘制完 finger1 后，<strong>再将保存的模型矩阵取出来作为当前的模型矩阵</strong>，<strong>并继续绘制 finger2</strong>。可以使用一个<strong>栈</strong>来完成这项操作：调用 <code>pushMatrix()</code> 并将模型矩阵 <code>g_modelMatrix</code> 作为参数传入，将当时模型矩阵的状态保存起来，然后绘制完 finger1后，调<code>popMatrix()</code>获取之前保存的矩阵，并赋给 <code>g_modelMatrix</code>，使模型矩阵又回到绘制 finger1 之前的状态，在此基础上绘制 finger2。</p>
<p><code>pushMatrix()</code>函数和<code>popMatrix()</code>函数如下所示，它们使用全局变量 <code>g_matrixStack</code> 来存储矩阵，前者向栈中压入一个矩阵，而后者从栈中取出一个。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> g_matrixStack = []; <span class="comment">// 存储矩阵的栈</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushMatrix</span>(<span class="params">m</span>) </span>&#123; <span class="comment">// 将矩阵压入栈</span></span><br><span class="line">  <span class="keyword">var</span> m2 = <span class="keyword">new</span> Matrix4(m);</span><br><span class="line">  g_matrixStack.push(m2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">popMatrix</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 从栈中弹出矩阵</span></span><br><span class="line">  <span class="keyword">return</span> g_matrixStack.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只要栈足够深，用这种方法就可以绘制任意复杂的层次 结构模型。我们只需要按照层次顺序，从高到低绘制部件，并在绘制“具有兄弟部件”的部件前将模型矩阵压入栈，绘制完再弹出即可。</p>
</blockquote>
<h5 id="drawBox-绘制部件"><a href="#drawBox-绘制部件" class="headerlink" title="drawBox()绘制部件"></a>drawBox()绘制部件</h5><p>最后看一下 <code>drawBox()</code>函数，该函数的任务是绘制机器人手臂的一个部件，它接受若干个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBox</span>(<span class="params">gl, n, width, height, depth, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>)</span></span><br></pre></td></tr></table></figure>

<p>参数 <code>width</code>、<code>height</code> 和 <code>depth</code> 分别表示待绘制部件的<u>宽度、高度和深度</u>。其他的参数与 JointMode.js 中无异：</p>
<ul>
<li>参数 viewMatrix 表示视图矩阵</li>
<li>u_MvpMatrix 表示模型视图投影矩阵</li>
<li>u_NormalMatrix 表示用来计算变换后的法向量矩阵</li>
<li>后两者被传给顶点着色器中相应的同名 uniform 变量。</li>
</ul>
<p>此外，与 JointModel 不同的是，本例中部件的三维模型是标准化的立方体，其边长为1，原点位于底面。<code>drawBox()</code>函数的定义如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Draw rectangular solid</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBox</span>(<span class="params">gl, n, width, height, depth, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  pushMatrix(g_modelMatrix);   <span class="comment">// Save the model matrix</span></span><br><span class="line">    <span class="comment">// Scale a cube and draw</span></span><br><span class="line">    g_modelMatrix.scale(width, height, depth);</span><br><span class="line">    <span class="comment">// Calculate the model view project matrix and pass it to u_MvpMatrix</span></span><br><span class="line">    g_mvpMatrix.set(viewProjMatrix);</span><br><span class="line">    g_mvpMatrix.multiply(g_modelMatrix);</span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, g_mvpMatrix.elements);</span><br><span class="line">    <span class="comment">// Calculate the normal transformation matrix and pass it to u_NormalMatrix</span></span><br><span class="line">    g_normalMatrix.setInverseOf(g_modelMatrix);</span><br><span class="line">    g_normalMatrix.transpose();</span><br><span class="line">    gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, g_normalMatrix.elements);</span><br><span class="line">    <span class="comment">// Draw</span></span><br><span class="line">    gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">  g_modelMatrix = popMatrix();   <span class="comment">// Retrieve the model matrix</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>drawBox()</code>函数首先将<strong>模型矩阵</strong>乘以由 width、height 和 depth 参数生成的<strong>缩放矩阵</strong>，使绘制处的立方体尺寸与设想的一样。然后使用 pushMatrix()函数将模型矩阵压入栈中，使用 popMatrix()再重新获得之。如果不这样做，当绘制 arm2 的时候，对 arm1的拉伸效果还会仍然留在模型矩阵中，并影响 arm2 的绘制。</p>
<p>虽然 pushMareix()函数和 popMatrix()函数使代码变得更复杂了，但这是值得的，因为你只用了一组顶点数据就绘制了好几个大小位置各不相同的立方体部件。或者，我们也可以对每一个部件都单独使用一组顶点数据，接下来看看如何实现。</p>
<hr>
<h4 id="1-2-drawSegments-—绘制部件"><a href="#1-2-drawSegments-—绘制部件" class="headerlink" title="1.2 drawSegments()—绘制部件"></a>1.2 drawSegments()—绘制部件</h4><blockquote>
<p>对应代码：<a href="#%E4%BB%A3%E7%A0%812">MultiJointModel_segment</a></p>
</blockquote>
<h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>这一节将换一种方式来绘制机器人手臂，那就是，<u>对每一个部件，都定义一组顶点数据，并存储在一个单独的缓冲区对象中</u>。通常，一个部件的定点数据包括坐标、法向量、索引值等，但是这里的每个部件都是立方体，所以你可以让各部件共享法向量和索引值，而仅仅为个部件单独定义顶点坐标。每个部件的顶点坐标分别存储在对应的缓冲区中，在绘制整条机器人手臂时轮流使用。</p>
<p><a href="#%E4%BB%A3%E7%A0%812">实例程序</a>的关键点是：</p>
<ul>
<li><p>为每个部件单独创建一个缓冲区，在其中存储顶点的坐标数据</p>
</li>
<li><p>绘制部件之前，将相应缓冲区对象分配给 a_Position 变量</p>
</li>
<li><p>开启 a_Position 变量并绘制该部件</p>
</li>
</ul>
<p>main(）函数的流程很简明，包括初始化缓冲区，获取 a_Position 的存储地址，然后调用 draw(）函数进行绘制等。</p>
<h5 id="initVertexBuffers"><a href="#initVertexBuffers" class="headerlink" title="initVertexBuffers()"></a>initVertexBuffers()</h5><p>接着来看 <code>initVertexBuffers()</code>函数，该函数之前定义了若干全局变量，白哦啊是存储各个部件顶点坐标数据的缓冲区对象。本例与 MultiJointModel.js 的主要区别在<strong>顶点坐标</strong>上，我们不再使用一个立方体经过不同变换来绘制不同的部件，而是<u>将每个部件的顶点坐标分开定义在不同的数组中</u>。</p>
<h5 id="initArrayBufferForLatreUse"><a href="#initArrayBufferForLatreUse" class="headerlink" title="initArrayBufferForLatreUse()"></a>initArrayBufferForLatreUse()</h5><p>真正创建这些缓冲对象是由 <code>initArrayBufferForLatreUse()</code>函数完成的，该函数定义如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initArrayBufferForLaterUse</span>(<span class="params">gl, data, num, type</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> buffer = gl.createBuffer();   <span class="comment">// Create a buffer object</span></span><br><span class="line">  <span class="keyword">if</span> (!buffer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Write date into the buffer object</span></span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Store the necessary information to assign the object to the attribute variable later</span></span><br><span class="line">  buffer.num = num;</span><br><span class="line">  buffer.type = type;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <code>initArrayBufferForLatreUse()</code>函数首先创建了缓冲区对象，然后向其中写入数据。</p>
<p>注意，函数并没有将缓冲区对象分配给 attribute 变量(<code>gl.vertexAtteibPointer()</code>)或开启<code>attribute</code> 变量（<code>gl.enableVertexAttribArray()</code>），这两个步骤将留到真正进行绘制之前再完成。</p>
<p>另外，为了<u>便于将缓冲区分配给 attribute 变量，我们手动为其添加了两个属性 num 和 type。</u></p>
<blockquote>
<p>这里利用了 JS 的一个有趣的特性，就是可以<u>自由地对对象添加新的属性</u>。你可以直接通过属性名为对象添加新属性，并向其赋值。如你所见，我们为缓冲区对象添加了新的 num 属性并<u>保存其中顶点的个数</u>，添加了 <u>type 属性以保存数据类型</u>。当然，也可以通过相同的方式访问这些属性。注意，在使用 JS 的这项特性时应格外小心，如果不小心拼错了属性名，浏览器也不会报错。同样你也应该记得，这样做会增加性能开销。</p>
</blockquote>
<p>最后，调用 <code>draw()</code>函数绘制整个模型，与 MultiJointModel 中一样。但是调用 drawSegments()函数的方式与前例调用 drawBox()函数的方式有所不同，第3个参数是存储了顶点坐标数据的缓冲区对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">drawSegment(gl, n, buffer, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix) </span><br></pre></td></tr></table></figure>

<p>drawSegments()将缓冲区对象分配给 a_Position 变量并开启之，然后调用 gl.drawElements()进行绘制操作。这里使用了之前为缓冲区对象添加的 num 和 type 属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绘制部件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSegment</span>(<span class="params">gl, n, buffer, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">  <span class="comment">// Assign the buffer object to the attribute variable</span></span><br><span class="line">  gl.vertexAttribPointer(a_Position, buffer.num, buffer.type, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// Enable the assignment of the buffer object to the attribute variable</span></span><br><span class="line">  gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Calculate the model view project matrix and pass it to u_MvpMatrix</span></span><br><span class="line">  g_mvpMatrix.set(viewProjMatrix);</span><br><span class="line">  g_mvpMatrix.multiply(g_modelMatrix);</span><br><span class="line">  gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, g_mvpMatrix.elements);</span><br><span class="line">  <span class="comment">// Calculate matrix for normal and pass it to u_NormalMatrix</span></span><br><span class="line">  g_normalMatrix.setInverseOf(g_modelMatrix);</span><br><span class="line">  g_normalMatrix.transpose();</span><br><span class="line">  gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, g_normalMatrix.elements);</span><br><span class="line">  <span class="comment">// Draw</span></span><br><span class="line">  gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一次，你不必再像前例中那样，在绘制每个部件时对模型矩阵进行<u>缩放操作</u>了，因为<u>每个部件的顶点坐标都已经事先定义好了</u>。同样也没必要再使用<strong>栈</strong>来管理模型矩阵，所以 pushMatrix()函数和 popMatrix()也不需要了。</p>
<h3 id="二、着色器和着色器程序对象：initShaders-函数的作用"><a href="#二、着色器和着色器程序对象：initShaders-函数的作用" class="headerlink" title="二、着色器和着色器程序对象：initShaders()函数的作用"></a>二、着色器和着色器程序对象：initShaders()函数的作用</h3><p>最后，本章来研究一下以前一直使用的辅助函数 <code>initShaders()</code>。以前的所有程序都使用了这个函数，它隐藏了<u>建立和初始化着色器</u>的细节。本书故意将这一部分内容留到最后，是为了确保你在学习 initShaders(）函数中的复杂细节时，对 WebGL 已经有了比较深入的交接。掌握这部分内容并不是必须的，直接使用 initShaders()函数也能够编写处相当不错的 WebGL 程序，但如果你确实很想知道 WebGL 原生 API 是如何将字符串形式的 GLSL ES 代码编译为显卡中运行的着色器程序，那么这一节的内容将大大满足你的好奇心。<br>initShaders()函数的作用是，<u>编译 GLSL ES 代码，创建和初始化着色器供 WebGL 使用</u>。具体地，分为以下7个步骤：</p>
<ul>
<li>创建着色器对象（gl.createShader）</li>
<li>向着色器对象中填充着色器程序的源代码（gl.shaderSource）</li>
<li>编译着色器（gl.compileShader）</li>
<li>创建程序对象（gl.createProgram）</li>
<li>为程序对象分配着色器（gl.attachShader）</li>
<li>连接程序对象（gl.linkProgram）</li>
<li>使用程序对象（gl.useProgram）</li>
</ul>
<p>虽然每一步看上去都比较简单，但放在一起显得复杂了，我们将逐条讨论。</p>
<h4 id="2-1-着色器对象和程序对象"><a href="#2-1-着色器对象和程序对象" class="headerlink" title="2.1 着色器对象和程序对象"></a>2.1 着色器对象和程序对象</h4><p>首先，你需要知道这里出现了两种对象：<strong>着色器对象</strong>和<strong>程序对象</strong>。</p>
<p><strong>着色器对象</strong>：着色器对象管理一个顶点着色器或一个片元着色器。每一个着色器都有一个着色器对象。</p>
<p><strong>程序对象</strong>：程序对象是管理着色器对象的容器。WebGL 中，一个程序对象必须包含一个顶点着色器和一个片元着色器。</p>
<p>着色器对象和程序对象间的关系：</p>
<p><img src="/images/MultiJointModel3.png" alt="着色器对象和程序对象"></p>
<h4 id="2-2-创建着色器对象（gl-createShader-）"><a href="#2-2-创建着色器对象（gl-createShader-）" class="headerlink" title="2.2 创建着色器对象（gl.createShader()）"></a>2.2 创建着色器对象（gl.createShader()）</h4><p>所有的着色器对象都必须通过调用 gl.createShader(）来创建。</p>
<p><img src="/images/MultiJointModel5.png" alt="gl.createShader"></p>
<p>gl.createShader(）函数根据传入的参数创建一个顶点着色器或者片元着色器。如果不再需要这个着色器，可以调用 gl.deleteShader(）函数来删除着色器。</p>
<p><img src="/images/MultiJointModel6.png" alt="gl.deleteShader"></p>
<p>注意，如果着色器对象还在使用，那么 gl.deleteShader(）并不会立刻删除着色器，而是要等到程序对象不再使用该着色器后，才将其删除。</p>
<h4 id="2-3-指定着色器对象的代码（gk-shaderSource）"><a href="#2-3-指定着色器对象的代码（gk-shaderSource）" class="headerlink" title="2.3 指定着色器对象的代码（gk.shaderSource）"></a>2.3 指定着色器对象的代码（gk.shaderSource）</h4><p>通过 gl.shaderSource(）函数向着色器制动 GLSL ES 源代码。在 JS 程序中，源代码以字符串的形式存储。</p>
<p><img src="/images/MultiJointModel7.png" alt="gl.shaderSource"></p>
<h4 id="2-4-编译着色器（gl-compileShader）"><a href="#2-4-编译着色器（gl-compileShader）" class="headerlink" title="2.4 编译着色器（gl.compileShader）"></a>2.4 编译着色器（gl.compileShader）</h4><p>向着色器对象传入源代码之后，还需要对其进行编译才能够使用。GLSL ES 语言和 JS 不同而更接近 C 或 C++，在使用之前需要编译成二进制的可执行格式，WebGL 系统真正使用的是这种可执行格式。使用 gl.compileShader(）函数进行编译。注意，如果你通过调用 gl.shaderSource(），用新的代码替换掉了着色器中旧的代码，WebGL 系统中的用旧的代码编译处可执行部分不会被自动替换，你需要手动地重新进行编译。</p>
<p><img src="/images/MultiJointModel8.png" alt="gl.compileShader"></p>
<p>当调用 gl.compileShader(）函数时，如果着色器代码中存在错误，那么就会出现编译错误。可以调用 gl.getShaderParameter(）函数来检查着色器的状态。</p>
<p><img src="/images/MultiJointModel9.png" alt="gl.getShaderParameter"></p>
<p>调用 gl.getShaderParameter(）并将参数 pname 指定为 gl.COMPILE_STATUS，就可以检查着色器编译是否成功。</p>
<p>如果编译失败，gl.getShaderParameter(）会返回 false，WebGL 系统会把编译错误的具体内容写入着色器的信息日志，我们可以通过 gl.getShaderInfoLog(）来获取之。</p>
<p><img src="/images/MultiJointModel10.png" alt="gl.getShaderInfoLog"></p>
<p>虽然日志信息的具体格式依赖于浏览器对 WebGL 的实现，但大多数 WebGL 系统给出的错误信息都会包含代码出错行的行号。比如，如果你试图编译如下这样一个着色器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> FSHADER_SOURCE = </span><br><span class="line">    <span class="string">&#x27;void main()&#123;\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;	gl.FragColor = vec4(1.0,0.0,0.0,1.0);\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/images/MultiJointModel4.png" alt="错误信息"></p>
<h4 id="2-5-创建程序对象（gl-createProgram）"><a href="#2-5-创建程序对象（gl-createProgram）" class="headerlink" title="2.5 创建程序对象（gl.createProgram）"></a>2.5 创建程序对象（gl.createProgram）</h4><p>如前所述，程序对象包含了顶点着色器和片元着色器，可以调用 gl.createProgram(）来创建程序对象。事实上，之前使用程序对象，gl.getAttribLocation(）函数和 gl.getUniformLocation(）函数的第1个参数，就是这个程序对象。</p>
<p><img src="/images/MultiJointModel11.png" alt="gl.createProgram"></p>
<p>类似地，可以使用 gl.deleteProgram(）函数来删除程序对象。</p>
<p><img src="/images/MultiJointModel12.png" alt="gl.deleteProgram"></p>
<p>一旦程序对象被创建之后，需要向程序附上两个着色器。</p>
<h4 id="2-6-为程序对象分配着色器对象（gl-attachShader）"><a href="#2-6-为程序对象分配着色器对象（gl-attachShader）" class="headerlink" title="2.6 为程序对象分配着色器对象（gl.attachShader）"></a>2.6 为程序对象分配着色器对象（gl.attachShader）</h4><p>WebGL 系统要运行起来，必须要有两个着色器：一个顶点着色器和一个片元着色器。可以使用 gl.attachShader(）函数为程序对象分配这两个着色器。</p>
<p><img src="/images/MultiJointModel13.png" alt="gl.attachShader"></p>
<p>着色器在附给程序对象前，并不一定要为其指定代码或进行编译。也就是说，把空的着色器赋给程序对象也是可以的。类似的，可以使用 gl.derachShader(）函数来解除分配给程序对象的着色器。</p>
<p><img src="/images/MultiJointModel14.png" alt="gl.derachShader"></p>
<h4 id="2-7-连接程序对象（gl-linkProgram）"><a href="#2-7-连接程序对象（gl-linkProgram）" class="headerlink" title="2.7 连接程序对象（gl.linkProgram）"></a>2.7 连接程序对象（gl.linkProgram）</h4><p>在为程序对象分配了两个着色器对象后，还需要将着色器连接起来。使用 gl.linkProgram(）函数来进行这一步操作。</p>
<p><img src="/images/MultiJointModel15.png" alt="gl.linkProgram"></p>
<p>程序对象进行着色器连接操作，目的是保证：</p>
<ul>
<li><p>顶点着色器和片元着色器的 varying 变量同名同类型，且一一对应；</p>
</li>
<li><p>顶点着色器对每个varying 变量赋了值；</p>
</li>
<li><p>顶点着色器和片元着色器的同名uniform 变量也是同类型的，无需一一对应，即某些 uniform 变量可以出现在一个着色器中而不出现在另一个中；</p>
</li>
<li><p>着色器中的 attribute 变量、uniform 变量和 varying 变量的个数没有超过着色器的上学，等等。</p>
</li>
</ul>
<p>在着色器连接之后，应当检查是否连接成功。通过调用 gl.getProgramParameters(）函数来实现。<br><img src="/images/MultiJointModel16.png" alt="gl.getProgramParameters"></p>
<p>如果程序已经成功连接，我们就得到了一个二进制的可执行模块供 WebGL 系统使用。如果连接失败了，也可以通过调用 gl.getProgramInfoLog(）从信息日志中获取连接错误的信息。</p>
<p><img src="/images/MultiJointModel17.png" alt="gl.getProgramInfoLog"></p>
<h4 id="2-8-告知-WebGL-系统所使用的程序对象（gl-useProgram）"><a href="#2-8-告知-WebGL-系统所使用的程序对象（gl-useProgram）" class="headerlink" title="2.8 告知 WebGL 系统所使用的程序对象（gl.useProgram）"></a>2.8 告知 WebGL 系统所使用的程序对象（gl.useProgram）</h4><p>最后，通过调用 gl.useProgram(）告知 WebGL 系统绘制时使用哪个程序对象。</p>
<p><img src="/images/MultiJointModel18.png" alt="gl.useProgram"></p>
<p>这个函数的存在使得 WebGL 具有了一个强大的特性，那就是在会之前准备多个程序对象，然后在绘制的时候根据需要切换程序对象。</p>
<p>这样，建立和初始化着色器的任务就算完成了。如你所见，initShaders(）函数隐藏了大量的细节，我们可以放心地使用该函数来创建和初始化着色器，而不必考虑这些细节。本质上，在该函数顺利执行后，顶点着色器和偏远着色器就已经就位了，只需要调用 gl.drawArryas(）或 gl.drawElements(）来使整个 WebGL 系统运行起来。</p>
<h4 id="2-9-initShaders-）函数的内部流程"><a href="#2-9-initShaders-）函数的内部流程" class="headerlink" title="2.9 initShaders(）函数的内部流程"></a>2.9 initShaders(）函数的内部流程</h4><blockquote>
<p> cuon-utils.js 中 initShaders(）函数的内部流程。</p>
</blockquote>
<p>initShaders(） 函数将调用 createProgram(）函数，后者负责创建一个连接好的程序对象；createProgram(）函数则又会调用 loadShader(）函数，后者负责创建一个编译好的着色器对象；这3个函数被一次定义在 cuon-utils.js 文件中。initShaders(） 函数定义在该文件的顶部，注意该文件中每个函数前面的注释是按照 JavaDoc 的格式编写，它们可以用来自动化地生成文档。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initShaders</span>(<span class="params">gl, vshader, fshader</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> program = createProgram(gl, vshader, fshader);</span><br><span class="line">  <span class="keyword">if</span> (!program) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create program&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  gl.useProgram(program);</span><br><span class="line">  gl.program = program;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>initShaders(） 函数本身很简单，首先调用 createProgram(）函数创建一个连接好的额程序对象，然后告诉 WebGL 系统来使用这个程序对象，最后将程序对象设为 gl 对象的 program 属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createProgram</span>(<span class="params">gl, vshader, fshader</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create shader object</span></span><br><span class="line">  <span class="keyword">var</span> vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader);</span><br><span class="line">  <span class="keyword">var</span> fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader);</span><br><span class="line">  <span class="keyword">if</span> (!vertexShader || !fragmentShader) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a program object</span></span><br><span class="line">  <span class="keyword">var</span> program = gl.createProgram();</span><br><span class="line">  <span class="keyword">if</span> (!program) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Attach the shader objects</span></span><br><span class="line">  gl.attachShader(program, vertexShader);</span><br><span class="line">  gl.attachShader(program, fragmentShader);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Link the program object</span></span><br><span class="line">  gl.linkProgram(program);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check the result of linking</span></span><br><span class="line">  <span class="keyword">var</span> linked = gl.getProgramParameter(program, gl.LINK_STATUS);</span><br><span class="line">  <span class="keyword">if</span> (!linked) &#123;</span><br><span class="line">    <span class="keyword">var</span> error = gl.getProgramInfoLog(program);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to link program: &#x27;</span> + error);</span><br><span class="line">    gl.deleteProgram(program);</span><br><span class="line">    gl.deleteShader(fragmentShader);</span><br><span class="line">    gl.deleteShader(vertexShader);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> program;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>createProgram(）函数通过调用 loadShader(）函数，创建顶点着色器和片元着色器的着色器对象。loadShader(）函数返回的着色器对象已经制定过源码并已经成功编译了。</p>
<p>createProgram(）函数自己负责创建程序对象，然后将前面创建的顶点着色器和偏远着色器分配给程序对象。</p>
<p>接着，该函数连接程序对象，并检查是否连接成功。如果连接成功，就会返回程序对象。</p>
<p>最后来看一下 loadShader(）函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadShader</span>(<span class="params">gl, type, source</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create shader object</span></span><br><span class="line">  <span class="keyword">var</span> shader = gl.createShader(type);</span><br><span class="line">  <span class="keyword">if</span> (shader == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;unable to create shader&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the shader program</span></span><br><span class="line">  gl.shaderSource(shader, source);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Compile the shader</span></span><br><span class="line">  gl.compileShader(shader);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check the result of compilation</span></span><br><span class="line">  <span class="keyword">var</span> compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);</span><br><span class="line">  <span class="keyword">if</span> (!compiled) &#123;</span><br><span class="line">    <span class="keyword">var</span> error = gl.getShaderInfoLog(shader);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to compile shader: &#x27;</span> + error);</span><br><span class="line">    gl.deleteShader(shader);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> shader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>oadShader(）函数首先创建了一个着色器对象，然后为该着色器对象指定源代码，并进行编译，接着检查编译是否成功，如果成功编译，没有出错，就返回着色器对象。</p>
<blockquote>
<p>【WebGL之巅】系列完结</p>
</blockquote>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vertex shader program</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">  <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;uniform mat4 u_NormalMatrix;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">  <span class="comment">// Shading calculation to make the arm look three-dimensional</span></span><br><span class="line">  <span class="string">&#x27;  vec3 lightDirection = normalize(vec3(0.0, 0.5, 0.7));\n&#x27;</span> + <span class="comment">// Light direction</span></span><br><span class="line">  <span class="string">&#x27;  vec4 color = vec4(1.0, 0.4, 0.0, 1.0);\n&#x27;</span> +  <span class="comment">// Robot color</span></span><br><span class="line">  <span class="string">&#x27;  vec3 normal = normalize((u_NormalMatrix * a_Normal).xyz);\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  float nDotL = max(dot(normal, lightDirection), 0.0);\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  v_Color = vec4(color.rgb * nDotL + vec3(0.1), color.a);\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment shader program</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE =</span><br><span class="line">  <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  gl_FragColor = v_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Retrieve &lt;canvas&gt; element</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;webgl&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the rendering context for WebGL</span></span><br><span class="line">  <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">  <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the rendering context for WebGL&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize shaders</span></span><br><span class="line">  <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to intialize shaders.&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the vertex information</span></span><br><span class="line">  <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the vertex information&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the clear color and enable the depth test</span></span><br><span class="line">  <span class="comment">//gl.clearColor(0.0, 0.0, 0.0, 1.0);</span></span><br><span class="line">  gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the storage locations of uniform variables</span></span><br><span class="line">  <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_MvpMatrix&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> u_NormalMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_NormalMatrix&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!u_MvpMatrix || !u_NormalMatrix) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算视图投影矩阵</span></span><br><span class="line">  <span class="keyword">var</span> viewProjMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">  viewProjMatrix.setPerspective(<span class="number">50.0</span>, canvas.width / canvas.height, <span class="number">1.0</span>, <span class="number">100.0</span>);</span><br><span class="line">  viewProjMatrix.lookAt(<span class="number">20.0</span>, <span class="number">10.0</span>, <span class="number">30.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Register the event handler to be called on key press</span></span><br><span class="line">  <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123; keydown(ev, gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); &#125;;</span><br><span class="line"></span><br><span class="line">　draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw the robot arm</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ANGLE_STEP = <span class="number">3.0</span>;    <span class="comment">// 每次按键转动的角度</span></span><br><span class="line"><span class="keyword">var</span> g_arm1Angle = <span class="number">90.0</span>; <span class="comment">// arm1的当前角度</span></span><br><span class="line"><span class="keyword">var</span> g_joint1Angle = <span class="number">45.0</span>; <span class="comment">// joint1的当前角度</span></span><br><span class="line"><span class="keyword">var</span> g_joint2Angle = <span class="number">0.0</span>;  <span class="comment">// joint2</span></span><br><span class="line"><span class="keyword">var</span> g_joint3Angle = <span class="number">0.0</span>;  <span class="comment">// joint3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keydown</span>(<span class="params">ev, gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (ev.keyCode) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">40</span>: <span class="comment">// 上方向键 - joint1绕z轴正向转动</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint1Angle &lt; <span class="number">135.0</span>) g_joint1Angle += ANGLE_STEP;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">38</span>: <span class="comment">// 下方向键 - joint1绕z轴负向转动</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint1Angle &gt; -<span class="number">135.0</span>) g_joint1Angle -= ANGLE_STEP;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">39</span>: <span class="comment">// 右方向键 - arm1绕y轴正向转动</span></span><br><span class="line">      g_arm1Angle = (g_arm1Angle + ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">37</span>: <span class="comment">// 左方向键 - arm1绕y轴负向转动</span></span><br><span class="line">      g_arm1Angle = (g_arm1Angle - ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span>: <span class="comment">// &#x27;ｚ&#x27;key -&gt; 使joint2正向旋转</span></span><br><span class="line">      g_joint2Angle = (g_joint2Angle + ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">case</span> <span class="number">88</span>: <span class="comment">// &#x27;x&#x27;key -&gt; 使joint2负向旋转</span></span><br><span class="line">      g_joint2Angle = (g_joint2Angle - ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">86</span>: <span class="comment">// &#x27;v&#x27;key -&gt; 使joint3正向旋转</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint3Angle &lt; <span class="number">60.0</span>)  g_joint3Angle = (g_joint3Angle + ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">67</span>: <span class="comment">// &#x27;c&#x27;key -&gt; 使joint3负向旋转</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint3Angle &gt; -<span class="number">60.0</span>) g_joint3Angle = (g_joint3Angle - ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span>; <span class="comment">// Skip drawing at no effective action</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Draw the robot arm</span></span><br><span class="line">  draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Coordinates（Cube which length of one side is 1 with the origin on the center of the bottom)</span></span><br><span class="line">  <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    <span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>, <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">    <span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>,-<span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">1.0</span>,-<span class="number">0.5</span>, <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">    <span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">1.0</span>,-<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">1.0</span>,-<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">0.5</span>, <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">   -<span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">1.0</span>,-<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>,-<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>, <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">   -<span class="number">0.5</span>, <span class="number">0.0</span>,-<span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>,-<span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>, <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">    <span class="number">0.5</span>, <span class="number">0.0</span>,-<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>,-<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">1.0</span>,-<span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">1.0</span>,-<span class="number">0.5</span>  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Normal</span></span><br><span class="line">  <span class="keyword">var</span> normals = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">    <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">    <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">   -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">    <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">    <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Indices of the vertices</span></span><br><span class="line">  <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([</span><br><span class="line">     <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">     <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">     <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>,   <span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,    <span class="comment">// up</span></span><br><span class="line">    <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,  <span class="number">12</span>,<span class="number">14</span>,<span class="number">15</span>,    <span class="comment">// left</span></span><br><span class="line">    <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,  <span class="number">16</span>,<span class="number">18</span>,<span class="number">19</span>,    <span class="comment">// down</span></span><br><span class="line">    <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,  <span class="number">20</span>,<span class="number">22</span>,<span class="number">23</span>     <span class="comment">// back</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Write the vertex property to buffers (coordinates and normals)</span></span><br><span class="line">  <span class="keyword">if</span> (!initArrayBuffer(gl, <span class="string">&#x27;a_Position&#x27;</span>, vertices, gl.FLOAT, <span class="number">3</span>)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (!initArrayBuffer(gl, <span class="string">&#x27;a_Normal&#x27;</span>, normals, gl.FLOAT, <span class="number">3</span>)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Unbind the buffer object</span></span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Write the indices to the buffer object</span></span><br><span class="line">  <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line">  <span class="keyword">if</span> (!indexBuffer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initArrayBuffer</span>(<span class="params">gl, attribute, data, type, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create a buffer object</span></span><br><span class="line">  <span class="keyword">var</span> buffer = gl.createBuffer();</span><br><span class="line">  <span class="keyword">if</span> (!buffer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Write date into the buffer object</span></span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Assign the buffer object to the attribute variable</span></span><br><span class="line">  <span class="keyword">var</span> a_attribute = gl.getAttribLocation(gl.program, attribute);</span><br><span class="line">  <span class="keyword">if</span> (a_attribute &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of &#x27;</span> + attribute);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  gl.vertexAttribPointer(a_attribute, num, type, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// Enable the assignment of the buffer object to the attribute variable</span></span><br><span class="line">  gl.enableVertexAttribArray(a_attribute);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变换坐标的矩阵</span></span><br><span class="line"><span class="keyword">var</span> g_modelMatrix = <span class="keyword">new</span> Matrix4(), g_mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用以清空颜色缓冲区和深度缓冲区的背景颜色</span></span><br><span class="line">  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// base绘制</span></span><br><span class="line">  <span class="keyword">var</span> baseHeight = <span class="number">2.0</span>;</span><br><span class="line">  g_modelMatrix.setTranslate(<span class="number">0.0</span>, -<span class="number">12.0</span>, <span class="number">0.0</span>);</span><br><span class="line">  drawBox(gl, n, <span class="number">10.0</span>, baseHeight, <span class="number">10.0</span>, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Arm1</span></span><br><span class="line">  <span class="keyword">var</span> arm1Length = <span class="number">10.0</span>;</span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, baseHeight, <span class="number">0.0</span>);     <span class="comment">// Move onto the base</span></span><br><span class="line">  g_modelMatrix.rotate(g_arm1Angle, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);  <span class="comment">// Rotate around the y-axis</span></span><br><span class="line">  drawBox(gl, n, <span class="number">3.0</span>, arm1Length, <span class="number">3.0</span>, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Arm2</span></span><br><span class="line">  <span class="keyword">var</span> arm2Length = <span class="number">10.0</span>;</span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, arm1Length, <span class="number">0.0</span>);       <span class="comment">// Move to joint1</span></span><br><span class="line">  g_modelMatrix.rotate(g_joint1Angle, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);  <span class="comment">// Rotate around the z-axis</span></span><br><span class="line">  drawBox(gl, n, <span class="number">4.0</span>, arm2Length, <span class="number">4.0</span>, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A palm</span></span><br><span class="line">  <span class="keyword">var</span> palmLength = <span class="number">2.0</span>;</span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, arm2Length, <span class="number">0.0</span>);       <span class="comment">// Move to palm</span></span><br><span class="line">  g_modelMatrix.rotate(g_joint2Angle, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);  <span class="comment">// Rotate around the y-axis</span></span><br><span class="line">  drawBox(gl, n, <span class="number">2.0</span>, palmLength, <span class="number">6.0</span>, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);  <span class="comment">// Draw</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Move to the center of the tip of the palm</span></span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, palmLength, <span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Draw finger1</span></span><br><span class="line">  pushMatrix(g_modelMatrix);</span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">2.0</span>);</span><br><span class="line">  g_modelMatrix.rotate(g_joint3Angle, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);  <span class="comment">// Rotate around the x-axis</span></span><br><span class="line">  drawBox(gl, n, <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">1.0</span>, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line">  g_modelMatrix = popMatrix();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Draw finger2</span></span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">2.0</span>);</span><br><span class="line">  g_modelMatrix.rotate(-g_joint3Angle, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);  <span class="comment">// Rotate around the x-axis</span></span><br><span class="line">  drawBox(gl, n, <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">1.0</span>, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_matrixStack = []; <span class="comment">// 存储矩阵的栈</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushMatrix</span>(<span class="params">m</span>) </span>&#123; <span class="comment">// 将矩阵压入栈</span></span><br><span class="line">  <span class="keyword">var</span> m2 = <span class="keyword">new</span> Matrix4(m);</span><br><span class="line">  g_matrixStack.push(m2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">popMatrix</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 从栈中弹出矩阵</span></span><br><span class="line">  <span class="keyword">return</span> g_matrixStack.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_normalMatrix = <span class="keyword">new</span> Matrix4();  <span class="comment">// Coordinate transformation matrix for normals</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Draw rectangular solid</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBox</span>(<span class="params">gl, n, width, height, depth, viewProjMatrix, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  pushMatrix(g_modelMatrix);   <span class="comment">// Save the model matrix</span></span><br><span class="line">    <span class="comment">// Scale a cube and draw</span></span><br><span class="line">    g_modelMatrix.scale(width, height, depth);</span><br><span class="line">    <span class="comment">// Calculate the model view project matrix and pass it to u_MvpMatrix</span></span><br><span class="line">    g_mvpMatrix.set(viewProjMatrix);</span><br><span class="line">    g_mvpMatrix.multiply(g_modelMatrix);</span><br><span class="line">    gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, g_mvpMatrix.elements);</span><br><span class="line">    <span class="comment">// Calculate the normal transformation matrix and pass it to u_NormalMatrix</span></span><br><span class="line">    g_normalMatrix.setInverseOf(g_modelMatrix);</span><br><span class="line">    g_normalMatrix.transpose();</span><br><span class="line">    gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, g_normalMatrix.elements);</span><br><span class="line">    <span class="comment">// Draw</span></span><br><span class="line">    gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">  g_modelMatrix = popMatrix();   <span class="comment">// Retrieve the model matrix</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="效果1"><a href="#效果1" class="headerlink" title="效果1"></a>效果1</h5><blockquote>
<p>通过键盘操纵机器人手臂：</p>
<ul>
<li><p>使用左右方向键控制 arm1（下半部分）水平转动；</p>
</li>
<li><p>使用上下方方向键控制 arm2（上半部分） 绕 joint1 关节垂直转动；</p>
</li>
<li><p>使用 x 和 z 键旋转 Joint2；</p>
</li>
<li><p>使用 C 和 V 键旋转 finger1 和 finger2</p>
</li>
</ul>
</blockquote>
<script src="\lib\webgl-utils.js"></script>
<script src="\lib\webgl-debug.js"></script>
<script src="\lib\cuon-utils.js"></script>
<script src="\lib\cuon-matrix.js"></script>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
  <title>LookAtTriangles</title>
</head>
<body onload="main()">
<div style="margin:0 auto">
    <canvas id="webgl" width="300" height="300" >
      Please use the browser supporting "canvas".
    </canvas>
</div>
<script type='text/javascript'>
// Vertex shader program
var VSHADER_SOURCE =
  'attribute vec4 a_Position;\n' +
  'attribute vec4 a_Normal;\n' +
  'uniform mat4 u_MvpMatrix;\n' +
  'uniform mat4 u_NormalMatrix;\n' +
  'varying vec4 v_Color;\n' +
  'void main() {\n' +
  '  gl_Position = u_MvpMatrix * a_Position;\n' +
  // Shading calculation to make the arm look three-dimensional
  '  vec3 lightDirection = normalize(vec3(0.0, 0.5, 0.7));\n' + // Light direction
  '  vec4 color = vec4(1.0, 0.4, 0.0, 1.0);\n' +  // Robot color
  '  vec3 normal = normalize((u_NormalMatrix * a_Normal).xyz);\n' +
  '  float nDotL = max(dot(normal, lightDirection), 0.0);\n' +
  '  v_Color = vec4(color.rgb * nDotL + vec3(0.1), color.a);\n' +
  '}\n';
// Fragment shader program
var FSHADER_SOURCE =
  '#ifdef GL_ES\n' +
  'precision mediump float;\n' +
  '#endif\n' +
  'varying vec4 v_Color;\n' +
  'void main() {\n' +
  '  gl_FragColor = v_Color;\n' +
  '}\n';
function main() {
  // Retrieve <canvas> element
  var canvas = document.getElementById('webgl');
  // Get the rendering context for WebGL
  var gl = getWebGLContext(canvas);
  if (!gl) {
    console.log('Failed to get the rendering context for WebGL');
    return;
  }
  // Initialize shaders
  if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
    console.log('Failed to intialize shaders.');
    return;
  }
  // Set the vertex information
  var n = initVertexBuffers(gl);
  if (n < 0) {
    console.log('Failed to set the vertex information');
    return;
  }
  // Set the clear color and enable the depth test
  //gl.clearColor(0.0, 0.0, 0.0, 1.0);
  gl.enable(gl.DEPTH_TEST);
  // Get the storage locations of uniform variables
  var u_MvpMatrix = gl.getUniformLocation(gl.program, 'u_MvpMatrix');
  var u_NormalMatrix = gl.getUniformLocation(gl.program, 'u_NormalMatrix');
  if (!u_MvpMatrix || !u_NormalMatrix) {
    console.log('Failed to get the storage location');
    return;
  }
  // 计算视图投影矩阵
  var viewProjMatrix = new Matrix4();
  viewProjMatrix.setPerspective(50.0, canvas.width / canvas.height, 1.0, 100.0);
  viewProjMatrix.lookAt(20.0, 10.0, 30.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
  // Register the event handler to be called on key press
  document.onkeydown = function(ev){ keydown(ev, gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); };
　draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); // Draw the robot arm
}
var ANGLE_STEP = 3.0;    // 每次按键转动的角度
var g_arm1Angle = 90.0; // arm1的当前角度
var g_joint1Angle = 45.0; // joint1的当前角度
var g_joint2Angle = 0.0;  // joint2
var g_joint3Angle = 0.0;  // joint3
function keydown(ev, gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix) {
  switch (ev.keyCode) {
    case 40: // 上方向键 - joint1绕z轴正向转动
      if (g_joint1Angle < 135.0) g_joint1Angle += ANGLE_STEP;
      break;
    case 38: // 下方向键 - joint1绕z轴负向转动
      if (g_joint1Angle > -135.0) g_joint1Angle -= ANGLE_STEP;
      break;
    case 39: // 右方向键 - arm1绕y轴正向转动
      g_arm1Angle = (g_arm1Angle + ANGLE_STEP) % 360;
      break;
    case 37: // 左方向键 - arm1绕y轴负向转动
      g_arm1Angle = (g_arm1Angle - ANGLE_STEP) % 360;
      break;
    case 90: // 'ｚ'key -> 使joint2正向旋转
      g_joint2Angle = (g_joint2Angle + ANGLE_STEP) % 360;
      break; 
    case 88: // 'x'key -> 使joint2负向旋转
      g_joint2Angle = (g_joint2Angle - ANGLE_STEP) % 360;
      break;
    case 86: // 'v'key -> 使joint3正向旋转
      if (g_joint3Angle < 60.0)  g_joint3Angle = (g_joint3Angle + ANGLE_STEP) % 360;
      break;
    case 67: // 'c'key -> 使joint3负向旋转
      if (g_joint3Angle > -60.0) g_joint3Angle = (g_joint3Angle - ANGLE_STEP) % 360;
      break;
    default: return; // Skip drawing at no effective action
  }
  // Draw the robot arm
  draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);
}
function initVertexBuffers(gl) {
  // Coordinates（Cube which length of one side is 1 with the origin on the center of the bottom)
  var vertices = new Float32Array([
    0.5, 1.0, 0.5, -0.5, 1.0, 0.5, -0.5, 0.0, 0.5,  0.5, 0.0, 0.5, // v0-v1-v2-v3 front
    0.5, 1.0, 0.5,  0.5, 0.0, 0.5,  0.5, 0.0,-0.5,  0.5, 1.0,-0.5, // v0-v3-v4-v5 right
    0.5, 1.0, 0.5,  0.5, 1.0,-0.5, -0.5, 1.0,-0.5, -0.5, 1.0, 0.5, // v0-v5-v6-v1 up
   -0.5, 1.0, 0.5, -0.5, 1.0,-0.5, -0.5, 0.0,-0.5, -0.5, 0.0, 0.5, // v1-v6-v7-v2 left
   -0.5, 0.0,-0.5,  0.5, 0.0,-0.5,  0.5, 0.0, 0.5, -0.5, 0.0, 0.5, // v7-v4-v3-v2 down
    0.5, 0.0,-0.5, -0.5, 0.0,-0.5, -0.5, 1.0,-0.5,  0.5, 1.0,-0.5  // v4-v7-v6-v5 back
  ]);
  // Normal
  var normals = new Float32Array([
    0.0, 0.0, 1.0,  0.0, 0.0, 1.0,  0.0, 0.0, 1.0,  0.0, 0.0, 1.0, // v0-v1-v2-v3 front
    1.0, 0.0, 0.0,  1.0, 0.0, 0.0,  1.0, 0.0, 0.0,  1.0, 0.0, 0.0, // v0-v3-v4-v5 right
    0.0, 1.0, 0.0,  0.0, 1.0, 0.0,  0.0, 1.0, 0.0,  0.0, 1.0, 0.0, // v0-v5-v6-v1 up
   -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, // v1-v6-v7-v2 left
    0.0,-1.0, 0.0,  0.0,-1.0, 0.0,  0.0,-1.0, 0.0,  0.0,-1.0, 0.0, // v7-v4-v3-v2 down
    0.0, 0.0,-1.0,  0.0, 0.0,-1.0,  0.0, 0.0,-1.0,  0.0, 0.0,-1.0  // v4-v7-v6-v5 back
  ]);
  // Indices of the vertices
  var indices = new Uint8Array([
     0, 1, 2,   0, 2, 3,    // front
     4, 5, 6,   4, 6, 7,    // right
     8, 9,10,   8,10,11,    // up
    12,13,14,  12,14,15,    // left
    16,17,18,  16,18,19,    // down
    20,21,22,  20,22,23     // back
  ]);
  // Write the vertex property to buffers (coordinates and normals)
  if (!initArrayBuffer(gl, 'a_Position', vertices, gl.FLOAT, 3)) return -1;
  if (!initArrayBuffer(gl, 'a_Normal', normals, gl.FLOAT, 3)) return -1;
  // Unbind the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, null);
  // Write the indices to the buffer object
  var indexBuffer = gl.createBuffer();
  if (!indexBuffer) {
    console.log('Failed to create the buffer object');
    return -1;
  }
  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
  return indices.length;
}
function initArrayBuffer(gl, attribute, data, type, num) {
  // Create a buffer object
  var buffer = gl.createBuffer();
  if (!buffer) {
    console.log('Failed to create the buffer object');
    return false;
  }
  // Write date into the buffer object
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
  // Assign the buffer object to the attribute variable
  var a_attribute = gl.getAttribLocation(gl.program, attribute);
  if (a_attribute < 0) {
    console.log('Failed to get the storage location of ' + attribute);
    return false;
  }
  gl.vertexAttribPointer(a_attribute, num, type, false, 0, 0);
  // Enable the assignment of the buffer object to the attribute variable
  gl.enableVertexAttribArray(a_attribute);
  return true;
}
// 变换坐标的矩阵
var g_modelMatrix = new Matrix4(), g_mvpMatrix = new Matrix4();
function draw(gl, n, viewProjMatrix, u_MvpMatrix, u_NormalMatrix) {
  // 用以清空颜色缓冲区和深度缓冲区的背景颜色
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  // base绘制
  var baseHeight = 2.0;
  g_modelMatrix.setTranslate(0.0, -12.0, 0.0);
  drawBox(gl, n, 10.0, baseHeight, 10.0, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);
  // Arm1
  var arm1Length = 10.0;
  g_modelMatrix.translate(0.0, baseHeight, 0.0);     // Move onto the base
  g_modelMatrix.rotate(g_arm1Angle, 0.0, 1.0, 0.0);  // Rotate around the y-axis
  drawBox(gl, n, 3.0, arm1Length, 3.0, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); // Draw
  // Arm2
  var arm2Length = 10.0;
  g_modelMatrix.translate(0.0, arm1Length, 0.0);       // Move to joint1
  g_modelMatrix.rotate(g_joint1Angle, 0.0, 0.0, 1.0);  // Rotate around the z-axis
  drawBox(gl, n, 4.0, arm2Length, 4.0, viewProjMatrix, u_MvpMatrix, u_NormalMatrix); // Draw
  // A palm
  var palmLength = 2.0;
  g_modelMatrix.translate(0.0, arm2Length, 0.0);       // Move to palm
  g_modelMatrix.rotate(g_joint2Angle, 0.0, 1.0, 0.0);  // Rotate around the y-axis
  drawBox(gl, n, 2.0, palmLength, 6.0, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);  // Draw
  // Move to the center of the tip of the palm
  g_modelMatrix.translate(0.0, palmLength, 0.0);
  // Draw finger1
  pushMatrix(g_modelMatrix);
  g_modelMatrix.translate(0.0, 0.0, 2.0);
  g_modelMatrix.rotate(g_joint3Angle, 1.0, 0.0, 0.0);  // Rotate around the x-axis
  drawBox(gl, n, 1.0, 2.0, 1.0, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);
  g_modelMatrix = popMatrix();
  // Draw finger2
  g_modelMatrix.translate(0.0, 0.0, -2.0);
  g_modelMatrix.rotate(-g_joint3Angle, 1.0, 0.0, 0.0);  // Rotate around the x-axis
  drawBox(gl, n, 1.0, 2.0, 1.0, viewProjMatrix, u_MvpMatrix, u_NormalMatrix);
}
var g_matrixStack = []; // 存储矩阵的栈
function pushMatrix(m) { // 将矩阵压入栈
  var m2 = new Matrix4(m);
  g_matrixStack.push(m2);
}
function popMatrix() { // 从栈中弹出矩阵
  return g_matrixStack.pop();
}
var g_normalMatrix = new Matrix4();  // Coordinate transformation matrix for normals
// Draw rectangular solid
function drawBox(gl, n, width, height, depth, viewProjMatrix, u_MvpMatrix, u_NormalMatrix) {
  pushMatrix(g_modelMatrix);   // Save the model matrix
    // Scale a cube and draw
    g_modelMatrix.scale(width, height, depth);
    // Calculate the model view project matrix and pass it to u_MvpMatrix
    g_mvpMatrix.set(viewProjMatrix);
    g_mvpMatrix.multiply(g_modelMatrix);
    gl.uniformMatrix4fv(u_MvpMatrix, false, g_mvpMatrix.elements);
    // Calculate the normal transformation matrix and pass it to u_NormalMatrix
    g_normalMatrix.setInverseOf(g_modelMatrix);
    g_normalMatrix.transpose();
    gl.uniformMatrix4fv(u_NormalMatrix, false, g_normalMatrix.elements);
    // Draw
    gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, 0);
  g_modelMatrix = popMatrix();   // Retrieve the model matrix
}
    </script>
    </body>
    </html>


<h4 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vertex shader program</span></span><br><span class="line"><span class="keyword">var</span> VSHADER_SOURCE =</span><br><span class="line">  <span class="string">&#x27;attribute vec4 a_Position;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;attribute vec4 a_Normal;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;uniform mat4 u_MvpMatrix;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;uniform mat4 u_NormalMatrix;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  gl_Position = u_MvpMatrix * a_Position;\n&#x27;</span> +</span><br><span class="line">  <span class="comment">// The followings are some shading calculation to make the arm look three-dimensional</span></span><br><span class="line">  <span class="string">&#x27;  vec3 lightDirection = normalize(vec3(0.0, 0.5, 0.7));\n&#x27;</span> + <span class="comment">// Light direction</span></span><br><span class="line">  <span class="string">&#x27;  vec4 color = vec4(1.0, 0.4, 0.0, 1.0);\n&#x27;</span> +  <span class="comment">// Robot color</span></span><br><span class="line">  <span class="string">&#x27;  vec3 normal = normalize((u_NormalMatrix * a_Normal).xyz);\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  float nDotL = max(dot(normal, lightDirection), 0.0);\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  v_Color = vec4(color.rgb * nDotL + vec3(0.1), color.a);\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment shader program</span></span><br><span class="line"><span class="keyword">var</span> FSHADER_SOURCE =</span><br><span class="line">  <span class="string">&#x27;#ifdef GL_ES\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;precision mediump float;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;#endif\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;varying vec4 v_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;void main() &#123;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;  gl_FragColor = v_Color;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&#125;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Retrieve &lt;canvas&gt; element</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;webgl&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the rendering context for WebGL</span></span><br><span class="line">  <span class="keyword">var</span> gl = getWebGLContext(canvas);</span><br><span class="line">  <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the rendering context for WebGL&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize shaders</span></span><br><span class="line">  <span class="keyword">if</span> (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to intialize shaders.&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the vertex information</span></span><br><span class="line">  <span class="keyword">var</span> n = initVertexBuffers(gl);</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to set the vertex information&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the clear color and enable the depth test</span></span><br><span class="line">  <span class="comment">// gl.clearColor(0.0, 0.0, 0.0, 1.0);</span></span><br><span class="line">  gl.enable(gl.DEPTH_TEST);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the storage locations of attribute and uniform variables</span></span><br><span class="line">  <span class="keyword">var</span> a_Position = gl.getAttribLocation(gl.program, <span class="string">&#x27;a_Position&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> u_MvpMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_MvpMatrix&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> u_NormalMatrix = gl.getUniformLocation(gl.program, <span class="string">&#x27;u_NormalMatrix&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (a_Position &lt; <span class="number">0</span> || !u_MvpMatrix || !u_NormalMatrix) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of attribute or uniform variable&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Calculate the view projection matrix</span></span><br><span class="line">  <span class="keyword">var</span> viewProjMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line">  viewProjMatrix.setPerspective(<span class="number">50.0</span>, canvas.width / canvas.height, <span class="number">1.0</span>, <span class="number">100.0</span>);</span><br><span class="line">  viewProjMatrix.lookAt(<span class="number">20.0</span>, <span class="number">10.0</span>, <span class="number">30.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Register the event handler to be called on key press</span></span><br><span class="line">  <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123; keydown(ev, gl, n, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix); &#125;;</span><br><span class="line"></span><br><span class="line">  draw(gl, n, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ANGLE_STEP = <span class="number">3.0</span>;     <span class="comment">// The increments of rotation angle (degrees)</span></span><br><span class="line"><span class="keyword">var</span> g_arm1Angle = <span class="number">90.0</span>;   <span class="comment">// The rotation angle of arm1 (degrees)</span></span><br><span class="line"><span class="keyword">var</span> g_joint1Angle = <span class="number">45.0</span>; <span class="comment">// The rotation angle of joint1 (degrees)</span></span><br><span class="line"><span class="keyword">var</span> g_joint2Angle = <span class="number">0.0</span>;  <span class="comment">// The rotation angle of joint2 (degrees)</span></span><br><span class="line"><span class="keyword">var</span> g_joint3Angle = <span class="number">0.0</span>;  <span class="comment">// The rotation angle of joint3 (degrees)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keydown</span>(<span class="params">ev, gl, o, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (ev.keyCode) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">40</span>: <span class="comment">// Up arrow key -&gt; the positive rotation of joint1 around the z-axis</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint1Angle &lt; <span class="number">135.0</span>) g_joint1Angle += ANGLE_STEP;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">38</span>: <span class="comment">// Down arrow key -&gt; the negative rotation of joint1 around the z-axis</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint1Angle &gt; -<span class="number">135.0</span>) g_joint1Angle -= ANGLE_STEP;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">39</span>: <span class="comment">// Right arrow key -&gt; the positive rotation of arm1 around the y-axis</span></span><br><span class="line">      g_arm1Angle = (g_arm1Angle + ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">37</span>: <span class="comment">// Left arrow key -&gt; the negative rotation of arm1 around the y-axis</span></span><br><span class="line">      g_arm1Angle = (g_arm1Angle - ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">90</span>: <span class="comment">// &#x27;ｚ&#x27;key -&gt; the positive rotation of joint2</span></span><br><span class="line">      g_joint2Angle = (g_joint2Angle + ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">case</span> <span class="number">88</span>: <span class="comment">// &#x27;x&#x27;key -&gt; the negative rotation of joint2</span></span><br><span class="line">      g_joint2Angle = (g_joint2Angle - ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">86</span>: <span class="comment">// &#x27;v&#x27;key -&gt; the positive rotation of joint3</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint3Angle &lt; <span class="number">60.0</span>)  g_joint3Angle = (g_joint3Angle + ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">67</span>: <span class="comment">// &#x27;c&#x27;key -&gt; the nagative rotation of joint3</span></span><br><span class="line">      <span class="keyword">if</span> (g_joint3Angle &gt; -<span class="number">60.0</span>) g_joint3Angle = (g_joint3Angle - ANGLE_STEP) % <span class="number">360</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span>; <span class="comment">// Skip drawing at no effective action</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Draw</span></span><br><span class="line">  draw(gl, o, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_baseBuffer = <span class="literal">null</span>;     <span class="comment">// Buffer object for a base</span></span><br><span class="line"><span class="keyword">var</span> g_arm1Buffer = <span class="literal">null</span>;     <span class="comment">// Buffer object for arm1</span></span><br><span class="line"><span class="keyword">var</span> g_arm2Buffer = <span class="literal">null</span>;     <span class="comment">// Buffer object for arm2</span></span><br><span class="line"><span class="keyword">var</span> g_palmBuffer = <span class="literal">null</span>;     <span class="comment">// Buffer object for a palm</span></span><br><span class="line"><span class="keyword">var</span> g_fingerBuffer = <span class="literal">null</span>;   <span class="comment">// Buffer object for fingers</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVertexBuffers</span>(<span class="params">gl</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// Vertex coordinate (prepare coordinates of cuboids for all segments)</span></span><br><span class="line">  <span class="keyword">var</span> vertices_base = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([ <span class="comment">// Base(10x2x10)</span></span><br><span class="line">     <span class="number">5.0</span>, <span class="number">2.0</span>, <span class="number">5.0</span>, -<span class="number">5.0</span>, <span class="number">2.0</span>, <span class="number">5.0</span>, -<span class="number">5.0</span>, <span class="number">0.0</span>, <span class="number">5.0</span>,  <span class="number">5.0</span>, <span class="number">0.0</span>, <span class="number">5.0</span>, <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">     <span class="number">5.0</span>, <span class="number">2.0</span>, <span class="number">5.0</span>,  <span class="number">5.0</span>, <span class="number">0.0</span>, <span class="number">5.0</span>,  <span class="number">5.0</span>, <span class="number">0.0</span>,-<span class="number">5.0</span>,  <span class="number">5.0</span>, <span class="number">2.0</span>,-<span class="number">5.0</span>, <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">     <span class="number">5.0</span>, <span class="number">2.0</span>, <span class="number">5.0</span>,  <span class="number">5.0</span>, <span class="number">2.0</span>,-<span class="number">5.0</span>, -<span class="number">5.0</span>, <span class="number">2.0</span>,-<span class="number">5.0</span>, -<span class="number">5.0</span>, <span class="number">2.0</span>, <span class="number">5.0</span>, <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">    -<span class="number">5.0</span>, <span class="number">2.0</span>, <span class="number">5.0</span>, -<span class="number">5.0</span>, <span class="number">2.0</span>,-<span class="number">5.0</span>, -<span class="number">5.0</span>, <span class="number">0.0</span>,-<span class="number">5.0</span>, -<span class="number">5.0</span>, <span class="number">0.0</span>, <span class="number">5.0</span>, <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">    -<span class="number">5.0</span>, <span class="number">0.0</span>,-<span class="number">5.0</span>,  <span class="number">5.0</span>, <span class="number">0.0</span>,-<span class="number">5.0</span>,  <span class="number">5.0</span>, <span class="number">0.0</span>, <span class="number">5.0</span>, -<span class="number">5.0</span>, <span class="number">0.0</span>, <span class="number">5.0</span>, <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">     <span class="number">5.0</span>, <span class="number">0.0</span>,-<span class="number">5.0</span>, -<span class="number">5.0</span>, <span class="number">0.0</span>,-<span class="number">5.0</span>, -<span class="number">5.0</span>, <span class="number">2.0</span>,-<span class="number">5.0</span>,  <span class="number">5.0</span>, <span class="number">2.0</span>,-<span class="number">5.0</span>  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> vertices_arm1 = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([  <span class="comment">// Arm1(3x10x3)</span></span><br><span class="line">     <span class="number">1.5</span>, <span class="number">10.0</span>, <span class="number">1.5</span>, -<span class="number">1.5</span>, <span class="number">10.0</span>, <span class="number">1.5</span>, -<span class="number">1.5</span>,  <span class="number">0.0</span>, <span class="number">1.5</span>,  <span class="number">1.5</span>,  <span class="number">0.0</span>, <span class="number">1.5</span>, <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">     <span class="number">1.5</span>, <span class="number">10.0</span>, <span class="number">1.5</span>,  <span class="number">1.5</span>,  <span class="number">0.0</span>, <span class="number">1.5</span>,  <span class="number">1.5</span>,  <span class="number">0.0</span>,-<span class="number">1.5</span>,  <span class="number">1.5</span>, <span class="number">10.0</span>,-<span class="number">1.5</span>, <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">     <span class="number">1.5</span>, <span class="number">10.0</span>, <span class="number">1.5</span>,  <span class="number">1.5</span>, <span class="number">10.0</span>,-<span class="number">1.5</span>, -<span class="number">1.5</span>, <span class="number">10.0</span>,-<span class="number">1.5</span>, -<span class="number">1.5</span>, <span class="number">10.0</span>, <span class="number">1.5</span>, <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">    -<span class="number">1.5</span>, <span class="number">10.0</span>, <span class="number">1.5</span>, -<span class="number">1.5</span>, <span class="number">10.0</span>,-<span class="number">1.5</span>, -<span class="number">1.5</span>,  <span class="number">0.0</span>,-<span class="number">1.5</span>, -<span class="number">1.5</span>,  <span class="number">0.0</span>, <span class="number">1.5</span>, <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">    -<span class="number">1.5</span>,  <span class="number">0.0</span>,-<span class="number">1.5</span>,  <span class="number">1.5</span>,  <span class="number">0.0</span>,-<span class="number">1.5</span>,  <span class="number">1.5</span>,  <span class="number">0.0</span>, <span class="number">1.5</span>, -<span class="number">1.5</span>,  <span class="number">0.0</span>, <span class="number">1.5</span>, <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">     <span class="number">1.5</span>,  <span class="number">0.0</span>,-<span class="number">1.5</span>, -<span class="number">1.5</span>,  <span class="number">0.0</span>,-<span class="number">1.5</span>, -<span class="number">1.5</span>, <span class="number">10.0</span>,-<span class="number">1.5</span>,  <span class="number">1.5</span>, <span class="number">10.0</span>,-<span class="number">1.5</span>  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> vertices_arm2 = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([  <span class="comment">// Arm2(4x10x4)</span></span><br><span class="line">     <span class="number">2.0</span>, <span class="number">10.0</span>, <span class="number">2.0</span>, -<span class="number">2.0</span>, <span class="number">10.0</span>, <span class="number">2.0</span>, -<span class="number">2.0</span>,  <span class="number">0.0</span>, <span class="number">2.0</span>,  <span class="number">2.0</span>,  <span class="number">0.0</span>, <span class="number">2.0</span>, <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">     <span class="number">2.0</span>, <span class="number">10.0</span>, <span class="number">2.0</span>,  <span class="number">2.0</span>,  <span class="number">0.0</span>, <span class="number">2.0</span>,  <span class="number">2.0</span>,  <span class="number">0.0</span>,-<span class="number">2.0</span>,  <span class="number">2.0</span>, <span class="number">10.0</span>,-<span class="number">2.0</span>, <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">     <span class="number">2.0</span>, <span class="number">10.0</span>, <span class="number">2.0</span>,  <span class="number">2.0</span>, <span class="number">10.0</span>,-<span class="number">2.0</span>, -<span class="number">2.0</span>, <span class="number">10.0</span>,-<span class="number">2.0</span>, -<span class="number">2.0</span>, <span class="number">10.0</span>, <span class="number">2.0</span>, <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">    -<span class="number">2.0</span>, <span class="number">10.0</span>, <span class="number">2.0</span>, -<span class="number">2.0</span>, <span class="number">10.0</span>,-<span class="number">2.0</span>, -<span class="number">2.0</span>,  <span class="number">0.0</span>,-<span class="number">2.0</span>, -<span class="number">2.0</span>,  <span class="number">0.0</span>, <span class="number">2.0</span>, <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">    -<span class="number">2.0</span>,  <span class="number">0.0</span>,-<span class="number">2.0</span>,  <span class="number">2.0</span>,  <span class="number">0.0</span>,-<span class="number">2.0</span>,  <span class="number">2.0</span>,  <span class="number">0.0</span>, <span class="number">2.0</span>, -<span class="number">2.0</span>,  <span class="number">0.0</span>, <span class="number">2.0</span>, <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">     <span class="number">2.0</span>,  <span class="number">0.0</span>,-<span class="number">2.0</span>, -<span class="number">2.0</span>,  <span class="number">0.0</span>,-<span class="number">2.0</span>, -<span class="number">2.0</span>, <span class="number">10.0</span>,-<span class="number">2.0</span>,  <span class="number">2.0</span>, <span class="number">10.0</span>,-<span class="number">2.0</span>  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> vertices_palm = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([  <span class="comment">// Palm(2x2x6)</span></span><br><span class="line">     <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, -<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">3.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">3.0</span>, <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">     <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">3.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,-<span class="number">3.0</span>,  <span class="number">1.0</span>, <span class="number">2.0</span>,-<span class="number">3.0</span>, <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">     <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>,  <span class="number">1.0</span>, <span class="number">2.0</span>,-<span class="number">3.0</span>, -<span class="number">1.0</span>, <span class="number">2.0</span>,-<span class="number">3.0</span>, -<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">    -<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, -<span class="number">1.0</span>, <span class="number">2.0</span>,-<span class="number">3.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>,-<span class="number">3.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">3.0</span>, <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">    -<span class="number">1.0</span>, <span class="number">0.0</span>,-<span class="number">3.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>,-<span class="number">3.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">3.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">3.0</span>, <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">     <span class="number">1.0</span>, <span class="number">0.0</span>,-<span class="number">3.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>,-<span class="number">3.0</span>, -<span class="number">1.0</span>, <span class="number">2.0</span>,-<span class="number">3.0</span>,  <span class="number">1.0</span>, <span class="number">2.0</span>,-<span class="number">3.0</span>  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> vertices_finger = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([  <span class="comment">// Fingers(1x2x1)</span></span><br><span class="line">     <span class="number">0.5</span>, <span class="number">2.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">2.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>, <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">     <span class="number">0.5</span>, <span class="number">2.0</span>, <span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>,-<span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">2.0</span>,-<span class="number">0.5</span>, <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">     <span class="number">0.5</span>, <span class="number">2.0</span>, <span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">2.0</span>,-<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">2.0</span>,-<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">2.0</span>, <span class="number">0.5</span>, <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">    -<span class="number">0.5</span>, <span class="number">2.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">2.0</span>,-<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>,-<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>, <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">    -<span class="number">0.5</span>, <span class="number">0.0</span>,-<span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>,-<span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>, <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">     <span class="number">0.5</span>, <span class="number">0.0</span>,-<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.0</span>,-<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">2.0</span>,-<span class="number">0.5</span>,  <span class="number">0.5</span>, <span class="number">2.0</span>,-<span class="number">0.5</span>  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Normal</span></span><br><span class="line">  <span class="keyword">var</span> normals = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">     <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="comment">// v0-v1-v2-v3 front</span></span><br><span class="line">     <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,  <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="comment">// v0-v3-v4-v5 right</span></span><br><span class="line">     <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="comment">// v0-v5-v6-v1 up</span></span><br><span class="line">    -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="comment">// v1-v6-v7-v2 left</span></span><br><span class="line">     <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>,  <span class="number">0.0</span>,-<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="comment">// v7-v4-v3-v2 down</span></span><br><span class="line">     <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>,  <span class="number">0.0</span>, <span class="number">0.0</span>,-<span class="number">1.0</span>  <span class="comment">// v4-v7-v6-v5 back</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Indices of the vertices</span></span><br><span class="line">  <span class="keyword">var</span> indices = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([</span><br><span class="line">     <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,   <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// front</span></span><br><span class="line">     <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,   <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// right</span></span><br><span class="line">     <span class="number">8</span>, <span class="number">9</span>,<span class="number">10</span>,   <span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,    <span class="comment">// up</span></span><br><span class="line">    <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,  <span class="number">12</span>,<span class="number">14</span>,<span class="number">15</span>,    <span class="comment">// left</span></span><br><span class="line">    <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,  <span class="number">16</span>,<span class="number">18</span>,<span class="number">19</span>,    <span class="comment">// down</span></span><br><span class="line">    <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,  <span class="number">20</span>,<span class="number">22</span>,<span class="number">23</span>     <span class="comment">// back</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Write coords to buffers, but don&#x27;t assign to attribute variables</span></span><br><span class="line">  g_baseBuffer = initArrayBufferForLaterUse(gl, vertices_base, <span class="number">3</span>, gl.FLOAT);</span><br><span class="line">  g_arm1Buffer = initArrayBufferForLaterUse(gl, vertices_arm1, <span class="number">3</span>, gl.FLOAT);</span><br><span class="line">  g_arm2Buffer = initArrayBufferForLaterUse(gl, vertices_arm2, <span class="number">3</span>, gl.FLOAT);</span><br><span class="line">  g_palmBuffer = initArrayBufferForLaterUse(gl, vertices_palm, <span class="number">3</span>, gl.FLOAT);</span><br><span class="line">  g_fingerBuffer = initArrayBufferForLaterUse(gl, vertices_finger, <span class="number">3</span>, gl.FLOAT);</span><br><span class="line">  <span class="keyword">if</span> (!g_baseBuffer || !g_arm1Buffer || !g_arm2Buffer || !g_palmBuffer || !g_fingerBuffer) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Write normals to a buffer, assign it to a_Normal and enable it</span></span><br><span class="line">  <span class="keyword">if</span> (!initArrayBuffer(gl, <span class="string">&#x27;a_Normal&#x27;</span>, normals, <span class="number">3</span>, gl.FLOAT)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Write the indices to the buffer object</span></span><br><span class="line">  <span class="keyword">var</span> indexBuffer = gl.createBuffer();</span><br><span class="line">  <span class="keyword">if</span> (!indexBuffer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);</span><br><span class="line">  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> indices.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initArrayBufferForLaterUse</span>(<span class="params">gl, data, num, type</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> buffer = gl.createBuffer();   <span class="comment">// Create a buffer object</span></span><br><span class="line">  <span class="keyword">if</span> (!buffer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Write date into the buffer object</span></span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Store the necessary information to assign the object to the attribute variable later</span></span><br><span class="line">  buffer.num = num;</span><br><span class="line">  buffer.type = type;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initArrayBuffer</span>(<span class="params">gl, attribute, data, num, type</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> buffer = gl.createBuffer();   <span class="comment">// Create a buffer object</span></span><br><span class="line">  <span class="keyword">if</span> (!buffer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to create the buffer object&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Write date into the buffer object</span></span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Assign the buffer object to the attribute variable</span></span><br><span class="line">  <span class="keyword">var</span> a_attribute = gl.getAttribLocation(gl.program, attribute);</span><br><span class="line">  <span class="keyword">if</span> (a_attribute &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Failed to get the storage location of &#x27;</span> + attribute);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  gl.vertexAttribPointer(a_attribute, num, type, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// Enable the assignment of the buffer object to the attribute variable</span></span><br><span class="line">  gl.enableVertexAttribArray(a_attribute);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Coordinate transformation matrix</span></span><br><span class="line"><span class="keyword">var</span> g_modelMatrix = <span class="keyword">new</span> Matrix4(), g_mvpMatrix = <span class="keyword">new</span> Matrix4();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">gl, n, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Clear color and depth buffer</span></span><br><span class="line">  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Draw a base</span></span><br><span class="line">  <span class="keyword">var</span> baseHeight = <span class="number">2.0</span>;</span><br><span class="line">  g_modelMatrix.setTranslate(<span class="number">0.0</span>, -<span class="number">12.0</span>, <span class="number">0.0</span>);</span><br><span class="line">  drawSegment(gl, n, g_baseBuffer, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Arm1</span></span><br><span class="line">  <span class="keyword">var</span> arm1Length = <span class="number">10.0</span>;</span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, baseHeight, <span class="number">0.0</span>);     <span class="comment">// Move onto the base</span></span><br><span class="line">  g_modelMatrix.rotate(g_arm1Angle, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);  <span class="comment">// Rotate around the y-axis</span></span><br><span class="line">  drawSegment(gl, n, g_arm1Buffer, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Arm2</span></span><br><span class="line">  <span class="keyword">var</span> arm2Length = <span class="number">10.0</span>;</span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, arm1Length, <span class="number">0.0</span>);       <span class="comment">// Move to joint1</span></span><br><span class="line">  g_modelMatrix.rotate(g_joint1Angle, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);  <span class="comment">// Rotate around the z-axis</span></span><br><span class="line">  drawSegment(gl, n, g_arm2Buffer, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix); <span class="comment">// Draw</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A palm</span></span><br><span class="line">  <span class="keyword">var</span> palmLength = <span class="number">2.0</span>;</span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, arm2Length, <span class="number">0.0</span>);       <span class="comment">// Move to palm</span></span><br><span class="line">  g_modelMatrix.rotate(g_joint2Angle, <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>);  <span class="comment">// Rotate around the y-axis</span></span><br><span class="line">  drawSegment(gl, n, g_palmBuffer, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix);  <span class="comment">// Draw</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Move to the center of the tip of the palm</span></span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, palmLength, <span class="number">0.0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Draw finger1</span></span><br><span class="line">  pushMatrix(g_modelMatrix);</span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">2.0</span>);</span><br><span class="line">  g_modelMatrix.rotate(g_joint3Angle, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);  <span class="comment">// Rotate around the x-axis</span></span><br><span class="line">  drawSegment(gl, n, g_fingerBuffer, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line">  g_modelMatrix = popMatrix();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Finger2</span></span><br><span class="line">  g_modelMatrix.translate(<span class="number">0.0</span>, <span class="number">0.0</span>, -<span class="number">2.0</span>);</span><br><span class="line">  g_modelMatrix.rotate(-g_joint3Angle, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);  <span class="comment">// Rotate around the x-axis</span></span><br><span class="line">  drawSegment(gl, n, g_fingerBuffer, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_matrixStack = []; <span class="comment">// Array for storing a matrix</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushMatrix</span>(<span class="params">m</span>) </span>&#123; <span class="comment">// Store the specified matrix to the array</span></span><br><span class="line">  <span class="keyword">var</span> m2 = <span class="keyword">new</span> Matrix4(m);</span><br><span class="line">  g_matrixStack.push(m2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">popMatrix</span>(<span class="params"></span>) </span>&#123; <span class="comment">// Retrieve the matrix from the array</span></span><br><span class="line">  <span class="keyword">return</span> g_matrixStack.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_normalMatrix = <span class="keyword">new</span> Matrix4();  <span class="comment">// Coordinate transformation matrix for normals</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Draw segments</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSegment</span>(<span class="params">gl, n, buffer, viewProjMatrix, a_Position, u_MvpMatrix, u_NormalMatrix</span>) </span>&#123;</span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</span><br><span class="line">  <span class="comment">// Assign the buffer object to the attribute variable</span></span><br><span class="line">  gl.vertexAttribPointer(a_Position, buffer.num, buffer.type, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// Enable the assignment of the buffer object to the attribute variable</span></span><br><span class="line">  gl.enableVertexAttribArray(a_Position);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Calculate the model view project matrix and pass it to u_MvpMatrix</span></span><br><span class="line">  g_mvpMatrix.set(viewProjMatrix);</span><br><span class="line">  g_mvpMatrix.multiply(g_modelMatrix);</span><br><span class="line">  gl.uniformMatrix4fv(u_MvpMatrix, <span class="literal">false</span>, g_mvpMatrix.elements);</span><br><span class="line">  <span class="comment">// Calculate matrix for normal and pass it to u_NormalMatrix</span></span><br><span class="line">  g_normalMatrix.setInverseOf(g_modelMatrix);</span><br><span class="line">  g_normalMatrix.transpose();</span><br><span class="line">  gl.uniformMatrix4fv(u_NormalMatrix, <span class="literal">false</span>, g_normalMatrix.elements);</span><br><span class="line">  <span class="comment">// Draw</span></span><br><span class="line">  gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="效果2"><a href="#效果2" class="headerlink" title="效果2"></a>效果2</h5><p><a href="#%E6%95%88%E6%9E%9C1">同上</a></p>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>webgl</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJs</title>
    <url>/nodejs/</url>
    <content><![CDATA[<blockquote>
<p>nodejs基础知识笔记</p>
</blockquote>
<span id="more"></span>

<h1 id="Node介绍"><a href="#Node介绍" class="headerlink" title="Node介绍"></a>Node介绍</h1><h2 id="为什么要学习Node-js"><a href="#为什么要学习Node-js" class="headerlink" title="为什么要学习Node.js"></a>为什么要学习Node.js</h2><ul>
<li>企业需求<ul>
<li>具有服务端开发经验更改</li>
<li>front-end</li>
<li>back-end</li>
<li>全栈开发工程师</li>
<li>基本的网站开发能力<ul>
<li>服务端</li>
<li>前端</li>
<li>运维部署</li>
</ul>
</li>
<li>多人社区</li>
</ul>
</li>
</ul>
<p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200317114503403.png" alt="image-20200317114503403"></p>
<h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么"></a>Node.js是什么</h2><ul>
<li>Node.js是JavaScript 运行时</li>
<li>通俗易懂的讲，Node.js是JavaScript的运行平台</li>
<li>Node.js既不是语言，也不是框架，它是一个平台</li>
<li>浏览器中的JavaScript<ul>
<li>EcmaScript<ul>
<li>基本语法</li>
<li>if</li>
<li>var</li>
<li>function</li>
<li>Object</li>
<li>Array</li>
</ul>
</li>
<li>Bom</li>
<li>Dom</li>
</ul>
</li>
<li>Node.js中的JavaScript<ul>
<li>没有Bom，Dom</li>
<li>EcmaScript</li>
<li>在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API<ul>
<li>例如文件的读写</li>
<li>网络服务的构建</li>
<li>网络通信</li>
<li>http服务器</li>
</ul>
</li>
</ul>
</li>
<li>构建与Chrome的V8引擎之上<ul>
<li>代码只是具有特定格式的字符串</li>
<li>引擎可以认识它，帮你解析和执行</li>
<li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li>
<li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li>
</ul>
</li>
<li>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.<ul>
<li> envent-driven    事件驱动</li>
<li> non-blocking I/O mode   非阻塞I/O模型（异步）</li>
<li> ightweight and efficent.   轻量和高效</li>
</ul>
</li>
<li>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world<ul>
<li>npm 是世界上最大的开源生态系统</li>
<li>绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用</li>
<li>npm install jquery</li>
</ul>
</li>
</ul>
<h2 id="Node能做什么"><a href="#Node能做什么" class="headerlink" title="Node能做什么"></a>Node能做什么</h2><ul>
<li>web服务器后台</li>
<li>命令行工具<ul>
<li>npm(node)</li>
<li>git(c语言)</li>
<li>hexo（node）</li>
<li>…</li>
</ul>
</li>
<li>对于前端工程师来讲，接触最多的是它的命令行工具<ul>
<li>自己写的很少，主要是用别人第三方的</li>
<li>webpack</li>
<li>gulp</li>
<li>npm</li>
</ul>
</li>
</ul>
<h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h2 id="安装Node环境"><a href="#安装Node环境" class="headerlink" title="安装Node环境"></a>安装Node环境</h2><ul>
<li>查看Node环境的版本号</li>
<li>下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li>
<li>安装：<ul>
<li>傻瓜式安装，一路<code>next</code></li>
<li>安装过再次安装会升级</li>
</ul>
</li>
<li>确认Node环境是否安装成功<ul>
<li>查看node的版本号：<code>node --version</code></li>
<li>或者<code>node -v</code></li>
</ul>
</li>
<li>配置环境变量</li>
</ul>
<h2 id="解析执行JavaScript"><a href="#解析执行JavaScript" class="headerlink" title="解析执行JavaScript"></a>解析执行JavaScript</h2><ol>
<li>创建编写JavaScript脚本文件</li>
<li>打开终端，定位脚本文件的所属目录</li>
<li>输入<code>node  文件名</code>执行对应的文件</li>
</ol>
<p>注意：文件名不要用<code>node.js</code>来命名，也就是说除了<code>node</code>这个名字随便起，最好不要使用中文。</p>
<h2 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h2><p>文件读取:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//浏览器中的JavaScript是没有文件操作能力的</span></span><br><span class="line"><span class="comment">//但是Node中的JavaScript具有文件操作能力</span></span><br><span class="line"><span class="comment">//fs是file-system的简写，就是文件系统的意思</span></span><br><span class="line"><span class="comment">//在Node中如果想要进行文件的操作就必须引用fs这个核心模块</span></span><br><span class="line"><span class="comment">//在fs这个和兴模块中，就提供了人所有文件操作相关的API</span></span><br><span class="line"><span class="comment">//例如 fs.readFile就是用来读取文件的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  1.使用fs核心模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.读取文件</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;./data/a.txt&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;文件读取失败&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>文件写入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  1.使用fs核心模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.将数据写入文件</span></span><br><span class="line">fs.writeFile(<span class="string">&#x27;./data/a.txt&#x27;</span>,<span class="string">&#x27;我是文件写入的信息&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;文件写入失败&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>服务器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.加载http核心模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用http.createServer()创建一个web服务器</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.服务器要做的事儿</span></span><br><span class="line"><span class="comment">// 提供服务：对数据服务</span></span><br><span class="line"><span class="comment">// 发请求</span></span><br><span class="line"><span class="comment">//	接收请求</span></span><br><span class="line"><span class="comment">//	处理请求</span></span><br><span class="line"><span class="comment">//	反馈（发送响应）</span></span><br><span class="line"><span class="comment">//	当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</span></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;收到客户的请求了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;runing...&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Node中的模块系统"><a href="#Node中的模块系统" class="headerlink" title="Node中的模块系统"></a>Node中的模块系统</h1><p>使用Node编写应用程序主要就是在使用：</p>
<ul>
<li><p>EcmaScript语言</p>
<ul>
<li>和浏览器一样，在Node中没有Bom和Dom</li>
</ul>
</li>
<li><p>核心模块</p>
<ul>
<li>文件操作的fs</li>
<li>http服务操作的http</li>
<li>url路径操作模块</li>
<li>path路径处理模块</li>
<li>os操作系统信息</li>
</ul>
</li>
<li><p>第三方模块</p>
<ul>
<li>art-template</li>
<li>必须通过npm来下载才可以使用</li>
</ul>
</li>
<li><p>自己写的模块</p>
<ul>
<li>自己创建的文件</li>
</ul>
</li>
</ul>
<h2 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h2><ul>
<li>文件作用域(模块是独立的，在不同的文件使用必须要重新引用)【在node中没有全局作用域，它是文件模块作用域】</li>
<li>通信规则<ul>
<li>加载require</li>
<li>导出exports</li>
</ul>
</li>
</ul>
<h2 id="CommonJS模块规范"><a href="#CommonJS模块规范" class="headerlink" title="CommonJS模块规范"></a>CommonJS模块规范</h2><p>在Node中的JavaScript还有一个重要的概念，模块系统。</p>
<ul>
<li><p>模块作用域</p>
</li>
<li><p>使用require方法来加载模块</p>
</li>
<li><p>使用exports接口对象来导出模板中的成员</p>
<h3 id="加载require"><a href="#加载require" class="headerlink" title="加载require"></a>加载<code>require</code></h3><p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 自定义变量名 = require(<span class="string">&#x27;模块&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>作用：</p>
<ul>
<li>执行被加载模块中的代码</li>
<li>得到被加载模块中的<code>exports</code>导出接口对象</li>
</ul>
<h3 id="导出exports"><a href="#导出exports" class="headerlink" title="导出exports"></a>导出<code>exports</code></h3><ul>
<li><p>Node中是模块作用域，默认文件中所有的成员只在当前模块有效</p>
</li>
<li><p>对于希望可以被其他模块访问到的成员，我们需要把这些公开的成员都挂载到<code>exports</code>接口对象中就可以了</p>
<p>导出多个成员（必须在对象中）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.a = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">exports</span>.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.c = &#123;</span><br><span class="line">    <span class="attr">foo</span>:<span class="string">&quot;bar&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.d = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p>导出单个成员（拿到的就是函数，字符串）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>以下情况会覆盖：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">//后者会覆盖前者</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以通过以下方法来导出多个成员：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    foo = <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="模块原理"><a href="#模块原理" class="headerlink" title="模块原理"></a>模块原理</h2><p>exports和<code>module.exports</code>的一个引用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">exports</span> === <span class="built_in">module</span>.exports);	<span class="comment">//trueexports.foo = &#x27;bar&#x27;;//等价于module.exports.foo = &#x27;bar&#x27;;</span></span><br></pre></td></tr></table></figure>

<p><code>当给exports重新赋值后，exports！= module.exports.</code></p>
<p><code>最终return的是module.exports,无论exports中的成员是什么都没用。</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">真正去使用的时候：	导出单个成员：<span class="built_in">exports</span>.xxx = xxx 或者 modeule.exports = xxx;	导出多个成员：<span class="built_in">module</span>.exports = &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用服务var http = require(&#x27;http&#x27;);var fs = require(&#x27;fs&#x27;);// 引用模板var template = require(&#x27;art-template&#x27;);// 创建服务var server = http.createServer();// 公共路径var wwwDir = &#x27;D:/app/www&#x27;;server.on(&#x27;request&#x27;, function (req, res) &#123;    var url = req.url;    // 读取文件    fs.readFile(&#x27;./template-apche.html&#x27;, function (err, data) &#123;        if (err) &#123;            return res.end(&#x27;404 Not Found&#x27;);        &#125;        fs.readdir(wwwDir, function (err, files) &#123;            if (err) &#123;                return res.end(&#x27;Can not find www Dir.&#x27;)            &#125;            // 使用模板引擎解析替换data中的模板字符串            // 去xmpTempleteList.html中编写模板语法            var htmlStr = template.render(data.toString(), &#123;                 title: &#x27;D:/app/www/ 的索引&#x27;,                files:files             &#125;);            // 发送响应数据            res.end(htmlStr);        &#125;)    &#125;)&#125;);server.listen(3000, function () &#123;    console.log(&#x27;running....&#x27;);&#125;)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>jQuery中的each 和 原生JavaScript方法forEach的区别：	提供源头：    	原生js是es5提供的（不兼容IE8）,        jQuery的each是jQuery第三方库提供的（如果要使用需要用<span class="number">2</span>以下的版本也就是<span class="number">1.</span>版本）,它的each方法主要用来遍历jQuery实例对象（伪数组）,同时也可以做低版本forEach的替代品,jQuery的实例对象不能使用forEach方法，如果想要使用必须转为数组（[].slice.call(jQuery实例对象)）才能使用<span class="number">2.</span>模块中导出多个成员和导出单个成员<span class="number">3.301</span>和<span class="number">302</span>的区别：	<span class="number">301</span>永久重定向,浏览器会记住    <span class="number">302</span>临时重定向<span class="number">4.</span><span class="built_in">exports</span>和<span class="built_in">module</span>.exports的区别:	每个模块中都有一个<span class="built_in">module</span>对象    <span class="built_in">module</span>对象中有一个<span class="built_in">exports</span>对象    我们可以把需要导出的成员都挂载到<span class="built_in">module</span>.exports接口对象中	也就是<span class="string">`module.exports.xxx = xxx`</span>的方式    但是每次写太多了就很麻烦，所以Node为了简化代码，就在每一个模块中都提供了一个成员叫<span class="string">`exports`</span>    <span class="string">`exports === module.exports`</span>结果为<span class="literal">true</span>,所以完全可以<span class="string">`exports.xxx = xxx`</span>    当一个模块需要导出单个成员的时候必须使用<span class="string">`module.exports = xxx`</span>的方式，=,使用<span class="string">`exports = xxx`</span>不管用,因为每个模块最终<span class="keyword">return</span>的是<span class="built_in">module</span>.exports,而<span class="built_in">exports</span>只是<span class="built_in">module</span>.exports的一个引用,所以<span class="string">`exports`</span>即使重新赋值,也不会影响<span class="string">`module.exports`</span>。    有一种赋值方式比较特殊：<span class="string">`exports = module.exports`</span>这个用来新建立引用关系的。    </span><br></pre></td></tr></table></figure>

<h1 id="require的加载规则"><a href="#require的加载规则" class="headerlink" title="require的加载规则"></a>require的加载规则</h1><ul>
<li><p>核心模块</p>
<ul>
<li>模块名</li>
</ul>
</li>
<li><p>第三方模块</p>
<ul>
<li>模块名</li>
</ul>
</li>
<li><p>用户自己写的</p>
<ul>
<li>路径</li>
</ul>
</li>
</ul>
<h2 id="require的加载规则："><a href="#require的加载规则：" class="headerlink" title="require的加载规则："></a>require的加载规则：</h2><ul>
<li><p>优先从缓存加载</p>
</li>
<li><p>判断模块标识符</p>
<ul>
<li>核心模块</li>
<li>自己写的模块（路径形式的模块）</li>
<li>第三方模块（node_modules）<ul>
<li>第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）</li>
<li>npm<ul>
<li>开发人员可以把写好的框架库发布到npm上</li>
<li>使用者通过npm命令来下载</li>
</ul>
</li>
<li>使用方式：<code>var 名称 = require(&#39;npm install【下载包】 的包名&#39;)</code><ul>
<li>node_modules/express/package.json main</li>
<li>如果package.json或者main不成立，则查找被选择项：index.js</li>
<li>如果以上条件都不满足，则继续进入上一级目录中的node_modules按照上面的规则依次查找，直到当前文件所属此盘根目录都找不到最后报错</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果非路径形式的标识// 路径形式的标识：    // ./  当前目录 不可省略    // ../  上一级目录  不可省略    //  /xxx也就是D:/xxx    // 带有绝对路径几乎不用（D:/a/foo.js）// 首位表示的是当前文件模块所属磁盘根目录// require(&#x27;./a&#x27;); // 核心模块// 核心模块本质也是文件，核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了require(&#x27;fs&#x27;); // 第三方模块// 凡是第三方模块都必须通过npm下载（npm i node_modules），使用的时候就可以通过require(&#x27;包名&#x27;)来加载才可以使用// 第三方包的名字不可能和核心模块的名字是一样的// 既不是核心模块，也不是路径形式的模块//      先找到当前文所述目录的node_modules//      然后找node_modules/art-template目录//      node_modules/art-template/package.json//      node_modules/art-template/package.json中的main属性//      main属性记录了art-template的入口模块//      然后加载使用这个第三方包//      实际上最终加载的还是文件//      如果package.json不存在或者mian指定的入口模块不存在//      则node会自动找该目录下的index.js//      也就是说index.js是一个备选项，如果main没有指定，则加载index.js文件//              // 如果条件都不满足则会进入上一级目录进行查找// 注意：一个项目只有一个node_modules，放在项目根目录中，子目录可以直接调用根目录的文件var template = require(&#x27;art-template&#x27;);</span></span><br></pre></td></tr></table></figure>

<h2 id="模块标识符中的-和文件操作路径中的"><a href="#模块标识符中的-和文件操作路径中的" class="headerlink" title="模块标识符中的/和文件操作路径中的/"></a>模块标识符中的<code>/</code>和文件操作路径中的<code>/</code></h2><p>文件操作路径：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 咱们所使用的所有文件操作的API都是异步的// 就像ajax请求一样// 读取文件// 文件操作中 ./ 相当于当前模块所处磁盘根目录// ./index.txt    相对于当前目录// /index.txt    相对于当前目录// /index.txt   绝对路径,当前文件模块所处根目录// d:express/index.txt   绝对路径fs.readFile(&#x27;./index.txt&#x27;,function(err,data)&#123;    if(err)&#123;       return  console.log(&#x27;读取失败&#x27;);    &#125;    console.log(data.toString());&#125;)</span></span><br></pre></td></tr></table></figure>

<p>模块操作路径：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在模块加载中，相对路径中的./不能省略// 这里省略了.也是磁盘根目录require(&#x27;./index&#x27;)(&#x27;hello&#x27;)</span></span><br></pre></td></tr></table></figure>



<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><ul>
<li>node package manage(node包管理器)</li>
<li>通过npm命令安装jQuery包（npm install –save jquery），在安装时加上–save会主动生成说明书文件信息（将安装文件的信息添加到package.json里面）</li>
</ul>
<h3 id="npm网站"><a href="#npm网站" class="headerlink" title="npm网站"></a>npm网站</h3><blockquote>
<p>​    npmjs.com    网站   是用来搜索npm包的</p>
</blockquote>
<h3 id="npm命令行工具"><a href="#npm命令行工具" class="headerlink" title="npm命令行工具"></a>npm命令行工具</h3><p>npm是一个命令行工具，只要安装了node就已经安装了npm。</p>
<p>npm也有版本概念，可以通过<code>npm --version</code>来查看npm的版本</p>
<p>升级npm(自己升级自己)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --<span class="built_in">global</span> npm</span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>npm init(生成package.json说明书文件)<ul>
<li>npm init -y(可以跳过向导，快速生成)</li>
</ul>
</li>
<li>npm install<ul>
<li>一次性把dependencies选项中的依赖项全部安装</li>
<li>简写（npm i）</li>
</ul>
</li>
<li>npm install 包名<ul>
<li>只下载</li>
<li>简写（npm i 包名）</li>
</ul>
</li>
<li>npm install –save 包名<ul>
<li>下载并且保存依赖项（package.json文件中的dependencies选项）</li>
<li>简写（npm i  包名）</li>
</ul>
</li>
<li>npm uninstall 包名<ul>
<li>只删除，如果有依赖项会依然保存</li>
<li>简写（npm un 包名）</li>
</ul>
</li>
<li>npm uninstall –save 包名<ul>
<li>删除的同时也会把依赖信息全部删除</li>
<li>简写（npm un 包名）</li>
</ul>
</li>
<li>npm help<ul>
<li>查看使用帮助</li>
</ul>
</li>
<li>npm 命令 –help<ul>
<li>查看具体命令的使用帮助（npm uninstall –help）</li>
</ul>
</li>
</ul>
<h3 id="解决npm被墙问题"><a href="#解决npm被墙问题" class="headerlink" title="解决npm被墙问题"></a>解决npm被墙问题</h3><p>npm存储包文件的服务器在国外，有时候会被墙，速度很慢，所以需要解决这个问题。</p>
<blockquote>
<p><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm%E6%B7%98%E5%AE%9D%E7%9A%84%E5%BC%80%E5%8F%91%E5%9B%A2%E9%98%9F%E6%8A%8Anpm%E5%9C%A8%E5%9B%BD%E5%86%85%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E9%95%9C%E5%83%8F%EF%BC%88%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A4%87%E4%BB%BD%EF%BC%89%E3%80%82">https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。</a></p>
</blockquote>
<p>安装淘宝的cnpm：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在任意目录执行都可以<span class="comment">#--global表示安装到全局，而非当前目录#--global不能省略，否则不管用npm install --global cnpm</span></span></span><br></pre></td></tr></table></figure>

<p>安装包的时候把以前的<code>npm</code>替换成<code>cnpm</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">走国外的npm服务器下载jQuery包，速度比较慢npm install jQuery;<span class="comment">#使用cnpm就会通过淘宝的服务器来下载jQuerycnpm install jQuery;</span></span></span><br></pre></td></tr></table></figure>

<p>如果不想安装<code>cnpm</code>又想使用淘宝的服务器来下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install jquery --registry=https://npm.taobao.org;</span><br></pre></td></tr></table></figure>

<p>但是每次手动加参数就很麻烦，所以我们可以把这个选项加入到配置文件中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://npm.taobao.org;#查看npm配置信息npm config list;</span><br></pre></td></tr></table></figure>

<p>只要经过上面的配置命令，则以后所有的<code>npm install</code>都会通过淘宝的服务器来下载</p>
<h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样）</p>
<p>这个文件可以通过<code>npm init</code>自动初始化出来</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">D:\code\node中的模块系统&gt;npm initThis utility will walk you through creating a package.json file.It only covers the most common items, and tries to guess sensible defaults.See <span class="string">`npm help json`</span> <span class="keyword">for</span> definitive documentation on these fieldsand exactly what they <span class="keyword">do</span>.Use <span class="string">`npm install &lt;pkg&gt;`</span> afterwards to install a package andsave it <span class="keyword">as</span> a dependency <span class="keyword">in</span> the package.json file.Press ^C at any time to quit.package name: (node中的模块系统)Sorry, name can only contain URL-friendly characters.package name: (node中的模块系统) clsversion: (<span class="number">1.0</span><span class="number">.0</span>)description: 这是一个测试项目entry point: (main.js)test command:git repository:keywords:author: xiaochenlicense: (ISC)About to write to D:\code\node中的模块系统\package.json:&#123;  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;cls&quot;</span>,  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;这是一个测试项目&quot;</span>,  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,  <span class="string">&quot;scripts&quot;</span>: &#123;    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>  &#125;,  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;xiaochen&quot;</span>,  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>&#125;Is <span class="built_in">this</span> OK? (yes) yes</span><br></pre></td></tr></table></figure>

<p>对于目前来讲，最有用的是<code>dependencies</code>选项，可以用来帮助我们保存第三方包的依赖信息。</p>
<p>如果<code>node_modules</code>删除了也不用担心，只需要在控制面板中<code>npm install</code>就会自动把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项全部都下载回来。</p>
<ul>
<li>建议每个项目的根目录下都有一个<code>package.json</code>文件</li>
<li>建议执行<code>npm install 包名</code>的时候都加上<code>--save</code>选项，目的是用来保存依赖信息</li>
</ul>
<h2 id="package-json和package-lock-json"><a href="#package-json和package-lock-json" class="headerlink" title="package.json和package-lock.json"></a>package.json和package-lock.json</h2><p>npm 5以前是不会有<code>package-lock.json</code>这个文件</p>
<p>npm5以后才加入这个文件</p>
<p>当你安装包的时候，npm都会生成或者更新<code>package-lock.json</code>这个文件</p>
<ul>
<li>npm5以后的版本安装都不要加<code>--save</code>参数，它会自动保存依赖信息</li>
<li>当你安装包的时候，会自动创建或者更新<code>package-lock.json</code>文件</li>
<li><code>package-lock.json</code>这个文件会包含<code>node_modules</code>中所有包的信息（版本，下载地址。。。）<ul>
<li>这样的话重新<code>npm install</code>的时候速度就可以提升</li>
</ul>
</li>
<li>从文件来看，有一个<code>lock</code>称之为锁<ul>
<li>这个<code>lock</code>使用来锁版本的</li>
<li>如果项目依赖了<code>1.1.1</code>版本</li>
<li>如果你重新install其实会下载最细版本，而不是<code>1.1.1</code></li>
<li><code>package-lock.json</code>的另外一个作用就是锁定版本号，防止自动升级</li>
</ul>
</li>
</ul>
<h2 id="path路径操作模块"><a href="#path路径操作模块" class="headerlink" title="path路径操作模块"></a>path路径操作模块</h2><blockquote>
<p>参考文档：<a href="https://nodejs.org/docs/latest-v13.x/api/path.html">https://nodejs.org/docs/latest-v13.x/api/path.html</a></p>
</blockquote>
<ul>
<li>path.basename：获取路径的文件名，默认包含扩展名</li>
<li>path.dirname：获取路径中的目录部分</li>
<li>path.extname：获取一个路径中的扩展名部分</li>
<li>path.parse：把路径转换为对象<ul>
<li>root：根路径</li>
<li>dir：目录</li>
<li>base：包含后缀名的文件名</li>
<li>ext：后缀名</li>
<li>name：不包含后缀名的文件名</li>
</ul>
</li>
<li>path.join：拼接路径</li>
<li>path.isAbsolute：判断一个路径是否为绝对路径<img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200315150610001.png" alt="image-20200315150610001"></li>
</ul>
<h1 id="Node中的其它成员-dirname-filename"><a href="#Node中的其它成员-dirname-filename" class="headerlink" title="Node中的其它成员(__dirname,__filename)"></a>Node中的其它成员(__dirname,__filename)</h1><p>在每个模块中，除了<code>require</code>,<code>exports</code>等模块相关的API之外，还有两个特殊的成员：</p>
<ul>
<li><p><code>__dirname</code>，是一个成员，可以用来<strong>动态</strong>获取当前文件模块所属目录的绝对路径</p>
</li>
<li><p><code>__filename</code>，可以用来<strong>动态</strong>获取当前文件的绝对路径（包含文件名）</p>
</li>
<li><p><code>__dirname</code>和<code>filename</code>是不受执行node命令所属路径影响的</p>
</li>
</ul>
<p>==在文件操作中，使用相对路径是不可靠的，因为node中文件操作的路径被设计为相对于执行node命令所处的路径。==（node  xxx.js）</p>
<p>所以为了解决这个问题，只需要把相对路径变为==绝对路径==（绝对路径不受任何影响）就可以了。</p>
<p>就可以使用==<code>__dirname</code>==或者==<code>__filename</code>==来帮助我们解决这个问题</p>
<p>在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用<code>path.join()</code>来辅助拼接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);<span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);<span class="comment">// console.log(__dirname + &#x27;a.txt&#x27;);// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径fs.readFile(path.join(__dirname + &#x27;/a.txt&#x27;),&#x27;utf8&#x27;,function(err,data)&#123;	if(err)&#123;		throw err	&#125;	console.log(data);&#125;);</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>补充：模块中的路径标识和这里的路径没关系，不受影响（就是相对于文件模块）</p>
</blockquote>
<blockquote>
<p><strong>注意：</strong></p>
<p><strong>模块中的路径标识和文件操作中的相对路径标识不一致</strong></p>
<p><strong>模块中的路径标识就是相对于当前文件模块，不受node命令所处路径影响</strong></p>
</blockquote>
<h1 id="Express（快速的）"><a href="#Express（快速的）" class="headerlink" title="Express（快速的）"></a>Express（快速的）</h1><p>作者：Tj</p>
<p>原生的http在某些方面表现不足以应对我们的开发需求，所以就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码高度统一。</p>
<p>在node中有很多web开发框架。主要学习express</p>
<ul>
<li><p><code>http://expressjs.com/</code>,其中主要封装的是http。</p>
</li>
<li><p>```javascript<br>// 1 安装// 2 引包var express = require(‘express’);// 3 创建服务器应用程序//      也就是原来的http.createServer();var app = express();// 公开指定目录// 只要通过这样做了，就可以通过/public/xx的方式来访问public目录中的所有资源// 在Express中开放资源就是一个API的事app.use(‘/public/‘,express.static(‘/public/‘));//模板引擎在Express中开放模板也是一个API的事// 当服务器收到get请求 / 的时候，执行回调处理函数app.get(‘/‘,function(req,res){    res.send(‘hello express’);})// 相当于server.listenapp.listen(3000,function(){    console.log(‘app is runing at port 3000’);})</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 学习Express</span><br><span class="line"></span><br><span class="line">#### 起步</span><br><span class="line"></span><br><span class="line">##### 安装：![image-20200310123723079](C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200310123723079.png)</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">cnpm install express</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world:"></a>hello world:<img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200310124850557.png" alt="image-20200310124850557"></h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入expressvar express = require(&#x27;express&#x27;);// 1. 创建appvar app = express();//  2. app.get(&#x27;/&#x27;,function(req,res)&#123;    // 1    // res.write(&#x27;Hello&#x27;);    // res.write(&#x27;World&#x27;);    // res.end()    // 2    // res.end(&#x27;hello world&#x27;);    // 3    res.send(&#x27;hello world&#x27;);&#125;)app.listen(3000,function()&#123;    console.log(&#x27;express app is runing...&#x27;);&#125;)</span></span><br></pre></td></tr></table></figure>

<h5 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h5><p>路由：</p>
<ul>
<li><p>请求方法</p>
</li>
<li><p>请求路径</p>
</li>
<li><p>请求处理函数</p>
</li>
</ul>
<p>get:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当你以get方法请求/的时候，执行对应的处理函数app.get(&#x27;/&#x27;,function(req,res)&#123;    res.send(&#x27;hello world&#x27;);&#125;)</span></span><br></pre></td></tr></table></figure>

<p>post:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当你以post方法请求/的时候，执行对应的处理函数app.post(&#x27;/&#x27;,function(req,res)&#123;    res.send(&#x27;hello world&#x27;);&#125;)</span></span><br></pre></td></tr></table></figure>

<h5 id="Express静态服务API"><a href="#Express静态服务API" class="headerlink" title="Express静态服务API"></a>Express静态服务API</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.use不仅仅是用来处理静态资源的，还可以做很多工作(body-parser的配置)app.use(express.static(&#x27;public&#x27;));app.use(express.static(&#x27;files&#x27;));app.use(&#x27;/stataic&#x27;,express.static(&#x27;public&#x27;));</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入expressvar express = require(&#x27;express&#x27;);// 创建appvar app = express();// 开放静态资源// 1.当以/public/开头的时候，去./public/目录中找对应资源// 访问：http://127.0.0.1:3000/public/login.htmlapp.use(&#x27;/public/&#x27;,express.static(&#x27;./public/&#x27;)); // 2.当省略第一个参数的时候，可以通过省略/public的方式来访问// 访问：http://127.0.0.1:3000/login.html// app.use(express.static(&#x27;./public/&#x27;));   // 3.访问：http://127.0.0.1:3000/a/login.html// a相当于public的别名// app.use(&#x27;/a/&#x27;,express.static(&#x27;./public/&#x27;)); //  app.get(&#x27;/&#x27;,function(req,res)&#123;    res.end(&#x27;hello world&#x27;);&#125;);app.listen(3000,function()&#123;    console.log(&#x27;express app is runing...&#x27;);&#125;);</span></span><br></pre></td></tr></table></figure>

<h5 id="在Express中配置使用art-templete模板引擎"><a href="#在Express中配置使用art-templete模板引擎" class="headerlink" title="在Express中配置使用art-templete模板引擎"></a>在Express中配置使用<code>art-templete</code>模板引擎</h5><ul>
<li><a href="https://aui.github.io/art-template/">art-template官方文档</a></li>
<li>在node中，有很多第三方模板引擎都可以使用，不是只有<code>art-template</code><ul>
<li>还有ejs，jade（pug），handlebars，nunjucks</li>
</ul>
</li>
</ul>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save art-templatenpm install --save express-art-template//两个一起安装npm i --save art-template express-art-template</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.engine(<span class="string">&#x27;html&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;    <span class="comment">// express默认会去views目录找index.html    res.render(&#x27;index.html&#x27;,&#123;           title:&#x27;hello world&#x27;         &#125;);&#125;)</span></span><br></pre></td></tr></table></figure>

<p>如果希望修改默认的<code>views</code>视图渲染存储目录，可以：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数views千万不要写错app.set(&#x27;views&#x27;,目录路径);</span></span><br></pre></td></tr></table></figure>

<h5 id="在Express中获取表单请求数据"><a href="#在Express中获取表单请求数据" class="headerlink" title="在Express中获取表单请求数据"></a>在Express中获取表单请求数据</h5><h6 id="获取get请求数据："><a href="#获取get请求数据：" class="headerlink" title="获取get请求数据："></a>获取get请求数据：</h6><p>Express内置了一个api，可以直接通过<code>req.query</code>来获取数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过requery方法获取用户输入的数据// req.query只能拿到get请求的数据 var comment = req.query;</span></span><br></pre></td></tr></table></figure>

<h6 id="获取post请求数据："><a href="#获取post请求数据：" class="headerlink" title="获取post请求数据："></a>获取post请求数据：</h6><p>在Express中没有内置获取表单post请求体的api，这里我们需要使用一个第三方包<code>body-parser</code>来获取数据。</p>
<p>安装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --save body-parser;</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<p>// 配置解析表单 POST 请求体插件（注意：一定要在 app.use(router) 之前 ）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)<span class="comment">// 引包var bodyParser = require(&#x27;body-parser&#x27;)var app = express()// 配置body-parser// 只要加入这个配置，则在req请求对象上会多出来一个属性：body// 也就是说可以直接通过req.body来获取表单post请求数据// parse application/x-www-form-urlencodedapp.use(bodyParser.urlencoded(&#123; extended: false &#125;))// parse application/jsonapp.use(bodyParser.json())</span></span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)  res.write(<span class="string">&#x27;you posted:\n&#x27;</span>)  <span class="comment">// 可以通过req.body来获取表单请求数据  res.end(JSON.stringify(req.body, null, 2))&#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="在Express中配置使用express-session插件操作"><a href="#在Express中配置使用express-session插件操作" class="headerlink" title="在Express中配置使用express-session插件操作"></a>在Express中配置使用<code>express-session</code>插件操作</h3><blockquote>
<p>参考文档：<a href="https://github.com/expressjs/session">https://github.com/expressjs/session</a></p>
</blockquote>
<p>安装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install express-session</span><br></pre></td></tr></table></figure>

<p>配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该插件会为req请求对象添加一个成员:req.session默认是一个对象//这是最简单的配置方式//Session是基于Cookie实现的app.use(session(&#123;  //配置加密字符串，他会在原有的基础上和字符串拼接起来去加密  //目的是为了增加安全性，防止客户端恶意伪造  secret: &#x27;keyboard cat&#x27;,  resave: false,  saveUninitialized: true,//无论是否适用Session，都默认直接分配一把钥匙  cookie: &#123; secure: true &#125;&#125;))</span></span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读//添加Session数据//session就是一个对象req.session.foo = &#x27;bar&#x27;;//写//获取session数据req.session.foo//删req.session.foo = null;delete req.session.foo</span></span><br></pre></td></tr></table></figure>

<p>提示：</p>
<p>默认Session数据时内存储数据，服务器一旦重启，真正的生产环境会把Session进行持久化存储。</p>
<h3 id="利用Express实现ADUS项目"><a href="#利用Express实现ADUS项目" class="headerlink" title="利用Express实现ADUS项目"></a>利用Express实现ADUS项目</h3><h4 id="模块化思想"><a href="#模块化思想" class="headerlink" title="模块化思想"></a>模块化思想</h4><p>模块如何划分:</p>
<ul>
<li>模块职责要单一</li>
</ul>
<p>javascript模块化：</p>
<ul>
<li>Node 中的 CommonJS</li>
<li>浏览器中的：<ul>
<li>AMD    require.js</li>
<li>CMD     sea.js</li>
</ul>
</li>
<li>es6中增加了官方支持</li>
</ul>
<h4 id="起步-1"><a href="#起步-1" class="headerlink" title="起步"></a>起步</h4><ul>
<li>初始化</li>
<li>模板处理</li>
</ul>
<h4 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h4><table>
<thead>
<tr>
<th>请求方法</th>
<th align="left">请求路径</th>
<th align="left">get参数</th>
<th>post参数</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td align="left">/students</td>
<td align="left"></td>
<td></td>
<td align="left">渲染首页</td>
</tr>
<tr>
<td>GET</td>
<td align="left">/students/new</td>
<td align="left"></td>
<td></td>
<td align="left">渲染添加学生页面</td>
</tr>
<tr>
<td>POST</td>
<td align="left">/students/new</td>
<td align="left"></td>
<td>name,age,gender,hobbies</td>
<td align="left">处理添加学生请求</td>
</tr>
<tr>
<td>GET</td>
<td align="left">/students/edit</td>
<td align="left">id</td>
<td></td>
<td align="left">渲染编辑页面</td>
</tr>
<tr>
<td>POST</td>
<td align="left">/students/edit</td>
<td align="left"></td>
<td>id,name,age,gender,hobbies</td>
<td align="left">处理编辑请求</td>
</tr>
<tr>
<td>GET</td>
<td align="left">/students/delete</td>
<td align="left">id</td>
<td></td>
<td align="left">处理删除请求</td>
</tr>
</tbody></table>
<h4 id="提取路由模块"><a href="#提取路由模块" class="headerlink" title="提取路由模块"></a>提取路由模块</h4><p>router.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * router.js路由模块 * 职责： *      处理路由 *      根据不同的请求方法+请求路径设置具体的请求函数 * 模块职责要单一，我们划分模块的目的就是增强代码的可维护性，提升开发效率 */</span><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);<span class="comment">// Express专门提供了一种更好的方式// 专门用来提供路由的var express = require(&#x27;express&#x27;);// 1 创建一个路由容器var router = express.Router();// 2 把路由都挂载到路由容器中router.get(&#x27;/students&#x27;, function(req, res) &#123;    // res.send(&#x27;hello world&#x27;);    // readFile的第二个参数是可选的，传入utf8就是告诉他把读取到的文件直接按照utf8编码，直接转成我们认识的字符    // 除了这样来转换，也可以通过data.toString（）来转换    fs.readFile(&#x27;./db.json&#x27;, &#x27;utf8&#x27;, function(err, data) &#123;        if (err) &#123;            return res.status(500).send(&#x27;Server error.&#x27;)        &#125;        // 读取到的文件数据是string类型的数据        // console.log(data);        // 从文件中读取到的数据一定是字符串，所以一定要手动转换成对象        var students = JSON.parse(data).students;        res.render(&#x27;index.html&#x27;, &#123;            // 读取文件数据            students:students        &#125;)    &#125;)&#125;);router.get(&#x27;/students/new&#x27;,function(req,res)&#123;    res.render(&#x27;new.html&#x27;)&#125;);router.get(&#x27;/students/edit&#x27;,function(req,res)&#123;    &#125;);router.post(&#x27;/students/edit&#x27;,function(req,res)&#123;    &#125;);router.get(&#x27;/students/delete&#x27;,function(req,res)&#123;    &#125;);// 3 把router导出module.exports = router;</span></span><br></pre></td></tr></table></figure>

<p>app.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>);<span class="comment">// router(app);// 把路由容器挂载到app服务中// 挂载路由app.use(router);</span></span><br></pre></td></tr></table></figure>



<h4 id="设计操作数据的API文件模块"><a href="#设计操作数据的API文件模块" class="headerlink" title="设计操作数据的API文件模块"></a>设计操作数据的API文件模块</h4><p>es6中的find和findIndex：</p>
<p>find接受一个方法作为参数，方法内部返回一个条件</p>
<p>find会便利所有的元素，执行你给定的带有条件返回值的函数</p>
<p>符合该条件的元素会作为find方法的返回值</p>
<p>如果遍历结束还没有符合该条件的元素，则返回undefined<img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200313103810731.png" alt="image-20200313103810731"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * student.js * 数据操作文件模块 * 职责：操作文件中的数据，只处理数据，不关心业务 */</span><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); <span class="comment">/**  * 获取所有学生列表  * return []  */</span><span class="built_in">exports</span>.find = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    &#125; <span class="comment">/**  * 获取添加保存学生  */</span><span class="built_in">exports</span>.save = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;        &#125;<span class="comment">/** * 更新学生 */</span><span class="built_in">exports</span>.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;        &#125; <span class="comment">/** * 删除学生 */</span><span class="built_in">exports</span>.delete = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul>
<li><p>处理模板</p>
</li>
<li><p>配置静态开放资源</p>
</li>
<li><p>配置模板引擎</p>
</li>
<li><p>简单的路由，/studens渲染静态页出来</p>
</li>
<li><p>路由设计</p>
</li>
<li><p>提取路由模块</p>
</li>
<li><p>由于接下来的一系列业务操作都需要处理文件数据，所以我们需要封装Student.js’</p>
</li>
<li><p>先写好student.js文件结构</p>
<ul>
<li>查询所有学生列别哦的API</li>
<li>findById</li>
<li>save</li>
<li>updateById</li>
<li>deleteById</li>
</ul>
</li>
<li><p>实现具体功能</p>
<ul>
<li>通过路由收到请求</li>
<li>接受请求中的参数（get，post）<ul>
<li>req.query</li>
<li>req.body</li>
</ul>
</li>
<li>调用数据操作API处理数据</li>
<li>根据操作结果给客户端发送请求</li>
</ul>
</li>
<li><p>业务功能顺序</p>
<ul>
<li>列表</li>
<li>添加</li>
<li>编辑</li>
<li>删除</li>
</ul>
</li>
</ul>
<h4 id="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"><a href="#子模板和模板的继承（模板引擎高级语法）【include，extend，block】" class="headerlink" title="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"></a>子模板和模板的继承（模板引擎高级语法）【include，extend，block】</h4><p>注意:</p>
<p>模板页：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh&quot;&gt;&lt;head&gt;	&lt;meta charset=&quot;UTF-8&quot;&gt;	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;	&lt;title&gt;模板页&lt;/title&gt;	&lt;link rel=&quot;stylesheet&quot; href=&quot;/node_modules/bootstrap/dist/css/bootstrap.css&quot;/&gt;	&#123;&#123; block &#x27;head&#x27; &#125;&#125;&#123;&#123; /block &#125;&#125;&lt;/head&gt;&lt;body&gt;	&lt;!-- 通过include导入公共部分 --&gt;	&#123;&#123;include &#x27;./header.html&#x27;&#125;&#125;		&lt;!-- 留一个位置 让别的内容去填充 --&gt;	&#123;&#123; block  &#x27;content&#x27; &#125;&#125;		&lt;h1&gt;默认内容&lt;/h1&gt;	&#123;&#123; /block &#125;&#125;		&lt;!-- 通过include导入公共部分 --&gt;	&#123;&#123;include &#x27;./footer.html&#x27;&#125;&#125;		&lt;!-- 公共样式 --&gt;	&lt;script src=&quot;/node_modules/jquery/dist/jquery.js&quot; &gt;&lt;/script&gt;	&lt;script src=&quot;/node_modules/bootstrap/dist/js/bootstrap.js&quot; &gt;&lt;/script&gt;	&#123;&#123; block &#x27;script&#x27; &#125;&#125;&#123;&#123; /block &#125;&#125;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>模板的继承：</p>
<p>​    header页面：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;&quot;</span>&gt;	<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>公共的头部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>​    footer页面：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;&quot;</span>&gt;	<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>公共的底部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>模板页的使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 继承(extend:延伸，扩展)模板也layout.html --&gt;&lt;!-- 把layout.html页面的内容都拿进来作为index.html页面的内容 --&gt;&#123;&#123;extend <span class="string">&#x27;./layout.html&#x27;</span>&#125;&#125;&lt;!-- 向模板页面填充新的数据 --&gt;&lt;!-- 填充后就会替换掉layout页面content中的数据 --&gt;&lt;!-- style样式方面的内容 --&gt;&#123;&#123; block <span class="string">&#x27;head&#x27;</span> &#125;&#125;	&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;		body&#123;			background-color: skyblue;		&#125;	&lt;<span class="regexp">/style&gt;&#123;&#123; /</span>block &#125;&#125;&#123;&#123; block <span class="string">&#x27;content&#x27;</span> &#125;&#125;	&lt;div id=<span class="string">&quot;&quot;</span>&gt;		<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index页面的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>	&lt;<span class="regexp">/div&gt;&#123;&#123; /</span>block &#125;&#125;&lt;!-- js部分的内容 --&gt;&#123;&#123; block <span class="string">&#x27;script&#x27;</span> &#125;&#125;	&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;			&lt;<span class="regexp">/script&gt;&#123;&#123; /</span>block &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>最终的显示效果：</p>
<p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200316134759517.png" alt="image-20200316134759517"></p>
<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="关系型和非关系型数据库"><a href="#关系型和非关系型数据库" class="headerlink" title="关系型和非关系型数据库"></a>关系型和非关系型数据库</h2><h3 id="关系型数据库（表就是关系，或者说表与表之间存在关系）。"><a href="#关系型数据库（表就是关系，或者说表与表之间存在关系）。" class="headerlink" title="关系型数据库（表就是关系，或者说表与表之间存在关系）。"></a>关系型数据库（表就是关系，或者说表与表之间存在关系）。</h3><ul>
<li>所有的关系型数据库都需要通过<code>sql</code>语言来操作</li>
<li>所有的关系型数据库在操作之前都需要设计表结构</li>
<li>而且数据表还支持约束<ul>
<li>唯一的</li>
<li>主键</li>
<li>默认值</li>
<li>非空</li>
</ul>
</li>
</ul>
<h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><ul>
<li>非关系型数据库非常的灵活</li>
<li>有的关系型数据库就是key-value对儿</li>
<li>但MongDB是长得最像关系型数据库的非关系型数据库<ul>
<li>数据库 -》 数据库</li>
<li>数据表 -》 集合（数组）</li>
<li>表记录 -》文档对象</li>
</ul>
</li>
</ul>
<p>一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;    <span class="attr">qq</span>:&#123;       <span class="attr">user</span>:[           &#123;&#125;,&#123;&#125;,&#123;&#125;...       ]    &#125;&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>也就是说你可以任意的往里面存数据，没有结构性这么一说</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>下载</p>
<ul>
<li>下载地址：<a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a></li>
</ul>
</li>
<li><p>安装</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure></li>
<li><p>配置环境变量</p>
</li>
<li><p>最后输入<code>mongod --version</code>测试是否安装成功</p>
</li>
</ul>
<h2 id="启动和关闭数据库"><a href="#启动和关闭数据库" class="headerlink" title="启动和关闭数据库"></a>启动和关闭数据库</h2><p>启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mongodb 默认使用执行mongod 命令所处盘符根目录下的/data/db作为自己的数据存储目录<span class="comment"># 所以在第一次执行该命令之前先自己手动新建一个 /data/dbmongod# 开启服务net start mongodb</span></span></span><br></pre></td></tr></table></figure>

<p>如果想要修改默认的数据存储目录，可以：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mongod --dbpath = 数据存储目录路径</span><br></pre></td></tr></table></figure>

<p>停止：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在开启服务的控制台，直接Ctrl+C;或者直接关闭开启服务的控制台。</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200314101047100.png" alt="image-20200314101047100"></p>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>连接：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 该命令默认连接本机的 MongoDB 服务mongo</span><br></pre></td></tr></table></figure>

<p>退出：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 在连接状态输入 exit 退出连接exit</span><br></pre></td></tr></table></figure>



<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul>
<li><code>show dbs</code><ul>
<li>查看数据库列表(数据库中的所有数据库)</li>
</ul>
</li>
<li><code>db</code><ul>
<li>查看当前连接的数据库</li>
</ul>
</li>
<li><code>use 数据库名称</code><ul>
<li>切换到指定的数据库，（如果没有会新建）</li>
</ul>
</li>
<li><code>show collections</code><ul>
<li>查看当前目录下的所有数据表</li>
</ul>
</li>
<li><code>db.表名.find()</code><ul>
<li>查看表中的详细信息</li>
</ul>
</li>
</ul>
<h2 id="在Node中如何操作MongoDB数据库"><a href="#在Node中如何操作MongoDB数据库" class="headerlink" title="在Node中如何操作MongoDB数据库"></a>在Node中如何操作MongoDB数据库</h2><h3 id="使用官方的MongoDB包来操作"><a href="#使用官方的MongoDB包来操作" class="headerlink" title="使用官方的MongoDB包来操作"></a>使用官方的<code>MongoDB</code>包来操作</h3><blockquote>
<p>​    <a href="http://mongodb.github.io/node-mongodb-native/">http://mongodb.github.io/node-mongodb-native/</a></p>
</blockquote>
<h3 id="使用第三方包mongoose来操作MongoDB数据库"><a href="#使用第三方包mongoose来操作MongoDB数据库" class="headerlink" title="使用第三方包mongoose来操作MongoDB数据库"></a>使用第三方包<code>mongoose</code>来操作MongoDB数据库</h3><p>​    第三方包：<code>mongoose</code>基于MongoDB官方的<code>mongodb</code>包再一次做了封装，名字叫<code>mongoose</code>，是WordPress项目团队开发的。</p>
<h2 id="学习指南（步骤）"><a href="#学习指南（步骤）" class="headerlink" title="学习指南（步骤）"></a>学习指南（步骤）</h2><p>官方学习文档：<a href="https://mongoosejs.com/docs/index.html">https://mongoosejs.com/docs/index.html</a></p>
<h3 id="设计Scheme-发布Model-创建表"><a href="#设计Scheme-发布Model-创建表" class="headerlink" title="设计Scheme 发布Model (创建表)"></a>设计Scheme 发布Model (创建表)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.引包// 注意：按照后才能require使用var mongoose = require(&#x27;mongoose&#x27;);// 拿到schema图表var Schema = mongoose.Schema;// 2.连接数据库// 指定连接数据库后不需要存在，当你插入第一条数据库后会自动创建数据库mongoose.connect(&#x27;mongodb://localhost/test&#x27;);// 3.设计集合结构（表结构）// 用户表var userSchema = new Schema(&#123;	username: &#123; //姓名		type: String,		require: true //添加约束，保证数据的完整性，让数据按规矩统一	&#125;,	password: &#123;		type: String,		require: true	&#125;,	email: &#123;		type: String	&#125;&#125;);// 4.将文档结构发布为模型// mongoose.model方法就是用来将一个架构发布为 model// 		第一个参数：传入一个大写名词单数字符串用来表示你的数据库的名称// 					mongoose 会自动将大写名词的字符串生成 小写复数 的集合名称// 					例如 这里会变成users集合名称// 		第二个参数：架构// 	返回值：模型构造函数var User = mongoose.model(&#x27;User&#x27;, userSchema);</span></span><br></pre></td></tr></table></figure>

<h3 id="添加数据（增）"><a href="#添加数据（增）" class="headerlink" title="添加数据（增）"></a>添加数据（增）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5.通过模型构造函数对User中的数据进行操作var user = new User(&#123;	username: &#x27;admin&#x27;,	password: &#x27;123456&#x27;,	email: &#x27;xiaochen@qq.com&#x27;&#125;);user.save(function(err, ret) &#123;	if (err) &#123;		console.log(&#x27;保存失败&#x27;);	&#125; else &#123;		console.log(&#x27;保存成功&#x27;);		console.log(ret);	&#125;&#125;);</span></span><br></pre></td></tr></table></figure>

<h3 id="删除（删）"><a href="#删除（删）" class="headerlink" title="删除（删）"></a>删除（删）</h3><p>根据条件删除所有：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">User.remove(&#123;	<span class="attr">username</span>: <span class="string">&#x27;xiaoxiao&#x27;</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;	<span class="keyword">if</span> (err) &#123;		<span class="built_in">console</span>.log(<span class="string">&#x27;删除失败&#x27;</span>);	&#125; <span class="keyword">else</span> &#123;		<span class="built_in">console</span>.log(<span class="string">&#x27;删除成功&#x27;</span>);		<span class="built_in">console</span>.log(ret);	&#125;&#125;);</span><br></pre></td></tr></table></figure>

<p>根据条件删除一个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Model.findOneAndRemove(conditions,[options],[callback]);</span><br></pre></td></tr></table></figure>

<p>根据id删除一个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">User.findByIdAndRemove(id,[options],[callback]);</span><br></pre></td></tr></table></figure>



<h3 id="更新（改）"><a href="#更新（改）" class="headerlink" title="更新（改）"></a>更新（改）</h3><p>更新所有：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">User.remove(conditions,doc,[options],[callback]);</span><br></pre></td></tr></table></figure>

<p>根据指定条件更新一个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">User.FindOneAndUpdate([conditions],[update],[options],[callback]);</span><br></pre></td></tr></table></figure>

<p>根据id更新一个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新	根据id来修改表数据User.findByIdAndUpdate(&#x27;5e6c5264fada77438c45dfcd&#x27;, &#123;	username: &#x27;junjun&#x27;&#125;, function(err, ret) &#123;	if (err) &#123;		console.log(&#x27;更新失败&#x27;);	&#125; else &#123;		console.log(&#x27;更新成功&#x27;);	&#125;&#125;);</span></span><br></pre></td></tr></table></figure>



<h3 id="查询（查）"><a href="#查询（查）" class="headerlink" title="查询（查）"></a>查询（查）</h3><p>查询所有：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有User.find(function(err,ret)&#123;	if(err)&#123;		console.log(&#x27;查询失败&#x27;);	&#125;else&#123;		console.log(ret);	&#125;&#125;);</span></span><br></pre></td></tr></table></figure>

<p>条件查询所有：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据条件查询User.find(&#123; username:&#x27;xiaoxiao&#x27; &#125;,function(err,ret)&#123;	if(err)&#123;		console.log(&#x27;查询失败&#x27;);	&#125;else&#123;		console.log(ret);	&#125;&#125;);</span></span><br></pre></td></tr></table></figure>

<p>条件查询单个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按照条件查询单个，查询出来的数据是一个对象（&#123;&#125;）// 没有条件查询使用findOne方法，查询的是表中的第一条数据User.findOne(&#123;	username: &#x27;xiaoxiao&#x27;&#125;, function(err, ret) &#123;	if (err) &#123;		console.log(&#x27;查询失败&#x27;);	&#125; else &#123;		console.log(ret);	&#125;&#125;);</span></span><br></pre></td></tr></table></figure>

<h1 id="使用Node操作MySQL数据库"><a href="#使用Node操作MySQL数据库" class="headerlink" title="使用Node操作MySQL数据库"></a>使用Node操作MySQL数据库</h1><p>文档：<a href="https://www.npmjs.com/package/mysql">https://www.npmjs.com/package/mysql</a></p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save  mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入mysql包var mysql      = require(&#x27;mysql&#x27;);// 创建连接var connection = mysql.createConnection(&#123;  host     : &#x27;localhost&#x27;,	//本机  user     : &#x27;me&#x27;,		//账号root  password : &#x27;secret&#x27;,	//密码12345  database : &#x27;my_db&#x27;	//数据库名&#125;); // 连接数据库	（打开冰箱门）connection.connect(); //执行数据操作	（把大象放到冰箱）connection.query(&#x27;SELECT * FROM `users` &#x27;, function (error, results, fields) &#123;  if (error) throw error;//抛出异常阻止代码往下执行  // 没有异常打印输出结果  console.log(&#x27;The solution is: &#x27;,results);&#125;);//关闭连接	（关闭冰箱门）connection.end();</span></span><br></pre></td></tr></table></figure>





<h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>不成立的情况下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;    <span class="built_in">console</span>.log(<span class="number">1</span>);    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;        <span class="built_in">console</span>.log(<span class="number">2</span>);        <span class="keyword">var</span> ret = x + y;        <span class="keyword">return</span> ret;    &#125;,<span class="number">1000</span>);    <span class="built_in">console</span>.log(<span class="number">3</span>);    <span class="comment">//到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined&#125;console.log(add(2,2));// 结果是 1 3 undefined 4</span></span><br></pre></td></tr></table></figure>

<p>使用回调函数解决：</p>
<p>回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ret;<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y,callback</span>)</span>&#123;    <span class="comment">// callback就是回调函数    // var x = 10;    // var y = 20;    // var callback = function(ret)&#123;console.log(ret);&#125;    console.log(1);    setTimeout(function()&#123;        var ret = x + y;        callback(ret);    &#125;,1000);    console.log(3);&#125;add(10,20,function(ret)&#123;    console.log(ret);&#125;);</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>​    凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）</p>
<p>​    这种情况必须通过   回调函数 (异步API都会伴随着一个回调函数)</p>
<p>ajax:</p>
<p>基于原生XMLHttpRequest封装get方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">// 当请求加载成功要调用指定的函数oReq.onload = function()&#123;    console.log(oReq.responseText);&#125;oReq.open(&quot;GET&quot;, &quot;请求路径&quot;,true);oReq.send();</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url,callback</span>)</span>&#123;    <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();    <span class="comment">// 当请求加载成功要调用指定的函数    oReq.onload = function()&#123;        //console.log(oReq.responseText);        callback(oReq.responseText);    &#125;    oReq.open(&quot;GET&quot;, url,true);    oReq.send();&#125;get(&#x27;data.json&#x27;,function(data)&#123;    console.log(data);&#125;);</span></span><br></pre></td></tr></table></figure>



<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>callback  hell（回调地狱）:</p>
<p>文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步api无法保证文件的执行顺序)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);fs.readFile(<span class="string">&#x27;./data/a.text&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;	<span class="keyword">if</span>(err)&#123;		<span class="comment">// 1 读取失败直接打印输出读取失败		return console.log(&#x27;读取失败&#x27;);		// 2 抛出异常		// 		阻止程序的执行		// 		把错误信息打印到控制台		throw err;	&#125;	console.log(data);&#125;);fs.readFile(&#x27;./data/b.text&#x27;,&#x27;utf8&#x27;,function(err,data)&#123;	if(err)&#123;		// 1 读取失败直接打印输出读取失败		return console.log(&#x27;读取失败&#x27;);		// 2 抛出异常		// 		阻止程序的执行		// 		把错误信息打印到控制台		throw err;	&#125;	console.log(data);&#125;);</span></span><br></pre></td></tr></table></figure>

<p>通过回调嵌套的方式来保证顺序：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);fs.readFile(<span class="string">&#x27;./data/a.text&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;	<span class="keyword">if</span>(err)&#123;		<span class="comment">// 1 读取失败直接打印输出读取失败		return console.log(&#x27;读取失败&#x27;);		// 2 抛出异常		// 		阻止程序的执行		// 		把错误信息打印到控制台		throw err;	&#125;	console.log(data);	fs.readFile(&#x27;./data/b.text&#x27;,&#x27;utf8&#x27;,function(err,data)&#123;		if(err)&#123;			// 1 读取失败直接打印输出读取失败			return console.log(&#x27;读取失败&#x27;);			// 2 抛出异常			// 		阻止程序的执行			// 		把错误信息打印到控制台			throw err;		&#125;		console.log(data);		fs.readFile(&#x27;./data/a.text&#x27;,&#x27;utf8&#x27;,function(err,data)&#123;			if(err)&#123;				// 1 读取失败直接打印输出读取失败				return console.log(&#x27;读取失败&#x27;);				// 2 抛出异常				// 		阻止程序的执行				// 		把错误信息打印到控制台				throw err;			&#125;			console.log(data);		&#125;);	&#125;);&#125;);</span></span><br></pre></td></tr></table></figure>

<p>为了解决以上编码方式带来的问题（回调地狱嵌套），所以在EcmaScript6新增了一个API:</p>
<ul>
<li><p>Promise：承诺，保证     (深度变长度)</p>
</li>
<li><p>Promise本身不是异步的，但往往都是内部封装一个异步任务</p>
</li>
<li><p>Promise 容器：存放了一个异步任务，有两种状态（Pending）：</p>
<ul>
<li><p>Resolved：解决</p>
</li>
<li><p>Rejected：失败</p>
</li>
<li><p>两种状态只能变成其中一种</p>
</li>
<li><p>容器一旦创建，就开始执行里面的代码</p>
</li>
</ul>
</li>
</ul>
<p>基本语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在EcmaScript 6中新增了一个API Promise// Promise 是一个构造函数var fs = require(&#x27;fs&#x27;);// 1 创建Promise容器		resolve:解决   reject：失败var p1 = new Promise(function(resolve, reject) &#123;	fs.readFile(&#x27;./a.text&#x27;, &#x27;utf8&#x27;, function(err, data) &#123;		if (err) &#123;			// console.log(err);			// 把容器的Pending状态变为rejected			reject(err);		&#125; else &#123;			// console.log(data);			// 把容器的Pending状态变为resolve			resolve(1234);		&#125;	&#125;);&#125;);// 当p1成功了，然后就（then）做指定的操作// then方法接收的function就是容器中的resolve函数// 当你 return 123 后面就接收到 123,没有 return 后面收到的就是 undefined// 真正有用的是：我们可以 return 一个 Promise 对象p1	.then(function(data) &#123;		console.log(data);	&#125;, function(err) &#123;		console.log(&#x27;读取文件失败了&#x27;, err);	&#125;);</span></span><br></pre></td></tr></table></figure>

<p>链式循环：png</p>
<p>封装Promise的<code>readFile</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);<span class="function"><span class="keyword">function</span> <span class="title">pReadFile</span>(<span class="params">filePath</span>) </span>&#123;	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;		fs.readFile(filePath, <span class="string">&#x27;utf8&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;			<span class="keyword">if</span> (err) &#123;				reject(err);			&#125; <span class="keyword">else</span> &#123;				resolve(data);			&#125;		&#125;);	&#125;);&#125;pReadFile(<span class="string">&#x27;./a.txt&#x27;</span>)	.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;		<span class="built_in">console</span>.log(data);		<span class="keyword">return</span> pReadFile(<span class="string">&#x27;./b.txt&#x27;</span>);	&#125;)	.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;		<span class="built_in">console</span>.log(data);		<span class="keyword">return</span> pReadFile(<span class="string">&#x27;./a.txt&#x27;</span>);	&#125;)	.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;		<span class="built_in">console</span>.log(data);	&#125;)</span><br></pre></td></tr></table></figure>

<p>mongoose所有的API都支持Promise：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有User.find()	.then(function(data)&#123;        console.log(data)    &#125;)</span></span><br></pre></td></tr></table></figure>

<p>注册：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">User.findOne(&#123;<span class="attr">username</span>:<span class="string">&#x27;admin&#x27;</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;    <span class="keyword">if</span>(user)&#123;        <span class="built_in">console</span>.log(<span class="string">&#x27;用户已存在&#x27;</span>)    &#125; <span class="keyword">else</span> &#123;        <span class="keyword">new</span> User(&#123;             <span class="attr">username</span>:<span class="string">&#x27;aaa&#x27;</span>,             <span class="attr">password</span>:<span class="string">&#x27;123&#x27;</span>,             <span class="attr">email</span>:<span class="string">&#x27;fffff&#x27;</span>        &#125;).save(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;            <span class="built_in">console</span>.log(<span class="string">&#x27;注册成功&#x27;</span>);        &#125;)    &#125;&#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">User.findOne(&#123;    <span class="attr">username</span>:<span class="string">&#x27;admin&#x27;</span>&#125;)    .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;        <span class="keyword">if</span>(user)&#123;            <span class="comment">// 用户已经存在不能注册            console.log(&#x27;用户已存在&#x27;);        &#125;        else&#123;            // 用户不存在可以注册            return new User(&#123;                username:&#x27;aaa&#x27;,                password:&#x27;123&#x27;,                email:&#x27;fffff&#x27;            &#125;).save();        &#125;    &#125;)    .then(funciton(ret)&#123;		console.log(&#x27;注册成功&#x27;);    &#125;)</span></span><br></pre></td></tr></table></figure>



<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>async函数</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="修改完代码自动重启"><a href="#修改完代码自动重启" class="headerlink" title="修改完代码自动重启"></a>修改完代码自动重启</h2><p>我们在这里可以使用一个第三方命名行工具：<code>nodemon</code>来帮助我们解决频繁修改代码重启服务器的问题。</p>
<p><code>nodemon</code>是一个基于Node.js开发的一个第三方命令行工具，我们使用的时候需要独立安装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#在任意目录执行该命令都可以#也就是说，所有需要 --<span class="built_in">global</span>安装的包都可以在任意目录执行npm install --<span class="built_in">global</span> nodemonnpm install -g nodemon#如果安装不成功的话，可以使用cnpm安装cnpm install -g nodemon</span><br></pre></td></tr></table></figure>

<p>安装完毕之后使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">node app.js#使用nodemonnodemon app.js</span><br></pre></td></tr></table></figure>

<p>只要是通过<code>nodemon</code>启动的服务，则他会监视你的文件变化，当文件发生变化的时候，会自动帮你重启服务器。</p>
<h2 id="封装异步API"><a href="#封装异步API" class="headerlink" title="封装异步API"></a>封装异步API</h2><p>回调函数：获取异步操作的结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">callback</span>)</span>&#123;    <span class="comment">// var callback = funtion(data)&#123; console.log(data); &#125;	setTimeout(function()&#123;        var data = &#x27;hello&#x27;;        callback(data);    &#125;,1000);&#125;// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取fn(function(data)&#123;    console.log(data);&#125;)</span></span><br></pre></td></tr></table></figure>

<h2 id="数组的遍历方法，都是对函数作为一种参数"><a href="#数组的遍历方法，都是对函数作为一种参数" class="headerlink" title="数组的遍历方法，都是对函数作为一种参数"></a>数组的遍历方法，都是对函数作为一种参数</h2><h2 id="EcmaScript-6"><a href="#EcmaScript-6" class="headerlink" title="EcmaScript 6"></a>EcmaScript 6</h2><blockquote>
<p>参考文档：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></p>
</blockquote>
<h1 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.├- app.js				项目入口├- controllers/├- models/				存储数据模型（mongoose）	﹂ comment.js			评论数据模型	﹂ topic.js				话题数据模型	﹂ user.js				用户数据模型├- node_modules/		第三方包├- package.json		包描述文件├- package-lock.json	第三方包版本锁定文件├- public/				公共静态资源	﹂ css/					样式资源        · login.css		  		· main.css 		· markdown-github.css 		· setting.css	﹂ img/					媒体资源    ﹂ js/					脚本├- routes/				路由文件    ﹂ session.js			﹂ topic.js┖- views/				存储视图目录    ﹂ _layouts/        · home.html				主页面    ﹂ _partials/		公共模板        · header.html			公共头部模板		· footer.html			公共页脚模板		· settings-nav.html		公共设置导航条模板    ﹂ settings/        · admin.html		· profile.html    ﹂ topic/			操作页面        · edit.html				 编辑		· new.html				 添加        · show.html				 展示    ﹂ index.html		内容主体	﹂ login.html		登陆页面	﹂ register.html	注册页面</span><br></pre></td></tr></table></figure>

<h2 id="模板页"><a href="#模板页" class="headerlink" title="模板页"></a>模板页</h2><ul>
<li>子模板</li>
<li>模板继承</li>
</ul>
<h2 id="路由设计-1"><a href="#路由设计-1" class="headerlink" title="路由设计"></a>路由设计</h2><table>
<thead>
<tr>
<th>路由</th>
<th>方法</th>
<th>get参数</th>
<th>post参数</th>
<th>是否需要登录</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>get</td>
<td></td>
<td></td>
<td>否</td>
<td>渲染首页</td>
</tr>
<tr>
<td>/register(登录)</td>
<td>get</td>
<td></td>
<td></td>
<td>否</td>
<td>渲染注册页面</td>
</tr>
<tr>
<td>/register</td>
<td>post</td>
<td></td>
<td>email,nickname,password</td>
<td>否</td>
<td>处理注册请求</td>
</tr>
<tr>
<td>/login</td>
<td>get</td>
<td></td>
<td></td>
<td>是</td>
<td>渲染登陆界面</td>
</tr>
<tr>
<td>/login</td>
<td>post</td>
<td></td>
<td>email,password</td>
<td></td>
<td>处理登录请求</td>
</tr>
<tr>
<td>/loginout</td>
<td>get</td>
<td></td>
<td></td>
<td></td>
<td>处理退出请求</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h2><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>创建目录结构</li>
<li>整合静态页-模板页<ul>
<li>include</li>
<li>block</li>
<li>extend</li>
</ul>
</li>
<li>设计用户登陆，退出，注册的路由</li>
<li>用户注册<ul>
<li>先处理客户端页面的内容（表单控件的name，收集表单数据，发起请求）</li>
<li>服务端<ul>
<li>获取从客户端收到的数据</li>
<li>操作数据库<ul>
<li>如果有错，发送500告诉客户端服务器错了‘</li>
<li>其他的根据业务发送不同的响应数据</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>登录</li>
<li>退出</li>
</ul>
<h1 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h1><h2 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h2><blockquote>
<p>参考文档：<a href="http://expressjs.com/en/guide/using-middleware.html">http://expressjs.com/en/guide/using-middleware.html</a></p>
</blockquote>
<p>中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。</p>
<p>说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。</p>
<p>把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);<span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);<span class="keyword">var</span> cookie = <span class="built_in">require</span>(<span class="string">&#x27;./expressPtoject/cookie&#x27;</span>);<span class="keyword">var</span> query = <span class="built_in">require</span>(<span class="string">&#x27;./expressPtoject/query&#x27;</span>);<span class="keyword">var</span> postBody = <span class="built_in">require</span>(<span class="string">&#x27;./expressPtoject/post-body&#x27;</span>);<span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;	<span class="comment">// 解析请求地址中的get参数	// var obj = url.parse(req.url,true);	// req.query = obj.query;	query(req,res);	//中间件		// 解析请求地址中的post参数	req.body = &#123;		foo:&#x27;bar&#x27;	&#125;&#125;);if(req.url === &#x27;xxx&#x27;)&#123;	// 处理请求	...&#125;server.listen(3000,function()&#123;	console.log(&#x27;3000 runing...&#x27;);&#125;);</span></span><br></pre></td></tr></table></figure>

<p>同一个请求对象所经过的中间件都是同一个请求对象和响应对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);<span class="keyword">var</span> app = express();app.get(<span class="string">&#x27;/abc&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;	<span class="comment">// 同一个请求的req和res是一样的，	// 可以前面存储下面调用	console.log(&#x27;/abc&#x27;);	// req.foo = &#x27;bar&#x27;;	req.body = &#123;		name:&#x27;xiaoxiao&#x27;,		age:18	&#125;	next();&#125;);app.get(&#x27;/abc&#x27;,function(req,res,next)&#123;	// console.log(req.foo);	console.log(req.body);	console.log(&#x27;/abc&#x27;);&#125;);app.listen(3000, function() &#123;	console.log(&#x27;app is running at port 3000.&#x27;);&#125;);</span></span><br></pre></td></tr></table></figure>



<h2 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类:"></a>中间件的分类:</h2><h3 id="1-1-应用程序级别的中间件"><a href="#1-1-应用程序级别的中间件" class="headerlink" title="1.1 应用程序级别的中间件"></a>1.1 应用程序级别的中间件</h3><p>万能匹配（不关心任何请求路径和请求方法的中间件）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;    <span class="built_in">console</span>.log(<span class="string">&#x27;Time&#x27;</span>,<span class="built_in">Date</span>.now());    next();&#125;);</span><br></pre></td></tr></table></figure>

<p>关心请求路径和请求方法的中间件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/a&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;    <span class="built_in">console</span>.log(<span class="string">&#x27;Time&#x27;</span>,<span class="built_in">Date</span>.now());    next();&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="路由级别的中间件"><a href="#路由级别的中间件" class="headerlink" title="路由级别的中间件"></a>路由级别的中间件</h3><p>严格匹配请求路径和请求方法的中间件</p>
<p>get:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;	res.send(<span class="string">&#x27;get&#x27;</span>);&#125;);</span><br></pre></td></tr></table></figure>

<p>post：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/a&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;	res.send(<span class="string">&#x27;post&#x27;</span>);&#125;);</span><br></pre></td></tr></table></figure>

<p>put:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.put(<span class="string">&#x27;/user&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;	res.send(<span class="string">&#x27;put&#x27;</span>);&#125;);</span><br></pre></td></tr></table></figure>

<p>delete:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.delete(<span class="string">&#x27;/delete&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;	res.send(<span class="string">&#x27;delete&#x27;</span>);&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="总"><a href="#总" class="headerlink" title="总"></a>总</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);<span class="keyword">var</span> app = express();<span class="comment">// 中间件：处理请求，本质就是个函数// 在express中，对中间件有几种分类// 1 不关心任何请求路径和请求方法的中间件// 也就是说任何请求都会进入这个中间件// 中间件本身是一个方法，该方法接收三个参数// Request 请求对象// Response 响应对象// next 下一个中间件// // 全局匹配中间件// app.use(function(req, res, next) &#123;// 	console.log(&#x27;1&#x27;);// 	// 当一个请求进入中间件后// 	// 如果需要请求另外一个方法则需要使用next（）方法// 	next();// 	// next是一个方法，用来调用下一个中间件//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）// &#125;);// app.use(function(req, res, next) &#123;// 	console.log(&#x27;2&#x27;);// &#125;);// // 2 关心请求路径的中间件// // 以/xxx开头的中间件// app.use(&#x27;/a&#x27;,function(req, res, next) &#123;// 	console.log(req.url);// &#125;);// 3 严格匹配请求方法和请求路径的中间件app.get(&#x27;/&#x27;,function()&#123;	console.log(&#x27;/&#x27;);&#125;);app.post(&#x27;/a&#x27;,function()&#123;	console.log(&#x27;/a&#x27;);&#125;);app.listen(3000, function() &#123;	console.log(&#x27;app is running at port 3000.&#x27;);&#125;);</span></span><br></pre></td></tr></table></figure>

<h2 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err,req,res,next</span>)</span>&#123;    <span class="built_in">console</span>.error(err,stack);    res.status(<span class="number">500</span>).send(<span class="string">&#x27;Something broke&#x27;</span>);&#125;);</span><br></pre></td></tr></table></figure>

<p>配置使用404中间件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 放在最后，如果前面没有任何中间件能匹配处理，则进入这个404app.use(function(req,res)&#123;    res.render(&#x27;404.html&#x27;);&#125;);</span></span><br></pre></td></tr></table></figure>

<p>配置全局错误处理中间件:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/a&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;	fs.readFile(<span class="string">&#x27;.a/bc&#x27;</span>, <span class="function"><span class="title">funtion</span>(<span class="params"></span>)</span> &#123;		<span class="keyword">if</span> (err) &#123;        	<span class="comment">// 当调用next()传参后，则直接进入到全局错误处理中间件方法中（4个参数）        	// 当发生全局错误的时候，我们可以调用next传递错误对象        	// 然后被全局错误处理中间件匹配到并进行处理        	// 就不需要每处理一次业务都要判断err			next(err);		&#125;	&#125;)&#125;);//全局错误处理中间件app.use(function(err,req,res,next)&#123;    res.status(500).json(&#123;        err_code:500,        message:err.message    &#125;);&#125;);</span></span><br></pre></td></tr></table></figure>





<h2 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h2><ul>
<li>express.static(提供静态文件)<ul>
<li><a href="http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express">http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express</a></li>
</ul>
</li>
</ul>
<h2 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h2><blockquote>
<p>参考文档：<a href="http://expressjs.com/en/resources/middleware.html">http://expressjs.com/en/resources/middleware.html</a></p>
</blockquote>
<ul>
<li>body-parser</li>
<li>compression</li>
<li>cookie-parser</li>
<li>mogran</li>
<li>response-time</li>
<li>server-static</li>
<li>session</li>
</ul>
<h1 id="项目2-0"><a href="#项目2-0" class="headerlink" title="项目2.0"></a>项目2.0</h1><h2 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.├- app.js	项目入口├- controllers/├- models/	存储数据模型（mongoose）	﹂ comment.js	评论数据模型	﹂ topic.js		话题数据模型	﹂ user.js		用户数据模型├- node_modules/ 第三方包├- package.json	 包描述文件├- package-lock.json	第三方包版本锁定文件├- public/	公共静态资源	﹂ css/	样式资源        · login.css		  		· main.css 		· markdown-github.css 		· setting.css	﹂ img/	媒体资源    ﹂ js/	脚本资源├- routes/	路由文件    ﹂ session.js			﹂ topic.js┖- views/	存储视图目录    ﹂ _layouts/        · home.html	主页面    ﹂ _partials/		公共模板        · header.html	公共头部模板		· footer.html	公共页脚模板		· settings-nav.html	共设置导航条模板    ﹂ settings/        · admin.html		· profile.html    ﹂ topic/			操作页面        · edit.html	编辑		· new.html	添加        · show.html	展示    ﹂ index.html 内容主体	﹂ login.html 登陆页面	﹂ register.html	注册页面</span><br></pre></td></tr></table></figure>

<h2 id="模板页-1"><a href="#模板页-1" class="headerlink" title="模板页"></a>模板页</h2><ul>
<li>子模板</li>
<li>模板继承</li>
</ul>
<h2 id="路由设计-2"><a href="#路由设计-2" class="headerlink" title="路由设计"></a>路由设计</h2><table>
<thead>
<tr>
<th>路由</th>
<th>方法</th>
<th>get参数</th>
<th>post参数</th>
<th>是否需要登录</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>get</td>
<td></td>
<td></td>
<td>否</td>
<td>渲染首页</td>
</tr>
<tr>
<td>/register(登录)</td>
<td>get</td>
<td></td>
<td></td>
<td>否</td>
<td>渲染注册页面</td>
</tr>
<tr>
<td>/register</td>
<td>post</td>
<td></td>
<td>email,nickname,password</td>
<td>否</td>
<td>处理注册请求</td>
</tr>
<tr>
<td>/login</td>
<td>get</td>
<td></td>
<td></td>
<td>是</td>
<td>渲染登陆界面</td>
</tr>
<tr>
<td>/login</td>
<td>post</td>
<td></td>
<td>email,password</td>
<td></td>
<td>处理登录请求</td>
</tr>
<tr>
<td>/loginout</td>
<td>get</td>
<td></td>
<td></td>
<td></td>
<td>处理退出请求</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="模型设计-1"><a href="#模型设计-1" class="headerlink" title="模型设计"></a>模型设计</h2><h4 id="阶段一"><a href="#阶段一" class="headerlink" title="阶段一"></a>阶段一</h4><ul>
<li><p>页面设计</p>
<ul>
<li>一体页</li>
</ul>
</li>
<li></li>
</ul>
<h2 id="功能实现-1"><a href="#功能实现-1" class="headerlink" title="功能实现"></a>功能实现</h2><h1 id="NodeJS2-0"><a href="#NodeJS2-0" class="headerlink" title="NodeJS2.0"></a>NodeJS2.0</h1><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="命令行窗口"><a href="#命令行窗口" class="headerlink" title="命令行窗口"></a>命令行窗口</h3><ul>
<li><p>cmd、终端、shell、dos</p>
</li>
<li><p>常用指令</p>
<ul>
<li><p>dir</p>
<ul>
<li>列出当前文件夹下所有文件</li>
</ul>
</li>
<li><p>cd</p>
</li>
<li><p>md  目录名</p>
<ul>
<li>创建文件夹</li>
</ul>
</li>
<li><p>rd  目录名</p>
<ul>
<li>删除文件夹</li>
</ul>
</li>
<li><p>文件名</p>
<ul>
<li>打开文件</li>
</ul>
</li>
</ul>
</li>
<li><p>环境变量</p>
<ul>
<li><p>即windows系统的变量</p>
</li>
<li><p>path</p>
<ul>
<li><p>系统寻找文件的顺序（dos）</p>
<ul>
<li>当前目录下</li>
<li>→环境变量path</li>
</ul>
</li>
<li><p>类似作用域链</p>
</li>
</ul>
</li>
<li><p>修改环境变量后需要重启dos</p>
</li>
</ul>
</li>
</ul>
<h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><ul>
<li><p>进程</p>
<ul>
<li><p>负责为程序的运行提供必备的环境</p>
<ul>
<li>相当于工厂车间</li>
</ul>
</li>
</ul>
</li>
<li><p>线程</p>
<ul>
<li><p>计算机中最小的计算单位，负责执行进程中的程序</p>
<ul>
<li>相当于车间里的工人</li>
</ul>
</li>
<li><p>单线程</p>
</li>
<li><p>多线程</p>
<ul>
<li>并发问题</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="关于性能"><a href="#关于性能" class="headerlink" title="关于性能"></a>关于性能</h3><ul>
<li><p>客户端</p>
</li>
<li><p>服务器端</p>
<ul>
<li><p>多线程</p>
</li>
<li><p>nodejs</p>
<ul>
<li>单线程</li>
</ul>
</li>
</ul>
</li>
<li><p>数据库</p>
<ul>
<li>通过磁盘调用操作数据库</li>
</ul>
</li>
</ul>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>nodejs是能在服务器端运行js的开放源代码、跨平台的js运行环境</li>
</ul>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>采用Google开发的V8引擎运行js代码</li>
<li>单线程服务器</li>
<li>使用事件驱动</li>
<li>非阻塞</li>
<li>异步I/O模型</li>
</ul>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li><p>web服务API</p>
<ul>
<li>REST</li>
</ul>
</li>
<li><p>实时多人游戏</p>
</li>
</ul>
<h3 id="关于node版本"><a href="#关于node版本" class="headerlink" title="关于node版本"></a>关于node版本</h3><ul>
<li>奇数为开发版，偶数为稳定版</li>
</ul>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="使用node执行js文件"><a href="#使用node执行js文件" class="headerlink" title="使用node执行js文件"></a>使用node执行js文件</h3><ul>
<li><p>进入当前文件所在目录</p>
<ul>
<li><p>快捷方法</p>
<ul>
<li>在文件地址栏输入 cmd</li>
<li>node 文件名</li>
</ul>
</li>
</ul>
</li>
<li><p>在编译器终端</p>
<ul>
<li>node 文件名</li>
</ul>
</li>
<li><p>编译器直接run</p>
</li>
</ul>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul>
<li><p>特点</p>
<ul>
<li>大化小</li>
<li>避免耦合</li>
<li>增加复用</li>
</ul>
</li>
<li><p>ES标准缺陷</p>
<ul>
<li>没有模块系统（ES5）</li>
<li>标准库较少</li>
<li>没有标准接口</li>
<li>缺乏管理系统</li>
</ul>
</li>
</ul>
<h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><ul>
<li><p>简介</p>
<ul>
<li><p>弥补当前js没有标准的缺陷</p>
</li>
<li><p>对模块的定义</p>
<ul>
<li>模块引用</li>
<li>模块定义</li>
<li>模块标识</li>
</ul>
</li>
</ul>
</li>
<li><p>定义模块</p>
<ul>
<li>创建js文件</li>
<li>在node中一个js文件就是一个模块</li>
</ul>
</li>
<li><p>模块标识</p>
<ul>
<li><p>定义</p>
<ul>
<li>找到模块的方式</li>
<li>使用require引入外部模块时，使用的就是模块标识，通过模块标识来找到指定的标识</li>
</ul>
</li>
<li><p>模块分类</p>
<ul>
<li><p>核心模块</p>
<ul>
<li><p>由node引擎提供的模块</p>
</li>
<li><p>模块标识</p>
<ul>
<li>模块名</li>
</ul>
</li>
</ul>
</li>
<li><p>文件模块</p>
<ul>
<li><p>由用户自己创建的模块</p>
</li>
<li><p>模块标识</p>
<ul>
<li>文件路径</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>引用模块</p>
<ul>
<li><p>require（）</p>
<ul>
<li><p>参数</p>
<ul>
<li>文件路径</li>
</ul>
</li>
<li><p>注意</p>
<ul>
<li>相对路径必须以  ./或 ../开头</li>
</ul>
</li>
<li><p>返回值</p>
<ul>
<li>该函数会返回一个对象，该对象代表引入的模块</li>
</ul>
</li>
</ul>
</li>
<li><p>在node中，每一个文件中的js代码都是独立运行在一个函数中且传入了5个实参，而不是全局作用域</p>
<ul>
<li><p>所以一个模块中的变量和函数在其他模块中无法访问</p>
</li>
<li><p>console.log(arguments)//证明一个模块的确是运行在函数里</p>
</li>
<li><p>arguments.callee</p>
<ul>
<li>该属性保存的是当前正在执行的函数对象</li>
</ul>
</li>
</ul>
</li>
<li><p>node执行模块中的代码时</p>
<ul>
<li><p>最顶部添加</p>
<ul>
<li>function (exports, require, module, __filename, __dirname) {</li>
</ul>
</li>
<li><p>最底部添加</p>
<ul>
<li>}</li>
</ul>
</li>
</ul>
</li>
<li><p>五个参数</p>
<ul>
<li><p>exports</p>
<ul>
<li><p>该对象用来向外部暴露属性或方法</p>
</li>
<li><p>语法</p>
<ul>
<li>exports . x</li>
</ul>
</li>
</ul>
</li>
<li><p>require</p>
<ul>
<li>函数，用来引入外部的模块</li>
</ul>
</li>
<li><p>module</p>
<ul>
<li><p>代表的是当前模块本身</p>
</li>
<li><p>exports就是module的属性</p>
<ul>
<li>即module . exports = exports，本质相同</li>
</ul>
</li>
</ul>
</li>
<li><p>__filename</p>
<ul>
<li>当前文件完整路径</li>
</ul>
</li>
<li><p>__dirname</p>
<ul>
<li>当前模块所在文件夹的完整路径</li>
</ul>
</li>
</ul>
</li>
<li><p>关于</p>
<ul>
<li><p>module .exports</p>
<ul>
<li><p>批量导入</p>
<ul>
<li>module.exports = {<br>}</li>
</ul>
</li>
<li><p>可以通过 . 的形式，也可以直接赋值</p>
<ul>
<li>module.exports = { }</li>
<li>model.exports . xxx = xxx</li>
</ul>
</li>
</ul>
</li>
<li><p>exports</p>
<ul>
<li><p>通过exports只能使用 . 的方式向外暴露内部变量</p>
<ul>
<li>exports . xxx = xxx</li>
</ul>
</li>
<li><p>改变量，不是改对象</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>global</p>
<ul>
<li><p>定义</p>
<ul>
<li>node的全局对象，与window类似</li>
<li>在全局中创建的变量/函数都会作为global的属性/方法保存</li>
</ul>
</li>
<li><p>创建</p>
<ul>
<li>去掉var</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="包package"><a href="#包package" class="headerlink" title="包package"></a>包package</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul>
<li><p>规范的模块</p>
<ul>
<li>将一组相关的模块组合到一起</li>
</ul>
</li>
<li><p>本质：文件夹</p>
</li>
</ul>
<h3 id="CommonJS的包规范组成"><a href="#CommonJS的包规范组成" class="headerlink" title="CommonJS的包规范组成"></a>CommonJS的包规范组成</h3><ul>
<li><p>包结构</p>
<ul>
<li><p>用于组织包中的各种文件（压缩文件）</p>
</li>
<li><p>规范目录组成</p>
<ul>
<li><p>package.json</p>
<ul>
<li>描述文件（说明书）</li>
</ul>
</li>
<li><p>bin</p>
<ul>
<li>可执行二进制文件</li>
</ul>
</li>
<li><p>lib</p>
<ul>
<li>js代码</li>
</ul>
</li>
<li><p>doc</p>
<ul>
<li>文档</li>
</ul>
</li>
<li><p>test</p>
<ul>
<li>单元测试</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>包描述文件</p>
<ul>
<li><p>表达非代码的相关信息，放在包的根目录下</p>
</li>
<li><p>package.json</p>
<ul>
<li>name、version、description…</li>
<li>不能写注释</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="npm-1"><a href="#npm-1" class="headerlink" title="npm"></a>npm</h3><ul>
<li><p>简介</p>
<ul>
<li>Node Package Manager包管理工具</li>
<li>CommonJS包规范是理论，npm是其实践之一</li>
</ul>
</li>
<li><p>功能</p>
<ul>
<li>帮助node完成第三方模块的发布、安装和依赖等</li>
</ul>
</li>
<li><p>命令</p>
<ul>
<li><p>npm -v</p>
<ul>
<li>查npm版本</li>
</ul>
</li>
<li><p>npm -version</p>
<ul>
<li>所有模块版本</li>
</ul>
</li>
<li><p>npm search 包名</p>
<ul>
<li>搜索包</li>
</ul>
</li>
<li><p>npm init</p>
<ul>
<li>初始化，创建package.json文件</li>
</ul>
</li>
<li><p>npm remove / r 包名</p>
<ul>
<li>删除包</li>
</ul>
</li>
<li><p>npm install / i 包名</p>
<ul>
<li>安装包</li>
</ul>
</li>
<li><p>npm install 包名  –save </p>
<ul>
<li>安装包并添加到依赖</li>
<li>将包版本直接添加到package.json文件的dependencies中</li>
</ul>
</li>
<li><p>npm install</p>
<ul>
<li>下载当前项目所依赖的包</li>
<li>通过package.josn文件的dependencies寻找</li>
</ul>
</li>
<li><p>npm install 包名 -g</p>
<ul>
<li><p>全局安装包</p>
</li>
<li><p>一般是一些工具</p>
<ul>
<li>用于计算机中，而不是项目中</li>
</ul>
</li>
</ul>
</li>
<li><p>npm install 包名 -registry=地址</p>
<ul>
<li>从镜像原安装</li>
</ul>
</li>
<li><p>npm  config set registry 地址</p>
<ul>
<li>设置镜像源</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="配置cnpm"><a href="#配置cnpm" class="headerlink" title="配置cnpm"></a>配置cnpm</h3><ul>
<li><p>切换为国内镜像源</p>
<ul>
<li>淘宝npm镜像</li>
</ul>
</li>
<li><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
</li>
<li><p>其他命令与npm相似</p>
</li>
</ul>
<h3 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h3><ul>
<li><p>通过npm下载的包都放到node_module文件夹中</p>
<ul>
<li>直接通过包名引入即可</li>
</ul>
</li>
<li><p>node搜索包的流程</p>
<ul>
<li>通过包名引入时，首先在当前目录的node_module中寻找</li>
<li>如果没有则去上一级的node_module寻找</li>
<li>直到找到磁盘的根目录，如果依然没有，报错</li>
</ul>
</li>
</ul>
<h2 id="Buffer缓冲区"><a href="#Buffer缓冲区" class="headerlink" title="Buffer缓冲区"></a>Buffer缓冲区</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><ul>
<li><p>概念</p>
<ul>
<li><p>buffer结构与数组相似，操作也类似</p>
</li>
<li><p>专门用来存储二进制文件的数组，以16进制显示</p>
<ul>
<li><p>元素范围：00 ~ ff</p>
</li>
<li><p>实际范围：00000000~11111111</p>
<ul>
<li>0~255(十进制)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li>接收用户发送的数据，暂存</li>
</ul>
</li>
<li><p>本质</p>
<ul>
<li><p>直接操作内存空间</p>
<ul>
<li>开辟连续的内存空间</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><ul>
<li><p>创建</p>
<ul>
<li><p>Buffer.from</p>
<ul>
<li>保存字符串到buffer中</li>
<li>var buf = Buffer.from(str)</li>
</ul>
</li>
<li><p>new Buffer（1024）</p>
<ul>
<li>创建一个指定长度的buffer</li>
<li>尽量不用此构造函数</li>
</ul>
</li>
<li><p>Buffer.alloc（1024）</p>
<ul>
<li>创建指定字节的buffer</li>
</ul>
</li>
<li><p>Buffer.allocUnsafe（10）</p>
<ul>
<li><p>特性</p>
<ul>
<li>可能含有敏感数据</li>
<li>分配空间时，不会清空之前的数据</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>可能泄露数据</li>
</ul>
</li>
<li><p>优点</p>
<ul>
<li>性能好</li>
</ul>
</li>
</ul>
</li>
<li><p> …</p>
</li>
</ul>
</li>
<li><p>添加</p>
<ul>
<li>buf [0] = 254</li>
</ul>
</li>
<li><p>读取</p>
<ul>
<li><p>buf[0]</p>
</li>
<li><p>只要数字在控制台输出或页面中输出一定是10进制</p>
<ul>
<li><p>若需要转换成其他</p>
<ul>
<li>toString（16）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>遍历</p>
<ul>
<li>同数组</li>
</ul>
</li>
</ul>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li><p>length</p>
<ul>
<li><p>占用内存的大小（字节数）</p>
</li>
<li><p>区别字符串length</p>
<ul>
<li>表示字符串的长度</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="fs-文件系统"><a href="#fs-文件系统" class="headerlink" title="fs  文件系统"></a>fs  文件系统</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><ul>
<li>文件系统简单来说就是通过Node操作系统中的文件</li>
<li>该模块提供了一些标准文件访问API来打开、读取、写入文件，以及与其交互</li>
</ul>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li>fs模块所有操作都有同步与异步可选择</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>引入</p>
<ul>
<li>var fs = require(‘fs’)</li>
</ul>
</li>
</ul>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li><p>文件写入</p>
<ul>
<li><p>同步文件写入</p>
<ul>
<li><p>同步文件系统会阻塞程序的执行</p>
<ul>
<li>除非操作完毕，否则不会向下执行代码</li>
</ul>
</li>
<li><p>步骤</p>
<ul>
<li><p>打开文件</p>
<ul>
<li><p>fs.openSync()</p>
<ul>
<li><p>参数</p>
<ul>
<li><p>path：要打开文件的路径</p>
</li>
<li><p>flags：打开文件要做的操作的类型（w，r）</p>
<ul>
<li><p>w</p>
<ul>
<li>覆盖写</li>
</ul>
</li>
<li><p>a</p>
<ul>
<li>追加写</li>
</ul>
</li>
<li><p>r+</p>
<ul>
<li>读写文件，追加，文件不存在则报错</li>
</ul>
</li>
</ul>
</li>
<li><p>[mode]：设置文件的操作权限，windows一般不写</p>
</li>
</ul>
</li>
<li><p>返回值</p>
<ul>
<li>该方法会返回一个文件的描述符</li>
<li>可通过该描述符对文件进行操作</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>写入内容</p>
<ul>
<li><p>fs.writeSync()</p>
<ul>
<li><p>参数</p>
<ul>
<li><p>fd</p>
<ul>
<li>文件描述符</li>
</ul>
</li>
<li><p>string</p>
<ul>
<li>要写入的内容</li>
</ul>
</li>
<li><p>mode</p>
<ul>
<li>写入的起始位置</li>
</ul>
</li>
<li><p>encoding</p>
<ul>
<li>写入的编码</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>保存并关闭文件</p>
<ul>
<li><p>fs.closeSync(3)</p>
<ul>
<li><p>参数</p>
<ul>
<li><p>fd</p>
<ul>
<li>文件描述符</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>异步文件写入</p>
<ul>
<li><p>异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返回</p>
</li>
<li><p>步骤</p>
<ul>
<li><p>打开文件</p>
<ul>
<li><p>open</p>
<ul>
<li><p>参数</p>
<ul>
<li><p>path：路径</p>
</li>
<li><p>flags：操作类型</p>
</li>
<li><p>callback：回调函数</p>
<ul>
<li><p>参数</p>
<ul>
<li><p>err：错误对象</p>
<ul>
<li>没有错误则为null（错误优先思想）</li>
</ul>
</li>
<li><p>fd：文件描述符</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>返回值</p>
<ul>
<li>异步方法没有返回值</li>
<li>异步调用的方法，结果都是通过回调函数返回的</li>
</ul>
</li>
<li><p>open时，会将该任务交给后台线程池，继续异步执行open之后的代码，当open操作完成后，通过回调函数返回</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>写入文件</p>
<ul>
<li><p>write</p>
<ul>
<li><p>在回调函数里面操作</p>
</li>
<li><p>参数</p>
<ul>
<li><p>fd</p>
</li>
<li><p>string：内容</p>
</li>
<li><p>callback：回调</p>
<ul>
<li><p>参数</p>
<ul>
<li>err</li>
<li>written：被写入的字符串的字节数</li>
<li>string：写入的内容</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>关闭文件</p>
<ul>
<li><p>close</p>
<ul>
<li><p>参数</p>
<ul>
<li><p>fd</p>
</li>
<li><p>callback</p>
<ul>
<li><p>参数</p>
<ul>
<li>err</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>简单文件写入</p>
<ul>
<li><p>步骤</p>
<ul>
<li><p>异步</p>
<ul>
<li><p>fs.writeFile()</p>
<ul>
<li><p>参数</p>
<ul>
<li><p>file：操作文件路径</p>
</li>
<li><p>data：指定要写入的数据</p>
</li>
<li><p>【options】</p>
<ul>
<li><p>选项，配置信息，对写入进行一些设置</p>
</li>
<li><p>一般需要一个对象作为参数</p>
<ul>
<li>encoding：编码</li>
<li>mode：0o666</li>
<li>flag：‘w’</li>
</ul>
</li>
</ul>
</li>
<li><p>callback</p>
<ul>
<li><p>写入完成以后执行的操作</p>
</li>
<li><p>参数</p>
<ul>
<li><p>err</p>
<ul>
<li>错误对象</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>同步</p>
<ul>
<li><p>fs.writeFileSync()</p>
<ul>
<li><p>参数</p>
<ul>
<li><p>file：操作文件路径</p>
</li>
<li><p>data：指定要写入的数据</p>
</li>
<li><p>【options】</p>
<ul>
<li>选项，配置信息，对写入进行一些设置</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>流式文件写入</p>
<ul>
<li><p>概念</p>
<ul>
<li><p>特点</p>
<ul>
<li>非一次性写入文件</li>
<li>避免占用内存</li>
<li>适用大型文件</li>
</ul>
</li>
<li><p>对比其他文件写入</p>
<ul>
<li>容易内存溢出</li>
<li>性能差</li>
</ul>
</li>
</ul>
</li>
<li><p>步骤</p>
<ul>
<li><p>创建一个可写流（接通水管）</p>
<ul>
<li><p>fs.createWriteStream()</p>
<ul>
<li><p>参数</p>
<ul>
<li>path</li>
<li>【option】</li>
</ul>
</li>
<li><p>返回值</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>写入内容</p>
<ul>
<li><p>write（）</p>
<ul>
<li><p>参数</p>
<ul>
<li>字符串</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>关闭流</p>
<ul>
<li><p>通过监听流的open和close事件来监听流的打开和关闭</p>
</li>
<li><p>补充</p>
<ul>
<li><p>once（事件字符串，回调函数）</p>
<ul>
<li>为对象绑定一个一次性的事件，触发后自动失效</li>
</ul>
</li>
<li><p>on（事件字符串，回调函数）</p>
<ul>
<li>绑定一个事件</li>
</ul>
</li>
</ul>
</li>
<li><p>end（）</p>
<ul>
<li>输送完后断“流”</li>
</ul>
</li>
<li><p>close（）</p>
<ul>
<li>可能没送完就断“流”（旧版本）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>文件读取</p>
<ul>
<li><p>同步文件读取</p>
</li>
<li><p>异步文件读取</p>
</li>
<li><p>简单文件读取</p>
<ul>
<li><p>同步</p>
<ul>
<li><p>fs.readFile()</p>
<ul>
<li><p>参数</p>
<ul>
<li>path，【options，】callback（err，data）</li>
</ul>
</li>
<li><p>返回值</p>
<ul>
<li><p>返回一个buffer</p>
<ul>
<li>提高通用性</li>
<li>比如读取一张图片</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>异步</p>
<ul>
<li><p>fs.readFileSync()</p>
<ul>
<li><p>参数</p>
<ul>
<li>path，【options，】callback</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>流式文件读取</p>
<ul>
<li><p>特点</p>
<ul>
<li>适用于大文件</li>
<li>分多次读取文件</li>
</ul>
</li>
<li><p>步骤</p>
<ul>
<li><p>创建一个可读流</p>
<ul>
<li>var rs = fs.createReadStream(“hello2.txt”)</li>
</ul>
</li>
<li><p>监听流的开启和关闭</p>
</li>
<li><p>读取</p>
<ul>
<li>如果要读取一个可读流中的数据，必须为可读流绑定一个data事件，data事件绑定完毕，会自动开始读取数据</li>
</ul>
</li>
</ul>
</li>
<li><p>pipe（）</p>
<ul>
<li><p>将可读流中的内容直接输出到可写流中</p>
</li>
<li><p>简写（复制文件）</p>
<ul>
<li>var fs = require(‘fs’)<br>//创建一个可读流<br>var rs = fs.createReadStream(“hello2.txt”)<br>//创建一个可写流<br>var ws = fs.createWriteStream(‘a.txt’)<br>rs.pipe(ws)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ul>
<li><p>existsSync()</p>
<ul>
<li>验证文件路径是否存在</li>
<li>只有同步（立即获取结果）</li>
</ul>
</li>
<li><p>stat( path,  callback（err，stat）)</p>
<ul>
<li><p>获取文件状态</p>
</li>
<li><p>返回一个对象，保存当前对象状态的信息</p>
</li>
<li><p>属性</p>
<ul>
<li>size</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li><p>unlink（path，callback）/unlinkSync（path）</p>
<ul>
<li>删除文件</li>
</ul>
</li>
<li><p>readdir（path[,  option], callback(err,  files)）</p>
<ul>
<li><p>读取一个目录的 目录结构</p>
</li>
<li><p>回调参数</p>
<ul>
<li><p>files</p>
<ul>
<li>是一个字符串数组，每一个元素就是一个文件夹或文件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>truncate(path , len, callback)</p>
<ul>
<li>截断文件</li>
<li>len：截断后的文件大小</li>
</ul>
</li>
<li><p>mkdir（path[，mode]，callback）</p>
<ul>
<li>创建目录</li>
</ul>
</li>
<li><p>rmdir（path）</p>
<ul>
<li>删除文件夹</li>
</ul>
</li>
<li><p>rename（oldpath，newpath，callback）</p>
<ul>
<li>重命名文件</li>
<li>改变路径</li>
</ul>
</li>
<li><p>watchFile（filename[,optin], listener）</p>
<ul>
<li><p>监视文件的修改，耗性能</p>
</li>
<li><p>参数</p>
<ul>
<li><p>文件名</p>
</li>
<li><p>配置选项</p>
<ul>
<li><p>interval：1000</p>
<ul>
<li>监听频率（1s刷新一次）</li>
</ul>
</li>
</ul>
</li>
<li><p>回调函数</p>
<ul>
<li><p>当文件发送变化时执行</p>
</li>
<li><p>参数</p>
<ul>
<li><p>curr</p>
<ul>
<li>当前文件状态stat</li>
</ul>
</li>
<li><p>prev</p>
<ul>
<li>修改前文件状态stat</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><em>XMind: ZEN - Trial Version</em></p>
]]></content>
      <categories>
        <category>code</category>
        <category>backend</category>
        <category>NodeJs</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>React</title>
    <url>/react/</url>
    <content><![CDATA[<blockquote>
<p>react学习笔记</p>
</blockquote>
<span id="more"></span>

<h1 id="1-React简介"><a href="#1-React简介" class="headerlink" title="1. React简介"></a>1. React简介</h1><blockquote>
<p>React官网：<a href="https://react.docschina.org/docs/add-react-to-a-website.html">https://react.docschina.org/docs/add-react-to-a-website.html</a></p>
</blockquote>
<p><strong>react是什么？</strong></p>
<p>React用于构建用户<strong>界面</strong>的JS库。<strong>是一个将数据渲染为HTML视图的开源JS库。</strong></p>
<p><strong>谁开发的？</strong></p>
<p>Facebook开发开源</p>
<p><strong>为什么学？</strong></p>
<p>1.原生JS操作DOM繁琐，效率低（DOM Api操作ui）</p>
<p>2.使用JS直接操作DOM,浏览器会进行大量的<strong>重绘重排</strong></p>
<p>3.原生JS没有<strong>组件化</strong>编码方案，代码复用低</p>
<p><strong>库与框架的区别？</strong></p>
<blockquote>
<p>在学习之前最好看一下关于npm的知识：<a href="https://blog.csdn.net/qq_25502269/article/details/79346545">npm</a></p>
</blockquote>
<h1 id="2-React入门"><a href="#2-React入门" class="headerlink" title="2. React入门"></a>2. React入门</h1><h2 id="React-基础案例"><a href="#React-基础案例" class="headerlink" title="React 基础案例"></a>React 基础案例</h2><p>1.先导入三个包：</p>
<p>【先引入react.development.js，后引入react-dom.development.js】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">react.development.js</span><br><span class="line">react-dom.development.js</span><br><span class="line">babel.min.js </span><br></pre></td></tr></table></figure>

<p>2.创建一个容器</p>
<p>3.创建虚拟DOM，渲染到容器中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入依赖 ,引入的时候，必须就按照这个步骤--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这里使用了babel用来解析jsx语法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1.创建虚拟DOM</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> VDOM = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>  <span class="comment">//这个地方使用的是JSX语法，不需要加&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.渲染，如果有多个渲染同一个容器，后面的会将前面的覆盖掉</span></span></span><br><span class="line"><span class="javascript">        ReactDOM.render(VDOM,<span class="built_in">document</span>.getElementById(<span class="string">&quot;test&quot;</span>));        </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样，就会在页面中的这个div容器上添加这个h1.</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611196030416.png" alt="渲染结果"></p>
<h2 id="JSX基础语法"><a href="#JSX基础语法" class="headerlink" title="JSX基础语法"></a>JSX基础语法</h2><p>1.定义虚拟DOM，不能使用“”</p>
<p>2.标签中混入JS<strong>表达式</strong>的时候使用**{}**</p>
<p>3.样式的类名指定不要使用class，使用className</p>
<p>4.内敛样式要使用双大括号包裹</p>
<p>5.不能有多个根标签，只能有一个跟标签</p>
<p>6.标签必须闭合</p>
<p>7.如果小写字母开头，就将标签转化为html同名元素，如果html中无该标签对应的元素，就报错；如果是大写字母开头，react就去渲染对应的组件，如果没有就报错</p>
<blockquote>
<p>关于JS表达式和JS语句：</p>
<p><strong>JS表达式</strong>：返回一个值，可以放在任何一个需要值的地方  a  a+b  demo(a)  arr.map() function text(){}<br><strong>JS语句</strong>：if(){} for(){} while(){} swith(){} 不会返回一个值</p>
</blockquote>
<blockquote>
<p>一定注意区分：【js语句(代码)】与【js表达式】</p>
<p>​     *1.<strong>表达式</strong>：一个表达式会产生一个值，可以放在任何一个需要值的地方*</p>
<p>​        <em>下面这些都是表达式：</em></p>
<p>​          <em>(1). a</em></p>
<p>​          <em>(2). a+b</em></p>
<p>​          <em>(3). demo(1)</em></p>
<p>​          <em>(4). arr.map()</em> </p>
<p>​          <em>(5). function test () {}</em></p>
<p>​     *2.**语句(代码)*<em>：</em></p>
<p>​        <em>下面这些都是语句(代码)：</em></p>
<p>​          <em>(1).if(){}</em></p>
<p>​          <em>(2).for(){}</em></p>
<p>​          <em>(3).switch(){case:xxxx}</em></p>
</blockquote>
<p>实例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sss</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入依赖 ,引入的时候，必须就按照这个步骤--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里使用了js来创建虚拟DOM--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> MyId = <span class="string">&quot;title&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> MyData = <span class="string">&quot;Cyk&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1.创建虚拟DOM</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> VDOM = (</span></span><br><span class="line"><span class="javascript">            <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span> = <span class="string">&#123;MyId.toLocaleUpperCase()&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span> = <span class="string">&quot;sss&quot;</span> <span class="attr">style</span> = <span class="string">&#123;&#123;fontSize:</span>&#x27;<span class="attr">50px</span>&#x27;&#125;&#125;&gt;</span>sss<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="javascript">            <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        )</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.渲染，如果有多个渲染同一个容器，后面的会将前面的覆盖掉</span></span></span><br><span class="line"><span class="javascript">        ReactDOM.render(VDOM,<span class="built_in">document</span>.getElementById(<span class="string">&quot;test&quot;</span>));</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="两种创建虚拟DOM的方式"><a href="#两种创建虚拟DOM的方式" class="headerlink" title="两种创建虚拟DOM的方式"></a>两种创建虚拟DOM的方式</h2><p><strong>1.使用JSX创建虚拟DOM</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> VDOM = (</span><br><span class="line">           <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span> = <span class="string">&#123;MyId.toLocaleUpperCase()&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span> = <span class="string">&quot;sss&quot;</span> <span class="attr">style</span> = <span class="string">&#123;&#123;fontSize:</span>&#x27;<span class="attr">50px</span>&#x27;&#125;&#125;&gt;</span>sss<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">       )</span><br></pre></td></tr></table></figure>

<p>这个在上面的案例中已经演示过了 ，下面看看另外一种创建虚拟DOM的方式</p>
<p><strong>2.使用JS创建虚拟DOM</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建虚拟DOM[在这使用了js的语法]React.createElement(标签,标签属性,内容)</span></span><br><span class="line"><span class="keyword">const</span> VDOM = React.createElement(<span class="string">&#x27;h1&#x27;</span>,&#123;<span class="attr">id</span>:<span class="string">&quot;title&quot;</span>&#125;,<span class="string">&quot;nihao&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>使用JS和JSX都可以创建虚拟DOM，但是可以看出JS创建虚拟DOM比较繁琐，尤其是标签如果很多的情况下，所以还是比较推荐使用JSX来创建。</p>
<p><strong>3.关于虚拟DOM：</strong></p>
<p>​     <em>1.本质是Object类型的对象（一般对象）</em></p>
<p>​     <em>2.虚拟DOM比较“轻”，真实DOM比较“重”，因为虚拟DOM是React内部在用，无需真实DOM上那么多的属性。</em></p>
<p>​     <em>3.虚拟DOM最终会被React转化为真实DOM，呈现在页面上。</em></p>
<h1 id="3-React组件"><a href="#3-React组件" class="headerlink" title="3. React组件"></a>3. React组件</h1><p>当应用是以多组件的方式实现，这个应用就是一个组件化的应用</p>
<blockquote>
<p><strong>注意：</strong> 组件名称必须以大写字母开头。</p>
<p>React 会将以小写字母开头的组件视为原生 DOM 标签。例如，&lt; div /&gt;<code>代表 HTML 的 div 标签，而</code>&lt; Weclome /&gt; 则代表一个组件，并且需在作用域内使用 <code>Welcome</code></p>
<p>传递的参数，不能在组件中改动</p>
</blockquote>
<h2 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1.先创建函数，函数可以有参数，也可以没有，但是必须要有返回值 返回一个虚拟DOM</span><br><span class="line">function Welcome(props) &#123;</span><br><span class="line">  return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line">//2.进行渲染</span><br><span class="line">ReactDOM.Render(&lt;Welcom name = &quot;ss&quot; /&gt;,document.getElementById(&quot;div&quot;));</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611211670211.png" alt="结果"></p>
<p>让我们来回顾一下这个例子中发生了什么：</p>
<ol>
<li>我们调用 <code>ReactDOM.render()</code> 函数，并传入 <code>&lt;Welcome name=&quot;Sara&quot; /&gt;</code> 作为参数。</li>
<li>React 调用 <code>Welcome</code> 组件，并将 <code>&#123;name: &#39;Sara&#39;&#125;</code> 作为 props 传入。</li>
<li><code>Welcome</code> 组件将 <code>Hello, Sara</code> 元素作为返回值。</li>
<li>React DOM 将 DOM 高效地更新为 <code>Hello, Sara</code>。</li>
</ol>
<blockquote>
<p>注意</p>
<p>组件函数中的this是undefined，因为babel编译后开启了<strong>严格模式</strong>: 禁止函数里的this指向window</p>
</blockquote>
<h2 id="Class组件"><a href="#Class组件" class="headerlink" title="Class组件"></a>Class组件</h2><p>补充 Class基础</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><br><span class="line">		<span class="comment">//创建一个Person类</span></span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">			<span class="comment">//构造器方法</span></span><br><span class="line">			<span class="function"><span class="title">constructor</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">				<span class="comment">//构造器中的this是谁？—— 类的实例对象</span></span><br><span class="line">				<span class="built_in">this</span>.name = name</span><br><span class="line">				<span class="built_in">this</span>.age = age</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//一般方法</span></span><br><span class="line">			<span class="function"><span class="title">speak</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="comment">// 重点一：speak方法放在了哪里？——类的原型对象上，供实例使用</span></span><br><span class="line">				<span class="comment">// 重点二：speak中的this是谁？通过Person实例调用speak时，speak中的this就是Person实例</span></span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">`我叫<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>，我年龄是<span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span>`</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">const</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;p1&#x27;</span>, <span class="number">19</span>);</span><br><span class="line">		<span class="keyword">const</span> p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;p2&#x27;</span>, <span class="number">29</span>);</span><br><span class="line">		p1.speak()	<span class="comment">// this指向改变</span></span><br><span class="line">		p2.speak.call(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;)	<span class="comment">// this指向改变</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//创建一个Student类，继承于Person类</span></span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">			<span class="function"><span class="title">constructor</span>(<span class="params">name,age,grade</span>)</span>&#123;</span><br><span class="line">				<span class="built_in">super</span>(name,age)	<span class="comment">// 必须调用super, 且在最开始调用</span></span><br><span class="line">				<span class="built_in">this</span>.grade = grade</span><br><span class="line">				<span class="built_in">this</span>.school = <span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//重写从父类继承过来的方法</span></span><br><span class="line">			<span class="function"><span class="title">speak</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">`我叫<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>，我年龄是<span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span>,我读的是<span class="subst">$&#123;<span class="built_in">this</span>.grade&#125;</span>年级`</span>);</span><br><span class="line">				<span class="built_in">this</span>.study()</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="function"><span class="title">study</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="comment">// study方法放在了哪里？——类的原型对象上，供实例使用</span></span><br><span class="line">				<span class="comment">// 通过Student实例调用study时，study中的this就是Student实例</span></span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">&#x27;我很努力的学习&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">const</span> s1 = <span class="keyword">new</span> Student(<span class="string">&#x27;校长&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;高一&#x27;</span>);</span><br><span class="line">		s1.speak()</span><br><span class="line"></span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">			<span class="function"><span class="title">constructor</span>(<span class="params">name,price</span>)</span>&#123;</span><br><span class="line">				<span class="built_in">this</span>.name = name</span><br><span class="line">				<span class="built_in">this</span>.price = price</span><br><span class="line">				<span class="comment">// this.wheel = 4</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//类中可以直接写赋值语句,如下代码的含义是：给Car的实例对象添加一个属性，名为a，值为1</span></span><br><span class="line">			a = <span class="number">1</span></span><br><span class="line">			wheel = <span class="number">4</span></span><br><span class="line">			<span class="keyword">static</span> demo = <span class="number">100</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">const</span> c1 = <span class="keyword">new</span> Car(<span class="string">&#x27;奔驰c63&#x27;</span>,<span class="number">199</span>)</span><br><span class="line">		<span class="built_in">console</span>.log(c1);</span><br><span class="line">		<span class="built_in">console</span>.log(Car.demo);</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：<br>1.类中的构造器不是必须要写的，要对实例进行一些初始化的操作，如添加指定属性时才写。<br>2.如果A类继承了B类，且A类中写了构造器，那么A类构造器中的super是必须要调用的。<br>3.类中所定义的方法，都放在了类的原型对象上，供实例去使用。</p>
</blockquote>
<p><strong>实例</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1.必须继承React.Component</span><br><span class="line">// 2.然后重写Render()方法，该方法一定要有返回值，返回一个虚拟DOM</span><br><span class="line">class Welcome extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    //render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span><br><span class="line">	//render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。		</span><br><span class="line">    return &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//渲染 【这个跟之前也是一样的】</span><br><span class="line">ReactDOM.Render(&lt;Welcom name = &quot;ss&quot; /&gt;,document.getElementById(&quot;div&quot;));</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<p>1.render是放在哪里的？—— MyComponent的原型对象上，供实例使用。<br>2.render中的this是谁？—— <strong>MyComponent的实例对象</strong> &lt;=&gt; MyComponent组件实例对象。</p>
<p><strong>执行过程</strong>：</p>
<p>​    1.React解析组件标签，找到相应的组件</p>
<p>​    2.发现组件是类定义的，<strong>随后new出来的类的实例，并通过该实例调用到原型上的render方法</strong></p>
<p>​    3.将render返回的虚拟DOM转化为真实的DOM,随后呈现在页面中</p>
<h2 id="组件案例"><a href="#组件案例" class="headerlink" title="组件案例"></a>组件案例</h2><p>下面，我们通过一个案例更好的理解组件：【只关注与核心代码】</p>
<p>我们发现组件是可以包含中使用的， 而且如果创建的数组，必须要代一个key。数组元素中使用的 key 在其兄弟节点之间应该是独一无二的。然而，它们不需要是全局唯一的。当我们生成两个不同的数组时，我们可以使用相同的 key 值 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/babel&quot;&gt;        //创建一个组件&lt;li&gt;        function GetLi(props)&#123;                  return &lt;li&gt;&#123;props.value&#125;&lt;/li&gt;        &#125;;        // 1.创建类式组件&lt;ul&gt;        class MyComponent extends React.Component&#123;            render()&#123;                console.log(this.props.arr);                let com = this.props.arr.map((item,index)=&gt;                     //在这个地方包含了GetLi这个组件，【注意不能用&#123;&#125;】                     //因为这个是一个列表，所以必须传递一个key【独一无二的Key】                     //key 帮助 React 识别哪些元素改变了，比如被添加或删除。                        &lt;GetLi value=&#123;item&#125; key = &#123;index&#125; /&gt;                    );                console.log(com);                return &lt;ul&gt;&#123;com&#125;&lt;/ul&gt;            &#125;        &#125;                let num = [1,2,3,4]        //2.渲染组件        ReactDOM.render(&lt;MyComponent  arr=&#123;num&#125;/&gt;,document.getElementById(&quot;test&quot;);&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="类组件的实例的三大属性"><a href="#类组件的实例的三大属性" class="headerlink" title="类组件的实例的三大属性"></a>类组件的实例的三大属性</h2><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><blockquote>
<p>复习——this指向问题</p>
<p><a href="https://www.bilibili.com/video/BV1wy4y1D7JT?p=12&spm_id_from=pageDriver">尚硅谷教程p12-p16</a></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">人</th>
<th align="center">状态</th>
<th align="center">影响</th>
<th align="center">行为</th>
</tr>
</thead>
<tbody><tr>
<td align="center">组件</td>
<td align="center">状态</td>
<td align="center">驱动</td>
<td align="center">页面</td>
</tr>
</tbody></table>
<p>我们都说React是一个状态机，体现是什么地方呢，就是体现在state上，通过与用户的交互，实现不同的状态，然后去渲染UI,这样就让用户的数据和界面保持一致了。<strong>state是组件的私有属性</strong>。</p>
<p>在React中，更新组件的state，结果就会重新渲染用户界面(不需要操作DOM),一句话就是说，<strong>用户的界面会随着状态的改变而改变</strong>。</p>
<p>state是组件对象最重要的属性，值是对象（可以包含多个key-value的组合）</p>
<p><strong>案例</strong>：</p>
<p>1.需求：页面显示【今天天气很炎热】，鼠标点击文字的时候，页面更改为【今天天气很凉爽】</p>
<p>核心代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--这里使用了js来创建虚拟DOM--&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">        //1.创建组件</span><br><span class="line">        class St extends React.Component&#123;</span><br><span class="line">            constructor(props)&#123;</span><br><span class="line">                super(props);</span><br><span class="line">                //先给state赋值</span><br><span class="line">                this.state = &#123;isHot:true,win:&quot;ss&quot;&#125;;</span><br><span class="line">                //找到原型的dem，根据dem函数创建了一个dem1的函数，并且将实例对象的this赋值过去</span><br><span class="line">                this.dem1 = this.dem.bind(this);</span><br><span class="line">            &#125;</span><br><span class="line">            //render会调用1+n次【1就是初始化的时候调用的，n就是每一次修改state的时候调用的】</span><br><span class="line">            render()&#123; //这个This也是实例对象</span><br><span class="line">                //如果加dem()，就是将函数的回调值放入这个地方</span><br><span class="line">                //this.dem这里面加入this，并不是调用，只不过是找到了dem这个函数，在调用的时候相当于直接调用，并不是实例对象的调用</span><br><span class="line">                return &lt;h1 onClick = &#123;this.dem1&#125;&gt;今天天气很&#123;this.state.isHot?&quot;炎热&quot;:&quot;凉爽&quot;&#125;&lt;/h1&gt;    </span><br><span class="line">            &#125;</span><br><span class="line">            //通过state的实例调用dem的时候，this就是实例对象</span><br><span class="line">            dem()&#123;</span><br><span class="line">                const state =  this.state.isHot;</span><br><span class="line">                 //状态中的属性不能直接进行更改，需要借助API</span><br><span class="line">                // this.state.isHot = !isHot; 错误</span><br><span class="line">                //必须使用setState对其进行修改，并且这是一个合并</span><br><span class="line">                this.setState(&#123;isHot:!state&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 2.渲染，如果有多个渲染同一个容器，后面的会将前面的覆盖掉</span><br><span class="line">        ReactDOM.render(&lt;St /&gt;,document.getElementById(&quot;test&quot;));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<p>1.组件的构造函数，必须要传递一个props参数</p>
<p>2.特别关注this【重点】，类中所有的方法局部都开启了严格模式，如果直接进行调用，this就是undefined</p>
<p>3.想要改变state,需要使用<strong>setState</strong>进行修改，如果只是修改state的部分属性，则不会影响其他的属性，这个只是<strong>合并</strong>并不是覆盖。</p>
<h4 id="this-setState"><a href="#this-setState" class="headerlink" title="this.setState()"></a><strong>this.setState()</strong></h4><p>该方法接收两种参数：对象或函数。</p>
<ol>
<li>对象：即想要修改的state</li>
<li>函数：接收两个函数，第一个函数接受两个参数，第一个是当前state，第二个是当前props，该函数返回一个对象，和直接传递对象参数是一样的，就是要修改的state；第二个函数参数是state改变后触发的回调</li>
</ol>
<p>在此还需要注意的是，setState有异步更新和同步更新两种形式，那么什么时候会同步更新，什么时候会异步更新呢？</p>
<ul>
<li><p><strong>React控制之外的事件中调用setState是同步更新的。比如原生js绑定的事件，    setTimeout/setInterval等</strong>。</p>
</li>
<li><p><strong>大部分开发中用到的都是React封装的事件，比如onChange、onClick、    onTouchMove等，这些事件处理程序中的setState都是异步处理的。</strong></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1.创建组件</span><br><span class="line">class St extends React.Component&#123;</span><br><span class="line">    //可以直接对其进行赋值</span><br><span class="line">    state = &#123;isHot:10&#125;;</span><br><span class="line">    render()&#123; //这个This也是实例对象</span><br><span class="line">        return &lt;h1 onClick = &#123;this.dem&#125;&gt;点击事件&lt;/h1&gt; </span><br><span class="line">    &#125;</span><br><span class="line">//箭头函数 [自定义方法---&gt;要用赋值语句的形式+箭头函数]</span><br><span class="line">    dem = () =&gt;&#123;</span><br><span class="line">        //修改isHot</span><br><span class="line">        this.setState(&#123; isHot: this.state.isHot + 1&#125;)</span><br><span class="line">        console.log(this.state.isHot);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的案例中预期setState使得isHot变成了11，输出也应该是11。然而在控制台打印的却是10，也就是并没有对其进行更新。这是因为异步的进行了处理，在输出的时候还没有对其进行处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">componentDidMount()&#123;    document.getElementById(&quot;test&quot;).addEventListener(&quot;click&quot;,()=&gt;&#123;        this.setState(&#123;isHot: this.state.isHot + 1&#125;);        console.log(this.state.isHot);    &#125;)&#125;</span><br></pre></td></tr></table></figure>

<p>但是通过这个原生JS的，可以发现，控制台打印的就是11，也就是已经对其进行了处理。也就是进行了同步的更新。</p>
<h4 id="React怎么调用同步或者异步的呢？"><a href="#React怎么调用同步或者异步的呢？" class="headerlink" title="React怎么调用同步或者异步的呢？"></a><strong>React怎么调用同步或者异步的呢？</strong></h4><ul>
<li><p>在 React 的 setState 函数实现中，会根据一个变量 isBatchingUpdates 判断是直接更新 this.state 还是放到队列中延时更新，而 isBatchingUpdates 默认是 false，表示 setState 会同步更新 this.state；但是，有一个函数 batchedUpdates，该函数会把 isBatchingUpdates 修改为 true，而当 React 在调用事件处理函数之前就会先调用这个 batchedUpdates将isBatchingUpdates修改为true，这样由 React 控制的事件处理过程 setState 不会同步更新 this.state。</p>
</li>
<li><p><strong>如果是同步更新，每一个setState对调用一个render，并且如果多次调用setState会以最后调用的为准，前面的将会作废；如果是异步更新，多个setSate会统一调用一次render</strong></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dem = () =&gt;&#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        isHot:  1,</span><br><span class="line">        cont:444</span><br><span class="line">    &#125;)</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">    	isHot: this.state.isHot + 1</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        isHot:  888,</span><br><span class="line">        cont:888</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的最后会输出：isHot是888，cont是888</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dem = () =&gt;&#123;</span><br><span class="line">               </span><br><span class="line">               this.setState(&#123;</span><br><span class="line">                   isHot: this.state.isHot + 1,</span><br><span class="line">                   </span><br><span class="line">               &#125;)</span><br><span class="line">               this.setState(&#123;</span><br><span class="line">                   isHot: this.state.isHot + 1,</span><br><span class="line">                   </span><br><span class="line">               &#125;)</span><br><span class="line">               this.setState(&#123;</span><br><span class="line">                   isHot: this.state.isHot + 888</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<p>初始isHot为10，最后isHot输出为898，也就是前面两个都没有执行。</p>
<p>**注意！！这是异步更新才有的，如果同步更新，每一次都会调用render，这样每一次更新都会 **</p>
<p><strong>简化版本：</strong></p>
<p>1.state的赋值可以不再构造函数中进行</p>
<p>2.使用了箭头函数，将this进行了改变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/babel&quot;&gt;        class St extends React.Component&#123;            //可以直接对其进行赋值            state = &#123;isHot:true&#125;;            render()&#123; //这个This也是实例对象                return &lt;h1 onClick = &#123;this.dem&#125;&gt;今天天气很&#123;this.state.isHot?&quot;炎热&quot;:&quot;凉爽&quot;&#125;&lt;/h1&gt;                    //或者使用&#123;()=&gt;this.dem()也是可以的&#125;            &#125;            //箭头函数 [自定义方法---&gt;要用赋值语句的形式+箭头函数]            dem = () =&gt;&#123;                console.log(this);                const state =  this.state.isHot;                this.setState(&#123;isHot:!state&#125;);            &#125;        &#125;        ReactDOM.render(&lt;St /&gt;,document.getElementById(&quot;test&quot;));       &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如果想要在调用方法的时候传递参数，有两个方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;(e) =&gt; this.deleteRow(id, e)&#125;&gt;Delete Row&lt;/button&gt;&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>上述两种方式是等价的，分别通过<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a>和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind"><code>Function.prototype.bind</code></a> 来实现。</p>
<p>在这两种情况下，React 的事件对象 <code>e</code> 会被作为第二个参数传递。如果通过箭头函数的方式，事件对象必须显式的进行传递，而通过 <code>bind</code> 的方式，事件对象以及更多的参数将会被隐式的进行传递。</p>
<h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p>作用：Props主要用来传递数据，比如组件之间进行传值</p>
<h5 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;    &lt;div id = &quot;div&quot;&gt;    &lt;/div&gt;&lt;/body&gt;&lt;script type=&quot;text/babel&quot;&gt;    class Person extends React.Component&#123;        render()&#123;            return (                &lt;ul&gt;                    //接受数据并显示                    &lt;li&gt;&#123;this.props.name&#125;&lt;/li&gt;                    &lt;li&gt;&#123;this.props.age&#125;&lt;/li&gt;                    &lt;li&gt;&#123;this.props.sex&#125;&lt;/li&gt;                &lt;/ul&gt;            )        &#125;    &#125;    //传递数据    ReactDOM.render(&lt;Person name=&quot;tom&quot; age = &quot;41&quot; sex=&quot;男&quot;/&gt;,document.getElementById(&quot;div&quot;));&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如果传递的数据是一个对象，可以更加简便的使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/babel&quot;&gt;    class Person extends React.Component&#123;        render()&#123;            return (                &lt;ul&gt;                    &lt;li&gt;&#123;this.props.name&#125;&lt;/li&gt;                    &lt;li&gt;&#123;this.props.age&#125;&lt;/li&gt;                    &lt;li&gt;&#123;this.props.sex&#125;&lt;/li&gt;                &lt;/ul&gt;            )        &#125;    &#125;    const p = &#123;name:&quot;张三&quot;,age:&quot;18&quot;,sex:&quot;女&quot;&#125;   ReactDOM.render(&lt;Person &#123;...p&#125;/&gt;,document.getElementById(&quot;div&quot;));&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>... </code>这个符号恐怕都不陌生，这个是一个展开运算符，主要用来展开数组，如下面这个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];arr1 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];arr2 = [...arr,...arr1];  <span class="comment">//arr2 = [1,2,,3,4,5,6]</span></span><br></pre></td></tr></table></figure>

<p>但是他还有其他的用法：</p>
<p>1.复制一个对象给另一个对象{…对象名}。此时这两个对象并没有什么联系了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="string">&quot;18&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;女&quot;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> p2 = &#123;...p1&#125;;	<span class="comment">// 复制</span></span><br><span class="line">p1.name = <span class="string">&quot;sss&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p2)  <span class="comment">//&#123;name:&quot;张三&quot;,age:&quot;18&quot;,sex:&quot;女&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>2.在复制的时候，合并其中的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="string">&quot;18&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;女&quot;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> p2 = &#123;...p1,<span class="attr">name</span> : <span class="string">&quot;111&quot;</span>,<span class="attr">hua</span>:<span class="string">&quot;ss&quot;</span>&#125;;</span><br><span class="line">p1.name = <span class="string">&quot;sss&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p2)  <span class="comment">//&#123;name: &quot;111&quot;, age: &quot;18&quot;, sex: &quot;女&quot;,hua:&quot;ss&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意！！</strong> <strong>{…P}并不能展开一个对象</strong></p>
<p><strong>props传递一个对象，是因为babel+react使得{..p}可以展开对象，但是只有在标签中才能使用</strong></p>
<h5 id="对于props限制"><a href="#对于props限制" class="headerlink" title="对于props限制"></a><strong>对于props限制</strong></h5><p>很多时候都想要传递的参数进行相应的限制，比如：限制传递参数的类型，参数的默认值等等</p>
<p>react对此提供了相应的解决方法：</p>
<ul>
<li>propTypes:类型检查，还可以限制不能为空</li>
<li>defaultProps：默认值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    class Person extends React.Component&#123;</span><br><span class="line">        render()&#123;</span><br><span class="line">            //props是只读的</span><br><span class="line">            return (</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;&#123;this.props.name&#125;&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;&#123;this.props.age&#125;&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;&#123;this.props.sex&#125;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        //对组件的属性对其进行限制</span><br><span class="line">        static propTypes = &#123;</span><br><span class="line">            name:PropTypes.string.isRequired, //限定name是string类型，并且必须要传递</span><br><span class="line">            sex:PropTypes.string,  //限定sex是string类型</span><br><span class="line">            speak:PropTypes.func   //限定speak是function类型</span><br><span class="line">        &#125;</span><br><span class="line">        //指定默认的标签属性</span><br><span class="line">        static defaultProps = &#123;</span><br><span class="line">            sex:&quot;不男不女&quot;,</span><br><span class="line">            age:18</span><br><span class="line">        &#125;   </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    //在js中可以使用&#123;...p&#125;来复制一个对象，但是这个地方并不是复制对象，而是babel+react通过展开运算符，展开了一个对象</span><br><span class="line">    //但是只能在标签中进行使用</span><br><span class="line">    //const p = &#123;name:&quot;张三&quot;,age:&quot;18&quot;,sex:&quot;女&quot;&#125;   &#123;14&#125;就代表的是数值</span><br><span class="line">    //ReactDOM.render(&lt;Person &#123;...p&#125;/&gt;,document.getElementById(&quot;div&quot;));</span><br><span class="line">    ReactDOM.render(&lt;Person name=&quot;sss&quot; age = &#123;14&#125; speak=&quot;8&quot;/&gt;,document.getElementById(&quot;div&quot;));</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    function speak()&#123;</span><br><span class="line">        console.log(&quot;这个是一个函数&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="函数式组件的使用"><a href="#函数式组件的使用" class="headerlink" title="函数式组件的使用"></a><strong>函数式组件的使用</strong></h5><p>函数在使用props的时候，是作为参数进行使用的(props)；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Person(props)&#123;          return (                &lt;ul&gt;                    &lt;li&gt;&#123;props.name&#125;&lt;/li&gt;                    &lt;li&gt;&#123;props.age&#125;&lt;/li&gt;                    &lt;li&gt;&#123;props.sex&#125;&lt;/li&gt;                &lt;/ul&gt;            )    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h3><p> 作用：Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素。 </p>
<p>Refs主要提供了三种方式：</p>
<h5 id="1-字符串形式"><a href="#1-字符串形式" class="headerlink" title="1.字符串形式"></a><strong>1.字符串形式</strong></h5><p>在想要获取到一个DOM节点，可以直接在这个节点上添加ref属性。利用该属性进行获取该节点的值。</p>
<p>案例：给需要的节点添加ref属性，此时该实例对象的refs上就会有这个值。就可以利用实例对象的refs获取已经添加节点的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&quot;dian&quot; type=&quot;text&quot; placeholder=&quot;点击弹出&quot; /&gt; inputBlur = () =&gt;&#123;            alert(this.refs.shiqu.value);        &#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-回调形式"><a href="#2-回调形式" class="headerlink" title="2.回调形式"></a><strong>2.回调形式</strong></h5><p>回调形式会在ref属性中添加一个回调函数。<strong>将该DOM作为参数传递过去。</strong></p>
<p>如：ref里面就是一个回调函数，self就是该input标签。然后在将该DOM元素赋值给实例对象中的一个属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input ref=&#123;self =&gt;&#123; this.dian = self;console.log(self)&#125;&#125;  placeholder=&quot;点击弹出&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611495051999.png" alt="input标签"></p>
<p>也可以将函数提取出来，在ref中进行调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isRef = (self) =&gt;&#123;            this.dian = self;            console.log(self)        &#125;&lt;input ref=&#123;this.isRef&#125; type=&quot;text&quot; placeholder=&quot;点击弹出&quot; /&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于Refs中的回调次数问题</p>
<p>如果 <code>ref</code> 回调函数是以内联函数的方式定义的，在更新过程中它会被执行两次，第一次传入参数 <code>null</code>，然后第二次会传入参数 DOM 元素。这是因为在每次渲染时会创建一个新的函数实例，所以 React 清空旧的 ref 并且设置新的。通过将 ref 的回调函数定义成 class 的绑定函数的方式可以避免上述问题，但是大多数情况下它是无关紧要的。</p>
</blockquote>
<h5 id="3-API形式"><a href="#3-API形式" class="headerlink" title="3.API形式"></a><strong>3.API形式</strong></h5><p>React其实已经给我们提供了一个相应的API，他会自动的将该DOM元素放入实例对象中</p>
<p>如下：依旧先在DOM元素中添加一个ref元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;/*&lt;input ref=&#123;this.容器名称&#125; type=&quot;text&quot; placeholder=&quot;点击弹出&quot; /&gt;*/&#125;&lt;input ref=&#123;this.MyRef&#125; type=&quot;text&quot; placeholder=&quot;点击弹出&quot; /&gt;&lt;input ref=&#123;this.MyRef1&#125; type=&quot;text&quot; placeholder=&quot;点击弹出&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>通过API，创建React的容器，相当于省略了回调的中间环节。但是这个容器是专门专用的，所以每一个ref都需要创建这个。该API会将DOM元素赋值给实例对象的名称为容器名称的属性的current【这个current是固定的】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;/*容器名称 = React.createRef()*/&#125;</span><br><span class="line">MyRef = React.createRef();</span><br><span class="line">MyRef1 = React.createRef();</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611495597978.png" alt="API"></p>
<p>然后就可以使用了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">btnOnClick = () =&gt;&#123;</span><br><span class="line">    //创建之后，将自身节点，传入current中</span><br><span class="line">    console.log(this.MyRef.current.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>官方提示我们不要过度的使用ref，如果发生时间的元素刚好是需要操作的元素，就可以使用事件去替代。</strong></p>
<h1 id="4-React事件"><a href="#4-React事件" class="headerlink" title="4. React事件"></a>4. React事件</h1><h5 id="一般事件"><a href="#一般事件" class="headerlink" title="一般事件"></a>一般事件</h5><p>React的事件是通过<strong>onXxx</strong>属性指定事件处理函数</p>
<ul>
<li><p>React使用的都是自定义的事件，而不是原生的事件 <em>—————— 为了更好的兼容性</em></p>
</li>
<li><p>React中的事件是通过事件委托方式处理的(委托给组件最外层的元素) <em>——————为了的高效</em></p>
</li>
<li><p><strong>事件中必须返回的是函数</strong></p>
</li>
<li><p>通过event.target得到发生事件的Dom元素对象 <em>——————不要过度使用ref</em></p>
</li>
</ul>
<p>比如：</p>
<p>先声明一个事件，然后在根据事件创建相应的函数，根据事件的event参数，将DOM元素获取到。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input onChange=&#123;this.saveName&#125; type = &quot;text&quot; name =&quot;username&quot;/&gt;saveName = (event) =&gt;&#123;            this.setState(&#123;name:event.target.value&#125;);        &#125;</span><br></pre></td></tr></table></figure>



<h5 id="受控和非受控组件"><a href="#受控和非受控组件" class="headerlink" title="受控和非受控组件"></a><strong>受控和非受控组件</strong></h5><p>先来说说受控组件：</p>
<p> 使 React 的 state 成为“<strong>唯一数据源</strong>”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">saveName = (event) =&gt;&#123;    this.setState(&#123;name:event.target.value&#125;);&#125;savePwd = (event) =&gt; &#123;    this.setState(&#123;pwd:event.target.value&#125;);&#125;render() &#123;    return (        &lt;form action=&quot;http://www.baidu.com&quot; onSubmit=&#123;this.login&#125;&gt;            用户名：&lt;input value=&#123;this.state.name&#125; onChange=&#123;this.saveName&#125; type = &quot;text&quot; /&gt;            密码&lt;input value=&#123;this.state.pwd&#125; onChange=&#123;this.savePwd&#125; type = &quot;password&quot;/&gt;            &lt;button&gt;登录&lt;/button&gt;        &lt;/form&gt;    )&#125;</span><br></pre></td></tr></table></figure>

<p>由于在表单元素上设置了 <code>value</code> 属性，因此显示的值将始终为 <code>this.state.value</code>，这使得 React 的 state 成为唯一数据源。由于 <code>onchange</code> 在每次按键时都会执行并更新 React 的 state，因此显示的值将随着用户输入而更新。</p>
<p>对于受控组件来说，输入的值始终由 React 的 state 驱动。</p>
<p>非受控组件：</p>
<p><strong>非受控组件其实就是表单元素的值不会更新state</strong>。输入数据都是<strong>现用现取</strong>的。</p>
<p>如下：下面并没有使用state来控制属性，使用的是事件来控制表单的属性值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Login extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">    login = (event) =&gt;&#123;</span><br><span class="line">        event.preventDefault(); //阻止表单提交</span><br><span class="line">            console.log(this.name.value);</span><br><span class="line">            console.log(this.pwd.value);</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">            return (</span><br><span class="line">                &lt;form action=&quot;http://www.baidu.com&quot; onSubmit=&#123;this.login&#125;&gt;</span><br><span class="line">                用户名：&lt;input ref = &#123;self =&gt; this.name =self &#125; type = &quot;text&quot; name =&quot;username&quot;/&gt;</span><br><span class="line">                密码：&lt;input ref = &#123;self =&gt; this.pwd =self &#125; type = &quot;password&quot; name =&quot;password&quot;/&gt;</span><br><span class="line">                &lt;button&gt;登录&lt;/button&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="5-函數拓展"><a href="#5-函數拓展" class="headerlink" title="5. 函數拓展"></a>5. 函數拓展</h1><h5 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a><strong>高级函数</strong></h5><p>如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p>
<p>​    1.若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。</p>
<p>​    2.若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。</p>
<p><em>常见的高阶函数有：Promise、setTimeout、arr.map()等等</em></p>
<h5 id="函数的珂里化"><a href="#函数的珂里化" class="headerlink" title="函数的珂里化"></a><strong>函数的珂里化</strong></h5><p>  通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span><span class="function">(<span class="params">b</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function">(<span class="params">c</span>)=&gt;</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> a+b+c</span><br><span class="line">		&#125;</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>如下，我们将上面的案例简化，创建高级函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Login extends React.Component&#123;         state = &#123;name:&quot;&quot;,pwd:&quot;&quot;&#125;;				//返回一个函数        saveType = (type) =&gt;&#123;            return (event) =&gt; &#123;                this.setState(&#123;[type]:event.target.value&#125;);            &#125;        &#125;        //因为事件中必须是一个函数，所以返回的也是一个函数，这样就符合规范了        render() &#123;            return (                &lt;form&gt;      				&lt;input onChange = &#123;this.saveType(&#x27;name&#x27;)&#125; type = &quot;text&quot;/&gt;                    &lt;button&gt;登录&lt;/button&gt;                &lt;/form&gt;            )        &#125;    &#125;    ReactDOM.render(&lt;Login /&gt;,document.getElementById(&quot;div&quot;));</span><br></pre></td></tr></table></figure>



<h1 id="6-生命周期"><a href="#6-生命周期" class="headerlink" title="6. 生命周期"></a>6. 生命周期</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 初始化阶段: 由ReactDOM.render()触发---初次渲染	<span class="number">1.</span>	<span class="title">constructor</span>(<span class="params"></span>)	2.	<span class="title">componentWillMount</span>(<span class="params"></span>)	3.	<span class="title">render</span>(<span class="params"></span>)	4.	<span class="title">componentDidMount</span>(<span class="params"></span>) =====&gt; 常用		一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息2. 更新阶段: 由组件内部<span class="title">this</span>.<span class="title">setSate</span>(<span class="params"></span>)或父组件<span class="title">render</span>触发	1.	<span class="title">shouldComponentUpdate</span>(<span class="params"></span>)	2.	<span class="title">componentWillUpdate</span>(<span class="params"></span>)	3.	<span class="title">render</span>(<span class="params"></span>) =====&gt; 必须使用的一个	4.	<span class="title">componentDidUpdate</span>(<span class="params"></span>)3. 卸载组件: 由<span class="title">ReactDOM</span>.<span class="title">unmountComponentAtNode</span>(<span class="params"></span>)触发	1.	<span class="title">componentWillUnmount</span>(<span class="params"></span>)  =====&gt; 常用		一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 初始化阶段: 由ReactDOM.render()触发---初次渲染	<span class="number">1.</span>	<span class="title">constructor</span>(<span class="params"></span>)	2.	<span class="title">getDerivedStateFromProps</span> 	3.	<span class="title">render</span>(<span class="params"></span>)	4.	<span class="title">componentDidMount</span>(<span class="params"></span>) =====&gt; 常用		一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息2. 更新阶段: 由组件内部<span class="title">this</span>.<span class="title">setSate</span>(<span class="params"></span>)或父组件重新<span class="title">render</span>触发	1.	<span class="title">getDerivedStateFromProps</span>	2.	<span class="title">shouldComponentUpdate</span>(<span class="params"></span>)	3.	<span class="title">render</span>(<span class="params"></span>)	4.	<span class="title">getSnapshotBeforeUpdate</span>	5.	<span class="title">componentDidUpdate</span>(<span class="params"></span>)3. 卸载组件: 由<span class="title">ReactDOM</span>.<span class="title">unmountComponentAtNode</span>(<span class="params"></span>)触发	1.	<span class="title">componentWillUnmount</span>(<span class="params"></span>)  =====&gt; 常用		一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</span><br></pre></td></tr></table></figure>



<h2 id="（旧）"><a href="#（旧）" class="headerlink" title="（旧）"></a>（旧）</h2><p>组件从创建到死亡，会经过一些特定的阶段</p>
<p>​      React组件中包含一系列钩子函数{生命周期回调函数}，会在特定的时刻调用</p>
<p>​      我们在定义组件的时候，会在特定的声明周期回调函数中，做特定的工作</p>
<p>如下图是旧生命周期的结构图：</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611490156766.png" alt="旧生命周期"></p>
<p>我们通过一个案例更详细的了解这个生命周期：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">       constructor(props)&#123;</span><br><span class="line">           console.log(&quot;A --- constructor&quot;)</span><br><span class="line">           super(props);</span><br><span class="line">           this.state = &#123;num:1&#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       add = () =&gt; &#123;</span><br><span class="line">           let &#123;num&#125; = this.state;</span><br><span class="line">           this.setState(&#123;num:num+1&#125;);</span><br><span class="line">           //强制更新</span><br><span class="line">           //this.forceUpdate();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      render()&#123;</span><br><span class="line">          console.log(&quot;A --- render&quot;);</span><br><span class="line">           return (</span><br><span class="line">               &lt;div&gt;</span><br><span class="line">                   &lt;h1&gt;这个是第&#123;this.state.num&#125;个&lt;/h1&gt;</span><br><span class="line">                   &lt;B name = &#123;this.state.num&#125;/&gt;</span><br><span class="line">                   &lt;button onClick = &#123;this.add&#125;&gt;点击加一&lt;/button&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">           )</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //在render之前执行</span><br><span class="line">      componentWillMount()&#123;</span><br><span class="line">           console.log(&quot;A --- componentWillMount&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //在render之后执行</span><br><span class="line">      componentDidMount()&#123;</span><br><span class="line">       console.log(&quot;A --- componenetDidMount&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //更新操作 setState之后执行，判断是否可以更新（true可以，false不可以）</span><br><span class="line">      shouldComponentUpdate()&#123;</span><br><span class="line">           console.log(&quot;A --- shouldComponentUpdate&quot;);</span><br><span class="line">           return true;</span><br><span class="line">      &#125;</span><br><span class="line">      // 组件将要更新之前</span><br><span class="line">      componentWillUpdate()&#123;</span><br><span class="line">           console.log(&quot;A --- componentWillUpdate&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      //组件更新之后，该函数可以接受相应的参数</span><br><span class="line">      componentDidUpdate()&#123;</span><br><span class="line">           console.log(&quot;A --- componentDidUpdate&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //卸载组件之后</span><br><span class="line">      componentWillUnmonut()&#123;</span><br><span class="line">           console.log(&quot;A --- componentWillUnmonut&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  class B extends React.Component&#123;</span><br><span class="line">      render()&#123;</span><br><span class="line">          return(   </span><br><span class="line">               &lt;div&gt;</span><br><span class="line">                   &lt;h1&gt;这个是B组件,传递过来的是：&#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class="line">               &lt;/div&gt;</span><br><span class="line">          )</span><br><span class="line">      &#125;</span><br><span class="line">      //父组件进行了更新，子组件先执行这个【注意，第一次传递数据的时候，并不执行】</span><br><span class="line">      componentWillReceiveProps()&#123;</span><br><span class="line">       console.log(&quot;A --- componentWillReceiveProps&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   ReactDOM.render(&lt;A   /&gt;,document.getElementById(&quot;div&quot;));</span><br></pre></td></tr></table></figure>

<p>我们在控制台看一下：</p>
<p>当我们刚刚打开控制台的时候，组件第一次加载：</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611568192158.png" alt="组件第一次加载"></p>
<p>当我们点击按钮更新sate的时候：</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611568250881.png" alt="更新state"></p>
<h2 id="（新）"><a href="#（新）" class="headerlink" title="（新）"></a>（新）</h2><p>在最新的react版本中，有些生命周期钩子被抛弃了，在官网中是这样说的：</p>
<p>​    我们得到最重要的经验是，过时的组件生命周期往往会带来不安全的编码实践，具体函数如下：</p>
<ul>
<li><p><code>componentWillMount</code></p>
</li>
<li><p><code>componentWillReceiveProps</code></p>
</li>
<li><p><code>componentWillUpdate</code></p>
<p>这些生命周期方法经常被误解和滥用；此外，我们预计，在异步渲染中，它们潜在的误用问题可能更大。我们将在即将发布的版本中为这些生命周期添加 “UNSAFE_” 前缀。（这里的 “unsafe” 不是指安全性，而是表示使用这些生命周期的代码在 React 的未来版本中更有可能出现 <strong>bug</strong>，尤其是在启用异步渲染之后。）</p>
</li>
</ul>
<p>由此可见，新版本中并不推荐持有这三个函数，取而代之的是带有UNSAFE_ 前缀的三个函数，比如: UNSAFE_ componentWillMount。即便如此，其实React官方还是不推荐大家去使用，在以后版本中有可能会去除这几个函数。</p>
<p>如下图是新的生命周期：</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611651795885.png" alt="新生命周期"></p>
<p>从图上可以看出，新生命周期和旧生命周期的区别主要有：</p>
<p>1.抛弃了上面所说的三个钩子函数【其实还可以使用】</p>
<p>2.新添加了两个钩子函数</p>
<p>现在重点说一下，新添加的钩子函数</p>
<p><strong>static getDerivedStateFromProps(props, state)</strong></p>
<p>首先，该函数会调用 <strong>render 方法之前</strong>调用，并且在<strong>初始挂载</strong>及<strong>后续更新</strong>时都会被调用；该函数必须是<strong>静态</strong>的；给组件传递的数据（props）以及组件状态（state），会作为参数到这个函数中；该函数也必须有返回值，返回一个Null或者state对象。因为初始化和后续更新都会执行这个方法，因此在这个方法返回state对象，就相当于将原来的state进行了覆盖，所以倒是修改状态不起作用。</p>
<p><strong>getSnapshotBeforeUpdate(prevProps, prevState)</strong></p>
<p> <code>getSnapshotBeforeUpdate()</code> 在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期的任何返回值将作为参数传递<code>componentDidUpdate()</code>。 </p>
<blockquote>
<p>补充一下：componentDidUpdate(prevProps, prevState, snapshot)</p>
<p>该生命周期函数，可以有三个参数：原始传过来的参数，最开始的状态，getSnapshotBeforeUpdate传递的值</p>
<p>关于更多关于生命周期的介绍，可以参考官方文档：</p>
<p><a href="https://zh-hans.reactjs.org/docs/react-component.html#render">https://zh-hans.reactjs.org/docs/react-component.html#render</a></p>
</blockquote>
<p>以上就是两个新添加的钩子函数，但是在现实开发中可能并不常用这两个。</p>
<p>**案例：在一个区域内，定时的输出以行话，如果内容大小超过了区域大小，就出现滚动条，但是内容不进行移动 **</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\BeforeGender.gif" alt="案例"></p>
<p>如上面的动图：区域内部的内容展现没有变化，但是可以看见滚动条在变化，也就是说上面依旧有内容在输出，只不过不在这个区域内部展现。</p>
<p><strong>实现：</strong></p>
<p>【一些css样式，就不在这展示了】</p>
<p>1.首先我们先实现定时输出内容</p>
<p>我们可以使用state状态，改变新闻后面的值，但是为了同时显示这些内容，我们应该为state的属性定义一个数组。并在创建组件之后开启一个定时器，不断的进行更新state。更新渲染组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class New extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">       state = &#123;num:[]&#125;;</span><br><span class="line"></span><br><span class="line">       //在组件创建之后,开启一个定时任务</span><br><span class="line">       componentDidMount()&#123;</span><br><span class="line">           setInterval(()=&gt;&#123;</span><br><span class="line">               let &#123;num&#125; = this.state;</span><br><span class="line">               const news = (num.length+1);</span><br><span class="line">               this.setState(&#123;num:[news,...num]&#125;);</span><br><span class="line">           &#125;,2000);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       render()&#123;</span><br><span class="line">           return (</span><br><span class="line"></span><br><span class="line">               &lt;div ref = &quot;list&quot; className = &quot;list&quot;&gt;&#123;</span><br><span class="line">                   this.state.num.map((n,index)=&gt;&#123;</span><br><span class="line">                   return &lt;div className=&quot;news&quot; key=&#123;index&#125; &gt;新闻&#123;n&#125;&lt;/div&gt;</span><br><span class="line">                   &#125;)</span><br><span class="line">               &#125;&lt;/div&gt;</span><br><span class="line">           )</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> ReactDOM.render(&lt;New /&gt;,document.getElementById(&quot;div&quot;));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.接下来就是控制滚动条了</p>
<p>我们在组件渲染到DOM之前获取组件的高度，然后用组件渲染之后的高度减去之前的高度就是一条新的内容的高度，这样在不断的累加到滚动条位置上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getSnapshotBeforeUpdate()&#123;	return this.refs.list.scrollHeight;&#125;componentDidUpdate(preProps,preState,height)&#123;	this.refs.list.scrollTop += (this.refs.list.scrollHeight - height);&#125;</span><br></pre></td></tr></table></figure>

<p>这样就实现了这个功能。</p>
<h1 id="7-Diff算法"><a href="#7-Diff算法" class="headerlink" title="7. Diff算法"></a>7. Diff算法</h1><p>提到这个算法，就必须说一下关于<code>Key</code>的事情了。</p>
<p>其实每个组件中的每个标签都会有一个key, 只不过有的必须显示的指定，有的可以隐藏。</p>
<p> 如果生成的render出来后就<strong>不会改变里面的内容，那么你不需要指定key</strong>（不指定key时，React也会生成一个默认的标识）,或者将index作为key，只要key不重复即可。</p>
<p>但是如果你的标签是动态的，是有可能刷新的，就必须显示的指定key。上面案使用map进行便利的时候就必须指定Key:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.state.num.map((n,index)=&gt;&#123;	return &lt;div className=&quot;news&quot; key=&#123;index&#125; &gt;新闻&#123;n&#125;&lt;/div&gt;&#125;)</span><br></pre></td></tr></table></figure>

<p>这个地方虽然显示的指定了key，但是<strong>官网并不推荐使用Index作为Key去使用</strong>；</p>
<p>这样会很有可能会有效率上的问题</p>
<p>举个例子：</p>
<p>在一个组件中，我们先创建了两个对象，通过循环的方式放入&lt; li&gt;标签中，此时key使用的是index。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">person:[    &#123;id:1,name:&quot;张三&quot;,age:18&#125;,    &#123;id:2,name:&quot;李四&quot;,age:19&#125;]this.state.person.map((preson,index)=&gt;&#123;  return  &lt;li key = &#123;index&#125;&gt;&#123;preson.name&#125;&lt;/li&gt;&#125;)</span><br></pre></td></tr></table></figure>

<p>如下图展现在页面中：</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611800406864.png" alt="原始对象数组"></p>
<p>此时，我们想在点击按钮之后动态的添加一个对象，并且放入到li标签中，在重新渲染到页面中。</p>
<p>我们通过修改State来控制对象的添加。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;this.addObject&#125;&gt;点击增加对象&lt;/button&gt;</span><br><span class="line">addObject = () =&gt;&#123;</span><br><span class="line">    let &#123;person&#125; = this.state;</span><br><span class="line">    const p = &#123;id:(person.length+1),name:&quot;王五&quot;,age:20&#125;;</span><br><span class="line">    this.setState(&#123;person:[p,...person]&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如下动图所示：</p>
<p> <img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\addObject.gif" alt="原始对象数组"> </p>
<p>这样看，虽然完成了功能。但是其实存在效率上的问题，    我们先来看一下两个前后组件状态的变化：</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611800988496.png" alt="组件状态的变化"></p>
<p>我们发现，组件第一个变成了王五，张三和李四都移下去了。因为我们使用Index作为Key，这三个标签的key也就发生了改变【张三原本的key是0，现在变成了1，李四的key原本是1，现在变成了2，王五变成了0】在组件更新状态重新渲染的时候，就出现了问题：</p>
<p>因为react是通过key来比较组件标签是否一致的，拿这个案例来说：</p>
<p>首先，状态更新导致组件标签更新，react根据Key，判断旧的虚拟DOM和新的虚拟DOM是否一致</p>
<p>key = 0 的时候 旧的虚拟DOM 内容是张三  新的虚拟DOM为王五 ，react认为内容改变，从而重新创建新的真实DOM.</p>
<p>key = 1 的时候 旧的虚拟DOM 内容是李四，新的虚拟DOM为张三，react认为内容改变，从而重新创建新的真实DOM</p>
<p>key = 2 的时候 旧的虚拟DOM没有，创建新的真实DOM </p>
<p>这样原本有两个虚拟DOM可以复用，但都没有进行复用，完完全全的都是新创建的；这就导致效率极大的降低。</p>
<p>其实这是因为我们将新创建的对象放在了首位，如果放在最后其实是没有问题的，但是因为官方并不推荐使用Index作为key值，我们推荐使用id作为key值。从而完全避免这样的情况。</p>
<p><strong>虚拟DOM中key的作用：</strong></p>
<p>​     1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。</p>
<p>​     2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】, </p>
<p>​            随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：</p>
<p>​         a. 旧虚拟DOM中找到了与新虚拟DOM相同的key：</p>
<p>​            (1).若虚拟DOM中内容没变, 直接使用之前的真实DOM</p>
<p>​            (2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</p>
<p>​         b. 旧虚拟DOM中未找到与新虚拟DOM相同的key</p>
<p>​            根据数据创建新的真实DOM，随后渲染到到页面</p>
<p><strong>用index作为key可能会引发的问题:</strong></p>
<p>​    1.若对数据进行:逆序添加、逆序删除等破坏顺序操作:</p>
<p>​        会产生没有必要的真实DOM更新  界面效果没问题,但效率低。</p>
<p>​    2.如果结构中还包含输入类的DOM:</p>
<p>​        会产生错误DOM更新   界面有问题。</p>
<p>​    3.注意! 如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</p>
<p><strong>开发如何选择key?</strong></p>
<p>​    最好使用每一条数据的唯一标识作为key 比如id，手机号，身份证号</p>
<p>​    如果确定只是简单的展示数据，用Index也是可以的</p>
<p><strong>而这个判断key的比较规则就是Diff算法</strong></p>
<p>Diff算法其实就是react生成的新虚拟DOM和以前的旧虚拟DOM的比较规则：</p>
<ul>
<li><p>如果旧的虚拟DOM中找到了与新虚拟DOM相同的key:</p>
<ul>
<li>如果内容没有变化，就直接只用之前旧的真实DOM</li>
<li>如果内容发生了变化，就生成新的真实DOM            </li>
</ul>
</li>
<li><p>如果旧的虚拟DOM中没有找到了与新虚拟DOM相同的key:</p>
<ul>
<li>根据数据创建新的真实的DOM,随后渲染到页面上</li>
</ul>
</li>
</ul>
<h1 id="8-React脚手架"><a href="#8-React脚手架" class="headerlink" title="8.React脚手架"></a>8.React脚手架</h1><p>react提供了一个用于创建react项目的脚手架库：create-react-app</p>
<h2 id="创建项目并启动"><a href="#创建项目并启动" class="headerlink" title="创建项目并启动"></a>创建项目并启动</h2><ol>
<li><p>全局安装：<code>npm i -g create-react-app</code></p>
</li>
<li><p>创建项目：<code>create-react-app 项目名  </code></p>
<p>在这一步，有可能会出现：</p>
</li>
</ol>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611803687193.png" alt="不是内部命令"></p>
<p>​     这样可以直接使用：<code>npx create-react-app 项目名 </code></p>
<ol start="3">
<li><p>等待下载完成，进入项目文件夹，运行一下</p>
<p>比如，我这的项目名称是hello,就先进入hello文件夹</p>
<p><code>cd hello</code></p>
<p><code>npm start </code>  //启动这个项目</p>
</li>
</ol>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611816095069.png" alt="启动成功"></p>
<p>这个时会自动的打开浏览器，展现这个项目：</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611816150630.png" alt="第一个脚手架项目"></p>
<h2 id="项目的目录结构"><a href="#项目的目录结构" class="headerlink" title="项目的目录结构"></a>项目的目录结构</h2><p>我们先来看一下public这个目录下面的结构：</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611817630266.png" alt="public"></p>
<p>这里面最主要的还是这个Index.html文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">    &lt;!--%PUBLIC_URL%表示public文件夹的路径--&gt;</span><br><span class="line">    &lt;link rel=&quot;icon&quot; href=&quot;%PUBLIC_URL%/favicon.ico&quot; /&gt;</span><br><span class="line">    &lt;!--用于开启理想视口，用于移动端页面的适配--&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;</span><br><span class="line">    &lt;!--用于配置浏览器地址栏的颜色（仅支持安卓手机浏览器）--&gt;</span><br><span class="line">    &lt;meta name=&quot;theme-color&quot; content=&quot;#000000&quot; /&gt;</span><br><span class="line">    &lt;!--描述网页信息的--&gt;</span><br><span class="line">    &lt;meta</span><br><span class="line">      name=&quot;description&quot;</span><br><span class="line">      content=&quot;Web site created using create-react-app&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;!--用于指定网页添加到手机主屏幕后的图标（仅仅支持ios）--&gt;</span><br><span class="line">    &lt;link rel=&quot;apple-touch-icon&quot; href=&quot;%PUBLIC_URL%/logo192.png&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!--应用加壳时候的配置文件 --&gt;</span><br><span class="line">    &lt;link rel=&quot;manifest&quot; href=&quot;%PUBLIC_URL%/manifest.json&quot; /&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;title&gt;React App&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;!-- 浏览器不支持JS的运行的时候展现 --&gt;</span><br><span class="line">    &lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>src文件：</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611818262317.png" alt="src文件"></p>
<p>这里面其实最主要的就是App.js以及index.js，一个是组件，一个是将组件渲染到页面中的。</p>
<h2 id="第一个脚手架应用"><a href="#第一个脚手架应用" class="headerlink" title="第一个脚手架应用"></a>第一个脚手架应用</h2><p>1.我们保持public中的Index.html不变</p>
<p>2.修改src下面的APP.js以及index.js文件</p>
<p>App.js:  【注意：创建好的组件一定要暴露出去】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建外壳组件APPimport React from &#x27;react&#x27;class App extends React.Component&#123;    render()&#123;        return (            &lt;div&gt;Hello word&lt;/div&gt;        )    &#125;&#125;export default App</span><br></pre></td></tr></table></figure>

<p>index.js: 【主要的作用其实就是将App这个组件渲染到页面上】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//引入核心库import React from &#x27;react&#x27;import ReactDOM from &#x27;react-dom&#x27;//引入组件import App from &#x27;./App&#x27;ReactDOM.render(&lt;App /&gt;,document.getElementById(&quot;root&quot;))</span><br></pre></td></tr></table></figure>

<p>这样在重新启动应用，就成功了。</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1611820194124.png" alt="第一个脚手架应用"></p>
<p>我们也不建议这样直接将内容放入App组件中，尽量还是用内部组件。</p>
<p>我们在顶一个Hello组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React,&#123;Componet&#125; from &#x27;react&#x27;export default class Hello extends Componet&#123;    render() &#123;        return (            &lt;h1&gt;Hello&lt;/h1&gt;        )    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>在App组件中，进行使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class App extends Component&#123;    render()&#123;        return (            &lt;div&gt;                &lt;Hello /&gt;            &lt;/div&gt;        )    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这样的结果和前面是一样的。</p>
<p>但是由于普通的Js和组件都是js，所一最好组件使用jsx去展示。</p>
<h2 id="样式冲突"><a href="#样式冲突" class="headerlink" title="样式冲突"></a>样式冲突</h2><p>当组件逐渐增多起来的时候，我们发现，组件的样式也是越来越丰富，这样就很有可能产生两个组件中样式名称有可能会冲突，这样会根据引入App这个组件的先后顺序，后面的会覆盖前面的，</p>
<p>为了避免这样的样式冲突，我们采用下面的形式：</p>
<p>1.将css文件名修改： hello.css — &gt;hello.module.css</p>
<p>2.引入并使用的时候改变方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React,&#123;Component&#125;from &#x27;react&#x27;</span><br><span class="line">import hello from &#x27;./hello.module.css&#x27;  //引入的时候给一个名称</span><br><span class="line"></span><br><span class="line">export default class Hello extends Component&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;h1 className=&#123;hello.title&#125;&gt;Hello&lt;/h1&gt;   //通过大括号进行调用</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="9-功能界面的组件化编码流程"><a href="#9-功能界面的组件化编码流程" class="headerlink" title="9. 功能界面的组件化编码流程"></a>9. 功能界面的组件化编码流程</h1><p>1.拆分组件:拆分界面，抽取组件</p>
<p>2.实现静态组件</p>
<p>3.实现动态组件</p>
<ul>
<li>动态的显示初始化数据<ul>
<li>数据类型</li>
<li>数据名称</li>
<li>保存在哪个组件</li>
</ul>
</li>
<li>交互</li>
</ul>
<p><strong>注意事项：</strong></p>
<p>1.拆分组件、实现静态组件。注意className、style的写法</p>
<p>2.动态初始化列表，如何确定将数据放在哪个组件的state中？</p>
<ul>
<li>某个组件使用：放在自身的state中</li>
<li>某些组件使用：放在他们共同的父组件中【状态提升】</li>
</ul>
<p>3.关于父子组件之间的通信</p>
<ul>
<li>父组件给子组件传递数据：通过props传递</li>
<li>子组件给父组件传递数据：通过props传递，要求父组件提前给子组件传递一个函数</li>
</ul>
<p>4.注意defaultChecked 和checked区别，defalutChecked只是在初始化的时候执行一次，checked没有这个限制，但是必须添加onChange方法类似的还有：defaultValue 和value</p>
<p>5.状态在哪里，操作状态的方法就在哪里</p>
<h1 id="10-react-ajax"><a href="#10-react-ajax" class="headerlink" title="10. react ajax"></a>10. react ajax</h1><p>React本身只关注与页面，并不包含发送ajax请求的代码，所以一般都是集成第三方的一些库，或者自己进行封装。</p>
<p>推荐使用axios。</p>
<p>在使用的过程中很有可能会出现跨域的问题，这样就应该配置代理。</p>
<p> 所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）， 当一个请求url的<strong>协议、域名、端口</strong>三者之间任意一个与当前页面url不同即为跨域  。</p>
<p>那么react通过代理解决跨域问题呢</p>
<p><strong>方法一</strong></p>
<blockquote>
<p>在package.json中追加如下配置</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;proxy&quot;</span>:<span class="string">&quot;请求的地址&quot;</span>      <span class="string">&quot;proxy&quot;</span>:<span class="string">&quot;http://localhost:5000&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li>优点：配置简单，前端请求资源时可以不加任何前缀。</li>
<li>缺点：不能配置多个代理。</li>
<li>工作方式：上述方式配置代理，当请求了3000不存在的资源时，那么该请求会转发给5000 （优先匹配前端资源）</li>
</ol>
<p><strong>方法二</strong></p>
<ol>
<li><p>第一步：创建代理配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在src下创建配置文件：src/setupProxy.js</span><br></pre></td></tr></table></figure></li>
<li><p>编写setupProxy.js配置具体代理规则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)<span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;  app.use(    proxy(<span class="string">&#x27;/api1&#x27;</span>, &#123;  <span class="comment">//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)      target: &#x27;http://localhost:5000&#x27;, //配置转发目标地址(能返回数据的服务器地址)      changeOrigin: true, //控制服务器接收到的请求头中host字段的值      /*      	changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000      	changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000      	changeOrigin默认值为false，但我们一般将changeOrigin值设为true      */      pathRewrite: &#123;&#x27;^/api1&#x27;: &#x27;&#x27;&#125; //去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)    &#125;),    proxy(&#x27;/api2&#x27;, &#123;       target: &#x27;http://localhost:5001&#x27;,      changeOrigin: true,      pathRewrite: &#123;&#x27;^/api2&#x27;: &#x27;&#x27;&#125;    &#125;)  )&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>说明：</p>
<ol>
<li>优点：可以配置多个代理，可以灵活的控制请求是否走代理。</li>
<li>缺点：配置繁琐，前端请求资源时必须加前缀。</li>
</ol>
<h1 id="11-兄弟之间进行通信"><a href="#11-兄弟之间进行通信" class="headerlink" title="11. 兄弟之间进行通信"></a>11. 兄弟之间进行通信</h1><h3 id="消息订阅和发布机制。"><a href="#消息订阅和发布机制。" class="headerlink" title="消息订阅和发布机制。"></a><strong>消息订阅</strong>和<strong>发布机制</strong>。</h3><p>举个例子来说就是张三想要跟李四进行通信，张三就需要订阅一个消息【比如A消息】，李四想要给张三数据，就必须发布一个A消息，在发布的同时将数据放入消息中，因为张三订阅了名称为A的消息，此时就能接受到李四发布的消息，从而获取到数据。</p>
<p>这就有点类似于看报纸，甲想要知道每天都发生什么事情，于是订阅了每天日报，乙每天都会发布这个每天日报，因为甲订阅了，于是乙就会每天就给甲方推送，甲方从而获取数据。</p>
<p><strong>在消息订阅和发布中，我们可以使用PubSubJs进行通信：</strong></p>
<p>引入PubSubJs:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import PubSub from &#x27;pubsub-js&#x27;</span><br></pre></td></tr></table></figure>

<p>订阅消息：（接收数据方）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PubSub.subscribe(&quot;getSate&quot;,(_,data)=&gt;&#123;</span><br><span class="line">            console.log(data)</span><br><span class="line">        &#125;)</span><br><span class="line">PubSub.subscribe(&quot;订阅的消息名称&quot;,回调函数，第一个参数是消息名称，可以使用_来占位，第二个是传递的数据</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<p>发布消息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PubSub.publish(&quot;getSate&quot;,&#123;isFrist:false,isLoad:true&#125;)</span><br><span class="line">PubSub.publish(&quot;订阅的消息名称&quot;,传递的数据)</span><br></pre></td></tr></table></figure>



<h3 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h3><p><strong>async:</strong></p>
<p>该关键字是放在函数之前的，使得函数成为一个异步函数，他最大的特点就是将函数回封装成Promise，也就是被他修饰的函数的返回值都是Promise对象。而这个Promise对象的状态则是由函数执行的返回值决定的。</p>
<p>如果返回的是一个非promise对象，该函数将返回一个成功的Promise，成功的值则是返回的值；</p>
<p>如果返回的是一个promise对象，则该函数返回的就是该promise对应的状态。</p>
<p><strong>await</strong></p>
<p>await右边是一个表达式，如果该表达式返回的是一个Promise对象，则左边接收的结果就是该Promise对象成功的结果，如果该Promise对象失败了，就必须使用try..catch来捕获。如果该表达式返回的是是一个不是promise对象，则左边接受的就是该表达式的返回值。</p>
<p> 当 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await">await</a> 关键字与异步函数一起使用时，它的真正优势就变得明显了 —— 事实上， <strong>await 只在异步函数里面才起作用</strong>。它可以放在任何异步的，基于 promise 的函数之前。它会暂停代码在该行上，直到 promise 完成，然后返回结果值。在暂停的同时，其他正在等待执行的代码就有机会执行了。 </p>
<p>举个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f1 = () =&gt;&#123;</span><br><span class="line">       return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">           // resolve(1);</span><br><span class="line">           reject(&quot;错误&quot;)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   async function test()&#123;</span><br><span class="line">       try&#123;</span><br><span class="line">          const p =  await f1();</span><br><span class="line">          console.log(p)</span><br><span class="line">       &#125;catch(error)&#123;</span><br><span class="line">           console.error(error)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   test();</span><br></pre></td></tr></table></figure>

<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>以前发送请求，使用ajax或者axios，现在还可以使用fetch。这个是window自带的，和xhr是一个级别的。</p>
<p>可以查看这个文章，写的真的不错：</p>
<p><a href="http://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html">fetch</a></p>
<h1 id="12-React路由"><a href="#12-React路由" class="headerlink" title="12. React路由"></a>12. React路由</h1><h2 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h2><ul>
<li><p><strong>单页Web应用</strong>(single page web application，SPA)。</p>
</li>
<li><p>整个应用只有<strong>一个完整的页面</strong>。</p>
</li>
<li><p>点击页面中的链接<strong>不会刷新页面</strong>，只会做页面的<strong>局部更新</strong>。</p>
</li>
<li><p>数据都需要通过<strong>ajax</strong>请求获取,并在前端<strong>异步</strong>展现</p>
</li>
</ul>
<h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><ul>
<li><p>一个路由其实就是一个映射关系（k:v）</p>
</li>
<li><p>key为路径，value可能是function 或者是 component</p>
</li>
</ul>
<p><strong>后端路由：</strong></p>
<ul>
<li><p>value是function，用来处理客户端提交的请求</p>
</li>
<li><p>注册路由：router.get(path,function(req,res))</p>
</li>
<li><p>工作过程：当node接收一个请求的时候，根据请求路径找到匹配的路由，调用路由中的函数来处理请求，返回响应的数据</p>
</li>
</ul>
<p><strong>前端路由：</strong></p>
<ul>
<li><p>浏览器端路由，value是Component，用于展示页面内容</p>
</li>
<li><p>注册路由：&lt; Route path=”/test” component={Test}&gt;</p>
</li>
<li><p>工作过程：当浏览器的path变为/test的时候，当前路由组件就会变成Test组件</p>
</li>
</ul>
<p><strong>前端路由的原理</strong></p>
<ul>
<li><p>主要是依靠于<strong>history</strong>，也就是浏览器的历史记录。</p>
</li>
<li><p>浏览器上的记录其实就是一个栈，前进一次就是<strong>入栈</strong>，后退一次就是<strong>出栈</strong>。</p>
</li>
<li><p>并且历史记录上有一个监听的方法，可以时时刻刻监听记录的变化。从而判断是否改变路径</p>
</li>
</ul>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History">History</a></p>
<h2 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a>react-router-dom</h2><p>react的路由有三类：</p>
<ul>
<li><p>web【主要适用于前端】</p>
</li>
<li><p>native【主要适用于本地】</p>
</li>
<li><p>anywhere【任何地方】</p>
</li>
</ul>
<p>在这主要使用web也就是这个标题 react-router-dom</p>
<p><strong>基本的使用：</strong></p>
<p>导航中的a标签改写成Link标签</p>
<p>&lt; Link to=”/路径” &gt;xxx&lt; /Link&gt;</p>
<p>展示区写Route标签进行路径的匹配</p>
<p>&lt; Route path = ‘/路径’ component={组件名称}&gt;</p>
<p>&lt; App&gt;最外侧包裹了一个&lt; BrowserRouter&gt;或者&lt; HashRouter&gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div className=&quot;list-group&quot;&gt;</span><br><span class="line">    &lt;Link className=&quot;list-group-item&quot;  to=&quot;/about&quot;&gt;About&lt;/Link&gt;</span><br><span class="line">    &lt;Link className=&quot;list-group-item&quot;  to=&quot;/home&quot;&gt;Home&lt;/Link&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div className=&quot;panel-body&quot;&gt;</span><br><span class="line">    &#123;/* 注册路由，也就是写对应的关系 */&#125;</span><br><span class="line">    &lt;Route path=&quot;/about&quot;component=&#123;About&#125;/&gt;</span><br><span class="line">    &lt;Route path=&quot;/home&quot;component=&#123;Home&#125;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">index.js:</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;BrowserRouter&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/BrowserRouter&gt;</span><br><span class="line">    ,document.getElementById(&quot;root&quot;))</span><br></pre></td></tr></table></figure>

<p>那么使用Link代替a标签之后，在页面上会是什么呢，我们发现其实页面上也是把link转化为了a标签</p>
<p><strong>路由组件以及一般组件</strong></p>
<p>1.写法不一样</p>
<p>​    一般组件：&lt; Demo&gt;</p>
<p>​    路由组件：&lt; Route path=”/demo” component ={Demo}/&gt;</p>
<p>2.存放的位置一般不同</p>
<p>​    一般组件：components</p>
<p>​    路由组件：pages</p>
<p>3.接收的内容【props】</p>
<p>​    一般组件：写组件标签的时候传递什么，就能收到什么</p>
<p>​    路由组件：接收到三个固定的属性【history,location,match】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history:    go: ƒ go(n)    goBack: ƒ goBack()    goForward: ƒ goForward()    push: ƒ push(path, state)    replace: ƒ replace(path, state)location:    pathname: <span class="string">&quot;/about&quot;</span>    search: <span class="string">&quot;&quot;</span>    state: undefinedmatch:    params: &#123;&#125;    path: <span class="string">&quot;/about&quot;</span>    url: <span class="string">&quot;/about&quot;</span></span><br></pre></td></tr></table></figure>



<p><strong>NavLink</strong></p>
<p>因为Link不能够改变标签体，因此只适合用于一些写死的标签。而如果想要有一些点击的效果，使用NavLink.</p>
<p>如下代码，就写了<strong>activeClassName</strong>，当点击的时候就会触发这个class的样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;/*NavLink在点击的时候就会去找activeClassName=&quot;ss&quot;所指定的class的值，如果不添加默认是active</span><br><span class="line"> 这是因为Link相当于是把标签写死了，不能去改变什么。*/&#125;</span><br><span class="line"></span><br><span class="line">&lt;NavLink  ctiveClassName=&quot;ss&quot; className=&quot;list-group-item&quot;  to=&quot;/about&quot;&gt;About&lt;/NavLink&gt;</span><br><span class="line">&lt;NavLink className=&quot;list-group-item&quot;  to=&quot;/home&quot;&gt;Home&lt;/NavLink&gt; </span><br></pre></td></tr></table></figure>

<p>但是可能一个导航又很多标签，如果这样重复的写NavLink也会造成很多的重复性的代码问题。</p>
<p>因此可以自定义一个NavLink：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> // 通过&#123;...对象&#125;的形式解析对象，相当于将对象中的属性全部展开</span><br><span class="line"> //&lt;NavLink  to = &#123;this.props.to&#125; children = &#123;this.props.children&#125;/&gt;</span><br><span class="line">&lt;NavLink className=&quot;list-group-item&quot; &#123;...this.props&#125;/&gt;</span><br></pre></td></tr></table></figure>

<p>​    在使用的时候：直接写每个标签中不一样的部分就行，比如路径和名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将NavLink进行封装，成为MyNavLink,通过props进行传参数，标签体内容props是特殊的一个属性，叫做children </span><br><span class="line">&lt;MyNavLink to = &quot;/about&quot; &gt;About&lt;/MyNavLink&gt;</span><br></pre></td></tr></table></figure>



<p>补充：</p>
<p><strong>Switch</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;/* 注册路由 */&#125;&lt;Switch&gt;	&lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;	&lt;Route path=&quot;/home&quot; component=&#123;Home&#125;/&gt;		&#123;/* 不往下匹配，提高效率 */&#125;	&lt;Route path=&quot;/home&quot; component=&#123;Test&#125;/&gt;&lt;/Switch&gt;</span><br></pre></td></tr></table></figure>





<h2 id="样式错误"><a href="#样式错误" class="headerlink" title="样式错误"></a>样式错误</h2><p>拿上面的案例来说：</p>
<p>这里面会有一个样式：</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1612316916900.png" alt="样式表"></p>
<p>此时，加载该样式的路径为：</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1612317786643.png" alt="加载样式路径"></p>
<p>但是在写路由的时候，有的时候就会出现多级目录，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyNavLink to = &quot;/cyk/about&quot; &gt;About&lt;/MyNavLink&gt;</span><br><span class="line"></span><br><span class="line">&lt;Route path=&quot;/cyk/about&quot;component=&#123;About&#125;/&gt;</span><br></pre></td></tr></table></figure>

<p>这个时候就在刷新页面，就会出现问题：</p>
<p>样式因为路径问题加载失败，此时页面返回public下面的Index.html</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\1612317880916.png" alt="加载页面失败"></p>
<p>解决这个问题，有三个方法：</p>
<p>1.样式加载使用绝对位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link href=&quot;/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt; </span><br></pre></td></tr></table></figure>

<p>2.使用 %PUBLIC_URL%</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link href=&quot;%PUBLIC_URL%/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>3.使用HashRouter</p>
<p>因为HashRouter会添加#，默认不会处理#后面的路径，所以也是可以解决的</p>
<h2 id="模糊匹配和精准匹配"><a href="#模糊匹配和精准匹配" class="headerlink" title="模糊匹配和精准匹配"></a>模糊匹配和精准匹配</h2><p>react默认是开启模糊匹配的。</p>
<p>比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;MyNavLink to = &quot;/home/a/b&quot; &gt;Home&lt;/MyNavLink&gt;</span><br></pre></td></tr></table></figure>

<p>此时该标签匹配的路由，分为三个部分 home a b；将会根据这个<strong>先后顺序匹配</strong>路由。</p>
<p>如下就可以匹配到相应的路由：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Route path=&quot;/home&quot;component=&#123;Home&#125;/&gt;</span><br></pre></td></tr></table></figure>

<p>但是如果是下面这个就会失败，也就是说他是根据路径一级一级查询的，可以包含前面那一部分，但并不是只包含部分就可以。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Route path=&quot;/a&quot; component=&#123;Home&#125;/&gt;</span><br></pre></td></tr></table></figure>

<p>当然也可以使用这个精确的匹配 exact={true}</p>
<p>如以下：这样就精确的匹配/home，则上面的/home/a/b就不行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Route exact=&#123;true&#125;  path=&quot;/home&quot; component=&#123;Home&#125;/&gt;或者&lt;Route exact path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<h2 id="初始化路由"><a href="#初始化路由" class="headerlink" title="初始化路由"></a>初始化路由</h2><p>在配置好路由，最开始打开页面的时候，应该是不会匹配到任意一个组件。这个时候页面就显得极其不合适，此时应该默认的匹配到一个组件。</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\RouterDef.gif" alt="空组件"></p>
<p>此时就需要使用Redirect进行<strong>默认匹配</strong>了。如下的代码就是默认匹配/home路径所到的组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Switch&gt;    &lt;Route path=&quot;/about&quot;component=&#123;About&#125;/&gt;    &#123;/* exact=&#123;true&#125;：开启严格匹配的模式，路径必须一致 */&#125;    &lt;Route   path=&quot;/home&quot; component=&#123;Home&#125;/&gt;    &#123;/* Redirect:如果上面的都没有匹配到，就匹配到这个路径下面 */&#125;    &lt;Redirect  to = &quot;/home&quot;/&gt;&lt;/Switch&gt;</span><br></pre></td></tr></table></figure>

<p>就可以做到如下的效果：</p>
<p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\RouterSetDef.gif" alt="设置默认值"></p>
<h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>简单来说就是在一个路由组件中又使用了一个路由，就形成了嵌套路由。</p>
<p>举个例子来说：</p>
<p>我们在home这个路由组件中又添加两个组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">APP.jsx:</span><br><span class="line">&lt;Route   path=&quot;/home&quot; component=&#123;Home&#125;/&gt;</span><br><span class="line">Home.jsx:</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul className=&quot;nav nav-tabs&quot;&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">    	&lt;MyNavLink to = &quot;/home/news&quot;&gt;News&lt;/MyNavLink&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">    	&lt;MyNavLink  to = &quot;/home/message&quot;&gt;Message&lt;/MyNavLink&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">        &lt;Route path = &quot;/home/news&quot; component=&#123;News&#125; /&gt;</span><br><span class="line">        &lt;Route path = &quot;/home/message&quot; component=&#123;Message&#125; /&gt;</span><br><span class="line">        &lt;Redirect to=&quot;/home/message&quot;/&gt;</span><br><span class="line">    &lt;/Switch&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p> react中路由的注册是有顺序的，因此在匹配的时候也是按照这个顺序进行的，因此会先匹配父组件中的路由 </p>
<p>比如上面的 /home/news的路由处理过程：</p>
<p>​    1.因为父组件home的路由是先注册的，因此在匹配的时候先去找home的路由，也就是根据/home/news先模糊匹配到/home</p>
<p>​    2.在去Home组件里面去匹配相应的路由，从而找到了/home/news进行匹配，因此找到了News组件。</p>
<p>但是如果开启精确匹配，就会在第一步的时候卡住，这个时候就走不下去了。<strong>因此不要轻易的使用精确匹配</strong></p>
<h2 id="向路由组件传递参数"><a href="#向路由组件传递参数" class="headerlink" title="向路由组件传递参数"></a>向路由组件传递参数</h2><p>1.<strong>params</strong>参数</p>
<ul>
<li><p>路由链接(携带参数)：</p>
</li>
<li><p>注册路由(声明接收)</p>
</li>
<li><p>接收参数：this.props.match.params</p>
</li>
</ul>
<p>2.<strong>search</strong>参数</p>
<ul>
<li><p>路由链接(携带参数)：&lt;Link to=’/demo/test?name=tom&amp;age=18’}&gt;详情</Link></p>
</li>
<li><p>注册路由(无需声明，正常注册即可)：<Route path="/demo/test" component={Test}/></p>
</li>
<li><p>接收参数：<strong>this.props.location.search</strong></p>
</li>
<li><p>备注：获取到的search是urlencoded编码字符串，需要借助querystring解析</p>
</li>
</ul>
<p>3.<strong>state</strong>参数</p>
<ul>
<li><p>路由链接(携带参数)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Link to=&#123;&#123;pathname:&#x27;/demo/test&#x27;,state:&#123;name:&#x27;tom&#x27;,age:18&#125;&#125;&#125;&gt;详情&lt;/Link&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>注册路由(无需声明，正常注册即可)：<Route path="/demo/test" component={Test}/></p>
</li>
<li><p>接收参数：this.props.location.state</p>
</li>
<li><p>备注：刷新也可以保留住参数</p>
</li>
<li><p>优点：<strong>url不暴露参数</strong></p>
</li>
</ul>
<h2 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><p>借助this.prosp.history对象上的API对操作路由跳转、前进、后退</p>
<ul>
<li><p>this.prosp.history.<strong>push</strong>()</p>
</li>
<li><p>this.prosp.history.<strong>replace</strong>()</p>
</li>
<li><p>this.prosp.history.goBack()</p>
</li>
<li><p>this.prosp.history.goForward()</p>
</li>
<li><p>this.prosp.history.go()</p>
</li>
</ul>
<h2 id="WithRouter"><a href="#WithRouter" class="headerlink" title="WithRouter"></a>WithRouter</h2><ul>
<li><p>withRouter可以加工一般组件，让一般组件具备路由组件所特有的API</p>
</li>
<li><p><strong>withRouter的返回值是一个新组件</strong></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line">import &#123;withRouter&#125; from &#x27;react-router-dom&#x27;</span><br><span class="line"></span><br><span class="line">class Header extends Component &#123;</span><br><span class="line"></span><br><span class="line">	back = ()=&gt;&#123;</span><br><span class="line">		this.props.history.goBack()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	forward = ()=&gt;&#123;</span><br><span class="line">		this.props.history.goForward()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	go = ()=&gt;&#123;</span><br><span class="line">		this.props.history.go(-2)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	render() &#123;</span><br><span class="line">		console.log(&#x27;Header组件收到的props是&#x27;,this.props);</span><br><span class="line">		return (</span><br><span class="line">			&lt;div className=&quot;page-header&quot;&gt;</span><br><span class="line">				&lt;h2&gt;React Router Demo&lt;/h2&gt;</span><br><span class="line">				&lt;button onClick=&#123;this.back&#125;&gt;回退&lt;/button&gt;&amp;nbsp;</span><br><span class="line">				&lt;button onClick=&#123;this.forward&#125;&gt;前进&lt;/button&gt;&amp;nbsp;</span><br><span class="line">				&lt;button onClick=&#123;this.go&#125;&gt;go&lt;/button&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default withRouter(Header)</span><br></pre></td></tr></table></figure>



<h2 id="BrowserRouter与HashRouter的区别"><a href="#BrowserRouter与HashRouter的区别" class="headerlink" title="BrowserRouter与HashRouter的区别"></a>BrowserRouter与HashRouter的区别</h2><p>1.底层原理不一样：</p>
<ul>
<li><p>BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。</p>
</li>
<li><p>HashRouter使用的是URL的哈希值。</p>
</li>
</ul>
<p>2.path表现形式不一样</p>
<ul>
<li><p>BrowserRouter的路径中没有#,例如：localhost:3000/demo/test</p>
</li>
<li><p>HashRouter的路径包含#,例如：localhost:3000/#/demo/test</p>
</li>
</ul>
<p>3.刷新后对路由state参数的影响</p>
<p>​    (1).BrowserRouter没有任何影响，因为state保存在history对象中。</p>
<p>​    (2).<strong>HashRouter刷新后会导致路由state参数的丢失！！！</strong></p>
<p>4.备注：HashRouter可以用于解决一些路径错误相关的问题。</p>
<h1 id="13-antd的按需引入-自定主题"><a href="#13-antd的按需引入-自定主题" class="headerlink" title="13. antd的按需引入+自定主题"></a>13. antd的按需引入+自定主题</h1><p>   1.安装依赖：yarn add react-app-rewired customize-cra babel-plugin-import less less-loader</p>
<p>   2.修改package.json</p>
<p>​     ….</p>
<p>​      “scripts”: {</p>
<p>​       “start”: “react-app-rewired start”,</p>
<p>​       “build”: “react-app-rewired build”,</p>
<p>​       “test”: “react-app-rewired test”,</p>
<p>​       “eject”: “react-scripts eject”</p>
<p>​      },</p>
<p>​     ….</p>
<p>   3.根目录下创建config-overrides.js</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//配置具体的修改规则</span></span><br><span class="line"><span class="keyword">const</span> &#123; override, fixBabelImports,addLessLoader&#125; = <span class="built_in">require</span>(<span class="string">&#x27;customize-cra&#x27;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="built_in">module</span>.exports = override(</span><br><span class="line"></span><br><span class="line">      fixBabelImports(<span class="string">&#x27;import&#x27;</span>, &#123;</span><br><span class="line"></span><br><span class="line">      	 <span class="attr">libraryName</span>: <span class="string">&#x27;antd&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      	 <span class="attr">libraryDirectory</span>: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      	 <span class="attr">style</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      &#125;),</span><br><span class="line"></span><br><span class="line">      addLessLoader(&#123;</span><br><span class="line"></span><br><span class="line">       <span class="attr">lessOptions</span>:&#123;</span><br><span class="line"></span><br><span class="line">       	 <span class="attr">javascriptEnabled</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">       	 <span class="attr">modifyVars</span>: &#123; <span class="string">&#x27;@primary-color&#x27;</span>: <span class="string">&#x27;green&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      &#125;),</span><br><span class="line"></span><br><span class="line">     );</span><br></pre></td></tr></table></figure>
</code></pre>
<p>​    4.备注：不用在组件里亲自引入样式了，即：import ‘antd/dist/antd.css’应该删掉</p>
<h1 id="14-Redux"><a href="#14-Redux" class="headerlink" title="14. Redux"></a>14. Redux</h1><h2 id="redux理解"><a href="#redux理解" class="headerlink" title="redux理解"></a>redux理解</h2><h3 id="学习文档"><a href="#学习文档" class="headerlink" title="学习文档"></a>学习文档</h3><ol>
<li><p>英文文档: <a href="https://redux.js.org/">https://redux.js.org/</a></p>
</li>
<li><p>中文文档: <a href="http://www.redux.org.cn/">http://www.redux.org.cn/</a></p>
</li>
<li><p>Github: <a href="https://github.com/reactjs/redux">https://github.com/reactjs/redux</a></p>
</li>
</ol>
<h3 id="redux是什么"><a href="#redux是什么" class="headerlink" title="redux是什么"></a>redux是什么</h3><ol>
<li><p>redux是一个专门用于做<strong>状态管理</strong>的JS库(不是react插件库)。</p>
</li>
<li><p>它可以用在react, angular, vue等项目中, 但基本与react配合使用。</p>
</li>
<li><p>作用: 集中式管理react应用中多个组件<strong>共享</strong>的状态。</p>
</li>
</ol>
<h3 id="什么情况下需要使用redux"><a href="#什么情况下需要使用redux" class="headerlink" title="什么情况下需要使用redux"></a>什么情况下需要使用redux</h3><ol>
<li><p>某个组件的状态，需要让其他组件可以随时拿到（<strong>共享</strong>）。</p>
</li>
<li><p>一个组件需要改变另一个组件的状态（<strong>通信</strong>）。</p>
</li>
<li><p>总体原则：能不用就不用, 如果不用时比较吃力才考虑使用。</p>
</li>
</ol>
<h3 id="redux工作流程"><a href="#redux工作流程" class="headerlink" title="redux工作流程"></a>redux工作流程</h3><p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\redux原理图.png" alt="redux原理图"></p>
<h2 id="redux的三个核心概念"><a href="#redux的三个核心概念" class="headerlink" title="redux的三个核心概念"></a>redux的三个核心概念</h2><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><ol>
<li><p>动作的对象</p>
</li>
<li><p>包含2个属性</p>
<p>type：标识属性, 值为字符串, 唯一, 必要属性</p>
<p>data：数据属性, 值类型任意, 可选属性</p>
</li>
<li><p>例子：{ type: ‘ADD_STUDENT’,data:{name: ‘tom’,age:18} }</p>
</li>
</ol>
<h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><ol>
<li><p>用于<strong>初始化</strong>状态、<strong>加工</strong>状态。</p>
</li>
<li><p>加工时，根据旧的state和action， 产生新的state的<strong>纯函数</strong>。</p>
</li>
</ol>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><ol>
<li><p>将state、action、reducer联系在一起的对象</p>
</li>
<li><p>如何得到此对象?</p>
<ol>
<li><p>  import {createStore} from ‘redux’</p>
</li>
<li><p>  import reducer from ‘./reducers’</p>
</li>
<li><p>  const store = createStore(reducer)</p>
</li>
</ol>
</li>
<li><p>此对象的功能?</p>
<ol>
<li><p>  getState(): 得到state</p>
</li>
<li><p>  dispatch(action): 分发action, 触发reducer调用, 产生新的state</p>
</li>
<li><p>  subscribe(listener): 注册监听, 当产生了新的state时, 自动调用</p>
</li>
</ol>
</li>
</ol>
<h2 id="redux的核心API"><a href="#redux的核心API" class="headerlink" title="redux的核心API"></a>redux的核心API</h2><h3 id="createstore"><a href="#createstore" class="headerlink" title="createstore()"></a>createstore()</h3><p>作用：创建包含指定reducer的store对象</p>
<h3 id="store对象"><a href="#store对象" class="headerlink" title="store对象"></a>store对象</h3><ol>
<li><p>作用: redux库最核心的管理对象</p>
</li>
<li><p>它内部维护着:</p>
<ol>
<li><p>  state</p>
</li>
<li><p>  reducer</p>
</li>
</ol>
</li>
<li><p>核心方法:</p>
<ol>
<li><p>  getState()</p>
</li>
<li><p>  dispatch(action)</p>
</li>
<li><p>  subscribe(listener)</p>
</li>
</ol>
</li>
<li><p>具体编码:</p>
<ol>
<li><p>  store.getState()</p>
</li>
<li><p>  store.dispatch({type:’INCREMENT’, number})</p>
</li>
<li><p>  store.subscribe(render)</p>
</li>
</ol>
</li>
</ol>
<h3 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware()"></a>applyMiddleware()</h3><p>作用：应用上基于redux的中间件(插件库)</p>
<h3 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers()"></a>combineReducers()</h3><p>作用：合并多个reducer函数</p>
<h2 id="使用redux编写应用"><a href="#使用redux编写应用" class="headerlink" title="使用redux编写应用"></a>使用redux编写应用</h2><p>  <strong>效果</strong></p>
<h4 id="1-求和案例-redux精简版"><a href="#1-求和案例-redux精简版" class="headerlink" title="1.求和案例_redux精简版"></a>1.求和案例_redux精简版</h4><p>  (1).去除Count组件自身的状态</p>
<p>  (2).src下建立:</p>
<ul>
<li><p>redux</p>
</li>
<li><p>store.js</p>
</li>
</ul>
<p>-count_reducer.js</p>
<p>  (3).store.js：</p>
<p>​     1).引入redux中的createStore函数，创建一个store</p>
<p>​     2).createStore调用时要传入一个为其服务的reducer</p>
<p>​     3).记得暴露store对象</p>
<p>  (4).count_reducer.js：</p>
<p>​     1).reducer的本质是一个函数，接收：preState,action，返回加工后的状态</p>
<p>​     2).reducer有两个作用：初始化状态，加工状态</p>
<p>​     3).reducer被第一次调用时，是store自动触发的，</p>
<p>​         传递的preState是undefined,</p>
<p>​         传递的action是:{type:‘@@REDUX/INIT_a.2.b.4}</p>
<p>  (5).在index.js中监测store中状态的改变，一旦发生改变重新渲染<App/></p>
<p>​    备注：redux只负责管理状态，至于状态的改变驱动着页面的展示，要靠我们自己写。</p>
<h4 id="2-求和案例-redux完整版"><a href="#2-求和案例-redux完整版" class="headerlink" title="2.求和案例_redux完整版"></a>2.求和案例_redux完整版</h4><p>  新增文件：</p>
<p>   1.count_action.js 专门用于创建action对象</p>
<p>   2.constant.js 放置容易写错的type值</p>
<h4 id="3-求和案例-redux异步action版"><a href="#3-求和案例-redux异步action版" class="headerlink" title="3.求和案例_redux异步action版"></a>3.求和案例_redux异步action版</h4><blockquote>
<p>异步action，就是指action的值为函数.</p>
<p>异步action中一般都会调用同步action，异步action不是必须要用的。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//store.js引入redux-thunk，用于支持异步action</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAsyncAction = <span class="function">(<span class="params">data,time</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">			dispatch(createIncrementAction(data))</span><br><span class="line">		&#125;,time)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> (1).明确：延迟的动作不想交给组件自身，想交给action</p>
<p>   (2).何时需要异步action：想要对状态进行操作，但是具体的数据靠异步任务返回。</p>
<p>   (3).具体编码：</p>
<p>​     1).yarn add redux-thunk，并配置在store中</p>
<p>​     2).创建action的函数不再返回一般对象，而是一个<strong>函数</strong>，该函数中写异步任务。</p>
<p>​     3).异步任务有结果后，分发一个同步的action去真正操作数据。</p>
<p>   (4).备注：异步action不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步action。</p>
<h4 id="4-求和案例-react-redux基本使用"><a href="#4-求和案例-react-redux基本使用" class="headerlink" title="4.求和案例_react-redux基本使用"></a>4.求和案例_react-redux基本使用</h4><p><img src="C:\Users\86136\Desktop\repository\notes\FrontEnd\images\react-redux模型图.png" alt="react-redux模型图"></p>
<p>   (1).明确两个概念：</p>
<p>​      1).<strong>UI组件</strong>:不能使用任何redux的api，只负责页面的呈现、交互等。</p>
<p>​      2).<strong>容器组件</strong>：负责和redux通信，将结果交给UI组件。</p>
<p>   (2).如何创建一个容器组件————靠react-redux 的 <strong>connect</strong>函数</p>
<ul>
<li><p>connect(mapStateToProps,mapDispatchToProps)(UI组件)</p>
</li>
<li><p>mapStateToProps:映射状态，返回值是一个对象</p>
</li>
<li><p>mapDispatchToProps:映射操作状态的方法，返回值是一个对象</p>
<p>(3).备注1：容器组件中的store是靠<strong>props</strong>传进去的，而不是在容器组件中        直接引入</p>
<p>(4).备注2：mapDispatchToProps，也可以是一个对象</p>
</li>
</ul>
<h4 id="5-求和案例-react-redux优化"><a href="#5-求和案例-react-redux优化" class="headerlink" title="5.求和案例_react-redux优化"></a>5.求和案例_react-redux优化</h4><p>(1).容器组件和UI组件整合一个文件</p>
<p>(2).无需自己给容器组件传递store，给<App/>包裹一个<Provider store={store}>即可。</p>
<p>(3).使用了react-redux后也不用再自己检测redux中状态的改变了，容器组件可以自动完成这个工作。</p>
<p>(4).mapDispatchToProps也可以简单的写成一个对象</p>
<p>(5).一个组件要和redux“打交道”要经过哪几步？</p>
<p>​       (1).定义好UI组件—不暴露</p>
<p>​       (2).引入connect生成一个容器组件，并暴露，写法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">connect(</span><br><span class="line">	<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">key</span>:value&#125;), <span class="comment">//映射状态</span></span><br><span class="line">	&#123;<span class="attr">key</span>:xxxxxAction&#125; <span class="comment">//映射操作状态的方法</span></span><br><span class="line">)(UI组件)</span><br></pre></td></tr></table></figure>

<p>​       (4).在UI组件中通过this.props.xxxxxxx读取和操作状态</p>
<h4 id="6-求和案例-react-redux数据共享版"><a href="#6-求和案例-react-redux数据共享版" class="headerlink" title="6.求和案例_react-redux数据共享版"></a>6.求和案例_react-redux数据共享版</h4><p>   (1).定义一个Pserson组件，和Count组件通过redux共享数据。</p>
<p>   (2).为Person组件编写：reducer、action，配置constant常量。</p>
<p>   (3).重点：Person的reducer和Count的Reducer要使用combineReducers进行合并，</p>
<p>​     合并后的总状态是一个对象！！！</p>
<p>   (4).交给store的是总reducer，最后注意在组件中取出状态的时候，记得“取到位”。</p>
<h4 id="7-求和案例-react-redux开发者工具的使用"><a href="#7-求和案例-react-redux开发者工具的使用" class="headerlink" title="7.求和案例_react-redux开发者工具的使用"></a>7.求和案例_react-redux开发者工具的使用</h4><p>   (1).yarn add redux-devtools-extension</p>
<p>   (2).store中进行配置</p>
<p>import {composeWithDevTools} from ‘redux-devtools-extension’</p>
<p>const store=createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))</p>
<h4 id="8-求和案例-react-redux最终版"><a href="#8-求和案例-react-redux最终版" class="headerlink" title="8.求和案例_react-redux最终版"></a>8.求和案例_react-redux最终版</h4><p>   (1).所有变量名字要规范，尽量触发对象的简写形式。</p>
<p>   (2).reducers文件夹中，编写index.js专门用于汇总并暴露所有的reducer</p>
<h2 id="redux异步编程"><a href="#redux异步编程" class="headerlink" title="redux异步编程"></a>redux异步编程</h2><h3 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h3><ol>
<li><p>redux默认是不能进行异步处理的,</p>
</li>
<li><p>某些时候应用中需要在<strong>redux****中执行异步任务</strong>(ajax, 定时器)</p>
</li>
</ol>
<h3 id="使用异步中间件"><a href="#使用异步中间件" class="headerlink" title="使用异步中间件"></a>使用异步中间件</h3><p><code>npm install --save redux-thunk</code></p>
<h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><ol>
<li><p>一个react插件库</p>
</li>
<li><p>专门用来简化react应用中使用redux</p>
</li>
</ol>
<h3 id="react-Redux将所有组件分成两大类"><a href="#react-Redux将所有组件分成两大类" class="headerlink" title="react-Redux将所有组件分成两大类"></a>react-Redux将所有组件分成两大类</h3><ol>
<li><p>UI组件</p>
<ol>
<li><p>  只负责 UI 的呈现，不带有任何业务逻辑</p>
</li>
<li><p>  通过props接收数据(一般数据和函数)</p>
</li>
<li><p>  不使用任何 Redux 的 API</p>
</li>
<li><p>  一般保存在components文件夹下</p>
</li>
</ol>
</li>
<li><p>容器组件</p>
<ol>
<li><p>  负责管理数据和业务逻辑，不负责UI的呈现</p>
</li>
<li><p>  使用 Redux 的 API</p>
</li>
<li><p>  一般保存在containers文件夹下</p>
</li>
</ol>
</li>
</ol>
<h3 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h3><ol>
<li><strong>Provider</strong>：让所有组件都可以得到state数据</li>
</ol>
<p><strong><Provider store={store}> <App/></Provider></strong>   </p>
<ol start="2">
<li><strong>connect</strong>：用于包装 UI 组件生成容器组件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span> </span><br><span class="line"></span><br><span class="line">connect( mapStateToprops, mapDispatchToProps)(Counter)        </span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>mapStateToprops</strong>：将外部的数据（即state对象）转换为<strong>UI组件的标签属性</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	1.mapStateToProps函数返回的是一个对象；</span></span><br><span class="line"><span class="comment">	2.返回的对象中的key就作为传递给UI组件props的key,value就作为传递给UI组件props的value</span></span><br><span class="line"><span class="comment">	3.mapStateToProps用于传递状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> mapStateToprops = <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;    </span><br><span class="line">	<span class="keyword">return</span> &#123;    <span class="attr">value</span>: state    &#125;    </span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>mapDispatchToProps</strong>：将分发action的函数转换为UI组件的标签属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	1.mapDispatchToProps函数返回的是一个对象；</span></span><br><span class="line"><span class="comment">	2.返回的对象中的key就作为传递给UI组件props的key,value就作为传递给UI组件props的value</span></span><br><span class="line"><span class="comment">	3.mapDispatchToProps用于传递操作状态的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		<span class="attr">jia</span>:<span class="function"><span class="params">number</span> =&gt;</span> dispatch(createIncrementAction(number)),</span><br><span class="line">		<span class="attr">jian</span>:<span class="function"><span class="params">number</span> =&gt;</span> dispatch(createDecrementAction(number)),</span><br><span class="line">		<span class="attr">jiaAsync</span>:<span class="function">(<span class="params">number,time</span>) =&gt;</span> dispatch(createIncrementAsyncAction(number,time)),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="使用上redux调试工具"><a href="#使用上redux调试工具" class="headerlink" title="使用上redux调试工具"></a>使用上redux调试工具</h2><h3 id="安装chrome浏览器插件"><a href="#安装chrome浏览器插件" class="headerlink" title="安装chrome浏览器插件"></a>安装chrome浏览器插件</h3><h3 id="下载工具依赖包"><a href="#下载工具依赖包" class="headerlink" title="下载工具依赖包"></a>下载工具依赖包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save-dev redux-devtools-extension</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;composeWithDevTools&#125; <span class="keyword">from</span> <span class="string">&#x27;redux-devtools-extension&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store=createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))</span><br></pre></td></tr></table></figure>



<h2 id="纯函数和高阶函数"><a href="#纯函数和高阶函数" class="headerlink" title="纯函数和高阶函数"></a>纯函数和高阶函数</h2><h3 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h3><ol>
<li><p>一类特别的函数: <strong>只要是同样的输入(实参)，必定得到同样的输出(返回)</strong></p>
</li>
<li><p>必须遵守以下一些约束 </p>
<ol>
<li><p>  不得改写参数数据</p>
</li>
<li><p>  不会产生任何副作用，例如网络请求，输入和输出设备</p>
</li>
<li><p>  不能调用Date.now()或者Math.random()等不纯的方法 </p>
</li>
</ol>
</li>
<li><p><strong>redux的reducer函数必须是一个纯函数</strong></p>
</li>
</ol>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><ol>
<li><p>理解: 一类特别的函数</p>
<ol>
<li><p>  情况1: <strong>参数是函数</strong></p>
</li>
<li><p>  情况2: <strong>返回是函数</strong></p>
</li>
</ol>
</li>
<li><p>常见的高阶函数: </p>
<ol>
<li><p>  定时器设置函数</p>
</li>
<li><p>  数组的forEach()/map()/filter()/reduce()/find()/bind()</p>
</li>
<li><p>  promise</p>
</li>
<li><p>  react-redux中的connect函数</p>
</li>
</ol>
</li>
<li><p>作用: 能实现更加动态, 更加可扩展的功能</p>
</li>
</ol>
<h1 id="15-React扩展"><a href="#15-React扩展" class="headerlink" title="15. React扩展"></a>15. React扩展</h1><h3 id="1-setState"><a href="#1-setState" class="headerlink" title="1. setState"></a>1. setState</h3><h5 id="setState更新状态的2种写法"><a href="#setState更新状态的2种写法" class="headerlink" title="setState更新状态的2种写法"></a>setState更新状态的2种写法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). setState(stateChange, [callback])------对象式的setState</span><br><span class="line">    1.stateChange为状态改变对象(该对象可以体现出状态的更改)</span><br><span class="line">    2.callback是可选的回调函数, 它在状态更新完毕、界面也更新后(render调用后)才被调用</span><br><span class="line">					</span><br><span class="line">(2). setState(updater, [callback])------函数式的setState</span><br><span class="line">    1.updater为返回stateChange对象的函数。</span><br><span class="line">    2.updater可以接收到state和props。</span><br><span class="line">    4.callback是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用。</span><br><span class="line">总结:</span><br><span class="line">	1.对象式的setState是函数式的setState的简写方式(语法糖)</span><br><span class="line">	2.使用原则：</span><br><span class="line">		(1).如果新状态不依赖于原状态 ===&gt; 使用对象方式</span><br><span class="line">		(2).如果新状态依赖于原状态 ===&gt; 使用函数方式</span><br><span class="line">		(3).如果需要在setState()执行后获取最新的状态数据, 要在第二个callback函数中读取</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-lazyLoad"><a href="#2-lazyLoad" class="headerlink" title="2. lazyLoad"></a>2. lazyLoad</h3><h5 id="路由组件的lazyLoad"><a href="#路由组件的lazyLoad" class="headerlink" title="路由组件的lazyLoad"></a>路由组件的lazyLoad</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.通过React的lazy函数配合import()函数动态加载路由组件 ===&gt; 路由组件代码会被分开打包</span></span><br><span class="line"><span class="keyword">const</span> Login = lazy(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;@/pages/Login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.通过&lt;Suspense&gt;指定在加载得到路由打包文件前显示一个自定义loading界面</span></span><br><span class="line">&lt;Suspense fallback=&#123;<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>loading.....<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125;&gt;</span><br><span class="line">       <span class="xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/xxx&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Xxxx&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">   &lt;/Suspense&gt;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3. Hooks"></a>3. Hooks</h3><h5 id="1-React-Hook-Hooks是什么"><a href="#1-React-Hook-Hooks是什么" class="headerlink" title="1. React Hook/Hooks是什么?"></a>1. React Hook/Hooks是什么?</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). Hook是React 16.8.0版本增加的新特性/新语法</span><br><span class="line">(2). 可以让你在函数组件中使用 state 以及其他的 React 特性</span><br></pre></td></tr></table></figure>

<h5 id="2-三个常用的Hook"><a href="#2-三个常用的Hook" class="headerlink" title="2. 三个常用的Hook"></a>2. 三个常用的Hook</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). State Hook: React.useState()</span><br><span class="line">(2). Effect Hook: React.useEffect()</span><br><span class="line">(3). Ref Hook: React.useRef()</span><br></pre></td></tr></table></figure>

<h5 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a>State Hook</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). State Hook让函数组件也可以有state状态, 并进行状态数据的读写操作</span><br><span class="line">(2). 语法: const [xxx, setXxx] = React.useState(initValue)  </span><br><span class="line">(3). useState()说明:</span><br><span class="line">        参数: 第一次初始化指定的值在内部作缓存</span><br><span class="line">        返回值: 包含2个元素的数组, 第1个为内部当前状态值, 第2个为更新状态值的函数</span><br><span class="line">(4). setXxx()2种写法:</span><br><span class="line">        setXxx(newValue): 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值</span><br><span class="line">        setXxx(value =&gt; newValue): 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值</span><br></pre></td></tr></table></figure>

<h5 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). Effect Hook 可以让你在函数组件中执行副作用操作(用于模拟类组件中的生命周期钩子)</span><br><span class="line">(2). React中的副作用操作:</span><br><span class="line">        发ajax请求数据获取</span><br><span class="line">        设置订阅 / 启动定时器</span><br><span class="line">        手动更改真实DOM</span><br><span class="line">(3). 语法和说明: </span><br><span class="line">        useEffect(() =&gt; &#123; </span><br><span class="line">          // 在此可以执行任何带副作用操作</span><br><span class="line">          return () =&gt; &#123; // 在组件卸载前执行（相当于componentWillUnMount）</span><br><span class="line">            // 在此做一些收尾工作, 比如清除定时器/取消订阅等</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, [stateValue]) // 如果指定的是[], 回调函数只会在第一次render()后执行</span><br><span class="line">					   // 检测状态更新，不写则检测所有状态</span><br><span class="line">    </span><br><span class="line">(4). 可以把 useEffect Hook 看做如下三个函数的组合</span><br><span class="line">        componentDidMount()</span><br><span class="line">        componentDidUpdate()</span><br><span class="line">    	componentWillUnmount() </span><br></pre></td></tr></table></figure>

<h5 id="Ref-Hook"><a href="#Ref-Hook" class="headerlink" title="Ref Hook"></a>Ref Hook</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). Ref Hook 可以在函数组件中存储/查找组件内的标签或任意其它数据</span><br><span class="line">(2). 语法: const refContainer = useRef()</span><br><span class="line">(3). 作用: 保存标签对象,功能与React.createRef()一样</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-Fragment"><a href="#4-Fragment" class="headerlink" title="4. Fragment"></a>4. Fragment</h3><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用方式：</span><br><span class="line">	1.&lt;Fragment&gt;&lt;Fragment&gt;	// 只能用于key属性</span><br><span class="line">	2.&lt;&gt;&lt;/&gt;  			   // 不允许传任何属性</span><br></pre></td></tr></table></figure>

<h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><blockquote>
<p>可以不用必须有一个真实的DOM根标签了</p>
<p>（例：最外层不用包一个div）</p>
</blockquote>
<hr/>



<h3 id="5-Context"><a href="#5-Context" class="headerlink" title="5. Context"></a>5. Context</h3><h5 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h5><blockquote>
<p>一种组件间通信方式, 常用于【<strong>祖组件</strong>】与【<strong>后代组件</strong>】间通信</p>
</blockquote>
<h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) 创建Context容器对象：	<span class="keyword">const</span> XxxContext = React.createContext()  	</span><br><span class="line"><span class="number">2</span>) 渲染子组时，外面包裹xxxContext.Provider, 通过value属性给后代组件传递数据：	&lt;xxxContext.Provider value=&#123;数据&#125;&gt;		子组件    &lt;/xxxContext.Provider&gt;    </span><br><span class="line"><span class="number">3</span>) 后代组件读取数据：	</span><br><span class="line">	<span class="comment">//第一种方式:仅适用于类组件 	  </span></span><br><span class="line">	<span class="keyword">static</span> contextType = xxxContext  <span class="comment">// 声明接收context	  </span></span><br><span class="line">	<span class="built_in">this</span>.context <span class="comment">// 读取context中的value数据	  	</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第二种方式: 函数组件与类组件都可以	  </span></span><br><span class="line">	&lt;xxxContext.Consumer&gt;	    </span><br><span class="line">        &#123;<span class="function"><span class="params">value</span> =&gt;</span> ( </span><br><span class="line">         <span class="comment">// value就是context中的value数据	        要显示的内容	      </span></span><br><span class="line">         )&#125;	  </span><br><span class="line">    &lt;/xxxContext.Consumer&gt;</span><br></pre></td></tr></table></figure>

<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在应用开发中一般不用context, 一般都用它的封装react插件</span><br></pre></td></tr></table></figure>

<hr/>



<h3 id="6-组件优化"><a href="#6-组件优化" class="headerlink" title="6. 组件优化"></a>6. 组件优化</h3><h5 id="Component的2个问题"><a href="#Component的2个问题" class="headerlink" title="Component的2个问题"></a>Component的2个问题</h5><blockquote>
<ol>
<li><p>只要执行setState(),即使不改变状态数据, 组件也会重新render() ==&gt; 效率低</p>
</li>
<li><p>只要当前组件重新render(), 就会自动重新render子组件，纵使子组件没有用到父组件的任何数据 ==&gt; 效率低</p>
</li>
</ol>
</blockquote>
<h5 id="效率高的做法"><a href="#效率高的做法" class="headerlink" title="效率高的做法"></a>效率高的做法</h5><blockquote>
<p> 只有当组件的state或props数据发生改变时才重新render()</p>
</blockquote>
<h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><blockquote>
<p> Component中的shouldComponentUpdate()总是返回true</p>
</blockquote>
<h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">办法1: 	</span><br><span class="line">	重写shouldComponentUpdate()方法	</span><br><span class="line">	比较新旧state或props数据, 如果有变化才返回true, 如果没有返回false</span><br><span class="line">办法2:  	</span><br><span class="line">	使用PureComponent	</span><br><span class="line">    PureComponent重写了shouldComponentUpdate(), 只有state或props数据有变化才返回true	</span><br><span class="line">	注意: 		</span><br><span class="line">		只是进行state和props数据的浅比较, 如果只是数据对象内部数据变了, 返回false  		不要直接修改state数据, 而是要产生新数据项目中一般使用PureComponent来优化</span><br></pre></td></tr></table></figure>

<hr/>



<h3 id="7-render-props"><a href="#7-render-props" class="headerlink" title="7. render props"></a>7. render props</h3><h5 id="如何向组件内部动态传入带内容的结构-标签"><a href="#如何向组件内部动态传入带内容的结构-标签" class="headerlink" title="如何向组件内部动态传入带内容的结构(标签)?"></a>如何向组件内部动态传入带内容的结构(标签)?</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue中: 	使用slot技术, 也就是通过组件标签体传入结构  &lt;A&gt;<span class="xml"><span class="tag">&lt;<span class="name">B</span>/&gt;</span></span>&lt;/A&gt;</span><br><span class="line">React中:	<span class="number">1.</span>使用children props: 通过组件标签体传入结构	（<span class="built_in">this</span>.props.children）</span><br><span class="line">		<span class="number">2.</span>使用render props: 通过组件标签属性传入结构,而且可以携带数据，一般用render函数属性</span><br></pre></td></tr></table></figure>

<h6 id="children-props"><a href="#children-props" class="headerlink" title="children props"></a>children props</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;A&gt;  &lt;B&gt;xxxx&lt;/B&gt;&lt;/A&gt;</span><br><span class="line">&#123;this.props.children&#125;</span><br><span class="line">问题: 如果B组件需要A组件内的数据, ==&gt; 做不到 </span><br></pre></td></tr></table></figure>

<h6 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;A render=&#123;(data) =&gt; &lt;C data=&#123;data&#125;&gt;&lt;/C&gt;&#125;&gt;&lt;/A&gt;</span><br><span class="line">A组件: &#123;this.props.render(内部state数据)&#125;</span><br><span class="line">C组件: 读取A组件传入的数据显示 &#123;this.props.data&#125; </span><br></pre></td></tr></table></figure>



<hr/>

<h3 id="8-错误边界"><a href="#8-错误边界" class="headerlink" title="8. 错误边界"></a>8. 错误边界</h3><h5 id="理解：-1"><a href="#理解：-1" class="headerlink" title="理解："></a>理解：</h5><p>错误边界(Error boundary)：用来捕获后代组件错误，渲染出备用页面</p>
<h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><p>只能捕获<strong>后代组件生命周期</strong>产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p>
<h5 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h5><p>getDerivedStateFromError配合componentDidCatch</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生命周期函数，一旦后台组件报错，就会触发</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromError</span>(<span class="params">error</span>)</span> </span><br><span class="line">&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(error);    <span class="comment">// 在render之前触发    </span></span><br><span class="line">    <span class="comment">// 返回新的state    </span></span><br><span class="line">    <span class="keyword">return</span> &#123;        </span><br><span class="line">        <span class="attr">hasError</span>: <span class="literal">true</span>,    </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">componentDidCatch</span>(<span class="params">error, info</span>)</span> &#123;    <span class="comment">// 统计页面的错误。发送请求发送到后台去    console.log(error, info);&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="9-组件通信方式总结"><a href="#9-组件通信方式总结" class="headerlink" title="9. 组件通信方式总结"></a>9. 组件通信方式总结</h3><h5 id="组件间的关系："><a href="#组件间的关系：" class="headerlink" title="组件间的关系："></a>组件间的关系：</h5><ul>
<li>父子组件</li>
<li>兄弟组件（非嵌套组件）</li>
<li>祖孙组件（跨级组件）</li>
</ul>
<h5 id="几种通信方式："><a href="#几种通信方式：" class="headerlink" title="几种通信方式："></a>几种通信方式：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.props：		</span><br><span class="line">	(1).children props		</span><br><span class="line">	(2).render props	</span><br><span class="line">2.消息订阅-发布：		</span><br><span class="line">	pubs-sub、event等等	</span><br><span class="line">3.集中式管理：		</span><br><span class="line">	redux、dva等等	</span><br><span class="line">4.conText:		</span><br><span class="line">	生产者-消费者模式</span><br></pre></td></tr></table></figure>

<h5 id="比较好的搭配方式："><a href="#比较好的搭配方式：" class="headerlink" title="比较好的搭配方式："></a>比较好的搭配方式：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父子组件：props	</span><br><span class="line">兄弟组件：消息订阅-发布、集中式管理	</span><br><span class="line">祖孙组件(跨级组件)：消息订阅-发布、集中式管理、conText(开发用的少，封装插件用的多)</span><br></pre></td></tr></table></figure>





<h1 id="16-项目打包"><a href="#16-项目打包" class="headerlink" title="16. 项目打包"></a>16. 项目打包</h1><h5 id="1-打包"><a href="#1-打包" class="headerlink" title="1.打包"></a>1.打包</h5><p><code>npm run build</code></p>
<h5 id="2-开启服务器"><a href="#2-开启服务器" class="headerlink" title="2.开启服务器"></a>2.开启服务器</h5><blockquote>
<p>借用serve库</p>
</blockquote>
]]></content>
      <categories>
        <category>code</category>
        <category>frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>frontEnd</tag>
        <tag>React</tag>
      </tags>
  </entry>
</search>
